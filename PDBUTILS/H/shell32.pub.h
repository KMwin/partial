class <lambda_0299e741e510f62cf34c03c7be44f0ba>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_053e682b31dfae02b4e620d8152c5327>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_077ac244155f60e0266d8493ed82ab5c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_0991c31ba2464bc9f411b1ca811d26da>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_0a778158677347cce5d35b66daac0c84>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_0b00fdae5eadacec8bb7ba57c3c6767a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_0c6cc79056ccf416b9ab12e981118b28>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_0cd640a3fcce535a1c00ebeb620bc9af>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_0e7cff11b4639e979594acb1d3f46816>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_0fb86b8d666ece4f1f3eb4327aafc3db>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_0fca9121822d25460fee0efca3752fe7>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_113f57d9aa87e9289b7971fe05701859>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_120b16eac08507e969574df45eb64efd>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_14ed805729f418812b761ea0e2e80c48>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_162c987c88608e9114d7399978cca85d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_1691f9c0847250a3f1a4ca64364a7c9b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_172d2f4035c0a072a3693180e1df721f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_17677c135e952ccae58892d31202c4a4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_17ca3746f6574b8fbf271c1faf78c3cb>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_17d5a8ee26441ba530d9b7d343d1196f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_1a27d6acbe8b8a47479281eec927ccbe>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_1a4347d5acb16754ab2ad04c1b0d3d73>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_1b30779c62d31c055d60a1ea9e964dcd>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_1d6aba78a27361089c95f4b6f49e9d23>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_1e9d73372cf08e72c3d6f5bf58eb6658>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_1edc525557ac0d78fa9041fb751bf670>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_1ee30d51888afc1454f657ecaf28ea43>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_202ffe0f3e5d67ab1bb9abcf75626ac7>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_20699324b0304671cabc003140f93067>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_20847cda2c8b18f111a2fc2fa7760839>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_212b11a742665e8a4c131217f36b553e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_21c8abeeb19e61cfdc1771832c20fea0>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_2373a9165d0dd31e3a5737cef32d0ab9>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_249eb30a51aaafda3c6ef847529430a9>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_24fdcbe5437a0df4fc7c354b21a5b05d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_258b4c773db446c63f3190b1c45dd34a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_278d8955d66b457a73d56e687d292ad7>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_28b7833e1cbd0ac09525661921665a8b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_2a84d722e510aa5401001370d6683c16>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_2bfccba90d7624786f7efaa6096ea8d4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_2c364b882825df0b3f9c8f0cfd3b4896>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_2cc43f06a9b59dd6876820e3f0043ce6>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_2d4d5f659f585bb4846cdc2685e3235e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_2f90e0648c8277a3cc15c6764fae386e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_30530af552f698b5f7e8681d33df37bd>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_313d18f3ea4beeb7997501842ac8ae52>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_31984bdc239cbf3f7859afddcf52fab1>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_36bb8038e0883c14ebdb2cbb620263d5>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_398ec19a6a61ea938d1db514eff8b88c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_3d9b47b43f363471fe69f4828ba0e898>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_3ddebe10b4dee258fefe2351d4260d7e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_3e824a61d0dcbe9875d72beb563018fe>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_4030a3e5b46d5ec2ecc59b4601485177>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_4058b0033787de1075eb0a7ea98cf586>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_411914733ed7e4f04962cab334eb166a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_450fc03742974c2e19cbe06872f95fa7>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_46546c04e5cafc12d6f1567b39688c13>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_478814dfdd52b7d703f2529858f85fef>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_47daf2696bd2648603dbae4cec936a07>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_4879e0bc392061d5756afbccc05acf6e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_49d96be0c9afbc9ab87524f90ed781ab>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_4c12013efd41c6fa4d591b86c1ee9e29>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_4d302f6ed44bc0cb1cadbde21097ca8c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_4e9625b1773e838b4e842b8371260c62>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_4ead40d1a44c0114124a55d4069f9e10>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_4fff956fda43f284e174b10ddc64885f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_538256842785b81ba5e74076c42d745d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_554d5fa8b3ba8718b53b723acda112f8>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_57630e255bcda98f47de20509c8784d0>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_57ca8df58a1cccf2711cb8cc770f2b5a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_5a0bad4afb23efca8dbdc5c69fc05b8f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_5a7bf548ed29a914b53260e8eb488359>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_5b5b5962fb25152b85776c037aa431dc>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_5d531a6ebb310ca8d462c5851748937b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_5ebc3a45ca83d45763fb8037b9fd5fa7>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_5eef2fa6a794280ef64bac202390a5ee>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_5f55d3d15e6339c02909ad8ee09019bc>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_611b87cffb3d5808666a3bc2ed57e505>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_61beb6bd37df761f02dda9f1a2cadbc7>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_61f5dc50e895234963a8be647c21b04d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6324f74e7f60682e3388d141fde9fc39>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6336c0d79156ab90fd5e97f46c6325d0>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_63688ef3c26afeea5b18d5c35cb8a564>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6383780554e22d0342e68faa37e274d2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_658f942ca60ab2c2a930c7cefa1d3a0c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_66bde6b32c74b685b2abda95868edd90>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_66ed6d8c0904516205fd382cb301a03b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6714825be9ae4fd6025ea96c9f6ef23c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_68968c7795835f420bb2ff4c1ff9ed4a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_697d3e58eb6e5d50c92b5434ba91902d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_69889659cd35e7deba6bef992fe6968f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6a3eccc2df48f636c4dbba9b6615d69a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6b22ce1acf6ba7d9e5944cd295375c26>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6bfcf87816c6c5547c138e66a0a03c98>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6dd037d27f26b3e9f91c6fd305117cba>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_6ee6c377ddb6487a9aa180249dfee677>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_709151da652192dd669b3395498a39a4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_72ad6b82552ffb4bf5098d79bd0a791f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_73b9e308f957559e1b2a4d7089055e78>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_742fe0bd224058dff56916e32aad3818>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_75291a41c6330c1b38a95094525f981b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_754b7ba138ea04bd57e5400c833db2f8>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_78636f607082d554670d1723f99bf5b9>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_78eb2349102511e3d4032fb14ceb8365>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_793e99e558110accab0b07f8b8601298>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_79916264346746bf79fca240986e000a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_79c685fcf5d6352bae286e0239ab3fd4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_7a80b36526db66364c4837785994f2c2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_7b185fe66037b899c8ba6d92546ea6b9>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_7c38145118be0ca9bd5294256ace5023>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_7ca1aea8d699d4a7252fc00a0df9fa3d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_7da11d27a25e064f8ddf111cacaa2b7a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_7e3b74938ee1ad2a4e0fd2a5506397e2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_812ca57b385c7c5d8a0518a407c28078>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_830b842ceb375ce63395b26219685e1b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_83c50dc008ae36ca99f54dea96164daa>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_845c7670cdfdfc764c8fcb19c270286c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_8599096582186b77e542599e6c53d45a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_85bf4796d82ba7fc6c9d12e67d4349ab>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_86521ae4c6082e50d83e29702d32948f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_86a359be3fba32d61615c92ba16d64ad>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_87497be4204d2c7f497d6705a916312a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_88dc3bb5be436095c4360b70b06aa2da>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_89c9f6745fba3eb949bd4f391376a775>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_8a43f17a3aea7ce80d05b63a341da21a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_8b3428a4ccc6465e07f534d1732236b0>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_8dddd1077af2016a94fd84cc3faea865>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_8e6b9074bee666a3538f6b2952529cc3>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_8ec80b9344f4af7b6b4a981a897df70f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_8ece471e8f11875278774dfb36e3d0a1>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_912713c4f13bdc119147355c6dfbbc64>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_923b5a08790e2c2668143bdef42442ab>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_932a6af38a595e0812c3442f2d955c1c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_933c1e9464b1f09808af12b270b071a2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9512e06f6b60c0edb1d1b0383d89d27a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_978fadf93156ce1fa04f42fb303ba241>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_979a7531cef32babf0c84f7015effe7f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9807f87e9b6ae6dfa347abfa479b825d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9835875b20dd1f88549c39f86c096143>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_98c3e4a4a0d63361883ef8517787e0a0>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9aa2ac593b40dd41cfe15f868400c95f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9b6a11a78f252e413561ccbc09d2c52d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9c118456ec9432bb2047a280eecd52d4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9d68da5c8c18b28500f1e909f3154dbd>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9d78ee902c1473d0ee88dfbf4c22805a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9eae0566eb093ece3ab67ce9c597aae0>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_9f6f78da06f9c4c0d28d7599c19faf4a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a068885838adcb24d1c61f07d3cfd203>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a0aaf5967bd7e9852a1fa0929f1dc5e3>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a2a660f4f6fdb9b0bc2ef9da27e172ec>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a3992d4535df2b9a407e776c1b0ac20a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a3ec8efd729249a54504255d8a11e88e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a4f7f8d11e02508f81299191de8f2fed>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a5bc9ebb0319b8ae7029c1a44b345619>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a5d550efdf80d78bc11ad6d4a7a56407>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a6006dff6aa9ffbf6f1f26d42a8dbf58>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a895010bd4ab9f4b00c4c92f842cc129>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a8c274eb1baf11eb9d3753f481360a14>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_a9fdd7755e878f926b48a2d7db2b7935>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_aa146cf1d6b148d8d9e4ecc6e97d983a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ab5cdd11dc500ac508152c5494019e32>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_aba7531942a6a7de1cfffb4a7e99e6dd>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_acafb71e66e67caa105a3908ce5b10b5>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_acddb9caf652ad052c6a127c6238f26c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ad7b5e475b1da736a57f2f661345f8cc>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ada7c9d4fe18a7fde78c93c86cc3c0df>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_adf8f7431863ef9a255b9119d6cc6292>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_aeae239f5ac84740c3001123e3276e45>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_aec8cb37c56182b8bc5057f078570321>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_af1d5af6f5561b053d9ff0d9ad4d2204>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b0f9dd044764cef9818bf9a110c810fb>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b33f1a7b57935710cb2784789c125116>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b36953938e945c363004944481fb494f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b39c9a7160fadf5d053b35ad97ead65c>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b6e186a4fd4b678cc8a3386846f2feed>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b712cfe24bbc54ba23383853f5ff5adb>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b73e04304992feaf71d82a76d02ab044>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b7a60361dc3cec980789a7951196f6d5>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_b876188b794e98bf4fe3e879bd9f84a9>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_baa4e246f1c6839a2d854818ecdb3505>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_bab7d209866a86e041e88eb1fc55f553>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_bb15cf74355e56d217f4e70e714994b8>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_bc0d8c995010718c51454ea6ed2533f2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_bc657b6c0eaae65a93833518c38c909b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_c2fbc576bebce5e5638b2532eed4b0b2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_c37a64da14dfbc9a012740d1790fbae2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_c4a68184d2acb6751d2fe8a55992749a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_c73f9f63d1e01036e2f872d3338c0d0b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_c8a265e8ca8397218e249aa5d6cc564a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_c959e340ac17862ce7112c4130addf27>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_c96ef12e21edd8fdde06a62acb34d427>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_cb4572df7d64e2cfa5abbaa0dfdd22c4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_cd5aea8c5b424f1e37850fb10f8ffd1b>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_cea13de54547d6cca43f6653eb37b1c5>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_cedd28d7806b1d3ba352d4314469a953>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_cf3a79182f6cc995eadba666707c9e52>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_cfc106f73866c765f92933bbb11b6853>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_d2e729ca5be3bfa9a7e1db4a50400387>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_d2ff79053c0d36a2d3837a92fccc5661>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_d360fae9b1215eb69f77c955a18c3862>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_d5ce7aba15a7748c4b4f26fd0c4f53da>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_d5fb00750b6def0edf83984defb7ae0a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_d715fe14e72501d567a7d02a04ad5de5>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_d7acfb51de1e7b4278d2d6a8f1973197>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_d7c7f0f38476ffba10bba524cea66ab2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_da1b384087af3fde63d0dce10b084f01>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_daeb8a44e49fa3bf51b05ff181dba6fb>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_db0208c7b13f5dce38aa3257bfb393b4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_dbbdcf9484653b1ab9d9c6bb29263c38>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_dc111a78bee6717ddf945420eb059688>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_de58797ed871f0295bc6c8746e2aefab>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ded3cabf1fe7100e9fb3fa15ee3da07e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e180c206d23247749ff3ed28da59d562>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e2a651273281bb7011b477e38c30197a>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e3050127d9c8dfa6913dd651f58d0908>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e395a535be0b023d66927861ea3eccbb>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e516a55307102dabd1a54f45ab4c3eaa>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e5ea79a60bb732f0e37f7677d3b477e3>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e802fc81c8ce28702320ab9d5f441ff2>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e8ff7102ffe76a73bd8979855d3f3f10>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e97032e7e7110fa1ce61103a59b82b56>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_e9ebdd928726d0de80b4233f3393c86d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ea05a943003bf68189fc68de47173439>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ea126afcf81c3192c101cc3ba8e67ae6>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ea27879d18250bd432135f2e0d324936>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_eb0e4914899acaafedd60ee7bd2afe6d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_eb5e763cd5e850b5f4c0e0ee63208de5>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_eb73665108ba9d99825e2784a0e9eed3>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ebe0c6c5a219aaca051c7d469b8fb494>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ed3f8536ef105fe9229078f138854d2e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_eddbf7ddec110c673409f42b8c7fc731>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_ef85114f2b368b68cfe204dd4aa1caaa>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f0d23d1a95a60ae5178ebc0b328703f3>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f0d7cb1aa9352221c95dc1bcdbe544b3>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f231c695c7651a828f9bef92e519b4ba>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f2881f087a0b56290aaf26b44ca7f505>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f31a246f9fb920fe04fbc9c8de4745f4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f3f0f37c0a90664531158bdce6c4371f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f425ffd05e323a1b8ef1efbf0348c8aa>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f4e2f992dfcac69cdb2ef77421adb809>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f4fa2477d89affeadcbe22c12a184b81>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f595ca7c5fa4d8641df09f7c2db53bce>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f5b990728937d97ef59bdfb9f3a4a791>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f635174a5bcace686879ff5877d03c57>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f7ad73e6c9bfb9b68bb8f3b68ce7d63f>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f7bb19410cdc3122faa77ba7b2dcf4e8>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_f7cf362fba7749df3925a42260704361>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_fa94e41a1bd585d646d92d0621d1a5ec>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_faad31c2a325cc5433d78df68acb7d85>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_fbb2b52e97c530d65fe719c479f8498e>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_fbc1e5754c7b800a104007ae2c805fda>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_fc7eccd0807db77d7ab5388719d58197>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
public:
	bool operator()(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_fddfa933d0595412c53f730016eca951>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_fe83462f7e23c751ca5016d48a6f763d>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_fede6d0b53c2c9203d3b669d82388791>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

class <lambda_fefd2f9de90509b5c9eebc660de571f4>
{
	static bool <lambda_invoker_cdecl>(SystemSettings::Environment::SettingsEnvironmentImpl *);
};

namespace ARI
{
	namespace ProcessToken
	{
		struct AutoSysAppId
		{
			long Close();
		};

		namespace SysAppId
		{
			long GetAppUserModelId(_TOKEN_SECURITY_ATTRIBUTE_V1 const *,unsigned int,unsigned int *,unsigned short *);
			long GetPackageFamilyName(_TOKEN_SECURITY_ATTRIBUTE_V1 const *,unsigned int,unsigned int *,unsigned short *);
			long GetPackageRelativeApplicationId(_TOKEN_SECURITY_ATTRIBUTE_V1 const *,unsigned int,unsigned int *,unsigned short *);
			long IsStronglyNamed(void *,bool *);
			long Open(void *,_TOKEN_SECURITY_ATTRIBUTES_INFORMATION * *,_TOKEN_SECURITY_ATTRIBUTE_V1 const * *,bool *);
			long OpenTokenForProcess(void *,void * *);
		};

	};

	_TOKEN_SECURITY_ATTRIBUTES_INFORMATION * Allocate<_TOKEN_SECURITY_ATTRIBUTES_INFORMATION>(unsigned __int64);
	void Free(void *);
};

struct AR_CACHE_HEADER
{
	bool HasLanguageChanged(void const *);
	long Initialize(IMemoryMappedHeap *);
	long _GetLanguageList(unsigned short * *);
};

namespace ATL
{
	struct CComAggObject<CShellFolderViewOC>
	{
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComAggObject<CStartMenuPin>
	{
		CComAggObject<CStartMenuPin>(void *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComAggObject<CTaskbandPin>
	{
		CComAggObject<CTaskbandPin>(void *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComBSTR
	{
		long Append(unsigned short const *);
		long Append(unsigned short const *,int);
		long ReadFromStream(IStream *);
		long WriteToStream(IStream *);
	};

	struct CComContainedObject<CShellFolderViewOC>
	{
		CComContainedObject<CShellFolderViewOC>(void *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComContainedObject<CStartMenuPin>
	{
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComContainedObject<CTaskbandPin>
	{
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComControl<CShellFolderViewOC,CWindowImpl<CShellFolderViewOC,CWindow,CWinTraits<1442840576,0> > >
	{
		virtual HWND__ * CreateControlWindow(HWND__ *,tagRECT &);
		virtual long ControlQueryInterface(_GUID const &,void * *);
	};

	struct CComControlBase
	{
		int SetControlFocus(int);
		long DoVerbProperties(tagRECT const *,HWND__ *);
		long FireViewChange();
		long GetAmbientLocaleID(unsigned long &);
		long IOleInPlaceObject_InPlaceDeactivate();
		long IOleInPlaceObject_SetObjectRects(tagRECT const *,tagRECT const *);
		long IOleInPlaceObject_UIDeactivate();
		long IOleObject_Close(unsigned long);
		long IOleObject_SetExtent(unsigned long,tagSIZE *);
		long InPlaceActivate(long,tagRECT const *);
		long SendOnDataChange(unsigned long);
		virtual long OnDraw(ATL_DRAWINFO &);
		virtual long OnDrawAdvanced(ATL_DRAWINFO &);
		void GetZoomInfo(ATL_DRAWINFO &);
		~CComControlBase();
	};

	struct CComCreator<CComAggObject<CShellFolderViewOC> >
	{
		static long CreateInstance(void *,_GUID const &,void * *);
	};

	struct CComCreator<CComAggObject<CStartMenuPin> >
	{
		static long CreateInstance(void *,_GUID const &,void * *);
	};

	struct CComCreator<CComAggObject<CTaskbandPin> >
	{
		static long CreateInstance(void *,_GUID const &,void * *);
	};

	struct CComCreator<CComObject<CClientExtractIcon> >
	{
		static long CreateInstance(void *,_GUID const &,void * *);
	};

	struct CComCreator<CComObject<CShellFolderViewOC> >
	{
		static long CreateInstance(void *,_GUID const &,void * *);
	};

	struct CComCreator<CComObject<CStartMenuPin> >
	{
		static long CreateInstance(void *,_GUID const &,void * *);
	};

	struct CComCreator<CComObject<CTaskbandPin> >
	{
		static long CreateInstance(void *,_GUID const &,void * *);
	};

	struct CComCreator<CComObject<CTransferConfirmationProxy> >
	{
		static long CreateInstance(void *,_GUID const &,void * *);
	};

	struct CComDispatchDriver
	{
		static long GetProperty(IDispatch *,long,tagVARIANT *);
		static long PutProperty(IDispatch *,long,tagVARIANT *);
	};

	struct CComDynamicUnkArray
	{
		IUnknown * * end();
		unsigned long Add(IUnknown *);
	};

	struct CComObject<CClientExtractIcon>
	{
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComObject<CClientExtractIconCB>
	{
		static long CreateInstance(CComObject<CClientExtractIconCB> * *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComObject<CShellFolderViewOC>
	{
		CComObject<CShellFolderViewOC>(void *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
		~CComObject<CShellFolderViewOC>();
	};

	struct CComObject<CStartMenuPin>
	{
		CComObject<CStartMenuPin>(void *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComObject<CTaskbandPin>
	{
		CComObject<CTaskbandPin>(void *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComObject<CTransferConfirmationProxy>
	{
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct CComObjectRootBase
	{
		static long _Chain(void *,_GUID const &,void * *,unsigned __int64);
	};

	struct CComPtr<CAppResolverCacheManager>
	{
		~CComPtr<CAppResolverCacheManager>();
	};

	struct CComPtr<CConflictDialogData>
	{
		void Attach(CConflictDialogData *);
		~CComPtr<CConflictDialogData>();
	};

	struct CComPtr<CFSInterruptSource::CSuspendedChild>
	{
		CComPtr<CFSInterruptSource::CSuspendedChild>(CFSInterruptSource::CSuspendedChild *);
		~CComPtr<CFSInterruptSource::CSuspendedChild>();
	};

	struct CComPtr<CIconSizeCommand>
	{
		CComPtr<CIconSizeCommand>(CIconSizeCommand *);
		~CComPtr<CIconSizeCommand>();
	};

	struct CComPtr<CMVPEditControl>
	{
		CComPtr<CMVPEditControl>(CMVPEditControl *);
		~CComPtr<CMVPEditControl>();
	};

	struct CComPtr<COpenWithExplorerCommandEnumerator>
	{
		CComPtr<COpenWithExplorerCommandEnumerator>(COpenWithExplorerCommandEnumerator *);
		~CComPtr<COpenWithExplorerCommandEnumerator>();
	};

	struct CComPtr<CStructArray<CConfirmConflictItem,ISyncMgrConflictItems> >
	{
		~CComPtr<CStructArray<CConfirmConflictItem,ISyncMgrConflictItems> >();
	};

	struct CComPtr<CStructArray<CConfirmConflictResultInfo,ISyncMgrConflictResolutionItems> >
	{
		~CComPtr<CStructArray<CConfirmConflictResultInfo,ISyncMgrConflictResolutionItems> >();
	};

	struct CComPtr<CUnmappedXmlStorage>
	{
		~CComPtr<CUnmappedXmlStorage>();
	};

	struct CComPtr<IAggregateImageList>
	{
		~CComPtr<IAggregateImageList>();
	};

	struct CComPtr<IAssociationArray>
	{
		~CComPtr<IAssociationArray>();
	};

	struct CComPtr<IAssociationElement>
	{
		~CComPtr<IAssociationElement>();
	};

	struct CComPtr<IAssociationList>
	{
		~CComPtr<IAssociationList>();
	};

	struct CComPtr<IAutoPlayUI>
	{
		~CComPtr<IAutoPlayUI>();
	};

	struct CComPtr<IAutoplayDeviceEventHandlerInfo>
	{
		~CComPtr<IAutoplayDeviceEventHandlerInfo>();
	};

	struct CComPtr<IAutoplayHandler>
	{
		~CComPtr<IAutoplayHandler>();
	};

	struct CComPtr<IAutoplayHandlerList>
	{
		~CComPtr<IAutoplayHandlerList>();
	};

	struct CComPtr<IBindCtx>
	{
		~CComPtr<IBindCtx>();
	};

	struct CComPtr<IBrowserSettings>
	{
		~CComPtr<IBrowserSettings>();
	};

	struct CComPtr<IBrowserWithActivationNotification>
	{
		~CComPtr<IBrowserWithActivationNotification>();
	};

	struct CComPtr<ICachedPrivateProfile>
	{
		~CComPtr<ICachedPrivateProfile>();
	};

	struct CComPtr<IChildId>
	{
		~CComPtr<IChildId>();
	};

	struct CComPtr<IColumnManager>
	{
		~CComPtr<IColumnManager>();
	};

	struct CComPtr<ICommDlgBrowser>
	{
		CComPtr<ICommDlgBrowser>(ICommDlgBrowser *);
		~CComPtr<ICommDlgBrowser>();
	};

	struct CComPtr<IConflictDialogCallback>
	{
		~CComPtr<IConflictDialogCallback>();
	};

	struct CComPtr<IConflictDialogData>
	{
		CComPtr<IConflictDialogData>(CComPtr<IConflictDialogData> const &);
		~CComPtr<IConflictDialogData>();
	};

	struct CComPtr<IConflictDialogDataMode>
	{
		CComPtr<IConflictDialogDataMode>(CComPtr<IConflictDialogDataMode> const &);
		~CComPtr<IConflictDialogDataMode>();
	};

	struct CComPtr<IConflictDialogDataResponse>
	{
		~CComPtr<IConflictDialogDataResponse>();
	};

	struct CComPtr<IConflictInterrupt>
	{
		~CComPtr<IConflictInterrupt>();
	};

	struct CComPtr<IContainsDeletedItems>
	{
		~CComPtr<IContainsDeletedItems>();
	};

	struct CComPtr<IContextMenu3>
	{
		~CComPtr<IContextMenu3>();
	};

	struct CComPtr<IContextMenu>
	{
		CComPtr<IContextMenu>(CComPtr<IContextMenu> const &);
		~CComPtr<IContextMenu>();
	};

	struct CComPtr<ICustomCollection>
	{
		~CComPtr<ICustomCollection>();
	};

	struct CComPtr<IDBFolderPriv>
	{
		~CComPtr<IDBFolderPriv>();
	};

	struct CComPtr<IDataObject>
	{
		~CComPtr<IDataObject>();
	};

	struct CComPtr<IDesktopLayoutManager>
	{
		~CComPtr<IDesktopLayoutManager>();
	};

	struct CComPtr<IDiscFormat2Data>
	{
		~CComPtr<IDiscFormat2Data>();
	};

	struct CComPtr<IDiscFormat2Erase>
	{
		~CComPtr<IDiscFormat2Erase>();
	};

	struct CComPtr<IDiscMaster2>
	{
		~CComPtr<IDiscMaster2>();
	};

	struct CComPtr<IDiscRecorder2>
	{
		void Release();
		~CComPtr<IDiscRecorder2>();
	};

	struct CComPtr<IDispatch>
	{
		void Release();
		~CComPtr<IDispatch>();
	};

	struct CComPtr<IDropTarget>
	{
		~CComPtr<IDropTarget>();
	};

	struct CComPtr<IEnumExplorerCommand>
	{
		~CComPtr<IEnumExplorerCommand>();
	};

	struct CComPtr<IEnumFindDataEx>
	{
		~CComPtr<IEnumFindDataEx>();
	};

	struct CComPtr<IEnumIDList>
	{
		~CComPtr<IEnumIDList>();
	};

	struct CComPtr<IEnumObjects>
	{
		~CComPtr<IEnumObjects>();
	};

	struct CComPtr<IEnumShellItems>
	{
		~CComPtr<IEnumShellItems>();
	};

	struct CComPtr<IEnumString>
	{
		~CComPtr<IEnumString>();
	};

	struct CComPtr<IEnumUICommand>
	{
		~CComPtr<IEnumUICommand>();
	};

	struct CComPtr<IEnumVARIANT>
	{
		~CComPtr<IEnumVARIANT>();
	};

	struct CComPtr<IEnumerateAssociationElements>
	{
		~CComPtr<IEnumerateAssociationElements>();
	};

	struct CComPtr<IExplorerCommand>
	{
		void Release();
		~CComPtr<IExplorerCommand>();
	};

	struct CComPtr<IExplorerCommandHost>
	{
		~CComPtr<IExplorerCommandHost>();
	};

	struct CComPtr<IExplorerCommandProvider>
	{
		~CComPtr<IExplorerCommandProvider>();
	};

	struct CComPtr<IExtractIconW>
	{
		~CComPtr<IExtractIconW>();
	};

	struct CComPtr<IFileOperation>
	{
		~CComPtr<IFileOperation>();
	};

	struct CComPtr<IFileOperationConflictItemsMetadata>
	{
		~CComPtr<IFileOperationConflictItemsMetadata>();
	};

	struct CComPtr<IFileSystemImage>
	{
		~CComPtr<IFileSystemImage>();
	};

	struct CComPtr<IFilterView>
	{
		~CComPtr<IFilterView>();
	};

	struct CComPtr<IFolderType>
	{
		~CComPtr<IFolderType>();
	};

	struct CComPtr<IFolderView2>
	{
		~CComPtr<IFolderView2>();
	};

	struct CComPtr<IFolderView>
	{
		~CComPtr<IFolderView>();
	};

	struct CComPtr<IFolderViewSettings>
	{
		~CComPtr<IFolderViewSettings>();
	};

	struct CComPtr<IFrameTaskManager>
	{
		~CComPtr<IFrameTaskManager>();
	};

	struct CComPtr<IFrameWorkItem>
	{
		void Release();
		~CComPtr<IFrameWorkItem>();
	};

	struct CComPtr<IFsiDirectoryItem>
	{
		~CComPtr<IFsiDirectoryItem>();
	};

	struct CComPtr<IFsiItem>
	{
		~CComPtr<IFsiItem>();
	};

	struct CComPtr<IGangImageList>
	{
		~CComPtr<IGangImageList>();
	};

	struct CComPtr<IHWDeviceCustomProperties>
	{
		~CComPtr<IHWDeviceCustomProperties>();
	};

	struct CComPtr<IHardwareDevices>
	{
		~CComPtr<IHardwareDevices>();
	};

	struct CComPtr<IHitTestView>
	{
		~CComPtr<IHitTestView>();
	};

	struct CComPtr<IHotPlug>
	{
		~CComPtr<IHotPlug>();
	};

	struct CComPtr<IHxHelpPane>
	{
		~CComPtr<IHxHelpPane>();
	};

	struct CComPtr<IImageList2>
	{
		~CComPtr<IImageList2>();
	};

	struct CComPtr<IImageList>
	{
		~CComPtr<IImageList>();
	};

	struct CComPtr<IImageListImageDecorator>
	{
		CComPtr<IImageListImageDecorator>();
		~CComPtr<IImageListImageDecorator>();
	};

	struct CComPtr<IImageListSparseCallback>
	{
		~CComPtr<IImageListSparseCallback>();
	};

	struct CComPtr<IImageManager>
	{
		~CComPtr<IImageManager>();
	};

	struct CComPtr<IItem>
	{
		void Release();
		~CComPtr<IItem>();
	};

	struct CComPtr<IItemCollection>
	{
		~CComPtr<IItemCollection>();
	};

	struct CComPtr<IItemCollectionFactory>
	{
		~CComPtr<IItemCollectionFactory>();
	};

	struct CComPtr<IItemDevirtualizerPriv>
	{
		~CComPtr<IItemDevirtualizerPriv>();
	};

	struct CComPtr<IListControlHost>
	{
		~CComPtr<IListControlHost>();
	};

	struct CComPtr<ILocalizableItem>
	{
		~CComPtr<ILocalizableItem>();
	};

	struct CComPtr<ILocationDescription>
	{
		~CComPtr<ILocationDescription>();
	};

	struct CComPtr<IMoniker>
	{
		~CComPtr<IMoniker>();
	};

	struct CComPtr<IMruDataList>
	{
		~CComPtr<IMruDataList>();
	};

	struct CComPtr<INamedPropertyStore>
	{
		~CComPtr<INamedPropertyStore>();
	};

	struct CComPtr<INamespaceWalk>
	{
		~CComPtr<INamespaceWalk>();
	};

	struct CComPtr<IObjectArray>
	{
		~CComPtr<IObjectArray>();
	};

	struct CComPtr<IObjectCollection>
	{
		~CComPtr<IObjectCollection>();
	};

	struct CComPtr<IObjectProvider>
	{
		~CComPtr<IObjectProvider>();
	};

	struct CComPtr<IObjectWithAssociationList>
	{
		~CComPtr<IObjectWithAssociationList>();
	};

	struct CComPtr<IObjectWithPropertyStore>
	{
		~CComPtr<IObjectWithPropertyStore>();
	};

	struct CComPtr<IObjectWithSite>
	{
		~CComPtr<IObjectWithSite>();
	};

	struct CComPtr<IOleCommandTarget>
	{
		~CComPtr<IOleCommandTarget>();
	};

	struct CComPtr<IOleInPlaceActiveObject>
	{
		~CComPtr<IOleInPlaceActiveObject>();
	};

	struct CComPtr<IOleInPlaceFrame>
	{
		~CComPtr<IOleInPlaceFrame>();
	};

	struct CComPtr<IOleInPlaceObject>
	{
		~CComPtr<IOleInPlaceObject>();
	};

	struct CComPtr<IOleInPlaceUIWindow>
	{
		~CComPtr<IOleInPlaceUIWindow>();
	};

	struct CComPtr<IOleUndoManager>
	{
		~CComPtr<IOleUndoManager>();
	};

	struct CComPtr<IOleUndoUnit>
	{
		~CComPtr<IOleUndoUnit>();
	};

	struct CComPtr<IOpenControlPanel>
	{
		~CComPtr<IOpenControlPanel>();
	};

	struct CComPtr<IOpenWithLauncher>
	{
		~CComPtr<IOpenWithLauncher>();
	};

	struct CComPtr<IOperationDataReader>
	{
		CComPtr<IOperationDataReader>(IOperationDataReader *);
		~CComPtr<IOperationDataReader>();
	};

	struct CComPtr<IOperationStatusTilePriv>
	{
		CComPtr<IOperationStatusTilePriv>(CComPtr<IOperationStatusTilePriv> const &);
		~CComPtr<IOperationStatusTilePriv>();
	};

	struct CComPtr<IParentAndItem>
	{
		~CComPtr<IParentAndItem>();
	};

	struct CComPtr<IPersistSerializedPropStorage>
	{
		~CComPtr<IPersistSerializedPropStorage>();
	};

	struct CComPtr<IPersistStream>
	{
		~CComPtr<IPersistStream>();
	};

	struct CComPtr<IPersistString2>
	{
		~CComPtr<IPersistString2>();
	};

	struct CComPtr<IPropertyBag>
	{
		~CComPtr<IPropertyBag>();
	};

	struct CComPtr<IPropertyChangeArray>
	{
		~CComPtr<IPropertyChangeArray>();
	};

	struct CComPtr<IPropertyControlSite>
	{
		~CComPtr<IPropertyControlSite>();
	};

	struct CComPtr<IPropertyDescription2>
	{
		~CComPtr<IPropertyDescription2>();
	};

	struct CComPtr<IPropertyDescription>
	{
		~CComPtr<IPropertyDescription>();
	};

	struct CComPtr<IPropertyDescriptionList>
	{
		~CComPtr<IPropertyDescriptionList>();
	};

	struct CComPtr<IPropertyDescriptionRelatedPropertyInfo>
	{
		~CComPtr<IPropertyDescriptionRelatedPropertyInfo>();
	};

	struct CComPtr<IPropertyEnumType>
	{
		~CComPtr<IPropertyEnumType>();
	};

	struct CComPtr<IPropertyKeyStore>
	{
		~CComPtr<IPropertyKeyStore>();
	};

	struct CComPtr<IPropertyStore>
	{
		void Release();
		~CComPtr<IPropertyStore>();
	};

	struct CComPtr<IPropertySystem>
	{
		~CComPtr<IPropertySystem>();
	};

	struct CComPtr<IPropertyValue>
	{
		~CComPtr<IPropertyValue>();
	};

	struct CComPtr<IQueryAssociations>
	{
		~CComPtr<IQueryAssociations>();
	};

	struct CComPtr<IQueryCancelAutoPlay>
	{
		~CComPtr<IQueryCancelAutoPlay>();
	};

	struct CComPtr<IQueryInfo>
	{
		~CComPtr<IQueryInfo>();
	};

	struct CComPtr<IQuerySource>
	{
		~CComPtr<IQuerySource>();
	};

	struct CComPtr<IRecycleBin>
	{
		~CComPtr<IRecycleBin>();
	};

	struct CComPtr<IRecycleBinManager>
	{
		~CComPtr<IRecycleBinManager>();
	};

	struct CComPtr<IRegDataDrivenCommand>
	{
		~CComPtr<IRegDataDrivenCommand>();
	};

	struct CComPtr<IRegTreeOptionsEventListener>
	{
		~CComPtr<IRegTreeOptionsEventListener>();
	};

	struct CComPtr<IResultShape>
	{
		~CComPtr<IResultShape>();
	};

	struct CComPtr<IRunnableTask>
	{
		~CComPtr<IRunnableTask>();
	};

	struct CComPtr<ISearchTypeAheadResult>
	{
		~CComPtr<ISearchTypeAheadResult>();
	};

	struct CComPtr<IServiceProvider>
	{
		~CComPtr<IServiceProvider>();
	};

	struct CComPtr<ISharedBitmap>
	{
		~CComPtr<ISharedBitmap>();
	};

	struct CComPtr<IShellBrowser>
	{
		~CComPtr<IShellBrowser>();
	};

	struct CComPtr<IShellBrowserService>
	{
		~CComPtr<IShellBrowserService>();
	};

	struct CComPtr<IShellExtInit>
	{
		~CComPtr<IShellExtInit>();
	};

	struct CComPtr<IShellFolder2>
	{
		~CComPtr<IShellFolder2>();
	};

	struct CComPtr<IShellFolder3>
	{
		~CComPtr<IShellFolder3>();
	};

	struct CComPtr<IShellFolder>
	{
		~CComPtr<IShellFolder>();
	};

	struct CComPtr<IShellFolderView>
	{
		~CComPtr<IShellFolderView>();
	};

	struct CComPtr<IShellFolderViewCB>
	{
		~CComPtr<IShellFolderViewCB>();
	};

	struct CComPtr<IShellItem2>
	{
		~CComPtr<IShellItem2>();
	};

	struct CComPtr<IShellItem>
	{
		CComPtr<IShellItem>(IShellItem *);
		~CComPtr<IShellItem>();
	};

	struct CComPtr<IShellItemArray>
	{
		CComPtr<IShellItemArray>(IShellItemArray *);
		void Release();
		~CComPtr<IShellItemArray>();
	};

	struct CComPtr<IShellItemBrowser>
	{
		~CComPtr<IShellItemBrowser>();
	};

	struct CComPtr<IShellItemImageFactory>
	{
		~CComPtr<IShellItemImageFactory>();
	};

	struct CComPtr<IShellItemImageFactoryPriv>
	{
		~CComPtr<IShellItemImageFactoryPriv>();
	};

	struct CComPtr<IShellLibrary>
	{
		~CComPtr<IShellLibrary>();
	};

	struct CComPtr<IShellSearchTarget>
	{
		~CComPtr<IShellSearchTarget>();
	};

	struct CComPtr<IShellTaskScheduler>
	{
		~CComPtr<IShellTaskScheduler>();
	};

	struct CComPtr<IShellView>
	{
		~CComPtr<IShellView>();
	};

	struct CComPtr<ISortColumnArray>
	{
		~CComPtr<ISortColumnArray>();
	};

	struct CComPtr<IStorage>
	{
		~CComPtr<IStorage>();
	};

	struct CComPtr<IStream>
	{
		~CComPtr<IStream>();
	};

	struct CComPtr<ISyncMgrConflictItems>
	{
		~CComPtr<ISyncMgrConflictItems>();
	};

	struct CComPtr<ITextTypeAheadResult>
	{
		CComPtr<ITextTypeAheadResult>(CComPtr<ITextTypeAheadResult> const &);
		~CComPtr<ITextTypeAheadResult>();
	};

	struct CComPtr<IThreadUndoManager>
	{
		~CComPtr<IThreadUndoManager>();
	};

	struct CComPtr<IThumbnailAdornerFactory>
	{
		~CComPtr<IThumbnailAdornerFactory>();
	};

	struct CComPtr<IThumbnailCache>
	{
		~CComPtr<IThumbnailCache>();
	};

	struct CComPtr<ITipAutoCompleteClient>
	{
		void Release();
	};

	struct CComPtr<ITipAutoCompleteProvider>
	{
		~CComPtr<ITipAutoCompleteProvider>();
	};

	struct CComPtr<ITrackEvents>
	{
		~CComPtr<ITrackEvents>();
	};

	struct CComPtr<ITransferHelper>
	{
		~CComPtr<ITransferHelper>();
	};

	struct CComPtr<ITransferSource2>
	{
		~CComPtr<ITransferSource2>();
	};

	struct CComPtr<ITravelEntry>
	{
		~CComPtr<ITravelEntry>();
	};

	struct CComPtr<ITravelLog>
	{
		~CComPtr<ITravelLog>();
	};

	struct CComPtr<ITypeAheadProviderEventSink>
	{
		~CComPtr<ITypeAheadProviderEventSink>();
	};

	struct CComPtr<ITypeInfo>
	{
		~CComPtr<ITypeInfo>();
	};

	struct CComPtr<IUICommand2>
	{
		~CComPtr<IUICommand2>();
	};

	struct CComPtr<IUICommand>
	{
		~CComPtr<IUICommand>();
	};

	struct CComPtr<IUnknown>
	{
		CComPtr<IUnknown>(CComPtr<IUnknown> const &);
		CComPtr<IUnknown>(IUnknown *);
		~CComPtr<IUnknown>();
	};

	struct CComPtr<IUri>
	{
		~CComPtr<IUri>();
	};

	struct CComPtr<IUserNotification>
	{
		~CComPtr<IUserNotification>();
	};

	struct CComPtr<IVerbStateTaskCallBack>
	{
		~CComPtr<IVerbStateTaskCallBack>();
	};

	struct CComPtr<IViewCommandLogic>
	{
		~CComPtr<IViewCommandLogic>();
	};

	struct CComPtr<IViewProperties>
	{
		~CComPtr<IViewProperties>();
	};

	struct CComPtr<IViewSettings>
	{
		~CComPtr<IViewSettings>();
	};

	struct CComPtr<IViewStateInfo>
	{
		~CComPtr<IViewStateInfo>();
	};

	struct CComPtr<IVisualProperties>
	{
		~CComPtr<IVisualProperties>();
	};

	struct CComPtr<IWICBitmapSource>
	{
		CComPtr<IWICBitmapSource>(CComPtr<IWICBitmapSource> const &);
		~CComPtr<IWICBitmapSource>();
	};

	struct CComPtr<IWICImagingFactory>
	{
		~CComPtr<IWICImagingFactory>();
	};

	struct CComPtr<IWaitCursorManager>
	{
		~CComPtr<IWaitCursorManager>();
	};

	struct CComPtr<IWebBrowserApp>
	{
		~CComPtr<IWebBrowserApp>();
	};

	struct CComPtr<IXMLDOMNode>
	{
		~CComPtr<IXMLDOMNode>();
	};

	struct CComPtr<Windows::Data::Xml::Dom::IXmlNode>
	{
		~CComPtr<Windows::Data::Xml::Dom::IXmlNode>();
	};

	struct CComTypeInfoHolder
	{
		struct stringdispid
		{
			stringdispid();
			~stringdispid();
		};

		long EnsureTI(unsigned long);
		long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
		long GetTI(unsigned long);
		long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
		long LoadNameCache(ITypeInfo *);
		static void Cleanup(unsigned __int64);
	};

	struct CComVariant
	{
		CComVariant();
		CComVariant(IDispatch *);
		long GetSizeMax(_ULARGE_INTEGER *);
		long ReadFromStream(IStream *,unsigned short);
		long WriteToStream(IStream *);
		long WriteToStream(IStream *,unsigned short);
		~CComVariant();
	};

	struct CSimpleArray<unsigned int>
	{
		int Add(unsigned int &);
	};

	struct CWindowImplBaseT<CWindow,CWinTraits<1442840576,0> >
	{
		HWND__ * Create(HWND__ *,tagRECT &,unsigned short const *,unsigned long,unsigned long,unsigned int,unsigned short,void *);
		static __int64 StartWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
		static __int64 WindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
		virtual __int64 (*GetWindowProc())(HWND__ *,unsigned int,unsigned __int64,__int64);
		virtual void OnFinalMessage(HWND__ *);
	};

	class IConnectionPointContainerImpl<CShellFolderViewOC>
	{
		static _ATL_CONNMAP_ENTRY const * const pConnMap;
	public:
		virtual long EnumConnectionPoints(IEnumConnectionPoints * *);
		virtual long FindConnectionPoint(_GUID const &,IConnectionPoint * *);
	};

	struct IObjectSafetyImpl<CShellFolderViewOC,1>
	{
		virtual long GetInterfaceSafetyOptions(_GUID const &,unsigned long *,unsigned long *);
		virtual long SetInterfaceSafetyOptions(_GUID const &,unsigned long,unsigned long);
	};

	struct IOleControlImpl<CShellFolderViewOC>
	{
		virtual long FreezeEvents(int);
		virtual long GetControlInfo(tagCONTROLINFO *);
		virtual long OnAmbientPropertyChange(long);
		virtual long OnMnemonic(tagMSG *);
	};

	struct IOleInPlaceActiveObjectImpl<CShellFolderViewOC>
	{
		virtual long EnableModeless(int);
		virtual long GetWindow(HWND__ * *);
		virtual long OnDocWindowActivate(int);
		virtual long OnFrameWindowActivate(int);
		virtual long ResizeBorder(tagRECT const *,IOleInPlaceUIWindow *,int);
		virtual long TranslateAcceleratorW(tagMSG *);
	};

	struct IOleInPlaceObjectWindowlessImpl<CShellFolderViewOC>
	{
		virtual long GetDropTarget(IDropTarget * *);
		virtual long OnWindowMessage(unsigned int,unsigned __int64,__int64,__int64 *);
	};

	struct IOleObjectImpl<CShellFolderViewOC>
	{
		long DoVerbInPlaceActivate(tagRECT const *,HWND__ *);
		long DoVerbPrimary(tagRECT const *,HWND__ *);
		virtual long Advise(IAdviseSink *,unsigned long *);
		virtual long Close(unsigned long);
		virtual long DoVerb(long,tagMSG *,IOleClientSite *,long,HWND__ *,tagRECT const *);
		virtual long EnumAdvise(IEnumSTATDATA * *);
		virtual long EnumVerbs(IEnumOLEVERB * *);
		virtual long GetClientSite(IOleClientSite * *);
		virtual long GetClipboardData(unsigned long,IDataObject * *);
		virtual long GetExtent(unsigned long,tagSIZE *);
		virtual long GetMiscStatus(unsigned long,unsigned long *);
		virtual long GetMoniker(unsigned long,unsigned long,IMoniker * *);
		virtual long GetUserClassID(_GUID *);
		virtual long GetUserType(unsigned long,unsigned short * *);
		virtual long InitFromData(IDataObject *,int,unsigned long);
		virtual long IsUpToDate();
		virtual long SetClientSite(IOleClientSite *);
		virtual long SetColorScheme(tagLOGPALETTE *);
		virtual long SetExtent(unsigned long,tagSIZE *);
		virtual long SetHostNames(unsigned short const *,unsigned short const *);
		virtual long SetMoniker(unsigned long,IMoniker *);
		virtual long Unadvise(unsigned long);
		virtual long Update();
	};

	struct IPersistStreamInitImpl<CShellFolderViewOC>
	{
		virtual long GetClassID(_GUID *);
		virtual long GetSizeMax(_ULARGE_INTEGER *);
		virtual long InitNew();
		virtual long IsDirty();
		virtual long Load(IStream *);
		virtual long Save(IStream *,int);
	};

	namespace _ATL_SAFE_ALLOCA_IMPL
	{
		struct CAtlSafeAllocBufferManager<_CCRTAllocator>
		{
			~CAtlSafeAllocBufferManager<_CCRTAllocator>();
		};

		bool _AtlVerifyStackAvailable(unsigned __int64);
		int _Atlresetstkoflw();
		unsigned long _Atlosplatform;
	};

	struct _CComChainData<CPinnedList,CStartMenuPin>
	{
		static _ATL_CHAINDATA data;
	};

	struct _CComChainData<CPinnedList,CTaskbandPin>
	{
		static _ATL_CHAINDATA data;
	};

	struct _Copy<tagCONNECTDATA>
	{
		static long copy(tagCONNECTDATA *,tagCONNECTDATA *);
		static void destroy(tagCONNECTDATA *);
	};

	struct _CopyInterface<IConnectionPoint>
	{
		static long copy(IConnectionPoint * *,IConnectionPoint * *);
		static void destroy(IConnectionPoint * *);
	};

	HDC__ * AtlCreateTargetDC(HDC__ *,tagDVTARGETDEVICE *);
	IUnknown * AtlComPtrAssign(IUnknown * *,IUnknown *);
	IUnknown * AtlComQIPtrAssign(IUnknown * *,IUnknown *,_GUID const &);
	_GUID GUID_ATLVer30;
	long AtlIPersistStreamInit_GetSizeMax2(ATL::ATL_PROPMAP_ENTRY *,void *,IUnknown *,_ULARGE_INTEGER *,bool);
	long AtlIPersistStreamInit_Load2(IStream *,ATL::ATL_PROPMAP_ENTRY *,void *,IUnknown *,bool);
	long AtlIPersistStreamInit_Save2(IStream *,int,ATL::ATL_PROPMAP_ENTRY *,void *,IUnknown *,bool);
	long AtlInternalQueryInterface(void *,ATL::_ATL_INTMAP_ENTRY const *,_GUID const &,void * *);
	long AtlModuleInit(ATL::_ATL_MODULE *,ATL::_ATL_OBJMAP_ENTRY *,HINSTANCE__ *);
	long AtlModuleTerm(ATL::_ATL_MODULE *);
	unsigned short AtlModuleRegisterWndClassInfoW(ATL::_ATL_MODULE *,_ATL_WNDCLASSINFOW *,__int64 (**)(HWND__ *,unsigned int,unsigned __int64,__int64));
	void AtlHiMetricToPixel(tagSIZE const *,tagSIZE *);
};

namespace AccessibilityHelpers
{
	bool IsScreenReaderEnabled();
};

class ActivityTracker
{
	bool _IsActivityTrackingEnabled();
	long _AddAppData(HKEY__ *,unsigned short const *,unsigned int,_FILETIME const &);
	long _AddAppSubKey(HKEY__ *,unsigned short const *,unsigned int,_FILETIME const &);
	long _AddJumpListData(HKEY__ *,ActivityTracker::RecentItemData const &);
	long _AddLocationData(HKEY__ *);
	long _AddRecentItemSubKey(HKEY__ *,ActivityTracker::RecentItemData const &);
	long _GetLocation(Windows::Devices::Geolocation::IGeocoordinate * *);
	long _GetShellLinkArguments(IShellLinkW *,unsigned short * *);
	long _GetShellLinkDisplayName(IShellLinkW *,unsigned short * *);
	long _IsRecentItemTracked(HKEY__ *,ActivityTracker::RecentItemData const &,bool *);
	long _OpenAppSubKey(HKEY__ *,unsigned short const *,HKEY__ * *);
	long _RemoveAcAceFromKey(HKEY__ *,unsigned short const *);
	long _UpdateJumpList(HKEY__ *,unsigned short const *);
public:
	ActivityTracker();
	virtual long AddAppLaunch(unsigned short const *);
	virtual long UpdateJumpListForApp(unsigned short const *);
};

struct AgileGitPtr
{
	long CopyLocal(_GUID const &,void * *);
};

namespace AppBarTelemetry
{
	class AddRemoveAppBar
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(AppBarMessage);
		~AddRemoveAppBar();
	};

};

namespace AppResolverCacheHelpers
{
	_ITEMIDLIST_ABSOLUTE * CreateFullIDList(CCacheShortcut const *,void const *);
	bool HasSameArguments(CCacheShortcut const *,void const *,unsigned short const *);
	bool IsMatchingShortcut(void const *,CCacheShortcut const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
	long GetCacheDirFolder(CCacheDir const *,void const *,IShellFolder * *);
	long GetSqmableNames(CCacheShortcut const *,void const *,unsigned short * *,unsigned short * *);
	void RegisterDarwinLink(CCacheShortcut const *,void const *,bool);
};

class AppResolverLogging
{
protected:
	static AppResolverLogging * Instance();
};

struct AppResolverTelemetry
{
	class ARCBuilder_ScanFoldersAndCreateNewCache
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class ARCM_RefreshCache
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(START_MENU_REFRESH_CACHE_FLAGS);
	};

	class ARCManager_CortanaJumplistChangedForItem
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class ARCManager_RegisterForDiskNotifications
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void RootNotificationRegistrationFailed<int &,long &>(int &,long &);
		void StartActivity();
	};

	class ActivityTracker_AppLaunch
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ActivityTracker_AppLaunch();
	};

	class ActivityTracker_JumpListChange
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ActivityTracker_JumpListChange();
	};

	class ExecuteStartPinContextMenuCommand
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class GetStartPinContextMenuCommand
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~GetStartPinContextMenuCommand();
	};

	class PinUserCreatedItemToStart
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~PinUserCreatedItemToStart();
	};

	class Resurrection_MovingTileToGraveyard
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void FoundMatchingStartTile<_GUID const &,_GUID &>(_GUID const &,_GUID &);
		void StartActivity();
		~Resurrection_MovingTileToGraveyard();
	};

	class Resurrection_ResurrectTile
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void TileWasOnStart<_GUID &>(_GUID &);
		~Resurrection_ResurrectTile();
	};

	class TAR_AllRanksHaveChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_AllRanksHaveChanged();
	};

	class TAR_ConsistencyCheck
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void DuplicateAppIdInDesktopApps<unsigned short const * &,_GUID &,_GUID &>(unsigned short const * &,_GUID &,_GUID &);
		void OrphanedTileInAppList<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID &>(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID &);
		void OrphanedTileOnStart<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID &>(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID &);
		void StartActivity();
		~TAR_ConsistencyCheck();
	};

	class TAR_InitializeVisiblePlaceView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_InitializeVisiblePlaceView();
	};

	class TAR_JumplistChangedForItem
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_JumplistChangedForItem();
	};

	class TAR_OnAllAppsTileAdded
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class TAR_OnAllAppsTileRemoved
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class TAR_OnInstallFinished
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_OnInstallFinished();
	};

	class TAR_OnServiceFailureOccured
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_OnServiceFailureOccured();
	};

	class TAR_OnUnknownUninstallFinished
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class TAR_PromoteAppsToTopOfFrequentList
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_PromoteAppsToTopOfFrequentList();
	};

	class TAR_RankChangedForItem
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_RankChangedForItem();
	};

	class TAR_Reconcile
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_Reconcile();
	};

	class TAR_ReconcileAppResolverWithTileDataLayer
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_ReconcileAppResolverWithTileDataLayer();
	};

	class TAR_ReconcilePlacesWithTileDataLayer
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TAR_ReconcilePlacesWithTileDataLayer();
	};

	class TDLListener_OnAppLifecycleEvent
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	};

	class TDLListener_StartupRegistration
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TDLListener_StartupRegistration();
	};

	class TDLLookup_InitializeWithView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(_GUID);
		~TDLLookup_InitializeWithView();
	};

	class UPTM_CreateUserPinnedTileShortcut
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		UPTM_CreateUserPinnedTileShortcut Split();
		void StartActivity();
		~UPTM_CreateUserPinnedTileShortcut();
	};

	class UPTM_DeleteUserPinnedTileShortcut
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~UPTM_DeleteUserPinnedTileShortcut();
	};

	static void ARCManager_CommittingNewAppResolverCache<long &>(long &);
	static void AppResolver_CacheLanguageChanged();
	static void TAR_DiscoveredUserPinnedShortcut<bool &>(bool &);
	static void TAR_NewDesktopTilePropertiesVersion<unsigned int &,unsigned int const &>(unsigned int &,unsigned int const &);
	static void TAR_NewVersionOrFailedConsistency<unsigned int &,unsigned int const &>(unsigned int &,unsigned int const &);
	static void TAR_RootViewCreated<_GUID &>(_GUID &);
	static void TAR_TileRemovedFromKnownView<_GUID const &,_GUID &>(_GUID const &,_GUID &);
	static void TAR_TooManyTilesInView<_GUID &,unsigned int &>(_GUID &,unsigned int &);
	static void TAR_UpdateRelevanceForItem<unsigned short const * &,unsigned int &,unsigned int &>(unsigned short const * &,unsigned int &,unsigned int &);
	static wil::ActivityThreadWatcher WatchCurrentThread(char const *);
};

struct AppsFolderManager
{
	virtual long SendChangeNotify(unsigned short const *);
};

struct AssocCapabilityEntry
{
	long CopyProgIds(CSimpleCaseInsensitiveOrdinalStringArray &);
};

struct AutoProviderRegistrar
{
	AutoProviderRegistrar(void (*)(),void (*)());
	~AutoProviderRegistrar();
};

struct BannerLogging
{
	static _TlgProvider_t const * Provider();
};

struct BannerTelemetry
{
	class BannerEvent
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned long,unsigned int);
		~BannerEvent();
	};

	class DataModelLoad
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~DataModelLoad();
	};

	class Initialization
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	static void BannerSuppressed<unsigned short const * &>(unsigned short const * &);
};

struct Button3d
{
	Button3d();
	int GetPressedPaddingShift();
	long SetEvaluatingAsyncState(bool);
	static DirectUI::IClassInfo * Class;
	static DirectUI::PropertyInfo const * EvaluatingAsyncStateProp();
	static DirectUI::PropertyInfo const * PressedPaddingShiftProp();
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class CACBackgroundJob
{
protected:
	int _AddToList(unsigned short const *,int,unsigned long,_DPA *,unsigned long *);
	static int GetSpecialPrefixLen(unsigned short const *);
	static int MatchesSpecialPrefix(unsigned short const *);
	static int _DpaCompare(void const *,void const *,__int64);
	void _DoExpand(unsigned short const *);
	void _MungeACList(_DPA *);
	void _Search(unsigned short const *,_ITEMIDLIST_ABSOLUTE const *,unsigned long,unsigned long);
public:
	unsigned long GenerateCompletionList(CACBackgroundJobInitData *);
};

struct CACHE_BASE_INFO
{
	long AllocationDone(IMemoryMappedHeap *);
};

struct CACJobManager
{
	int StartSearch(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,IEnumString *,IACList *,unsigned long,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CACJobManager();
	void StopSearch();
};

class CACLHistory
{
protected:
	long _GetNextItem(unsigned short * *,_FILETIME *);
	static int _FreeAlternateDataItem(void *,void *);
	void _AddAlternateDataItem(unsigned short const *,unsigned short const *,int);
	void _CreateAlternateData();
	void _CreateAlternateItem(unsigned short const *);
public:
	virtual long Clone(IEnumString * *);
	virtual long GetEnumOptions(unsigned long *);
	virtual long Next(unsigned long,unsigned short * *,unsigned long *);
	virtual long NextItem(unsigned short *,unsigned long,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long SetEnumOptions(unsigned long);
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CACLIShellFolder
{
	long _GetDisplayNameForAddressBar(IShellFolder *,_ITEMID_CHILD const *,unsigned short *,unsigned long);
	long _GetNextWrapper(unsigned short *,unsigned long);
	long _GetPidlName(_ITEMID_CHILD const *,unsigned short *,unsigned long);
	long _Init();
	long _SetLocation(_ITEMIDLIST_ABSOLUTE const *);
	long _TryNextPath();
	unsigned long _GetEnumerationFlagsForItem(IShellItem *);
	~CACLIShellFolder();
public:
	virtual long Clone(IEnumString * *);
	virtual long Expand(unsigned short const *);
	virtual long GetClassID(_GUID *);
	virtual long GetDirectory(unsigned short *,unsigned long);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetOptions(unsigned long *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Next(unsigned long,unsigned short * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long SetCancelObject(ICancelMethodCalls *);
	virtual long SetDirectory(unsigned short const *);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetOptions(unsigned long);
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CACLMRU
{
	virtual long AddMRUString(unsigned short const *);
	virtual long ClearMRU();
	virtual long Clone(IEnumString * *);
	virtual long Expand(unsigned short const *);
	virtual long Initialize(unsigned short const *,unsigned long);
	virtual long Next(unsigned long,unsigned short * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CACLMulti
{
protected:
	static int _FreeListItem(void *,void *);
public:
	virtual long Append(IUnknown *);
	virtual long Clone(IEnumString * *);
	virtual long Expand(unsigned short const *);
	virtual long GetClassID(_GUID *);
	virtual long GetEnumOptions(unsigned long *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Next(unsigned long,unsigned short * *,unsigned long *);
	virtual long NextItem(unsigned short *,unsigned long,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Remove(IUnknown *);
	virtual long Reset();
	virtual long SetCancelObject(ICancelMethodCalls *);
	virtual long SetEnumOptions(unsigned long);
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CACString
{
	int _StrCmpLocaleW(unsigned long,unsigned short const *,int,unsigned short const *,int);
public:
	int CompareAllWords(unsigned short const *,CACWordBreaker *);
	unsigned long Release();
};

class CACWordBreaker
{
	long _BreakPhrases(unsigned short *);
	static long s_PFNFillTextBuffer(tagTEXT_SOURCE *);
protected:
	virtual ~CACWordBreaker();
public:
	long BreakText(unsigned short const *);
	long GetNextWord(unsigned short const * *);
	long Init();
	virtual long EndAltPhrase();
	virtual long PutAltWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long PutBreak(tagWORDREP_BREAK_TYPE);
	virtual long PutWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long StartAltPhrase();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAccessible
{
	int _LoadTypeLib();
	long _GetAccName(unsigned short * *);
	long _GetAccessibleItem(int,IDispatch * *);
	long _GetChildFromVariant(tagVARIANT const *,CMenuToolbarBase * *,int *);
	long _GetVariantFromChildIndex(HWND__ *,int,tagVARIANT *);
	long _Navigate(long,tagVARIANT,tagVARIANT *);
public:
	CAccessible(IMenuBand *);
	CAccessible(IMenuBand *,int);
	long InitAcc();
	virtual long Clone(IEnumVARIANT * *);
	virtual long ContextSensitiveHelp(int);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long GetWindow(HWND__ * *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long Next(unsigned long,tagVARIANT *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual long accDoDefaultAction(tagVARIANT);
	virtual long accHitTest(long,long,tagVARIANT *);
	virtual long accLocation(long *,long *,long *,long *,tagVARIANT);
	virtual long accNavigate(long,tagVARIANT,tagVARIANT *);
	virtual long accSelect(long,tagVARIANT);
	virtual long get_accChild(tagVARIANT,IDispatch * *);
	virtual long get_accChildCount(long *);
	virtual long get_accDefaultAction(tagVARIANT,unsigned short * *);
	virtual long get_accDescription(tagVARIANT,unsigned short * *);
	virtual long get_accFocus(tagVARIANT *);
	virtual long get_accHelp(tagVARIANT,unsigned short * *);
	virtual long get_accHelpTopic(unsigned short * *,tagVARIANT,long *);
	virtual long get_accKeyboardShortcut(tagVARIANT,unsigned short * *);
	virtual long get_accName(tagVARIANT,unsigned short * *);
	virtual long get_accParent(IDispatch * *);
	virtual long get_accRole(tagVARIANT,tagVARIANT *);
	virtual long get_accSelection(tagVARIANT *);
	virtual long get_accState(tagVARIANT,tagVARIANT *);
	virtual long get_accValue(tagVARIANT,unsigned short * *);
	virtual long put_accName(tagVARIANT,unsigned short *);
	virtual long put_accValue(tagVARIANT,unsigned short *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CAccessible();
};

class CAce
{
	long _Init(void *,unsigned long,unsigned char,unsigned char,unsigned short,void *);
public:
	bool EqualAce(CAce const *);
	long Init(void *,unsigned long,unsigned char,unsigned char);
	static long CreateInstance(void *,unsigned long,unsigned char,unsigned char,CAce * *);
};

class CAceList
{
	CAce * s_FindAce(CDPA<CAce,CTContainer_PolicyUnOwned<CAce> > &,void *,unsigned char,CAce const *);
	long _AddAllowedAceToAcl(CAce * const,bool,_ACL *);
	long _AddExplicitAceToDpa(CDPA<CAce,CTContainer_PolicyUnOwned<CAce> > &,CAce *);
	long _InitFromAcl(_ACL *);
	unsigned long _GetRequiredExplictAclSize(void *,CDPA<CAce,CTContainer_PolicyUnOwned<CAce> > &);
public:
	long GetAclForExplicitEntries(void *,_ACL * *);
	long SetExplicitAllowAce(void *,unsigned long,unsigned char);
	static long CreateInstance(_ACL *,CAceList * *);
	~CAceList();
};

class CActivatedEventArgsBase
{
	virtual long v_GetActivationKind(HSTRING__ *,Windows::ApplicationModel::Activation::ActivationKind *);
protected:
	virtual ~CActivatedEventArgsBase();
public:
	virtual long Initialize(HSTRING__ *,Windows::ApplicationModel::Activation::ApplicationExecutionState,Windows::ApplicationModel::Activation::ISplashScreen *);
	virtual long get_IsForegroundActivation(unsigned char *);
	virtual long get_Kind(Windows::ApplicationModel::Activation::ActivationKind *);
	virtual long get_NavigationViewId(unsigned int *);
	virtual long get_PreviousExecutionState(Windows::ApplicationModel::Activation::ApplicationExecutionState *);
	virtual long get_SplashScreen(Windows::ApplicationModel::Activation::ISplashScreen * *);
	virtual long get_User(Windows::System::IUser * *);
	virtual long get_UserContext(unsigned __int64 *);
	virtual long put_IsForegroundActivation(unsigned char);
	virtual long put_NavigationViewId(unsigned int);
	virtual long put_UserContext(unsigned __int64);
};

class CActivatedEventArgsWithPrelaunchAndViewIdBase
{
protected:
	virtual ~CActivatedEventArgsWithPrelaunchAndViewIdBase();
public:
	CActivatedEventArgsWithPrelaunchAndViewIdBase();
	virtual long SetPrelaunchActivated(unsigned char);
	virtual long get_PrelaunchActivated(unsigned char *);
};

class CActivatedEventArgsWithViewIdBase
{
protected:
	virtual ~CActivatedEventArgsWithViewIdBase();
public:
	CActivatedEventArgsWithViewIdBase();
	virtual long InitializeViewId(int);
	virtual long get_ActivationViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher * *);
	virtual long get_CurrentlyShownApplicationViewId(int *);
	virtual long get_Properties(Windows::ApplicationModel::Activation::MultiviewActivationProperties *);
	virtual long get_ViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher * *);
	virtual long put_ActivationViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher *);
	virtual long put_Properties(Windows::ApplicationModel::Activation::MultiviewActivationProperties);
};

class CActiveDesktop
{
	int _ReadWallpaper();
	long _ApplyWallpaper(unsigned short const *,unsigned long,unsigned short const *);
	long _GetWallpaperPath(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long);
	long _SaveSettings(unsigned long);
	long _SaveWallpaper(unsigned short const *,unsigned long);
	long _SaveWallpaperOptions(unsigned long);
	void _Initialize();
public:
	virtual long AddDesktopItem(_tagCOMPONENT const *,unsigned long);
	virtual long AddDesktopItemWithUI(HWND__ *,_tagCOMPONENT *,unsigned long);
	virtual long AddUrl(HWND__ *,unsigned short const *,_tagCOMPONENT *,unsigned long);
	virtual long ApplyChanges(unsigned long);
	virtual long EnsureUpdateHTML();
	virtual long GenerateDesktopItemHtml(unsigned short const *,_tagCOMPONENT *,unsigned long);
	virtual long GetADObjectFlags(unsigned long *,unsigned long);
	virtual long GetDesktopItem(int,_tagCOMPONENT *,unsigned long);
	virtual long GetDesktopItemByID(unsigned __int64,_tagCOMPONENT *,unsigned long);
	virtual long GetDesktopItemBySource(unsigned short const *,_tagCOMPONENT *,unsigned long);
	virtual long GetDesktopItemCount(int *,unsigned long);
	virtual long GetDesktopItemOptions(_tagCOMPONENTSOPT *,unsigned long);
	virtual long GetPattern(unsigned short *,unsigned int,unsigned long);
	virtual long GetScheme(unsigned short *,unsigned long *,unsigned long);
	virtual long GetWallpaper(unsigned short *,unsigned int,unsigned long);
	virtual long GetWallpaperOptions(_tagWALLPAPEROPT *,unsigned long);
	virtual long MakeDynamicChanges(IOleObject *);
	virtual long ModifyDesktopItem(_tagCOMPONENT const *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReReadWallpaper();
	virtual long Read(unsigned short const *,tagVARIANT *,IErrorLog *);
	virtual long RemoveDesktopItem(_tagCOMPONENT const *,unsigned long);
	virtual long RunWallpaperHostSynchronous();
	virtual long SetDesktopItemOptions(_tagCOMPONENTSOPT const *,unsigned long);
	virtual long SetPattern(unsigned short const *,unsigned long);
	virtual long SetSafeMode(unsigned long);
	virtual long SetScheme(unsigned short const *,unsigned long);
	virtual long SetWallpaper(unsigned short const *,unsigned long);
	virtual long SetWallpaperOptions(_tagWALLPAPEROPT const *,unsigned long);
	virtual long UpdateAllDesktopSubscriptions();
	virtual long Write(unsigned short const *,tagVARIANT *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAddColumnCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CAddMediaServerCommand
{
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CAddRemoveProgramsCommand
{
	virtual long Invoke();
};

struct CAdornerBase
{
	virtual long ComputeBounds(tagRECT *,tagRECT *);
	virtual long Draw(HDC__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAdvancedDlgEventListener
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnSettingSet(unsigned long);
};

struct CAggregateMultipleValues
{
	virtual long AppendValue(tagPROPVARIANT const &);
	virtual long DeleteValue(tagPROPVARIANT const &);
	virtual long GetCount(int *);
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long GetSubValueFlags(int,int *);
	virtual long GetValue(tagPROPVARIANT *);
	virtual long GetValueAt(int,tagPROPVARIANT *);
	virtual long HasValue(tagPROPVARIANT const &,int *);
	virtual long InitSubValueFlags(int,int);
	virtual long InitValue(tagPROPVARIANT const &);
	virtual long InsertValue(int,tagPROPVARIANT const &);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPropertyKey(_tagpropertykey const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAggregatedUnknown
{
	struct CUnkInner
	{
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

protected:
	virtual int v_HandleDelete(long *);
public:
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAlphaCategorizer
{
protected:
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
};

struct CAnimateWindowSize
{
	virtual long AnimateWindowSize(HWND__ *,tagSIZE,tagSIZE,unsigned long,AWSTYPE,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAnimateWindowSizeWorker
{
	double _ComputeSCurveAnimation(double,double,double);
	static void s_WindowSize(unsigned int,unsigned int,unsigned __int64,unsigned __int64,unsigned __int64);
	void _ComputeAnimation(unsigned long,tagSIZE *);
	void _WindowSize(unsigned int);
public:
	long Start();
};

class CAnimatedWallpaperWindow
{
protected:
	CAnimatedWallpaperWindow(IZOrderManager *,IAnimatedWallpaperHost *,unsigned long,IMMERSIVE_COLOR_PREFERENCE);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual int v_CaptureWallpaper(tagSIZE *,unsigned char);
	virtual ~CAnimatedWallpaperWindow();
public:
	static long s_CreateInstance(HWND__ *,unsigned long,unsigned long,HMENU__ *,IZOrderManager *,IAnimatedWallpaperHost *,unsigned long,IMMERSIVE_COLOR_PREFERENCE,IAnimatedWallpaper * *);
	virtual HBITMAP__ * GetCachedBitmap(int,int);
	virtual HWND__ * GetWindow();
	virtual long BeginFade(unsigned char,unsigned char,unsigned long);
	virtual long CaptureWindow(IAnimatedWallpaper *,unsigned char);
	virtual long Destroy();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAnimationCallback
{
	long HideElementOnAnimationComplete(DirectUI::Element *);
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnComplete(IAnimation *,IAnimation::ETime);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
	virtual void OnSetTime(IAnimation *,IAnimation::ETime);
};

struct CAnimationTimeline
{
	long Start(HWND__ *,unsigned __int64,long,long,unsigned long,unsigned long,IMMERSIVE_COLOR_PREFERENCE,IMMERSIVE_COLOR_PREFERENCE,long);
	long Stop();
	unsigned long GetColorizationColorAtTime(unsigned __int64);
};

class CAnyAlias
{
	bool ShouldReceiveInterrupt();
protected:
	int _OkayToNotifyTranslatedEvent(CNotifyEvent const *,long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	int _OptionallySendUpdate(CNotifyEvent const *);
	virtual int v_CheckUpdatingSelf();
	virtual int v_IsOutgoingQueueFull();
	virtual int v_WantsEvent(long);
	virtual void v_SendNotification(CNotifyEvent const *,int,void (*)(HWND__ *,unsigned int,unsigned __int64,__int64));
public:
	long InitSpecial(CChangeNotify *,int,int,ALIASFLAGS);
	virtual int Deregister();
	virtual ~CAnyAlias();
	void Activate(_ITEMIDLIST_ABSOLUTE const *,int);
	void Deactivate(_ITEMIDLIST_ABSOLUTE const *);
};

class CAppControlHost
{
protected:
	virtual HWND__ * CreateHWND(HWND__ *);
	virtual bool OnNotify(unsigned int,unsigned __int64,__int64,__int64 *);
public:
	long SetAppControl(IAppControl *);
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long InvalidateSize();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetControlEnabled(int);
	virtual long SetControlVisible(int);
	virtual long SetFocus();
	virtual tagSIZE GetContentSize(int,int,DirectUI::Surface *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnDestroy();
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

struct CAppControlsModule
{
	CAppControlsModule();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFileNameLabelWidth(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAppControlsModuleInner
{
	long _CreateControls();
public:
	long SetFileNameLabelWidth(int);
	long SetSite(IUnknown *);
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnDestroy();
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

class CAppCursorManager
{
protected:
	void _ShowHideAppStartingCursor(IUnknown *,bool,APPCURSORCONTEXT);
};

class CAppEnumFilter
{
	_ITEMIDLIST_ABSOLUTE * _GetRestrictionPidl(unsigned int);
	static CAppEnumFilter::APPRESTRICTIONITEM const * const c_rgAppRestrictionItems;
public:
	static bool IsDefaultProgramsDisabled();
	static bool IsNoRunEnabled();
	static bool IsNoSetFoldersEnabled();
	virtual bool IsAppRestricted(unsigned int);
	virtual unsigned int GetRestrictionIndexForShortcut(_ITEMIDLIST_ABSOLUTE const *);
	virtual void RefreshRestrictionState();
};

struct CAppInfo
{
	int IconIndex();
	int Init();
	virtual long GetPinnableShortcut(IShortcutInfo * *);
	virtual unsigned short const * GetAppID();
};

struct CAppInfoEnumerator
{
	virtual long Next(IAppInfo * *);
};

class CAppPathReader
{
	long _EnsureHKCUPathKey();
	long _EnsureHKLMPathKey();
	long _PathToAppPathKeyHandle(HKEY__ *,HKEY__ * *);
public:
	int DoesValueExist(unsigned short const *);
	int PathIsRegisteredProgram();
	int PathToAppPath(unsigned short *,unsigned long);
	int WantsUrlForCacheFile(int);
	long GetCLSIDValue(unsigned short const *,_GUID *);
	long GetStringValue(unsigned short const *,unsigned short *,unsigned long);
	long GetSupportedProtocols(unsigned short *,unsigned long);
	~CAppPathReader();
};

class CAppResolver
{
	long _CanPinAppImpl(IShellItem *,IShellLinkW *);
	long _CanPinAppPath(unsigned short const *,bool);
	long _CreatePropStoreForLauncherItem(IAppResolverDataLayer *,IShortcutInfo *,_GUID const &,void * *);
	long _CreateShortcutFromProperties(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,IShellItem * *);
	long _EnsurePinnedToStart(unsigned short const *);
	long _GetAppIDForShortcutImpl(IShellLinkW *,IShellItem *,unsigned short * *);
	long _GetAppResolverCacheObject();
	long _GetBestAppIDForProcess(unsigned long,unsigned short const *,unsigned short * *);
	long _GetItemByAppPath(unsigned short const *,bool,_GUID const &,void * *);
	long _GetRelaunchPropertiesFromPropertyStore(IPropertyStore *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *,int *);
	long _GetShortcutPathOrAppIDFromPid(unsigned long,unsigned short *,unsigned int,int *,int *);
	long _ShouldCreateShortcutFromRelaunchProperties(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int);
	long _WriteShortcut(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,IShellItem * *);
	static int s_SortShortcutsForBestShortcut(CCacheShortcut const *,CCacheShortcut const *,CCacheInstance *);
	static int s_fIsExplorerProcess;
	~CAppResolver();
public:
	virtual long ActivateDesktopTile(unsigned short const *);
	virtual long CanPinApp(IShellItem *);
	virtual long CanPinAppShortcut(IShellLinkW *,IShellItem *);
	virtual long EnumCachedItems(_ITEMIDLIST_ABSOLUTE const *,_GUID const &,void * *);
	virtual long EnumItems(START_MENU_APP_ITEMS_FLAGS,_GUID const &,void * *);
	virtual long GenerateShortcutFromItemProperties(IShellItem2 *,IShellItem * *);
	virtual long GenerateShortcutFromWindowProperties(HWND__ *,IShellItem * *);
	virtual long GetAppIDForProcess(unsigned long,unsigned short * *,int *,int *,int *);
	virtual long GetAppIDForShortcut(IShellItem *,unsigned short * *);
	virtual long GetAppIDForShortcutObject(IShellLinkW *,IShellItem *,unsigned short * *);
	virtual long GetAppIDForWindow(HWND__ *,unsigned short * *,int *,int *,int *);
	virtual long GetBestShortcutAndAppIDForAppPath(unsigned short const *,IShellItem * *,unsigned short * *);
	virtual long GetBestShortcutForAppID(unsigned short const *,IShellItem * *);
	virtual long GetDataLayerManager(IAppResolverDataLayerManager * *);
	virtual long GetFullListOfAppIDs(unsigned int *,unsigned short * * *);
	virtual long GetItem(START_MENU_APP_ITEMS_FLAGS,unsigned short const *,_GUID const &,void * *);
	virtual long GetItemByAppPath(unsigned short const *,_GUID const &,void * *);
	virtual long GetLauncherAppIDForItem(IShellItem *,unsigned short * *);
	virtual long GetRelaunchProperties(HWND__ *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *,int *);
	virtual long GetShortcutForAppID(unsigned short const *,IShellItem * *);
	virtual long GetShortcutForProcess(unsigned long,IShellItem * *);
	virtual long GetSqmableNamesForAppID(unsigned short const *,unsigned short * *,unsigned short * *);
	virtual long GetTileDataLayerTranslator(IWin32TileDataLayerTranslator * *);
	virtual long IsCacheMatchingLanguage(int *);
	virtual long OnChangeNotify(unsigned int,long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long PauseNotifications();
	virtual long PromoteAppsToTopOfFrequentList(unsigned short const * *,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RefreshCache(START_MENU_REFRESH_CACHE_FLAGS);
	virtual long RegisterARNotify(IAppResolverNotify *);
	virtual long RegisterForNotifications();
	virtual long ReleaseGlobalCacheObject();
	virtual long ResumeNotifications();
	virtual long SetPinToStartOnDiscovery(unsigned short const *,unsigned short const *);
	virtual long UnregisterForNotifications();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAppResolverCacheBuilder
{
	CCacheShortcut const * _NextFromCacheInDir(CCacheInstance *,CCacheRoot const *,CCacheDir const *);
	bool _HasCacheChanged(CCacheInstance const *,IMemoryMappedHeap *);
	bool _IsExcludedDirectory(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_ITEMID_CHILD const *,unsigned long);
	long _AddShortcutToCache(CCacheInstance const *,OFFSET<CCacheDir> *,ShortcutInfoRootType,unsigned short const *,IShellFolder *,_ITEMID_CHILD const *,CCacheShortcut const *);
	long _CopyRootFromPreviousCache(CCacheInstance *,IShellFolder *,CCacheRoot const *,OFFSET<CCacheDir> *,ShortcutInfoRootType);
	long _FindMatchingAppGetAppID(CCacheInstance const *,CCacheShortcut const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
	long _GetPhoneticForJapanese(unsigned short const *,unsigned short * *);
	long _Initialize(CAppResolverCacheManager *,int);
	long _PopulateCacheStructure(CCacheInstance const *,AR_CACHE_HEADER *);
	long _SaveAppInfosAndShortcuts(AR_CACHE_HEADER *);
	long _TransferShortcutToCache(CCacheInstance *,OFFSET<CCacheDir> *,ShortcutInfoRootType,CCacheShortcut const *);
	long _UpdateRoot(CCacheInstance *,IShellFolder *,ROOTSCANINFO const *,int);
	static int s_FolderEnumCallback(_ITEMID_CHILD *,CAppResolverCacheBuilder::ENUMFOLDERINFO *);
	static int s_IDListSortCallback(_ITEMID_CHILD const *,_ITEMID_CHILD const *,IShellFolder *);
	static int s_SortByAppIDCallback(OFFSET<CCacheShortcut> const *,OFFSET<CCacheShortcut> const *,void const *);
	void _Cleanup();
	void _FillFolderCache(CCacheInstance *,IShellFolder *,OFFSET<CCacheDir> *,CCacheRoot *,ROOTSCANINFO const *,unsigned short const *,int);
	void _MergeIntoFolderCache(CCacheInstance *,IShellFolder *,CCacheRoot *,OFFSET<CCacheDir> *,ShortcutInfoRootType,unsigned short const *,CDPA<_ITEMID_CHILD,CTContainer_PolicyUnOwned<_ITEMID_CHILD> > *);
	void _SetDerivedAttributes(CCacheShortcut *,void const * const,_ITEMIDLIST_ABSOLUTE const *,ShortcutInfoRootType);
public:
	long ScanFoldersAndCreateNewCache(CAppResolverCacheManager *,unsigned int,ROOTSCANINFO const *,START_MENU_REFRESH_CACHE_FLAGS);
};

class CAppResolverCacheManager
{
	long _EnsureRegisteredForDiskNotifications();
	long _GeneratePinToStartOnDiscoveryKey(unsigned short const *,unsigned short const *,unsigned short * *);
	long _InitializeMemoryMappedCache();
	long _PauseResumeDiskNotifications(bool);
	static CAppResolverCacheManager::ROOTFOLDERINFO const * const c_rgrfi;
	static int _s_UANotifyCB(void *,_GUID const *,unsigned short const *,tagUAEVENT);
	static void _s_CortanaFireJumpListChangeTimeCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	void CortanaOnJumpListChangeNotify(unsigned short const *);
	void _MarkCacheNeedsUpdate();
	void _UnregisterNotifyAll();
public:
	CAppResolverCacheManager();
	CCacheInstance * GetCacheInstance();
	ROOT_REFRESH_STATE GetRootRefreshState(int);
	long AttachARNotify(IAppResolverNotify *);
	long EnsureTiledataLayerAdapter();
	long GetNewCache(_GUID const &,IMemoryMappedCache * *,IMemoryMappedHeap * *);
	long GetTDLReconciler(ITileDataLayerAppResolverReconciler * *);
	long Initialize();
	long PromoteAppsToTopOfFrequentList(unsigned short const * *,unsigned int);
	long RefreshCache(START_MENU_REFRESH_CACHE_FLAGS);
	long ResumeNotifications();
	long SetPinToStartOnDiscovery(unsigned short const *,unsigned short const *);
	long UnregisterForNotifications();
	long UpdateCache(START_MENU_REFRESH_CACHE_FLAGS);
	static long GenerateAppIDWorker(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
	virtual long CanPinUserPinnedItem(unsigned short const *,unsigned short const *);
	virtual long GetDataLayerInstance(IAppResolverDataLayer * *);
	virtual long GetEnumFilter(IAppResolverEnumFilter * *);
	virtual ~CAppResolverCacheManager();
	void OnChangeNotify(unsigned int,long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	void OnItemRelevanceChanged(unsigned short const *);
	void OnJumpListChangeNotify(unsigned short const *);
	void OnRelevanceChanged();
	void RegisterShortcutHotKeys();
};

struct CAppResolverDataLayer
{
	virtual long FindLauncherShortcutForAppID(unsigned short const *,IShortcutInfo * *);
	virtual long FindMatchingShortcut(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,FIND_MATCHING_SHORTCUT_OPTIONS);
	virtual long GetAppInfoEnumerator(IAppInfoEnumerator * *);
	virtual long GetAppInforForAppID(unsigned short const *,IAppInfo * *);
	virtual long GetShortcutForAppPath(unsigned short const *,IShortcutInfo * *);
	virtual long GetShortcutInfoEnumerator(ShortcutInfoRootType,IShortcutInfoEnumerator * *);
};

class CAppResolverExclusionFilter
{
	long _InitExcludeAppIDList();
	long _InitExcludeExeList();
	static long s_AppendString(CDPALocalMem<unsigned short> *,unsigned short const *);
	static long s_InitStringList(HKEY__ *,unsigned short const *,CDPALocalMem<unsigned short> *);
public:
	virtual IAppResolverExclusionFilter::ExeExclusionType CheckExeExclusion(unsigned short const *,bool);
	virtual bool IsAppIDBlockedFromTaskbarPinning(unsigned short const *);
	virtual bool IsExcludedDirectory(unsigned short const *);
};

class CAppResolverLinkParse
{
	long _InitDesktopTileColorFromShellItem(IShellItem *);
	static bool _IsImmersiveApplication(IPropertyStore *);
	static long _GetDarwinID(IShellLinkW *,unsigned short * *);
	static long _GetStringProperty(IPropertyStore *,_tagpropertykey const &,unsigned short * *);
	static long _GetTargetPath(IShellLinkW *,unsigned long,unsigned short * *,unsigned long *);
	static long _GetThumbnailCacheID(IShellItem *,unsigned __int64 *);
	static long _GetVisualElementProperties(unsigned short const *,unsigned short const *,IPropertyStore * *);
	static unsigned int _GetInstalledBy(IPropertyStore *);
	static unsigned int _GetStartPinOption(IPropertyStore *);
public:
	long InitShortcutDataFromLink(IShellLinkW *,IShellItem *);
	long InitTargetInfoFromLink(IShellLinkW *,IShellItem *,bool);
	long SetSortName(unsigned short const *);
	long SetSuiteSortName(unsigned short const *);
	static long EncodePath(unsigned short const *,unsigned short * *);
	static long ExpandPath(unsigned short const *,unsigned short * *);
	static long GetAppPathFromLink(IShellLinkW *,IShellItem *,unsigned long,unsigned short * *,unsigned short * *,unsigned long *);
	static long GetInstallPathFromDarwinID(unsigned short const *,unsigned short * *);
};

class CAppResolverNotifyWnd
{
	struct RegisterArgs
	{
		static long Create(unsigned int,_ITEMIDLIST_ABSOLUTE const *,bool,RegisterArgs * *);
		static void Destroy(RegisterArgs *);
	};

	__int64 _WndProc(unsigned int,unsigned __int64,__int64);
	long _OnAssocChangeNotify(void *,unsigned long);
	long _RegisterAssocChangeNotification();
	long _RegisterDiskEventNotification(CAppResolverNotifyWnd::RegisterArgs *);
	long _UnregisterDiskEventNotification(unsigned int);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _HandleTimer(unsigned __int64);
public:
	long Initialize(CAppResolverCacheManager *);
	long RegisterDiskEventNotification(_GUID const &,unsigned long,bool,unsigned int *);
	long RegisterDiskEventNotification(_ITEMIDLIST_ABSOLUTE const *,bool,unsigned int *);
	long ScheduleDelayedRefreshCache(START_MENU_REFRESH_CACHE_FLAGS,unsigned long);
	void CancelDelayedRefreshCache(START_MENU_REFRESH_CACHE_FLAGS);
	void Destroy();
	void PerformRegistrationsOnMainThread();
};

class CAppSuggestedLocationsFolder
{
	long _AddNameToPropertyStore(_ITEMIDLIST_ABSOLUTE const *,IPropertyStore *);
	long _CreateAppPlaceIDList(_ITEMIDLIST_ABSOLUTE const *,tagPROPVARIANT const &,unsigned int,_ITEMID_CHILD * *);
	long _CreateFolderForItem(_ITEMID_CHILD const *,_GUID const &,void * *,_ITEMID_CHILD * *);
	long _CreateFolderIDListForItem(_ITEMID_CHILD const *,_ITEMIDLIST_ABSOLUTE * *);
	long _CreateProbeIDList(_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD * *);
	long _CreatePropertyStoreOnIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	virtual long v_InternalQueryInterface(_GUID const &,void * *);
	virtual ~CAppSuggestedLocationsFolder();
public:
	CAppSuggestedLocationsFolder();
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetNavigationOptions(NAVIGATIONOPTIONS *);
	virtual long GetRealLocations(IShellItemArray * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAppSuggestedLocationsFolderEnum
{
	int _IsItemInDSA(IShellItem *);
	long _ConvertAndAddItems(IEnumUnknown *,unsigned int *);
	long _Init();
	long _InsertItemIntoDSA(_ITEMIDLIST_ABSOLUTE const *,tagPROPVARIANT const &,unsigned int *,int);
	static int s_DestroyDPFEITEM(CAppSuggestedLocationsFolderEnum::CPFEITEM *,void *);
public:
	CAppSuggestedLocationsFolderEnum(CAppSuggestedLocationsFolder *);
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAppSuggestedLocationsIconHandler
{
	long _EnsureDelegate();
	virtual long _ExtractW(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long _GetIconLocationW(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual ~CAppSuggestedLocationsIconHandler();
};

class CAppletAndTaskEnum
{
	CControlPanelItem * GetApplet(int);
	CControlPanelItem const * _GetAppletFromTask(CONTROLPANELTASK const *);
	CONTROLPANELTASK * GetShowableTask(int);
	long _FilterAndSortAppletsAndTasks();
	long _NextSearchResult(_ITEMID_CHILD * *);
	long _NextTask(_ITEMID_CHILD * *);
	static int s_DestroySearchResultAppletCB(CAppletAndTaskEnum::SEARCHRESULTAPPLET *,void *);
	static int s_SortAppletsInSearchResultsRank(CAppletAndTaskEnum::SEARCHRESULTAPPLET const *,CAppletAndTaskEnum::SEARCHRESULTAPPLET const *,__int64);
	void _AddRankedAppletsToResultList(CDSA<CAppletAndTaskEnum::SEARCHRESULTAPPLET> *);
	void _AddRankedTasksToResultList(CDSA<CAppletAndTaskEnum::SEARCHRESULTAPPLET> *,TASKMATCH);
public:
	long Init(unsigned long,unsigned short const *,ICondition *);
	static long CreateInstance(unsigned long,unsigned short const *,ICondition *,_GUID const &,void * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
};

class CApplicationAssociationRegistration
{
	long _CheckAssociationsForType(HKEY__ *,ASSOCIATIONTYPE,ASSOCIATIONLEVEL,int *);
	long _CompareUsingCLSID(unsigned short const *,unsigned short const *,int *);
	long _CompareUsingHandlerExes(unsigned short const *,unsigned short const *,int *);
	long _CompareUsingShellOpenCommand(unsigned short const *,unsigned short const *,int *);
	long _QueryAppIsDefault(unsigned short const *,ASSOCIATIONTYPE,ASSOCIATIONLEVEL,unsigned short const *,int *);
	long _QueryAppIsDefaultAll(ASSOCIATIONLEVEL,unsigned short const *,int *);
	long _SetAppAsDefault(unsigned short const *,unsigned short const *,ASSOCIATIONTYPE);
	long _SetAppAsDefaultAll(unsigned short const *,bool);
public:
	static long CreateInstance(_GUID const &,void * *);
	virtual long ApplyUserAssociations(unsigned short const *);
	virtual long ClearUserAssociations();
	virtual long ExportUserAssociations(unsigned short const *);
	virtual long GetDefaultBrowserInfo(BROWSER_INFO_TYPE,unsigned short * *);
	virtual long IsBrowserAssociation(unsigned short const *,int *);
	virtual long QueryCurrentDefault(unsigned short const *,ASSOCIATIONTYPE,ASSOCIATIONLEVEL,unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RestoreDefaultBrowserContractRegistration();
	virtual long UpdateProtocolCapabilityCache(unsigned short const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CApplicationTileInformation
{
	long _CopyFlags(CPropertyStoreHelper const &,CPropertyStoreHelper &,unsigned long);
	long _EnsureAppUserModelId();
	long _EnsureValidDefaultProperties(CPropertyStoreHelper &);
	long _GetPathToCommit(GET_SHORTCUT_PATH_FLAGS,unsigned short * *);
	long _InitializeWithPropertyStore(IPropertyStore *);
	long _PersistToStream(IUnknown *,IStream *);
	long _SerializeAppInfo(IStream *,CApplicationTileInformation::SERIALIZE_INFO_TYPE);
	virtual ~CApplicationTileInformation();
public:
	CApplicationTileInformation();
	virtual long Commit();
	virtual long DidCommitChanges();
	virtual long DoesApplicationIdMatch(unsigned short const *);
	virtual long GetApplicationDisplayName(int,unsigned short * *);
	virtual long GetApplicationId(unsigned short * *);
	virtual long GetClassID(_GUID *);
	virtual long GetLastError(TILE_INSTALLATION_ERROR_INFO *,unsigned short * *);
	virtual long GetMinWidth(APPLICATION_VIEW_MIN_WIDTH *);
	virtual long GetOldPropertyStore(IPropertyStore * *);
	virtual long GetPackageRelativeApplicationId(unsigned short * *);
	virtual long GetPropertyStore(IPropertyStore * *);
	virtual long GetShortcutPath(unsigned short * *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetType(APPINFO_TYPE *);
	virtual long InitializePreinstallTile(unsigned short const *,IPropertyStore *,int);
	virtual long InitializeSecondaryTile(IPropertyStore *);
	virtual long InitializeSecondaryTilesInstallation(IPropertyStore *,SECONDARY_TILES_COMMIT_TYPE);
	virtual long InitializeWithFlags(unsigned short const *,int,unsigned short const *,unsigned long,unsigned long);
	virtual long InitializeWithPackageInformation(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int);
	virtual long InitializeWithPropertyStore(IPropertyStore *);
	virtual long IsDirty();
	virtual long Load(IStream *);
	virtual long Revert();
	virtual long Save(IStream *,int);
	virtual long SetBackgroundTaskExtensionsList(IXMLDOMNodeList *);
	virtual long SetInUpdate(IApplicationTileInformation *);
	virtual long SetTestFlags(unsigned long);
	virtual long SetTileFolder(ICachedFolderPath *);
	virtual long VerifyInformation();
	virtual void SetMinWidth(APPLICATION_VIEW_MIN_WIDTH);
};

struct CApplicationUsage
{
	CApplicationUsage();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_LaunchCount(unsigned int *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CApplicationUsageProvider
{
	CApplicationUsageProvider();
	static TrustLevel InternalGetTrustLevelStatic();
	static unsigned short const * InternalGetRuntimeClassNameStatic();
	virtual long ActivateInstance(IInspectable * *);
	virtual long GetApplicationUsage(HSTRING__ *,Windows::Internal::ApplicationDefaults::IApplicationUsage * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CApplyDateChange
{
	virtual long ApplyToPropVariant(tagPROPVARIANT const &,tagPROPVARIANT *);
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPropertyKey(_tagpropertykey const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CApplyPropertiesUndo
{
	CApplyPropertiesUndo();
	void AppliedPropertyToItem(IShellItem *,_tagpropertykey const &,tagPROPVARIANT const &,tagPROPVARIANT const &);
};

struct CApplyPropertiesUndoUnit
{
	CApplyPropertiesUndoUnit();
	long SetUndoInfo(IShellItem *,_tagpropertykey const &,tagPROPVARIANT const &,tagPROPVARIANT const &,int);
	virtual long Do(IOleUndoManager *);
	virtual long _GetItemNameForUndo(unsigned short * *);
};

class CAssocApplicationElement
{
protected:
	virtual bool _UseEnumForDefaultVerb();
	virtual long _InitSource();
	virtual unsigned int _GetQueryKeyVal(QUERYKEYVAL const * *);
	void _CacheAppDisplayInfo();
public:
	virtual bool IsAppSource();
	virtual long GetClassID(_GUID *);
	virtual long QueryObject(ASSOCQUERY,unsigned short const *,_GUID const &,void * *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
	virtual long QueryStringNoDelegate(ASSOCQUERY,unsigned short const *,unsigned short * *);
};

class CAssocArray
{
	long _FirstElement(CAssocArray::FIRSTELEM,IAssociationElement * *);
	long _GetVerbElement(unsigned short const *,IAssociationElement * *,IAssociationElement * *);
	long _QueryAllElements<<lambda_0ad978ee0b657b29c9332a702085a2f5> >(ASSOCQUERY,unsigned short const *,<lambda_0ad978ee0b657b29c9332a702085a2f5> const &);
	long _QueryAllElements<<lambda_3b9cd9844cf1772c3628865433912c6e> >(ASSOCQUERY,unsigned short const *,<lambda_3b9cd9844cf1772c3628865433912c6e> const &);
	long _QueryAllElements<<lambda_3c0cc49c364b7e5ba84fde5d41b8c04c> >(ASSOCQUERY,unsigned short const *,<lambda_3c0cc49c364b7e5ba84fde5d41b8c04c> const &);
	long _QueryAllElements<<lambda_91cb8ba7b024f61bcd028817ce897531> >(ASSOCQUERY,unsigned short const *,<lambda_91cb8ba7b024f61bcd028817ce897531> const &);
	long _QueryAllElements<<lambda_b5ad21445389323fc60cd5fdceb4cd75> >(ASSOCQUERY,unsigned short const *,<lambda_b5ad21445389323fc60cd5fdceb4cd75> const &);
	long _QueryAllElements<<lambda_fe40486d7f4f7e13003cd468c70a4a51> >(ASSOCQUERY,unsigned short const *,<lambda_fe40486d7f4f7e13003cd468c70a4a51> const &);
	void _Reset();
	void _SetCachedVerbElement(unsigned short const *,IAssociationElement *,IAssociationElement *);
public:
	virtual long Append(_GUID const &,unsigned short const *);
	virtual long GetData(unsigned long,ASSOCDATA,unsigned short const *,void *,unsigned long *);
	virtual long GetEnum(unsigned long,ASSOCENUM,unsigned short const *,_GUID const &,void * *);
	virtual long GetKey(unsigned long,ASSOCKEY,unsigned short const *,HKEY__ * *);
	virtual long GetList(IAssociationList * *);
	virtual long GetString(unsigned long,ASSOCSTR,unsigned short const *,unsigned short *,unsigned long *);
	virtual long Init(unsigned long,unsigned short const *,HKEY__ *,HWND__ *);
	virtual long InsertAtFront(_GUID const &,unsigned short const *);
	virtual long QueryDirect(ASSOCQUERY,unsigned short const *,_FLAGGED_BYTE_BLOB * *);
	virtual long QueryDword(ASSOCQUERY,unsigned short const *,unsigned long *);
	virtual long QueryExists(ASSOCQUERY,unsigned short const *);
	virtual long QueryGuid(ASSOCQUERY,unsigned short const *,_GUID *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(ASSOCQUERY,unsigned short const *,_GUID const &,void * *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
	virtual long SetList(IAssociationList *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAssocClientElement
{
	int _CreateRepairedNetscapeRegistration(HKEY__ *);
	long _FixNetscapeRegistration();
	long _InitSourceFromKey(HKEY__ *,unsigned short const *,unsigned long);
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
};

class CAssocClsidElement
{
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
};

class CAssocElement
{
protected:
	long _QueryKeyValAny<<lambda_347c1181ff43cecf5cde952d3ad84fa4> >(QUERYKEYVAL const *,unsigned int,IQuerySource *,ASSOCQUERY,unsigned short const *,<lambda_347c1181ff43cecf5cde952d3ad84fa4> const &);
	long _QueryKeyValAny<<lambda_3e47c54906c6f38798437d2786c5d88c> >(QUERYKEYVAL const *,unsigned int,IQuerySource *,ASSOCQUERY,unsigned short const *,<lambda_3e47c54906c6f38798437d2786c5d88c> const &);
	long _QueryKeyValAny<<lambda_6ca87cf0d7707ba615fb84f743c4b562> >(QUERYKEYVAL const *,unsigned int,IQuerySource *,ASSOCQUERY,unsigned short const *,<lambda_6ca87cf0d7707ba615fb84f743c4b562> const &);
	long _QueryKeyValAny<<lambda_957ee986c2cad831189149840a71b26f> >(QUERYKEYVAL const *,unsigned int,IQuerySource *,ASSOCQUERY,unsigned short const *,<lambda_957ee986c2cad831189149840a71b26f> const &);
	long _QueryKeyValAny<<lambda_bcd305fd083f4aeb8096fbc5ca79e32e> >(QUERYKEYVAL const *,unsigned int,IQuerySource *,ASSOCQUERY,unsigned short const *,<lambda_bcd305fd083f4aeb8096fbc5ca79e32e> const &);
	long _QuerySourceAny<<lambda_347c1181ff43cecf5cde952d3ad84fa4> >(ASSOCQUERY,ASSOCQUERY,unsigned short const *,<lambda_347c1181ff43cecf5cde952d3ad84fa4> const &);
	long _QuerySourceAny<<lambda_4423ceda96ae14e8b81d58756a84f2af> >(ASSOCQUERY,ASSOCQUERY,unsigned short const *,<lambda_4423ceda96ae14e8b81d58756a84f2af> const &);
	long _QuerySourceAny<<lambda_bcd305fd083f4aeb8096fbc5ca79e32e> >(ASSOCQUERY,ASSOCQUERY,unsigned short const *,<lambda_bcd305fd083f4aeb8096fbc5ca79e32e> const &);
	long _QuerySourceAny<<lambda_dfb37409bb15dfff50d1c0491f1e76a6> >(ASSOCQUERY,ASSOCQUERY,unsigned short const *,<lambda_dfb37409bb15dfff50d1c0491f1e76a6> const &);
	virtual unsigned int _GetQueryKeyVal(QUERYKEYVAL const * *);
public:
	virtual long GetSource(_GUID const &,void * *);
	virtual long QueryDirect(ASSOCQUERY,unsigned short const *,_FLAGGED_BYTE_BLOB * *);
	virtual long QueryDword(ASSOCQUERY,unsigned short const *,unsigned long *);
	virtual long QueryExists(ASSOCQUERY,unsigned short const *);
	virtual long QueryGuid(ASSOCQUERY,unsigned short const *,_GUID *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(ASSOCQUERY,unsigned short const *,_GUID const &,void * *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
	virtual long SetSource(IQuerySource *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAssocExtensionElement
{
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
};

class CAssocFolderElement
{
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
};

class CAssocHandler
{
	long _EnsureAppPath();
	static long s_GetPromptCountAndKey(unsigned short const *,unsigned short const *,unsigned long *,HKEY__ * *,unsigned short *,unsigned long);
	virtual ~CAssocHandler();
public:
	CAssocHandler();
	bool IsBrowser();
	int Init(AHTYPE,unsigned short const *,unsigned short const *);
	int IsRestricted();
	long IsRecommendedNew(bool);
	static long s_ClearPromptCountForDefault(unsigned short const *);
	static void s_AdjustPromptCount(unsigned short const *,unsigned short const *,CAssocHandler::PromptAdjustment,ASSOC_FILTER);
	virtual int IsRecentlyInstalled();
	virtual long CreateInvoker(IDataObject *,IAssocHandlerInvoker * *);
	virtual long GetAppID(unsigned short * *);
	virtual long GetCompany(unsigned short * *);
	virtual long GetIconLocation(unsigned short * *,int *);
	virtual long GetInternalProgID(unsigned short * *);
	virtual long GetName(unsigned short * *);
	virtual long GetProgID(unsigned short * *);
	virtual long GetUIName(unsigned short * *);
	virtual long Invoke(IDataObject *);
	virtual long IsRecommended();
	virtual long MakeDefault(unsigned short const *);
	virtual long MakeDefaultPriv(unsigned char);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetAppID(unsigned short const *);
	virtual long SetProgID(unsigned short const *);
	virtual long UpdatePromptCount(ASSOCHANDLER_PROMPTUPDATE_BEHAVIOR);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAssocHandlerInvoker
{
	CAssocHandlerInvoker(IContextMenu *);
	long _CheckSelectionSupport();
	virtual ~CAssocHandlerInvoker();
	void _ClearContextMenu();
public:
	static long Create(IContextMenu *,IAssocHandlerInvoker * *);
	virtual long Invoke();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long SupportsSelection();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAssocKindElement
{
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
};

class CAssocList
{
	struct CAssocListEnum
	{
		virtual long GetCurrent(_GUID const &,void * *);
		virtual long MoveNext();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	long _CreateElement(ASSOCIATIONELEMENT const &,unsigned long,IAssociationElement * *);
public:
	long SetElements(ASSOCIATIONELEMENT const *,unsigned long,unsigned long);
	virtual long Append(_GUID const &,unsigned short const *);
	virtual long EnumerateElements(IEnumerateAssociationElements * *);
	virtual long GetStorageProviderData(STORAGE_PROVIDER_DATA *);
	virtual long InsertAtFront(_GUID const &,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetStorageProviderData(STORAGE_PROVIDER_DATA *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAssocListBase
{
	struct CAssocListBaseEnum
	{
		virtual long GetCurrent(_GUID const &,void * *);
		virtual long MoveNext();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	long _EnsurePopulatedAndOrdered();
	long _GetOrCreate(unsigned int,_GUID const &,void * *);
protected:
	virtual ~CAssocListBase();
public:
	long GetAssoc(unsigned int,_GUID const &,void * *);
	virtual long Append(_GUID const &,unsigned short const *);
	virtual long EnumerateElements(IEnumerateAssociationElements * *);
	virtual long InsertAtFront(_GUID const &,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAssocLocationElement
{
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
};

class CAssocPerceivedElement
{
protected:
	virtual long GetSource(_GUID const &,void * *);
	virtual long _GetVerbDelegate(unsigned short const *,IAssociationElement * *);
	virtual long _InitSource();
	virtual unsigned int _GetQueryKeyVal(QUERYKEYVAL const * *);
public:
	virtual long GetClassID(_GUID *);
};

class CAssocProgidElement
{
protected:
	HKEY__ * _OpenProgIdWithCurVerRedirect();
	bool _IsOnLocalMachineOnlyList(unsigned short const *);
	long MapUrlToUserDefault(unsigned short * *);
	long _HandleMissingProtocolIdentifier();
	long _InitProgid(unsigned short const *,bool);
	long _MapExtensionToUserDefault();
	long _MapProgIdToUserDefault();
	long _QueryStringFallback(ASSOCQUERY,unsigned short const *,unsigned short * *);
	unsigned short const * _GetUserChoice(CUserChoice &,CProgidArray &,bool);
	virtual bool _UseEnumForDefaultVerb();
	virtual long GetClassID(_GUID *);
	virtual long QueryExists(ASSOCQUERY,unsigned short const *);
	virtual long QueryGuid(ASSOCQUERY,unsigned short const *,_GUID *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
	virtual long _InitSource();
	virtual ~CAssocProgidElement();
public:
	CAssocProgidElement(PROGID_ELEMENT_OPTIONS);
	virtual bool IsProgIdElement();
	virtual long QueryStringNoDelegate(ASSOCQUERY,unsigned short const *,unsigned short * *);
};

class CAssocShellElement
{
protected:
	int _IsNeverDefault(IQuerySource *);
	long SetInit(unsigned short const *);
	long _DefaultVerbSource(IQuerySource * *,unsigned short * *);
	long _QueryVerb<<lambda_282b8c5045a55a0adb39be012b05b2c3> >(ASSOCQUERY,unsigned short const *,<lambda_282b8c5045a55a0adb39be012b05b2c3> const &);
	long _QueryVerb<<lambda_4e95f5e272ec5bc07ee7b95fcd2a9fe0> >(ASSOCQUERY,unsigned short const *,<lambda_4e95f5e272ec5bc07ee7b95fcd2a9fe0> const &);
	long _QueryVerb<<lambda_766a627eb7c3054179e5d336227a9546> >(ASSOCQUERY,unsigned short const *,<lambda_766a627eb7c3054179e5d336227a9546> const &);
	long _QueryVerb<<lambda_c19ee050c61391c6cd9bad1369cf5561> >(ASSOCQUERY,unsigned short const *,<lambda_c19ee050c61391c6cd9bad1369cf5561> const &);
	long _QueryVerb<<lambda_f136026159824ca4c94e5fb7ba11b601> >(ASSOCQUERY,unsigned short const *,<lambda_f136026159824ca4c94e5fb7ba11b601> const &);
	virtual bool _UseEnumForDefaultVerb();
	virtual long _GetVerbDelegate(unsigned short const *,IAssociationElement * *);
	virtual long _InitSource();
	virtual unsigned int _GetQueryKeyVal(QUERYKEYVAL const * *);
	virtual ~CAssocShellElement();
public:
	virtual bool IsAppSource();
	virtual bool IsProgIdElement();
	virtual long GetClassID(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetString(unsigned short * *);
	virtual long QueryDirect(ASSOCQUERY,unsigned short const *,_FLAGGED_BYTE_BLOB * *);
	virtual long QueryDword(ASSOCQUERY,unsigned short const *,unsigned long *);
	virtual long QueryExists(ASSOCQUERY,unsigned short const *);
	virtual long QueryGuid(ASSOCQUERY,unsigned short const *,_GUID *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(ASSOCQUERY,unsigned short const *,_GUID const &,void * *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
	virtual long QueryStringNoDelegate(ASSOCQUERY,unsigned short const *,unsigned short * *);
	virtual long SetFlags(unsigned long);
	virtual long SetKey(unsigned short const *);
	virtual long SetString(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAssocShellVerbElement
{
	long _GetAppDelegate(_GUID const &,void * *);
	long _GetExecute(_GUID const &,void * *);
	long _GetHandlerClsid(unsigned short * *);
	long _GetHandlerModule(unsigned short * *);
	long _GetSupportedProtocols(unsigned short * *);
	virtual unsigned int _GetQueryKeyVal(QUERYKEYVAL const * *);
public:
	CAssocShellVerbElement(CAssocShellElement *,IQuerySource *,HKEY__ *,unsigned short const *);
	virtual long QueryExists(ASSOCQUERY,unsigned short const *);
	virtual long QueryObject(ASSOCQUERY,unsigned short const *,_GUID const &,void * *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
};

class CAssocStarElement
{
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
	virtual long QueryString(ASSOCQUERY,unsigned short const *,unsigned short * *);
};

struct CAssocSyncRootShellElement
{
	virtual long GetClassID(_GUID *);
	virtual long GetStorageProviderData(STORAGE_PROVIDER_DATA *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetStorageProviderData(STORAGE_PROVIDER_DATA *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAssocSystemExtElement
{
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
};

class CAssocUnknownProgidElement
{
protected:
	virtual long _InitSource();
public:
	virtual long GetClassID(_GUID *);
};

class CAuth
{
	long _Init();
public:
	long CheckAccess(void *,unsigned long,unsigned long *);
};

struct CAutoColorImageData
{
	long CreateImageColorizationData(CMemoryCachedImage *);
	unsigned int Release();
};

class CAutoColorization
{
	static bool s_MeetsPixelThreshold(CPixelBucket *,unsigned int);
	void _ComputeColorAlgorithm(CPixelBucket * *,unsigned int,unsigned int);
	void _ComputeImageColorizationColor(CMemoryCachedImage * *,unsigned int);
	void _ComputeMultiImageColorStartMenu(CMemoryCachedImage * *,unsigned int);
	void _ConstrainHSB();
	void _ProcessColorBuckets(CCoSimpleArray<CPixelBucket *,4294967294,CSimpleArrayStandardCompareHelper<CPixelBucket *> > const &);
public:
	CAutoColorization();
	long GetImageColorizationColor(unsigned long *,IMMERSIVE_COLOR_PREFERENCE *);
	static bool s_AutoColorEnabled();
	static bool s_IsBrighterBucket(CPixelBucket *,CPixelBucket *,unsigned int);
	static double s_dBrightnessHigh;
	static double s_dBrightnessLow;
	static double s_dHueHigh;
	static double s_dHueLow;
	static double s_dSaturationHigh;
	static double s_dSaturationLow;
	static unsigned int s_uAlphaHigh;
	static unsigned int s_uAlphaLow;
	static unsigned int s_uBuckets;
	static unsigned int s_uGrayThreshold;
	static unsigned int s_uHeight;
	static unsigned int s_uPercentThreshold;
	static unsigned int s_uWidth;
	void UpdateImageColorizationColor(CMemoryCachedImage * *,unsigned int);
};

class CAutoComplete
{
protected:
	__int64 _DropDownWndProc(unsigned int,unsigned __int64,__int64);
	__int64 _EditWndProc(unsigned int,unsigned __int64,__int64);
	__int64 _ListViewWndProc(unsigned int,unsigned __int64,__int64);
	__int64 _OnChar(unsigned __int64,__int64);
	int _AppendNext(int);
	int _AppendPrevious(int);
	int _DrawGrip(HDC__ *,tagRECT const *,int);
	int _DropDownNotify(tagNMHDR *);
	int _GetItem(int,unsigned short *,int,int);
	int _IsAutoAppendEnabled();
	int _IsComboboxDropped();
	int _OnKeyDown(unsigned __int64);
	int _SetQuickCompleteStrings(unsigned short const *,unsigned short const *);
	int _StartSearch(unsigned short const *);
	int _WantToAppendResults();
	long _CommonInit(HWND__ *,unsigned short const *,unsigned short const *);
	static HHOOK__ * s_hhookMouse;
	static HWND__ * s_hwndDropDown;
	static _RTL_SRWLOCK s_srwMouseHookLock;
	static __int64 s_DropDownWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_EditWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_GripperWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_ListViewWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_MouseHook(int,unsigned __int64,__int64);
	static __int64 s_ParentWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static int EditWordBreakProcW(unsigned short *,int,int,int);
	static int _DPACompareSortIndex(void const *,void const *,__int64);
	static int _DPADestroyCallback(void *,void *);
	static int _IsBreakChar(unsigned short);
	static int _IsWhack(unsigned short);
	static void _FreeDPAPtrs(_DPA *);
	unsigned short * _QuickEnter(int);
	virtual ~CAutoComplete();
	void Cleanup();
	void _Append(CACString const &,int);
	void _CleanUpTabletTip(HWND__ *);
	void _CleanUpVisibleStateData();
	void _DrawThemedGrip(HDC__ *,tagRECT const *,void *,int);
	void _DropDownDrawItem(tagDRAWITEMSTRUCT *);
	void _GetEditText();
	void _HideDropDown();
	void _InitTabletTip(HWND__ *);
	void _OnListViewCreate();
	void _OnSearchComplete(SearchResults *,_DPA *);
	void _PasteItemsIfNoText();
	void _PositionDropDown();
	void _RemoveCompletion();
	void _SeeWhatsEnabled();
	void _SetEditText(unsigned short const *);
	void _ShowDropDown();
	void _StartCompletion(int,int);
	void _StopSearch();
	void _SubClassParent(HWND__ *);
	void _UnSubClassParent(HWND__ *);
	void _UpdateCompletion(unsigned short const *,int,int);
	void _UpdateGrip();
	void _UpdateScrollbar();
	void _UpdateText(int,int,unsigned short const *,unsigned short const *);
public:
	CAutoComplete();
	virtual long Clone(IEnumString * *);
	virtual long Enable(int);
	virtual long GetDropDownStatus(unsigned long *,unsigned short * *);
	virtual long GetOptions(unsigned long *);
	virtual long Init(HWND__ *,IUnknown *,unsigned short const *,unsigned short const *);
	virtual long Next(unsigned long,unsigned short * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long ResetEnumerator();
	virtual long SetOptions(unsigned long);
	virtual long SetOwner(IUnknown *);
	virtual long Show(int);
	virtual long Skip(unsigned long);
	virtual long UpdatePendingText(unsigned short *);
	virtual long get_accName(tagVARIANT,unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAutoDestItemsList
{
protected:
	long _AddDestinationList(IAutomaticDestinationList *,DESTLISTTYPE,wistd::function<long (IShellItem2 *,DESTLISTTYPE,bool *)> const &);
	virtual long v_AddItemToDestItemCollection(IShellItem2 *,bool);
	virtual long v_Initialize();
	virtual void v_Clear();
public:
	long CheckForDuplicateItem(IShellItem *);
	long PersistItemsInOrder(IObjectCollection *);
	long Refresh(wistd::function<long (IShellItem2 *,DESTLISTTYPE,bool *)> const &);
};

struct CAutoFont
{
	CAutoFont(DirectUI::Element *,HDC__ *);
};

struct CAutoHandle<void *>
{
	~CAutoHandle<void *>();
};

class CAutoPlayDirect
{
	long _ExecutePathWithSite(unsigned short const *);
public:
	virtual long CancelDirectForVolume();
	virtual long DirectForVolume(unsigned short const *);
	virtual long ProcessFolder(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAutoPlayParams
{
	bool _InitCustomEvent(unsigned short const *,unsigned short const *);
	int _GetPrivateProfileKeyEnumeration(unsigned short const *,unsigned short const *,unsigned short * *);
	int _IsAutoplayAllowed(unsigned long,unsigned long);
	int _IsCurrentDesktopActiveConsole();
	int _IsForegroundAppRequestCD();
	long WaitForMetadataReady(unsigned short const *);
	long _FindKnownCustomEventDeviceFromContainer(unsigned short *,unsigned short *,unsigned __int64);
	long _QueryRunningObject(CMountPoint *,unsigned long,int *);
	long _SaveKnownCustomEventInfo(_GUID const &,unsigned short const *);
	long _ShowCorruptVolumeTaskDialog(CMountPoint *,int *);
	long _Sniff();
	long _SniffPath(unsigned short const *);
	static HWND__ * _hwndDirectHasForeground;
	static bool IsMetadataReady(unsigned short const *);
	static unsigned short * _pszDirectVolume;
	static void MetadataStateCallback(HDEVQUERY__ *,void *,_DEV_QUERY_RESULT_ACTION_DATA const *);
	void _AddAutoplayVerb();
	void _DeleteCustomEventInfoIfExists(_GUID const &);
	void _FoundContent(unsigned long);
	void _ParseCameraIntent(unsigned short const *,unsigned short const *);
	void _ParseIntent(unsigned short const *,unsigned short const *);
	void _SqmChkDsk(unsigned long,unsigned long,unsigned long,unsigned long);
protected:
	virtual ~CAutoPlayParams();
public:
	long DoAutorun();
	long Init(CMountPoint *,unsigned short const *,unsigned long);
	long PromptUser(unsigned long,HWND__ *);
	static long ClearDirectVolume();
	static long SetDirectVolume(unsigned short const *);
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAutoPlaySite
{
	virtual long OnCreating(ICreateProcessInputs *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAutoPlayVerb
{
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAutoWaitCursor
{
	CAutoWaitCursor(IUnknown *);
	~CAutoWaitCursor();
};

class CAutomationCM
{
	static int _DestroyVARIANTARG(tagVARIANT *,void *);
public:
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long InitNew();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long LoadingDataFromRegistry();
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAutoplayContentHandler
{
	long _AddAutorunHandlerToList(CAutoplayHandlerList *,_FILETIME const *);
	long _AddLegacyHandlerToList(CAutoplayHandlerList *,unsigned long,_FILETIME const *);
	long _GetAutoplayHandlerList(int,_FILETIME const *,IAutoplayHandlerList * *);
public:
	static int IndexFromType(unsigned long);
	static long Create(IAutoplayContentHandler * *,unsigned long,unsigned short const *);
	virtual long GetConfigHandlerList(IAutoplayHandlerList * *);
	virtual long GetDefaultHandler(AUTOPLAY_DEFAULT_TYPE,unsigned short const *,unsigned short * *);
	virtual long GetDefaultHandlerLastWriteTime(AUTOPLAY_DEFAULT_TYPE,unsigned short const *,_FILETIME *,unsigned short * *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetID(unsigned short * *);
	virtual long GetIcon(int,HICON__ * *);
	virtual long GetIndex(int *);
	virtual long GetLabel(unsigned short * *);
	virtual long GetNewlyInstalledHandlerList(unsigned short const *,IAutoplayHandlerList * *);
	virtual long GetPromptHandlerList(IAutoplayHandlerList * *);
	virtual long GetSystemDefaultHandler(AUTOPLAY_DEFAULT_TYPE,unsigned short * *);
	virtual long GetTooltip(unsigned short * *);
	virtual long GetType(unsigned long *);
	virtual long Initialize(unsigned long,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDefaultHandler(AUTOPLAY_DEFAULT_TYPE,unsigned short const *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAutoplayDeviceData
{
	virtual ~CAutoplayDeviceData();
public:
	long GetUI(IAutoPlayUI * *);
	long Initialize(unsigned short const *,_GUID const &);
	long SetUI(IAutoPlayUI *);
	unsigned long Release();
};

class CAutoplayDeviceDataManager
{
	long _EnsureDPA();
	long _RemoveDeviceData(unsigned short const *);
public:
	CAutoplayDeviceDataManager();
	long AddDeviceData(unsigned short const *,_GUID const &,CAutoplayDeviceData * *);
	long GetDeviceData(unsigned short const *,CAutoplayDeviceData * *);
	long GetOrAddDeviceData(unsigned short const *,_GUID const &,CAutoplayDeviceData * *);
	virtual long RemoveUI(unsigned short const *);
	virtual ~CAutoplayDeviceDataManager();
};

class CAutoplayDeviceEventHandlerInfo
{
protected:
	long _RepackageEventHandlerListAsDPA(CDPACoTaskMem<unsigned short> &,unsigned short const * *,unsigned long,int);
public:
	virtual long EnumHandlersForDevice(_GUID,unsigned short const * *,unsigned long,unsigned short const * *,unsigned long,IAutoplayHandlerList * *);
	virtual long GetContainerDefaultHandler(_GUID,IAutoplayHandler * *);
	virtual long GetHandler(_GUID,unsigned short const *,unsigned short const *,IAutoplayHandler * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetContainerDefaultHandler(_GUID,IAutoplayHandler *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAutoplayDeviceHandler
{
	long _GetAppsInfoFromMetadata(unsigned short const *,unsigned short * *,unsigned short * *);
	long _GetAutoplayHandlerList(int,_FILETIME const *,IAutoplayHandlerList * *);
	long _GetInterfaceGUID(_GUID *);
	long _LoadLegacyHandler(unsigned short const *);
	long _TryInitializeCustomEvent(unsigned short const *);
	~CAutoplayDeviceHandler();
public:
	CAutoplayDeviceHandler();
	long SetInclusionExclusionLists(unsigned short const * const *,unsigned long,unsigned short const * const *,unsigned long);
	static long Create(IAutoplayDeviceHandler * *,unsigned short const *);
	virtual long GetConfigHandlerList(IAutoplayHandlerList * *);
	virtual long GetDefaultHandler(AUTOPLAY_DEFAULT_TYPE,unsigned short * *);
	virtual long GetDefaultHandlerLastWriteTime(AUTOPLAY_DEFAULT_TYPE,_FILETIME *,unsigned short * *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetDevicePath(unsigned short * *);
	virtual long GetDeviceStageHandlerList(IAutoplayHandlerList * *);
	virtual long GetID(unsigned short * *);
	virtual long GetIcon(int,HICON__ * *);
	virtual long GetIconLocation(unsigned short * *);
	virtual long GetLabel(unsigned short * *);
	virtual long GetNewlyInstalledHandlerList(IAutoplayHandlerList * *);
	virtual long GetPromptHandlerList(IAutoplayHandlerList * *);
	virtual long GetTooltip(unsigned short * *);
	virtual long Initialize(unsigned short const *);
	virtual long InitializeByID(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SaveKnownDeviceInfo();
	virtual long SetDefaultHandler(AUTOPLAY_DEFAULT_TYPE,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAutoplayHandler
{
	long _GetHandlerQuerySource(IQuerySource * *,HKEY__ * *);
	long _GetHandlerQuerySourceEx(HKEY__ *,IQuerySource * *);
	long _GetShellRegKey(unsigned short const *,unsigned long,HKEY__ * *);
	long _InitAction(IQuerySource *);
	long _InitAutorunAction(CMtPtLocal *,unsigned short const *);
	long _InitAutorunIconLocation(CMtPtLocal *);
	long _InitAutorunProvider(unsigned short const *);
	long _InitClsidAndInitCmdLine(IQuerySource *);
	long _InitImmersive(IQuerySource *);
	long _InitImmersiveProperties(IQuerySource *);
	long _InitInvokeProgIdAndVerb(IQuerySource *);
	long _InitProvider(IQuerySource *);
	void _Cleanup();
public:
	CAutoplayHandler();
	static unsigned long ActivateForDeviceAutoPlayThreadProc(void *);
	static unsigned long InvokeVerbThreadProc(void *);
	virtual long CompareCommand(unsigned short const *,int *);
	virtual long CompareID(unsigned short const *,int *);
	virtual long GetAction(unsigned short * *);
	virtual long GetActionAndProvider(unsigned short * *);
	virtual long GetAppUserModelId(unsigned short * *);
	virtual long GetCLSID(_GUID *);
	virtual long GetCommand(unsigned short * *);
	virtual long GetEventHandler(unsigned short * *);
	virtual long GetHandlerTypeInformation(int *,int *);
	virtual long GetID(unsigned short * *);
	virtual long GetIconLocation(unsigned short * *);
	virtual long GetInitCmdLine(unsigned short * *);
	virtual long GetLastWriteTime(_FILETIME *);
	virtual long GetPackageId(unsigned short * *);
	virtual long GetProvider(unsigned short * *);
	virtual long Initialize(unsigned short const *);
	virtual long InitializeAutorun(unsigned short const *,unsigned long);
	virtual long InitializeDynamic(unsigned short const *,unsigned short const *,unsigned long);
	virtual long InitializeLegacy(unsigned long);
	virtual long InitializeStatic(unsigned short const *);
	virtual long Invoke(HWND__ *);
	virtual long InvokeVerb(unsigned short const *,unsigned long,int);
	virtual long IsDuplicateImmersive(IAutoplayHandler *,int *);
	virtual long QueryDynamicInfo(unsigned short const *,unsigned long,unsigned short * *,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetAction(unsigned short const *);
	virtual long SetContainerGuid(_GUID const &);
	virtual long SetDevicePath(unsigned short const *);
	virtual long SetDisplayObjectID(unsigned short const *);
	virtual long SetIconLocation(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAutoplayHandlerList
{
	long Initialize();
	long IsDuplicateCommand(unsigned short const *,int *);
	virtual long Add(IAutoplayHandler *);
	virtual long GetAt(int,IAutoplayHandler * *);
	virtual long GetCount(int *);
	virtual long GetIndex(unsigned short const *,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Remove(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAvailabilityVerbBase
{
protected:
	virtual bool v_EnableCommand(IShellItemArray *,bool);
public:
	virtual long Execute();
};

struct CBSCLocalCopyHelper
{
	CBSCLocalCopyHelper(IBindCtx *,int);
	virtual long Authenticate(HWND__ * *,unsigned short * *,unsigned short * *);
	virtual long GetBindInfo(unsigned long *,_tagBINDINFO *);
	virtual long GetPriority(long *);
	virtual long OnDataAvailable(unsigned long,unsigned long,tagFORMATETC *,tagSTGMEDIUM *);
	virtual long OnLowResource(unsigned long);
	virtual long OnObjectAvailable(_GUID const &,IUnknown *);
	virtual long OnProgress(unsigned long,unsigned long,unsigned long,unsigned short const *);
	virtual long OnStartBinding(unsigned long,IBinding *);
	virtual long OnStopBinding(long,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBackPropSheetPage
{
	__int64 _BackgroundDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	long _CalcSizeForFile(unsigned short const *,_WIN32_FIND_DATAW const *,unsigned long *);
	long _CalcSizeFromDir(unsigned short const *,unsigned long *,int);
	long _DestroyIconDialog();
	long _GetMRUObject(IMruDataList * *);
	long _InitIconDialog(HWND__ *);
	long _Initialize();
	long _LoadTempWallpaperSettings(unsigned short const *);
	long _SetNewWallpaperTile(unsigned long,int);
	static __int64 BackgroundDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
protected:
	int _OnNotify(tagNMHDR *);
	long _GetHardDirThemesDir(unsigned short *,unsigned int);
	long _GetIconPath(_GUID const &,unsigned short const *,int,unsigned short *,unsigned int);
	long _GetKidsThemesDir(unsigned short *,unsigned int);
	long _GetPlus95ThemesDir(unsigned short *,unsigned int);
	long _GetPlus98ThemesDir(unsigned short *,unsigned int);
	long _LoadDesktopOptionsState();
	long _LoadIconState();
	long _LoadState();
	long _SaveDesktopOptionsState();
	long _SaveIconState(tagPropPageOnApply);
	long _SetIconPath(_GUID const &,unsigned short const *,unsigned short const *,int);
	long _SetNewWallpaper(unsigned short const *,int);
	long _StartSizeChecker();
	static unsigned long SizeCheckerThreadProc(void *);
	unsigned long _SizeCheckerThreadProc();
	void _OnInitDialog(HWND__ *);
public:
	CBackPropSheetPage();
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long GetAdvancedDialog(IAdvancedDialog * *);
	virtual long OnApply(tagPropPageOnApply);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(unsigned short const *,tagVARIANT *,IErrorLog *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual long Write(unsigned short const *,tagVARIANT *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CBackPropSheetPage();
};

class CBackupLocationManager
{
	long _CreateKnownFolderPidl(unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
	long _CreateNewShortcut(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,unsigned long,unsigned short const *,unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
	long _DuplicateShortcut(unsigned short const *,unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
	long _PersistLnk(IShellLinkW *,unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
	static long s_CopyLocalizedName(unsigned short const *,unsigned short const *);
	static long s_ShouldCreateNewFile(_ITEMIDLIST_ABSOLUTE const *,unsigned short *,unsigned int);
public:
	long CreateBackupLnk(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
	long GetBackupPath(unsigned short const *,unsigned short * *);
	long IsBackupLink(_ITEMIDLIST_ABSOLUTE const *);
};

class CBandProxy
{
	long _GetBrowser(_GUID const &,void * *);
	long _MakeBrowserVisible(IUnknown *);
public:
	virtual long CreateNewWindow(IUnknown * *);
	virtual long GetBrowserWindow(IUnknown * *);
	virtual long IsConnected();
	virtual long NavigateToPIDL(_ITEMIDLIST_ABSOLUTE const *,tagVARIANT *);
	virtual long NavigateToURL(unsigned short const *,tagVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBarrierPage
{
	long _ConnectToBrowser();
protected:
	virtual int _GetDetailsResourceId();
	virtual void _OnNavigate();
	virtual void _SetCustomText(unsigned short const *);
	virtual ~CBarrierPage();
	void _SetElementText(DirectUI::Element *,int,unsigned short const *);
public:
	CBarrierPage();
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OptionallyTakeInitialFocus(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBaseBar
{
	void _CreateDeskBarWindow();
	void _RegisterDeskBarClass();
protected:
	int _CheckForwardWinEvent(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual __int64 _OnCommand(unsigned int,unsigned __int64,__int64);
	virtual __int64 _OnNotify(unsigned int,unsigned __int64,__int64);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual long CloseDW(unsigned long);
	virtual long ShowDW(int);
	virtual unsigned long _GetClassStyle();
	virtual unsigned long _GetExStyle();
	virtual void _NotifyModeChange(unsigned long);
	virtual void _OnCreate();
	virtual void _OnPostedPosRectChange();
	virtual void _OnSize();
	virtual ~CBaseBar();
public:
	virtual long ContextSensitiveHelp(int);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long GetClient(IUnknown * *);
	virtual long GetWindow(HWND__ * *);
	virtual long HasFocusIO();
	virtual long OnFocusChangeIS(IUnknown *,int);
	virtual long OnPosRectChangeDB(tagRECT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long SetClient(IUnknown *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CBaseBrowserService
{
	virtual long CreateViewWindow(IShellItem *,IShellView *,IShellView *,tagRECT *,HWND__ * *);
	virtual long DisplayParseError(long,unsigned short const *);
	virtual long GetFlags(unsigned long *);
	virtual long GetNavigateState(tagBNSTATE *);
	virtual long GetPalette(HPALETTE__ * *);
	virtual long GetTitle(IShellView *,unsigned short *,unsigned long);
	virtual long IsControlWindowShown(unsigned int,int *);
	virtual long RegisterWindow(int,int);
	virtual long SetAsDefFolderSettings();
	virtual long SetFlags(unsigned long,unsigned long);
	virtual long SetNavigateState(tagBNSTATE);
	virtual long ShowControlWindow(unsigned int,int);
	virtual long UpdateBackForwardState();
	virtual long UpdateWindowList();
};

class CBaseCategorizer
{
	int _CompareIds(unsigned long,unsigned long);
	long _CreateAndAddConditionToArray(tagPROPVARIANT const *,CDPA<ICondition,CTContainer_PolicyUnOwned<ICondition> > *);
	static int s_AddCategoryDescription(unsigned long const *,unsigned long const *,void *);
	static int s_PropVariantClearCB(tagPROPVARIANT *,void *);
protected:
	long AddCategory(unsigned long);
	long AddUnspecifiedValue(tagPROPVARIANT const &);
	long CreateUnspecifiedFilter(ICondition *,IFilterCondition * *);
	static int s_CompareCategories(ICategoryDescription *,ICategoryDescription *,__int64);
	virtual int OnCompareCategory(unsigned long,unsigned long);
	virtual long OnGetCategoryDescription(unsigned long,ICategoryDescription * *);
	virtual long OnGetFilterCondition(unsigned long,IFilterCondition * *);
	virtual ~CBaseCategorizer();
public:
	CBaseCategorizer(_GUID const &,_tagpropertykey const &,HINSTANCE__ *,unsigned int);
	virtual long GetCategories(int,ICategoryDescriptionArray * *);
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetCategory(ICategorizableItem *,_tagpropertykey const &,IShellFolder2 *,SETCAT_FLAGS);
	virtual long SetPropertyKey(_tagpropertykey const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBaseCommandHandler
{
protected:
	virtual ~CBaseCommandHandler();
public:
	long RuntimeClassInitialize(void *,unsigned int,unsigned int);
	virtual long get_Handler(IPopupCommandHandler * *);
	virtual long get_ID(unsigned int *);
	virtual long get_Label(unsigned short * *);
};

class CBaseDlg
{
protected:
	virtual __int64 OnCancel(unsigned short);
	virtual __int64 OnCommand(unsigned __int64,__int64);
	virtual __int64 OnDestroy(unsigned __int64,__int64);
	virtual __int64 OnNotify(unsigned __int64,__int64);
	virtual __int64 OnOK(unsigned short);
	virtual __int64 WndProc(unsigned int,unsigned __int64,__int64);
public:
	static __int64 BaseDlgWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned int BaseDlgPropSheetCallback(HWND__ *,unsigned int,_PROPSHEETPAGEW *);
	unsigned long Release();
};

struct CBaseMutex
{
	long Lock(unsigned long);
};

class CBaseOverlayHandler
{
	long _GetItemStatus(IShellItem *,ItemSyncStatus *);
protected:
	virtual ~CBaseOverlayHandler();
public:
	virtual long GetOverlayInfo(unsigned short *,int,int *,unsigned long *);
	virtual long GetPriority(int *);
	virtual long IsMemberOf(unsigned short const *,unsigned long);
};

class CBaseRPCTimeout
{
	static void s_Callback(void *,unsigned char);
public:
	void Disarm();
};

class CBaseShellFolderViewCB
{
protected:
	long _BrowseObject(_ITEMIDLIST_ABSOLUTE const *,unsigned int);
	virtual ~CBaseShellFolderViewCB();
public:
	CBaseShellFolderViewCB(_ITEMIDLIST_ABSOLUTE const *,long);
	virtual int IsSupported(FOLDER_VIEW_CAPABILITY);
	virtual long GetColumnPropertyList(_GUID const &,void * *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long GetGroupSubsetCount(unsigned int *);
	virtual long GetIconSize(unsigned int *);
	virtual long GetSortColumns(SORTCOLUMN *,unsigned int,unsigned int *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long MessageSFVCB(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CBaseTreeWalkerCB
{
	virtual long EnterFolder(unsigned short const *,TREEWALKERSTATS const *,_WIN32_FIND_DATAW const *);
	virtual long FoundFile(unsigned short const *,TREEWALKERSTATS const *,_WIN32_FIND_DATAW const *,unsigned __int64);
	virtual long HandleError(unsigned short const *,TREEWALKERSTATS const *,long);
	virtual long LeaveFolder(unsigned short const *,TREEWALKERSTATS const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBasicWallpaperWindow
{
	long _Init();
	static int s_MonitorEnumProc(HMONITOR__ *,HDC__ *,tagRECT *,__int64);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _Resize();
public:
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBitBucket
{
	CBitBucket();
	int _MapColIndex(unsigned int *);
	long _AttributesFromIDList(_ITEMID_CHILD const *,unsigned long *);
	long _Compare(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	long _DataObjToRecycleItems(IDataObject *,unsigned short * *,unsigned int *);
	long _FolderFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	long _FolderFromPath(unsigned short const *,_GUID const &,void * *);
	long _InitRecycleBin();
	long _LaunchThread(HWND__ *,IDataObject *,unsigned __int64,DFMICS const *);
	static __int64 _FilePropDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long _BackgroundMenuCallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	static long _OriginalPath(_ITEMID_CHILD const *,unsigned short *,unsigned int);
	static long _ValidateItem(_ITEMIDLIST_RELATIVE const *,tagDELETEDITEM * *);
	static unsigned long _DispatchThreadProc(void *);
	static unsigned long _DropThreadInit(BBTHREADDATA *);
	static void _RemoveBackReferenceCB(IUnknown *);
	unsigned __int64 _GetDeletedSize(_ITEMID_CHILD const *);
	void _FileProperties(IDataObject *);
	void _GetDeletedFileTime(_ITEMIDLIST_RELATIVE const *,_FILETIME *);
	void _PermanentDeleteFileList(HWND__ *,IDataObject *);
	void _RestoreFileList(HWND__ *,IDataObject *);
	~CBitBucket();
protected:
	_ITEMID_CHILD * DataEntryToIDList(tagDELETEDITEM const *);
	_ITEMID_CHILD * PathToIDList(unsigned short const *);
	void * BuildDestSpecs(_IDA *);
public:
	static long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFolderType(_GUID *);
	virtual long GetOverlayIconIndex(_ITEMID_CHILD const *,int *);
	virtual long GetOverlayIndex(_ITEMID_CHILD const *,int *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveBackReferences();
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CBitBucketData
{
	CBitBucketData(CBitBucket *,unsigned int,_ITEMID_CHILD const * const *);
	virtual long GetData(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long QueryGetData(tagFORMATETC *);
};

class CBitBucketDropTarget
{
	int _CheckWebFoldersOverride(IDataObject *,unsigned long *);
	void _AddDescriptionToDataObject();
public:
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long IsEvaluatingEdpPolicy(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDropSourceEnterpriseId(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBitBucketEnum
{
	long _BuildEnumDPA();
public:
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CBitBucketPropertyStore
{
	static long s_CreateInstance(CBitBucket *,_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetClassIdentity(unsigned short * *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBitBucketViewCB
{
	CBitBucketViewCB(CBitBucket *,IRecycleBinManager *);
	long _HandleFSNotify(long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	long _OnSetNotificationWindow(unsigned long,HWND__ *);
	static int _ChangeNotifyDeregister(unsigned long *,void *);
public:
	static long _CanRestoreItems(IUnknown *,IShellItemArray *,int,int *);
	static long _HaveDeletedItems(IUnknown *,IShellItemArray *,int,int *);
	static long _OnEmptyRecycleBin(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnRestore(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnRestoreAll(IUnknown *,IShellItemArray *,IBindCtx *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CBitLockerLicenseQuery
{
	static long IsFeatureEnabled(unsigned short const *,bool *);
public:
	static long IsDeviceEncryptionOnlySku(bool *);
};

class CBooleanCheckMarkControl
{
	int _EnsureImageList();
	virtual ~CBooleanCheckMarkControl();
public:
	virtual long AdjustWindowRectPCB(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long Destroy();
	virtual long GetDisplayText(unsigned short * *);
	virtual long GetDrawFlags(int *);
	virtual long GetFlags(int *);
	virtual long GetFormatFlags(PROPDESC_FORMAT_FLAGS *);
	virtual long GetSize(PROPCTL_RECT_TYPE,HDC__ *,tagSIZE const *,tagSIZE *);
	virtual long GetTooltipInfo(HDC__ *,tagSIZE const *,int *);
	virtual long HasVisibleContent();
	virtual long Initialize(IUnknown *,tagPROPDESC_CONTROL_TYPE);
	virtual long InvokeDefaultAction();
	virtual long OnDPIChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFlags(int,int);
	virtual long SetFont(HFONT__ *);
	virtual long SetFormatFlags(PROPDESC_FORMAT_FLAGS);
	virtual long SetTextColor(unsigned long);
	virtual long SetValue(IUnknown *);
	virtual long SetWindowTheme(unsigned short const *,unsigned short const *);
	virtual long SetWindowlessParentWindow(HWND__ *);
	virtual long WindowlessDraw(HDC__ *,tagRECT const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBooleanDropListControl
{
protected:
	virtual long v_GetIndexFromValue(tagPROPVARIANT const &,unsigned int *);
	virtual long v_GetTextFromIndex(unsigned int,unsigned short * *);
	virtual long v_GetValueCount(unsigned int *);
	virtual long v_GetValueFromIndex(unsigned int,tagPROPVARIANT *);
	virtual long v_GetValueType(unsigned int,PROPENUMTYPE *);
public:
	CBooleanDropListControl();
};

class CBreakOnFailureT<CEmptyType>
{
	static long g_hResultToBreakOn;
public:
	static void CheckToBreakOnFailure(long);
};

class CBriefcase
{
	long _CreateView(HWND__ *,IShellView * *);
	long _EnsureBriefcaseStorage(HWND__ *);
	long _ReleaseBriefcaseStorage();
	virtual ~CBriefcase();
public:
	CBriefcase(IUnknown *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long GetColumnState(_tagpropertykey const &,unsigned long *,unsigned long *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long PreferSortByColumnId(_tagpropertykey const &,unsigned int *);
};

struct CBriefcaseData
{
	virtual long GetData(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long QueryGetData(tagFORMATETC *);
};

struct CBriefcasePropertyStore
{
	static long s_CreateInstance(CBriefcase *,_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetClassIdentity(unsigned short * *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBriefcasePropertyStoreFactory
{
	long Initialize(IBindCtx *,_ITEMID_CHILD const *);
public:
	static long s_CreateInstance(CBriefcase *,IBindCtx *,_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long GetPropertyStore(GETPROPERTYSTOREFLAGS,IUnknown *,_GUID const &,void * *);
	virtual long GetPropertyStoreForKeys(_tagpropertykey const *,unsigned int,GETPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBriefcaseViewCB
{
	int _GetSelectedCount();
	long OnDELAYWINDOWCREATE(unsigned long,HWND__ *);
	long OnFSNOTIFY(unsigned long,_ITEMIDLIST_ABSOLUTE const * *,__int64);
	long OnINITMENUPOPUP(unsigned long,unsigned int,unsigned int,HMENU__ *);
	long OnINVOKECOMMAND(unsigned long,unsigned int);
	long OnMergeMenu(unsigned long,_QCMINFO *);
	long OnNOTIFYCOPYHOOK(unsigned long,_COPYHOOKINFO const *);
	long OnSELCHANGE(unsigned long,unsigned int,unsigned int,_SFVM_SELCHANGE_DATA *);
	long OnWINDOWCREATED(unsigned long,HWND__ *);
	long _GetSelectedObjects(IDataObject * *);
	long _HandleFSNotifyForDefView(__int64,_ITEMIDLIST_ABSOLUTE const * *);
public:
	CBriefcaseViewCB(CBriefcase *);
	long Init(HWND__ *);
	static long _OnUpdate(IUnknown *,IShellItemArray *,IBindCtx *);
	virtual long GetEnumFlags(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,HWND__ * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
	virtual long ShouldShow(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBrowseForFolder
{
	__int64 _DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _OnCommand(HWND__ *,int,HWND__ *,unsigned int);
	int _CreateNewFolder(HWND__ *);
	int _DoesFilterAllow(_ITEMIDLIST_ABSOLUTE const *,int);
	int _OnCreateNameSpace(HWND__ *,tagRECT *);
	int _OnDestroyNameSpace();
	int _OnOK();
	long _DoesMatchFilter(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *,int);
	long _InitAutoComplete(HWND__ *);
	long _OfferToPrepPath(unsigned short *,unsigned long);
	long _OnInitDialog(HWND__ *);
	long _OnInitSize(HWND__ *);
	long _OnLoadSize(HWND__ *);
	long _OnPidlNavigation(IShellItem *,unsigned long);
	long _OnSaveSize(HWND__ *);
	long _OnSetExpandedPath(unsigned short const *);
	long _OnSetExpandedPidl(_ITEMIDLIST_ABSOLUTE const *);
	long _OnSetSelectPathA(char const *);
	long _OnSetSelectPathW(unsigned short const *);
	long _OnSetSelectPidl(_ITEMIDLIST_ABSOLUTE const *);
	long _OnSizeDialog(HWND__ *,unsigned long,unsigned long);
	long _OnTreeSelectChange(unsigned long);
	long _ProcessEditChangeOnOK(int);
	long _SetDialogSize(HWND__ *,unsigned long,unsigned long);
	long _ShouldShow(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *,int);
	static __int64 BrowseForDirDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void * _SizeControls(HWND__ *,void *,tagRECT,int,int);
public:
	_ITEMIDLIST_ABSOLUTE * DisplayDialog(BFSF *);
	virtual long GetEnumFlags(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,HWND__ * *,unsigned long *);
	virtual long OnAfterContextMenu(IShellItem *,IContextMenu *,_GUID const &,void * *);
	virtual long OnAfterExpand(IShellItem *);
	virtual long OnBeforeContextMenu(IShellItem *,_GUID const &,void * *);
	virtual long OnBeforeExpand(IShellItem *);
	virtual long OnBeforeItemDelete(IShellItem *);
	virtual long OnBeforeStateImageChange(IShellItem *);
	virtual long OnBeginLabelEdit(IShellItem *);
	virtual long OnEndLabelEdit(IShellItem *);
	virtual long OnGetDefaultIconIndex(IShellItem *,int *,int *);
	virtual long OnGetToolTip(IShellItem *,unsigned short *,int);
	virtual long OnItemAdded(IShellItem *,int);
	virtual long OnItemClick(IShellItem *,unsigned long,unsigned long);
	virtual long OnItemDeleted(IShellItem *,int);
	virtual long OnItemStateChanged(IShellItem *,unsigned long,unsigned long);
	virtual long OnItemStateChanging(IShellItem *,unsigned long,unsigned long);
	virtual long OnKeyboardInput(unsigned int,unsigned __int64,__int64);
	virtual long OnPropertyItemCommit(IShellItem *);
	virtual long OnSelectionChanged(IShellItemArray *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFilter(IUnknown *);
	virtual long ShouldShow(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBrowserProgressAggregator
{
	int _FindIndex(_GUID const &,unsigned long);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CBrowserProgressAggregator();
	void _ClearProgressData();
	void _EnsureInfoBarsPosted();
	void _IncrementOnTimer(PROGRESS_DATA *);
	void _ResetInform();
	void _ResetProgress();
	void _ResetProgressOnSessionChange();
	void _StartOrStopTimer();
	void _UpdateInfoBars(CDSA<_GUID> *,CDPA<IInfoBarMessage,CTContainer_PolicyUnOwned<IInfoBarMessage> > *);
	void _UpdateTarget(CDSA<_GUID> *,CDPA<IInfoBarMessage,CTContainer_PolicyUnOwned<IInfoBarMessage> > *);
public:
	CBrowserProgressAggregator();
	long CancelInform(_GUID const &);
	long CancelProgressUI();
	long Inform(IInfoBarMessage *);
	long IsCurrentSession(unsigned long,int *);
	long Register(_GUID const &,unsigned long *);
	long Unregister(_GUID const &,unsigned long);
	long UpdateProgress(_GUID const &,unsigned long,unsigned long,unsigned long);
	long UpdateState(_GUID const &,unsigned long,tagBPASCODE);
	virtual long ActivateSession(unsigned long);
	virtual long BeginSession(unsigned long *);
	virtual long EndSession(unsigned long);
	virtual long GetCurrentSession(unsigned long *);
	virtual long Initialize(HWND__ *,unsigned int,IUnknown *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CBrowserProgressAggregatorConnector
{
	virtual ~CBrowserProgressAggregatorConnector();
public:
	CBrowserProgressAggregatorConnector();
	long Activate();
	virtual long CancelInform(_GUID const &);
	virtual long CancelProgressUI();
	virtual long Inform(IInfoBarMessage *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Register(_GUID const &,unsigned long *);
	virtual long Unregister(_GUID const &,unsigned long);
	virtual long UpdateProgress(_GUID const &,unsigned long,unsigned long,unsigned long);
	virtual long UpdateState(_GUID const &,unsigned long,tagBPASCODE);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CBrowserRegistryCache
{
	CBrowserRegistryCache();
	long EnsureCache(bool);
	long EnsureSingleBrowserIsTheDefault();
	long GetDefaultBrowserRegisteredAppName(unsigned short * *);
	long GetProgIds(unsigned short const *,unsigned short (&)[2][39]);
	long IsExtOrProtocolAndProgIdInCache(unsigned short const *,unsigned short const *,bool *,unsigned short (*)[2][39]);
	static unsigned long _s_ResetDefaultBrowserThreadProc(void *);
	~CBrowserRegistryCache();
};

class CBurnAudioCDExtension
{
	_GUID _GetDefaultCLSID();
	__int64 _MusicDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _DataObjectHasAllAudioFiles(IDataObject *);
	int _HasAudioExtension(unsigned short const *);
	long _DropOnHandler(_GUID const &,EXTCOCREATEFLAGS,IDataObject *);
	long _GetVerbForCLSID(_GUID const &,unsigned short *,unsigned int);
	long _PickHandler(IDataObject *,_GUID *);
	static __int64 s_MusicDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	unsigned long _CountOfAudioFilesForHandler(IDataObject *,_GUID const &);
	void _AddAllExts();
	void _AddFileExtsForCLSID(_GUID const &);
	void _AddFileExtsForKey(unsigned short const *);
	void _SetCompletionState();
public:
	virtual long AddPages(_PSP * *,unsigned int,unsigned int *);
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long GetFirstPage(_PSP * *);
	virtual long GetLastPage(_PSP * *);
	virtual long GetSupportedActionTypes(unsigned long *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CBurnEventHandler
{
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Update(IDispatch *,IDispatch *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CByValueConfirmationInterrupt
{
	CByValueConfirmationInterrupt();
	long RuntimeClassInitialize(IConfirmationInterrupt *);
	virtual long GetClassID(_GUID *);
	virtual long GetCustomCommands(_GUID const &,void * *);
	virtual long GetDefaultResponse(OPERATION_INTERRUPT_FLAGS *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetFlags(OPERATION_INTERRUPT_FLAGS *);
	virtual long GetItem(IShellItem * *);
	virtual long GetMultipleDelete(int *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetTitle(unsigned short * *);
	virtual long Load(IStream *);
	virtual long Save(IStream *,int);
};

class CByValueOperationInterrupt
{
protected:
	long Initialize(IOperationInterrupt *);
public:
	virtual long GetDescription(unsigned short * *);
	virtual long GetFlags(OPERATION_INTERRUPT_FLAGS *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetTitle(unsigned short * *);
	virtual long IsDirty();
	virtual long Load(IStream *);
	virtual long Save(IStream *,int);
	virtual ~CByValueOperationInterrupt();
};

struct CByValueSingleConflictInterrupt
{
	CByValueSingleConflictInterrupt();
	long RuntimeClassInitialize(IConflictInterrupt *);
	virtual long CancelRequest(unsigned long);
	virtual long GetClassID(_GUID *);
	virtual long GetConflictCount(unsigned long *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetDestinationItem(_GUID const &,void * *);
	virtual long GetFlags(OPERATION_INTERRUPT_FLAGS *);
	virtual long GetResolutionDescription(RESOLUTION_TYPE,unsigned short * *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetSourceItem(_GUID const &,void * *);
	virtual long GetTitle(unsigned short * *);
	virtual long Load(IStream *);
	virtual long RequestConflictData(unsigned long,INDIVIDUAL_CONFLICT_FAST_DATA *,IShellItem * *,IShellItem * *);
	virtual long Save(IStream *,int);
	virtual long SetConflictItemDataCallback(IConflictItemDataCallback *);
};

class CByteHashTable
{
	CByteHashTable::BHASHENTRY * _LookupEntry(unsigned char const *,unsigned int,unsigned int *,CByteHashTable::BHASHENTRY * *);
	long _AddUpdateItem(int,unsigned char const *,unsigned int,unsigned char const *,unsigned int,unsigned char *,unsigned int);
	long _GetValue(unsigned char const *,unsigned int,unsigned char * *,int *,unsigned char *,int);
	long _GetValueWorker(CByteHashTable::BHASHENTRY *,unsigned char * *,int *,unsigned char *,unsigned int);
	long _RemoveItem(unsigned char const *,unsigned int,unsigned char *,unsigned int);
	unsigned int _CalculateHashKey(unsigned char const *,unsigned int,unsigned int);
	void _GrowTable();
	void _RemoveCallback(int,void (*)(unsigned char *,unsigned int,void *),void *);
public:
	long Create(unsigned int,unsigned int,unsigned int,unsigned int,unsigned int (*)(unsigned char const *,unsigned int,unsigned int));
	void EnumCallback(int (*)(unsigned char const *,unsigned int,unsigned char const *,unsigned int,void *),void *);
};

class CCDBurn
{
	CCDBurn();
	__int64 _ChangeFilesDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _DoneDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _HDFullDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _NameSpeedDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _ProgressDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _StartEraseDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _WaitForMediaDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _ContainsInvalidChars(unsigned short *);
	int _DiscHasFiles();
	int _EnterExclusiveBurning();
	int _HandleApply(HWND__ *);
	long _AddStagedFilesToJolietImage(IFileSystemImage *);
	long _AddStorageToJolietImage(IFileSystemImage *,IFsiDirectoryItem *,IStorage *,unsigned short const *,unsigned int);
	long _AddStreamToJolietImage(IFileSystemImage *,IFsiDirectoryItem *,IStorage *,tagSTATSTG,unsigned short const *);
	long _BurnJolietImage(IFileSystemImage *,IDiscFormat2Data *);
	long _CleanUp(_CMINVOKECOMMANDINFO *,int);
	long _CreateDefaultPropBag(_GUID const &,void * *);
	long _CreateDirInJolietImage(IFileSystemImage *,IFsiDirectoryItem *,tagSTATSTG,IFsiDirectoryItem * *);
	long _CreateFilesystemImage(IDiscFormat2Data *,long,IFileSystemImage * *);
	long _CreateStagingFolderIfNotExist();
	long _DoDrop(IDataObject *,int);
	long _DoDropOperation(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,int);
	long _EnsureDropTarget();
	long _EraseDisc(IDiscRecorder2 *);
	long _EraseSpecificDrive(int);
	long _FillExtensionDPA(_PSP * *,unsigned int,unsigned int *);
	long _GetBurnHR();
	long _GetCDFolder(IBindCtx *,_ITEMIDLIST_ABSOLUTE const *,_GUID const &,void * *);
	long _GetCurrentWriteSpeeds(tagSAFEARRAY * *);
	long _GetEjectSetting(int *);
	long _GetExtPage(int,int,_PSP * *);
	long _GetExtPageFromPropBag(int,_PSP * *);
	long _GetStagingFolder(IBindCtx *,_ITEMIDLIST_ABSOLUTE const *,_GUID const &,void * *);
	long _LockCurrentDrive(int,int);
	long _PostOperation(HWND__ *);
	long _PrepWiz(_CMINVOKECOMMANDINFO *,int,int);
	long _ReparsePidl(_ITEMIDLIST_ABSOLUTE * *);
	long _SetDiscFullError(unsigned __int64,unsigned __int64);
	long _SetEjectSetting(int);
	long _ShowWizard();
	long _ShowWizardOnSeparateThread();
	long _TallyStagedFiles();
	long _ValidateDiscWaitForMedia(HWND__ *,unsigned int *,unsigned int *);
	long _WarnIfFinalSessionOnBlankDisc(unsigned __int64);
	long _WizardThreadProc();
	static CCDBurn * s_GetCDBurn(HWND__ *,unsigned int,__int64);
	static CPrepareDiscDialog::DialogResult _EnsureUserIntentForDisc(HWND__ *,int,unsigned short const *,int);
	static HWND__ * s_hwndWiz;
	static __int64 _WizSubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_ConfirmDialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_ReplaceFilenameDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static int _EnsureStagingFolder(int,unsigned short const *,unsigned short *,unsigned long);
	static int _GetDriveLetterBasedStagingPath(int,unsigned short *,unsigned long);
	static int _GetExistingPrepareDiscInfo(unsigned short const *,unsigned short *,unsigned long,int *);
	static int _HasFiles(_ITEMIDLIST_ABSOLUTE const *,int);
	static int _IsBurningNow();
	static int _IsDefaultBurnerValid();
	static int _IsDefaultRecorder(unsigned short const *);
	static int _IsIMAPISupported();
	static int _IsStagingPathOK(unsigned short const *,unsigned short const *);
	static int _LockDrive(unsigned short const *,int);
	static int _StagingAreaHasFiles(unsigned short const *);
	static int _UserChoseMastered(unsigned short const *);
	static int s_fDriveInUse;
	static long _Balloon();
	static long _CreateDiscMaster(IDiscMaster2 * *);
	static long _CreateDiscRecorder(unsigned short * const,IDiscRecorder2 * *);
	static long _CreateLocalizationDesktopIni(unsigned short const *);
	static long _DriveAndMediaSupportErase(IDiscRecorder2 *,int *);
	static long _DumpDiscInfo(unsigned short const *);
	static long _GetBurnStagingPath(unsigned short const *,unsigned short *,unsigned int);
	static long _GetCachedDriveInfo(unsigned short const *,unsigned long *,int *,int *);
	static long _GetCachedDriveInfoForDriveIndex(int,unsigned short *,unsigned long,unsigned long *,int *,int *);
	static long _GetCachedDriveInfoKey(unsigned short const *,HKEY__ * *,int);
	static long _GetCachedMediaCapabilities(unsigned short const *,int *,int *);
	static long _GetCachedMediaInfo(unsigned short const *,unsigned short const *,void *,unsigned long);
	static long _GetCachedMediaInfoKey(unsigned short const *,HKEY__ * *,int);
	static long _GetCachedMediaInfoKeyPath(unsigned short const *,unsigned short *,unsigned long);
	static long _GetCurrentStashDrive(unsigned short *,unsigned int,int);
	static long _GetCurrentStashFolder(unsigned short *,unsigned int,int);
	static long _GetDefaultBurnVolumeName(unsigned short *,unsigned int);
	static long _GetDiscInfoUsingFilesystem(unsigned short const *,unsigned __int64 *,unsigned __int64 *,int *,int *,unsigned short *,unsigned long);
	static long _GetDiscRecorderForDrive(IDiscMaster2 *,unsigned short const *,IDiscRecorder2 * *);
	static long _GetDiscRecorderInfo(IDiscRecorder2 *,unsigned long *,int *);
	static long _GetDiscRecorderVolumeName(IDiscRecorder2 *,unsigned short *,unsigned int);
	static long _GetDriveIndexForVolumeName(unsigned short const *,int *);
	static long _GetIDListForDriveIndex(int,_ITEMIDLIST_ABSOLUTE * *);
	static long _GetIDListForStagingFolder(unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
	static long _GetIDListForVolumeName(unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
	static long _GetNextDiscRecorder(IEnumVARIANT *,IDiscRecorder2 * *);
	static long _GetStagingAreaLocalizedResource(unsigned short *,unsigned long);
	static long _GetXFactorString(long,long,unsigned short *,unsigned int);
	static long _IsMediaBlankFromIMAPI(IDiscFormat2Data *,int *,int *);
	static long _IsMediaSupportedForImapiOperation(IDiscFormat2 *,IDiscRecorder2 *,int *);
	static long _IsRecorderSupportedForImapiOperation(IDiscFormat2 *,IDiscRecorder2 *,int *);
	static long _SetCachedDriveInfo(unsigned short const *,unsigned long,int,unsigned short const *);
	static long _SetCurrentStashFolderOnDrive(unsigned short const *);
	static long _SetDefaultBurnVolumeName(unsigned short const *,int);
	static long _StoreDiscInfo(unsigned short const *,unsigned short const *,int,int);
	static long _TryCLSID(_GUID const &,EXTCOCREATEFLAGS,int,_GUID const &,void * *);
	static long _TryKey(unsigned short const *,int,_GUID const &,void * *);
	static unsigned long _BurnThread(void *);
	static unsigned long _EraseThread(void *);
	static unsigned long _FetchRewritableFreeBlocksWorkitem(void *);
	static unsigned long _NotifyThreadProc(void *);
	static unsigned long _WizardThreadWrapper(void *);
	static unsigned long s_DropThread(void *);
	static void _CachedStagingInfoClearDrive(int);
	static void _EnsureLocalizationDesktopInis();
	static void _FreeDropParams(CDDROPPARAMS *);
	static void _GetBurnXFactor(long,long,long *,long *);
	static void _GetVolumeLabel(unsigned short const *,int,unsigned short *,unsigned __int64);
	static void _HandleBookkeeping(unsigned short const *,int);
	static void _IsMediaValidForBurning(unsigned short const *,int *,int *);
	static void _PruneRemovedDevices();
	static void _RemoveCachedDriveInfo();
	static void _SetCachedStagingInfo(unsigned short const *,int);
	static void _ShowHideDefaultBurnerInfo(int);
	static void _StoreDiscInfoFromIMAPI(HKEY__ *,IDiscRecorder2 *,int,unsigned short const *,int *,unsigned long *);
	static void _UpdateDiscInfo(unsigned short const *,int,int);
	unsigned short * _GetLowerSpeedString(int,unsigned short const *);
	virtual ~CCDBurn();
	void _AddExtensionToDPA(IWizardExtension *,_PSP * *,unsigned int,unsigned int *);
	void _CloseBurnerView();
	void _ConstructTimeString(unsigned long,unsigned short *,unsigned int);
	void _DisplayMediaErrorOnNext(HWND__ *,unsigned int,unsigned int);
	void _EjectCurrentMedia(HWND__ *);
	void _GetTaskInfo(int,int *,int *,int *,int *);
	void _HDFullSetText(HWND__ *);
	void _InitAutoCloseSelection(HWND__ *);
	void _InitProgressPage(HWND__ *);
	void _InitVolumeLabelEdit(HWND__ *);
	void _InitWriteSpeedSelection(HWND__ *);
	void _MarkDirty(HWND__ *);
	void _OnSetActiveWaitForMedia(HWND__ *,HWND__ *);
	void _PruneExts();
	void _RecordAutoCloseSelection(HWND__ *);
	void _RecordVolumeLabelEdit(HWND__ *);
	void _RecordWriteSpeedSelection(HWND__ *);
	void _RecordingPrshtInit(HWND__ *);
	void _RegisterAutoplayCanceller();
	void _SetExtPageFromPropBag(HWND__ *,int);
	void _SetNextPage(HWND__ *,int);
	void _SetProgress(unsigned long);
	void _SetStatus(unsigned int);
	void _SetTimeRemaining(long);
	void _SetupFirstPage(HWND__ *,int);
	void _ShowRecordingGlobalSettingsDialog(HWND__ *);
	void _UnregisterAutoplayCanceller();
public:
	long OnBurnUpdate(IDispatch *,IDispatch *);
	static __int64 s_ChangeFilesDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_DoneDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_EarlyExitDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_HDFullDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_NameSpeedDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_NoFilesDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_ProgressDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_StartEraseDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_WaitForMediaDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long AllowAutoPlay(unsigned short const *,unsigned long,unsigned short const *,unsigned long);
	virtual long Bind(_ITEMIDLIST_ABSOLUTE const *,IBindCtx *,_GUID const &,void * *);
	virtual long Burn(HWND__ *);
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long DriveSupportsBurning(int);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long GetCancelledPage(_PSP * *);
	virtual long GetClassID(_GUID *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetContentState(int *,int *);
	virtual long GetCurFile(unsigned short * *);
	virtual long GetNextPage(_PSP * *);
	virtual long GetPreviousPage(_PSP * *);
	virtual long GetRecorderDriveLetter(unsigned short *,unsigned int);
	virtual long GetSpace(unsigned __int64 *,unsigned __int64 *);
	virtual long HasRecordableDrive(int *);
	virtual long InitNew();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long Initialize(int);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long IsDirty();
	virtual long IsWizardUp();
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long Load(unsigned short const *,unsigned long);
	virtual long OnHandleSignaled(void *,unsigned int,unsigned int,void * *,unsigned int *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual long Save(IPropertyBag *,int,int);
	virtual long Save(unsigned short const *,int);
	virtual long SaveCompleted(unsigned short const *);
	virtual long Start(unsigned int,void * *,unsigned int *);
	virtual long Stop();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCDBurnFolder
{
	int _RevokeSimpleParseBindCtx(IBindCtx *,IFileSystemBindData * *);
	long _CreateCDBurnBackgroundMenu(IContextMenu * *);
	long _ParseNameWithRestriction(unsigned short const *,CMergedFldrNamespace const *,HWND__ *,IBindCtx *,unsigned short const *,_ITEMID_CHILD * *);
protected:
	int _IsOverWrite(_ITEMID_CHILD const *);
	long _CheckDriveRestriction(HWND__ *);
	long _GetOverlayInfo(_ITEMID_CHILD const *,int *,unsigned long);
	virtual long _Create(CMergedFolder * *);
	virtual long _TryParseNameWithNamespace(CMergedFldrNamespace const *,HWND__ *,IBindCtx *,unsigned short const *,_ITEMID_CHILD * *);
	virtual ~CCDBurnFolder();
public:
	CCDBurnFolder(CCDBurnFolder *);
	_ITEMIDLIST_ABSOLUTE const * GetIDListRoot();
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long GetMaxLength(unsigned short const *,int *);
	virtual long GetOverlayIconIndex(_ITEMID_CHILD const *,int *);
	virtual long GetOverlayIndex(_ITEMID_CHILD const *,int *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetValidCharacters(unsigned short * *,unsigned short * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCDBurnFolderPropertyStore
{
	static long s_CreateInstance(CCDBurnFolder *,_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetClassIdentity(unsigned short * *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCDBurnFolderPropertyStoreFactory
{
	long Initialize(IBindCtx *,_ITEMID_CHILD const *);
public:
	static long s_CreateInstance(CCDBurnFolder *,IBindCtx *,_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long GetPropertyStore(GETPROPERTYSTOREFLAGS,IUnknown *,_GUID const &,void * *);
	virtual long GetPropertyStoreForKeys(_tagpropertykey const *,unsigned int,GETPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCDBurnFolderViewCB
{
	CCDBurnFolderViewCB(CCDBurnFolder *);
	long OnFSNotify(unsigned long,_ITEMIDLIST_ABSOLUTE const * *,long);
	long OnGetWorkingDir(unsigned long,unsigned int,unsigned short *);
public:
	static long _CanBurn(IUnknown *,IShellItemArray *,int,int *);
	static long _CanClear(IUnknown *,IShellItemArray *,int,int *);
	static long _CanErase(IUnknown *,IShellItemArray *,int,int *);
	static long _OnCDBurn(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnCDClearStaging(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnCDErase(IUnknown *,IShellItemArray *,IBindCtx *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCDBurnGlobalSettingsDialog
{
	long _OnOkClicked(HWND__ *);
	static long s_CDBurnGlobalSettingsDialogCallbackProc(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	void _OnDialogCreated(HWND__ *);
public:
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show(HWND__ *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCDBurnTaskInfo
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCIDGroupControl
{
	long SetAppControl(IAppControl *);
	long SetControlId(unsigned short const *);
	long SetLabelId(unsigned short const *);
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetLabelEnabled(int);
	virtual long SetLabelText(unsigned short const *);
	virtual long SetLabelVisible(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnDestroy();
};

struct CCIDLabel
{
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class CCLSIDInfoCache
{
	int _EnsureCacheIsValid(int);
	int _FindCachedEntry(_GUID const &,CLSID_CACHE_ENTRY *);
	int _IsEntry(_GUID const &,int);
	int _IsValid();
	static int s_CompareEntries(CLSID_CACHE_ENTRY const *,CLSID_CACHE_ENTRY const *,__int64);
	unsigned long _QueryCallForAttributes(CLSID_CACHE_ENTRY const &,unsigned long,unsigned long);
	void _GetEntry(_GUID const &,CLSID_CACHE_ENTRY *);
	void _LoadValuesFromRegistry(CLSID_CACHE_ENTRY *);
public:
	CCLSIDInfoCache();
	unsigned long GetAttribute(_GUID const &,unsigned long,unsigned long);
};

struct CCLambdaAdapter<int (*)(HDC__ *,unsigned short *,int,tagRECT *,unsigned int,__int64),6>
{
	static int Adapt<<lambda_a6e095e96b82d37a4e0810b2bac7ffb3> >(HDC__ *,unsigned short *,int,tagRECT *,unsigned int,__int64);
};

struct CCPLSearchTarget
{
	virtual long GetPromptText(unsigned short *,unsigned int);
	virtual long GetTargetFlags(SEARCHTARGETFLAGS,SEARCHTARGETFLAGS *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCacheAppInfo
{
	CCacheShortcut const * _GetBestShortcut(void const *,OFFSET<CCacheShortcut> const * *,CCacheAppInfo::GetBestShortcutType);
public:
	CCacheShortcut const * GetShortcutByIndex(void const * const,int,OFFSET<CCacheShortcut> const * *);
	unsigned short const * GetAppID(void const *);
};

struct CCacheDir
{
	_ITEMIDLIST_ABSOLUTE const * GetIDList(void const *);
	long Initialize(IMemoryMappedHeap *,_ITEMIDLIST_ABSOLUTE const *,unsigned short const *);
};

class CCacheInstance
{
	long _ValidateCacheObject();
	long _ValidateSignatureOfCacheItems();
	long _VerifyCacheAndSetHeader();
public:
	CCacheRoot const * FindRoot(_ITEMIDLIST_ABSOLUTE const *);
	CCacheShortcut const * FindLauncherShortcutForAppID(unsigned short const *);
	CCacheShortcut const * FindLauncherShortcutForAppPath(unsigned short const *);
	CCacheShortcut const * FindMatchingShortcut(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,FIND_MATCHING_SHORTCUT_OPTIONS);
	CCacheShortcut const * GetLauncherShortcutByIndex(int);
	CCacheShortcut const * GetPlacesShortcutByIndex(int);
	CCacheShortcut const * GetShortcutByIndex(int);
	int GetAppCount();
	int GetDirectoryCount();
	int GetLauncherShortcutCount();
	int GetPlacesShortcutCount();
	int GetShortcutCount();
	long GetLatestCache(IMemoryMappedCacheMgr *,CCacheInstance * *);
	long InitHeap(IMemoryMappedCache *);
	long LoadCache(IMemoryMappedCacheMgr *);
	long Release();
	long ValidateCache(bool);
};

struct CCacheShortcut
{
	long CopyFromAnotherInstance(CCacheShortcut const *,void const *,IMemoryMappedHeap *,OFFSET<CCacheDir> *);
	long PopulatePropertyStore(void const *,IPropertyStore *);
	long TransferLinkData(IMemoryMappedHeap *,SHORTCUT_DATA const *,_ITEMID_CHILD const *);
	unsigned short const * GetAppID(void const *);
};

struct CCacheTile
{
	long CopyFromAnotherInstance(CCacheTile const *,void const *,IMemoryMappedHeap *);
	long PopulateLogoProperties(void const *,IPropertyStore *);
	long TransferTileData(TILE_DATA *,IMemoryMappedHeap *);
};

class CCachedFolderPath
{
	long _EnsureIDList(CACHEDFOLDER_SUSPEND_CHANGE_NOTIFICATIONS_TYPE);
	long _HideUnhideFolder(bool,int *);
public:
	CCachedFolderPath();
	virtual long ConditionalSuspendChangeNotifications(int,CACHEDFOLDER_SUSPEND_CHANGE_NOTIFICATIONS_TYPE);
	virtual long GetFolderPath(unsigned short const * *);
	virtual long HideFolder(int *);
	virtual long Initialize(_GUID const &,unsigned short const *);
	virtual long ResumeNotificationsAndFireUpdateDir(int);
	virtual long UnhideFolder(int *);
};

class CCachedSTAObject
{
	static HINSTANCE__ * s_hmod;
public:
	virtual long PostInitialize(long,unsigned long,unsigned long);
	virtual long PostUninitialize(unsigned long);
	virtual long PreInitialize(unsigned long,unsigned long);
	virtual long PreUninitialize(unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCachedUserName
{
	void _Reset();
};

class CCalendarControl
{
	__int64 _OnKeyDown(unsigned int,__int64);
	__int64 _OnNotify(tagNMHDR *,int *);
	long _FormatDisplayText(_tagpropertykey const &,tagPROPVARIANT const *,tagPROPVARIANT const *,unsigned short * *);
	long _GetDateRangeFromCondition(ICondition *,_SYSTEMTIME *,_SYSTEMTIME *);
	long _GetDates(_SYSTEMTIME *,_SYSTEMTIME *,int *);
	long _GetPropVariant(tagPROPVARIANT *);
	long _GetPropVariantRange(tagPROPVARIANT *,tagPROPVARIANT *,int *);
	long _GetPropertyValue(_GUID const &,void * *);
	long _SetFilterValue(IFilterCondition *);
	static __int64 s_SubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual __int64 v_BaseWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual int v_IsModified();
	virtual int v_OnBaseSetCursor();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
	virtual void v_GetBorderSize(_MARGINS *,HDC__ *,int);
	virtual void v_GetDrawClientRect(HWND__ *,HDC__ *,tagRECT *);
	void _OnFocus(int);
	void _SetDates(HWND__ *);
	void _SiteCommit(int);
public:
	CCalendarControl();
	virtual long GetSize(PROPCTL_RECT_TYPE,HDC__ *,tagSIZE const *,tagSIZE *);
	virtual long TranslateAcceleratorIO(tagMSG *);
};

class CCallWithTimeoutParams
{
protected:
	virtual ~CCallWithTimeoutParams();
public:
	long DuplicateCompletionEvent(void *);
};

struct CCallbackPropertyBag
{
	CCallbackPropertyBag(void (*)(__int64,unsigned short const *),__int64,IPropertyBag *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(unsigned short const *,tagVARIANT *,IErrorLog *);
	virtual long Write(unsigned short const *,tagVARIANT *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCancelWithEvent
{
	virtual long Cancel(unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long TestCancel();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCaseInsensitiveStringCompare
{
	static int CompareKey(unsigned short const * const,unsigned short const * const);
};

struct CCaseInsensitiveStringHashPolicy
{
	static unsigned int CalculateHashKey(unsigned short const *,unsigned int);
};

struct CCaseInsensitiveStringHashTable<Microsoft::Windows::FileExplorer::Banners::BannerData *>
{
	CCaseInsensitiveStringHashTable<Microsoft::Windows::FileExplorer::Banners::BannerData *>();
	~CCaseInsensitiveStringHashTable<Microsoft::Windows::FileExplorer::Banners::BannerData *>();
};

struct CCaseInsensitiveStringHashTable<bool (**)(SystemSettings::Environment::SettingsEnvironmentImpl *)>
{
	~CCaseInsensitiveStringHashTable<bool (**)(SystemSettings::Environment::SettingsEnvironmentImpl *)>();
};

struct CCaseInsensitiveStringHashTable<int>
{
	~CCaseInsensitiveStringHashTable<int>();
};

struct CCategorizableItemOnItemStore
{
	CCategorizableItemOnItemStore(IItemStore *,tagITEMKEY const *,IShellFolder2 *);
	virtual long GetChildId(_GUID const &,void * *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetCategory(_tagpropertykey const &,tagPROPVARIANT const &,SETCAT_FLAGS);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCategorizerFactory
{
	virtual long CreateCategorizer(IShellItem *,_tagpropertykey const &,int,int,IUnknown *,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCategoryArray
{
	virtual long GetAt(unsigned int,ICategoryDescription * *);
	virtual long GetCount(unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCategoryDescription
{
	long Initialize(tagPROPVARIANT const &,IFilterCondition *,unsigned short const *,unsigned short const *);
	virtual long GetDisplayName(unsigned short * *);
	virtual long GetFilterCondition(IFilterCondition * *);
	virtual long GetFlags(CATEGORYINFO_FLAGS *);
	virtual long GetId(unsigned long *);
	virtual long GetProperties(IPropertyStore *);
	virtual long GetSortOrder(tagPROPVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCategoryEntry
{
	long _AggregatePropertiesFromItems(IItemStore *,IShellFolder *,IPropertyStore *);
	long _GetPropertyStore(IPropertyStore * *);
public:
	long AddItem(tagITEMKEY const *);
	long GetPropertyStore(IItemStore *,IShellFolder *,_GUID const &,void * *);
	long SetMaxCount(int);
};

class CCategoryEnum
{
	int _IncludeCategory(int);
	long _AddCategoryEntry(ICategoryDescription *);
	long _AddItem(tagITEMKEY const *);
	long _AddItemToCategory(tagITEMKEY const *,unsigned long);
	long _CategorizeItems();
	long _CreateIDList(int,_ITEMID_CHILD * *,_ITEMIDLIST_ABSOLUTE * *);
	long _CreateNonCategorizedItemsDPA();
	long _GetPropertyStore(int,IPropertyStore * *);
	virtual ~CCategoryEnum();
	void _ClearCategories();
public:
	CCategoryEnum();
	virtual long Clone(IEnumFullIDList * *);
	virtual long Clone(IEnumIDList * *);
	virtual long GetCategoryFilter(int,IFilterCondition * *);
	virtual long GetCategoryIDList(int,_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetCategoryItemCount(int,int *);
	virtual long GetCount(int *);
	virtual long InitializeEnum(IItemStore *,IItemKeyArray *,_tagpropertykey const &,int,tagCATENUMTYPE,unsigned long,tagFILTERIDLISTTYPE,IViewStateInfo *);
	virtual long Next(unsigned long,_ITEMIDLIST_ABSOLUTE * *,unsigned long *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCategoryProvider
{
	int _BuildCategoryList(HKEY__ *,tagCATLIST const *);
	long _CreateInstance(_GUID const *,_GUID const &,void * *);
public:
	CCategoryProvider();
	virtual long CanCategorizeOnSCID(_tagpropertykey const *);
	virtual long CreateCategory(_GUID const *,_GUID const &,void * *);
	virtual long EnumCategories(IEnumGUID * *);
	virtual long GetCategoryForSCID(_tagpropertykey const *,_GUID *);
	virtual long GetCategoryName(_GUID const *,unsigned short *,unsigned int);
	virtual long GetDefaultCategory(_GUID *,_tagpropertykey *);
	virtual long Initialize(_GUID const *,_tagpropertykey const *,_tagpropertykey const *,HKEY__ *,tagCATLIST const *,IShellFolder *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CChangeNotify
{
	CAnyAlias * _FindAlias(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	__int64 _OnChangeRegistration(void *,unsigned long);
	int _DeregisterClientByID(unsigned int,unsigned long,unsigned long);
	int _InitTree(CIDLTree * *);
	int _InsertAlias(CLinkedNode<CAnyAlias> *);
	int _IsLocalDrive(_ITEMIDLIST_ABSOLUTE const *);
	int _RegisterClient(HWND__ *,unsigned int,unsigned long,int,long,_ITEMIDLIST_ABSOLUTE const *,int);
	long _CreateInterruptSource(_ITEMIDLIST_ABSOLUTE const *,int,IShellItem *);
	long _InsertInterruptSource(IChangeNotifySource *,IShellItem *,int);
	unsigned long _FreshenClients<CAnyAlias>(CLinkedList<CAnyAlias> &);
	unsigned long _FreshenClients<CRegisteredClient>(CLinkedList<CRegisteredClient> &);
	void InitializeThread();
	void _AddGlobalEvent(CNotifyEvent *);
	void _FlushAll(int);
	void _FlushDelayNotifications();
	void _FreshenUp();
	void _MatchAndNotify(_ITEMIDLIST_ABSOLUTE const *,CNotifyEvent *,int);
	void _MessagePump();
	void _NotifyCallbacksOfNotification(long,unsigned int,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,unsigned long);
	void _NotifyCallbacksOfRegisteredClientsChange();
	void _ResetRelatedInterrupts(_ITEMIDLIST_ABSOLUTE const *);
	void _SignalInterrupt(void *);
	void _WaitForCallbacks();
public:
	CChangeNotify(HWND__ * *);
	int AddClient(IDLDATAF,_ITEMIDLIST_ABSOLUTE const *,int *,int,int,CCollapsingClient *);
	int SuspendResume(SCNSUSPENDFLAGS,_ITEMIDLIST_ABSOLUTE const *,int);
	long AddInterruptSource(_ITEMIDLIST_ABSOLUTE const *,int,IShellItem *);
	long RemoveAlias(_ITEMIDLIST_ABSOLUTE const *,CAnyAlias *);
	long RemoveClient(_ITEMIDLIST_ABSOLUTE const *,int,CCollapsingClient *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned long s_ThreadProc(void *);
	static unsigned long s_ThreadStartUp(void *);
	virtual long ContextSensitiveHelp(int);
	virtual long GetAliasTargets(IShellItem *,_GUID const &,void * *);
	virtual long GetRegisteredClients(_GUID const &,void * *);
	virtual long GetWindow(HWND__ * *);
	virtual long NotifyEvent(long,unsigned int,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RegisterForNotifications(INotificationDataProviderSink *,unsigned long *);
	virtual long UnregisterForNotifications(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void ActivateAliases(int,_ITEMIDLIST_ABSOLUTE const *,int);
	void AddAlias(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,ALIASFLAGS);
	void AddSpecialAlias(int,int,ALIASFLAGS);
	void PendingCallbacks(HWND__ *,int);
	void ReleaseInterruptSource(_ITEMIDLIST_ABSOLUTE const *);
	void RemoveAliasedRealLocationsListIfUnused(_ITEMIDLIST_ABSOLUTE const *);
	void SetFlush(FLUSH);
	void UpdateSpecialAlias(int);
	void _RefreshAliasesForLocation(IShellItem *,int);
	void _UpdateAliases(_ITEMIDLIST_ABSOLUTE const *,IShellItemArray *,IShellItemArray *);
	~CChangeNotify();
};

class CChangeRecordArray
{
	virtual ~CChangeRecordArray();
public:
	virtual long GetAt(int,tagITEM_CHANGE_RECORD *);
	virtual long GetCount(int *);
	virtual long GetItemStore(IItemStore * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CChangeRegistration
{
	int _Init(HWND__ *,unsigned int,unsigned long,long,int,_ITEMIDLIST_ABSOLUTE const *);
public:
	static CChangeRegistration * Create(HWND__ *,unsigned int,unsigned long,unsigned long,unsigned long,long,int,_ITEMIDLIST_ABSOLUTE const *);
};

class CChangeRouterProxy
{
	int _SendRegistration(unsigned long,unsigned long,long,int,_ITEMIDLIST_ABSOLUTE const *);
	long _Validate();
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned long s_SendRogueRegistration(HWND__ *,unsigned int,unsigned long,unsigned long,long,int,_ITEMIDLIST_ABSOLUTE const *);
	static void s_MessageCallback(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _CloseDeregisteredEvent();
	void _DeregisterCallback(unsigned long,int);
	void _RegisterCallback(CChangeRegistration *,unsigned long);
	void _SendDeregister(PROXYCLIENT *);
public:
	static int s_DeregisterRogue(unsigned long);
	static long GetProxy(int,CChangeRouterProxy * *);
	static unsigned long RegisterRogue(HWND__ *,unsigned int,int,long,int,_SHChangeNotifyEntry const *);
	unsigned long RegisterProxy(HWND__ *,unsigned int,int,long,int,_SHChangeNotifyEntry const *);
	unsigned long Release();
	void DeregisterWindow(HWND__ *);
	void RegisterThread(SCNRT_STATUS);
};

class CChartView
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long Create(unsigned int,unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual HWND__ * CreateHWND(HWND__ *);
};

class CCheckDiskDialog
{
	CCheckDiskDialog();
	int _EnterExclusive();
	long ConfigureProgressDialog(_TASKDIALOGCONFIG *,unsigned char);
	long ConfigureResultDialog(_TASKDIALOGCONFIG *,unsigned char,unsigned long);
	long ConfigureVolumeStateDialog(_TASKDIALOGCONFIG *);
	long _GetTimeRemainingText(unsigned __int64,unsigned short *,unsigned int);
	long _OnCheckDiskComplete(int,unsigned long);
	long _OnInUseQueryUser(int *);
	long _OnNeedRestartQueryUser(int *);
	long _SetThisInTLS();
	long _StateTaskDialogCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	long _TaskDialogCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	static long s_ResultTaskDialogCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	static long s_StateTaskDialogCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	static long s_TaskDialogCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	static unsigned char s_Callback(_FMIFS_PACKET_TYPE,unsigned long,void *);
	static unsigned long s_ThreadProc(void *);
	unsigned __int64 _GetGranularityForEstimate(unsigned __int64);
	unsigned char _Callback(_FMIFS_PACKET_TYPE,unsigned long,void *);
	unsigned long _ThreadProc();
	void _ClearTLS();
public:
	static long CreateInstance(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show(HWND__ *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCheckLocationIndexedTask
{
protected:
	long _CheckLocation();
	virtual void v_RunTask();
public:
	static long s_CreateInstance(HWND__ *,IShellItem *,unsigned int,unsigned int,CCheckLocationIndexedTask * *);
};

class CCheckSaveLocationTask
{
protected:
	long _CheckLocation();
	virtual void v_RunTask();
public:
	static long s_CreateInstance(HWND__ *,IShellItem *,SAVE_LOCATION_TYPE,unsigned int,unsigned int,CCheckSaveLocationTask * *);
};

struct CChildId
{
	virtual _ITEMID_CHILD const * GetPtr();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CChkMacroETWLoggerT<CEmptyType>
{
	static CEtwProviderT<void> g_chkMacroETWProvider;
};

struct CChooseColumnsCommand
{
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CCleanRecentDocsCommand
{
	virtual long Execute();
};

struct CClientArray
{
	int FindClient(unsigned long,PROXYCLIENT * *);
};

struct CClientExtractIcon
{
	long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long Extract(char const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetIconLocation(unsigned int,char *,unsigned int,int *,unsigned int *);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long InitNew();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long OnCreating(ICreateProcessInputs *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
};

struct CClientExtractIconCB
{
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
};

class CCloseSession
{
	__int64 _WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _CreateNotifyIcon(HWND__ *);
	int _UpdateNotifyIcon(HWND__ *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned long s_CloseThreadProc(void *);
	static unsigned long s_TipThreadProc(void *);
	unsigned long _CloseThreadProc();
	unsigned long _TipThreadProc();
};

class CClsidFlagChecker
{
	long _Init();
public:
	CClsidFlagChecker(_GUID const *,CClsidFlagChecker::EnumCLSIDHive);
	long IsSet(unsigned short const *);
	~CClsidFlagChecker();
};

struct CCoArrayOfStrings
{
	long InsertAt(unsigned short const *,unsigned __int64);
	~CCoArrayOfStrings();
};

struct CCoSimpleArray<DISPLAY_OBJECT_CONTAINER_DATA,4294967294,CSimpleArrayStandardCompareHelper<DISPLAY_OBJECT_CONTAINER_DATA> >
{
	CCoSimpleArray<DISPLAY_OBJECT_CONTAINER_DATA,4294967294,CSimpleArrayStandardCompareHelper<DISPLAY_OBJECT_CONTAINER_DATA> >();
	~CCoSimpleArray<DISPLAY_OBJECT_CONTAINER_DATA,4294967294,CSimpleArrayStandardCompareHelper<DISPLAY_OBJECT_CONTAINER_DATA> >();
};

struct CCoSimpleArray<Microsoft::WRL::WeakRef,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::WeakRef> >
{
	~CCoSimpleArray<Microsoft::WRL::WeakRef,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::WeakRef> >();
};

struct CCoSimpleArray<SystemSettings::Environment::IEnvironmentChangedEventHandler *,4294967294,CSimpleArrayStandardCompareHelper<SystemSettings::Environment::IEnvironmentChangedEventHandler *> >
{
	~CCoSimpleArray<SystemSettings::Environment::IEnvironmentChangedEventHandler *,4294967294,CSimpleArrayStandardCompareHelper<SystemSettings::Environment::IEnvironmentChangedEventHandler *> >();
};

class CCollapsingClient
{
	int _IsDupe(CNotifyEvent const *,int *);
	int _MaybeAddEvent(CNotifyEvent *,int);
	long _RemoveEvent(int);
protected:
	static void s_DispatchCallback(HWND__ *,unsigned int,unsigned __int64,__int64);
	static void s_DispatchCallbackNoRef(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual int v_ForceWaitForCallbacks();
	virtual ~CCollapsingClient();
public:
	long Flush(int);
	long InitCollapsingClient(CChangeNotify *,_ITEMIDLIST_ABSOLUTE const *,int);
	virtual int IsDead();
	void Notify(CNotifyEvent *,int);
};

struct CCollectionCancelEvent
{
	virtual void DispatchEvent();
};

struct CCollectionChangeEvent
{
	virtual void DispatchEvent();
};

struct CCollectionDispatchEvent
{
	CCollectionDispatchEvent(ICollectionEventSink *);
};

struct CCollectionSink
{
	virtual long OnCancelled();
	virtual long OnCollectionChanged(unsigned int,tagCOLLECTION_CHANGE_STATE);
	virtual long OnGetCountDone(unsigned int,tagCOUNT_TYPE,long);
	virtual long OnItemMoved(IItem *,IItem *);
	virtual long OnItemTranslated(IItem *,IItem *);
	virtual long OnItemsAdded(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnItemsDeleted(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnPrepareDone(unsigned int,long);
	virtual long OnUniqueLeafCountChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CColorizationColor
{
	static CHSBColor const ConvertRGBtoHSB(CRGBColor const &);
	static CRGBColor const ConvertHSBtoRGB(CHSBColor const &);
	static unsigned int GetBitOffsetForColorValueType(_ARGB_COLOR_VALUE_PART);
	void SetColor(double,CRGBColor const &);
public:
	CColorizationColor(double,CHSBColor const &);
	CHSBColor const GetHSBColor();
};

class CColumnDlg
{
	__int64 DlgProc(unsigned int,unsigned __int64,__int64);
	int _SaveState();
	static __int64 s_DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _InitListView();
	void _MoveItem(int);
	void _UpdateDlgButtons(tagNMLISTVIEW const *);
public:
	CColumnDlg(IColumnManager *);
	long ShowDialog(HWND__ *);
};

class CColumnListCommand<CAddColumnCommand>
{
	long _AppendCommandForColumn(_tagpropertykey const &,CDPARelease<IExplorerCommand,CTContainer_PolicyRelease<IExplorerCommand> > *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

class CColumnListCommand<CSelectGroupByColumnCommand>
{
	long _AppendCommandForColumn(_tagpropertykey const &,CDPARelease<IExplorerCommand,CTContainer_PolicyRelease<IExplorerCommand> > *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

class CColumnListCommand<CSelectSortByColumnCommand>
{
	long _AppendCommandForColumn(_tagpropertykey const &,CDPARelease<IExplorerCommand,CTContainer_PolicyRelease<IExplorerCommand> > *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

class CComCatCacheTask
{
protected:
	virtual long InternalResumeRT();
public:
	long Go();
	long Initialize(unsigned long,_GUID const *,unsigned long,_GUID const *,int,void *);
	virtual ~CComCatCacheTask();
};

class CComTaskThread<CCscComTaskContext>
{
	long _CreateManualResetEvent(void * *);
	long _DoCommand(CComTaskThread<CCscComTaskContext>::COMMANDS);
	long _DoTask();
	long _ReadyToAcceptCommands(int);
	long _StartThread();
	static unsigned long _ThreadProc(void *);
	void _CloseEvents();
	void _ThreadProc();
public:
	long DoTask(CComTask<CCscComTaskContext> *);
	long TerminateThread();
	static long CreateInstance(CCscComTaskContext *,CComTaskThread<CCscComTaskContext> * *);
	unsigned long Release();
};

class CComTaskThread<CCscUiComTaskContext>
{
	long _CreateManualResetEvent(void * *);
	long _DoCommand(CComTaskThread<CCscUiComTaskContext>::COMMANDS);
	long _DoTask();
	long _ReadyToAcceptCommands(int);
	long _StartThread();
	static unsigned long _ThreadProc(void *);
	void _CloseEvents();
	void _ThreadProc();
public:
	long DoTask(CComTask<CCscUiComTaskContext> *);
	long TerminateThread();
	static long CreateInstance(CCscUiComTaskContext *,CComTaskThread<CCscUiComTaskContext> * *);
	unsigned long Release();
};

struct CCommandButtonSite
{
	CCommandButtonSite(IUnknown *,HWND__ *,tagRECT);
	static long s_CreateInstance(IUnknown *,HWND__ *,tagRECT,_GUID const &,void * *);
	virtual long ContextSensitiveHelp(int);
	virtual long GetRect(tagRECT *);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCommandFolder
{
	struct CExplorerCommandInfo
	{
		CExplorerCommandInfo(IExplorerCommand *,unsigned long);
	};

	long _AppendCommands(IEnumExplorerCommand *);
	long _AppendFolderTypeCommands(IUnknown *);
	long _AppendLegacyCommands(IEnumUICommand *);
	long _AppendOrganizeCommand(IUnknown *);
	long _AppendRightSideCommands(IUnknown *);
	long _CreateFolder(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _EnumFolderCommandsForCFD(IUnknown *);
	long _EnumFolderCommandsForExplorer(IUnknown *);
	long _EnumLegacyCommands(IShellFolderViewCB *);
	long _FindByGUID(_GUID const &,IExplorerCommand * *,unsigned int *);
	long _GetCommandFromItemID(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _GetView(IUnknown *,_GUID const &,void * *);
	long _InvokeItem(IDataObject *);
	unsigned long _GetAttributes(_ITEMID_CHILD const *,unsigned long);
	virtual ~CCommandFolder();
	void _AdjustPosition();
	void _UnduplicateCommands();
public:
	CCommandFolder();
	long GetCommandsFromSite(IUnknown *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCommandFolderEnum
{
protected:
	virtual int _Next(_ITEMID_CHILD * *);
public:
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCommandModule
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCommandModuleInner
{
	bool IsInAppHostedView();
	int _CanShowPane(unsigned short const *,_GUID const &,_GUID);
	long _AddTrackedElement(_ITEMID_CHILD const *,_GUID const &,DirectUI::Element *,int);
	long _CreateButton(IShellFolder *,_ITEMID_CHILD const *,ExplorerCommandItem const *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long _CreateButtons();
	long _CreateCustomElement(unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long _CreateSplitButton(IShellFolder *,_ITEMID_CHILD const *,ExplorerCommandItem const *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long _DestroyButton(int);
	long _DestroyButtons();
	long _GetButtonStyles();
	long _GetCommandElementParser(unsigned int,DirectUI::DUIXmlParser * *);
	long _InsertButtonToBand(_GUID const &,DirectUI::Element *);
	long _RefreshButtons();
	long _ShowOverflowMenu(DirectUI::Element *);
	long _UpdateButton(IShellFolder *,_ITEMID_CHILD *,IShellItemArray *,int *,int *,int *);
	static DirectUI::Value * s_GetSheetCallback(unsigned short const *,void *);
	virtual ~CCommandModuleInner();
	void ToggleHelpButton(bool);
	void _CheckShouldHideCommands();
	void _DeferRefreshButtons(int);
	void _EndRefreshEvent();
	void _GetDisplayedAndTotalCommands(int *,int *,int *);
	void _InitRefreshButtons(int);
	void _InsertBackgroundTaskButton(ExplorerCommandItem const *,unsigned int);
	void _StartRefreshEvent();
	void _TogglePane(unsigned short const *);
	void _UpdatePreviewButton();
public:
	CCommandModuleInner();
	static DirectUI::IClassInfo * Class;
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::Element * GetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnContentsChanged();
	virtual long OnFolderChanged();
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
};

struct CCommandModuleSite
{
	virtual long ContextSensitiveHelp(int);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCommandStateBase
{
protected:
	virtual ~CCommandStateBase();
public:
	virtual long Initialize(unsigned short const *,IPropertyBag *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCommandStoreShimBase
{
protected:
	long _InitializeFromPropertyBag(IPropertyBag *);
	virtual long v_InitializeFromPropertyBag(IPropertyBag *);
public:
	CCommandStoreShimBase(_GUID const &);
	virtual long GetClassID(_GUID *);
	virtual long GetSelection(_GUID const &,void * *);
	virtual long InitNew();
	virtual long Initialize(unsigned short const *,IPropertyBag *);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetDirectory(unsigned short const *);
	virtual long SetKeyState(unsigned long);
	virtual long SetNoShowUI(int);
	virtual long SetParameters(unsigned short const *);
	virtual long SetPosition(tagPOINT);
	virtual long SetSelection(IShellItemArray *);
	virtual long SetShowWindow(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CCommandStoreShimBase();
};

class CCommandStoreShimOverCommandFolder
{
	long _GetDefaultCommandFolderAndView(IShellFolder * *,IShellView * *);
	long _GetExplorerCommand(IExplorerCommand * *);
	long _GetExplorerCommandFromFolderViewCB(IShellFolder *,IShellView *,IExplorerCommand * *);
	long _GetSpecifiedCommandFolderAndView(IShellFolder * *,IShellView * *);
	long _SearchEnumExplorerCommand(IEnumExplorerCommand *,IExplorerCommand * *);
	long _SearchEnumUICommand(IEnumUICommand *,IExplorerCommand * *);
protected:
	virtual long v_InitializeFromPropertyBag(IPropertyBag *);
public:
	CCommandStoreShimOverCommandFolder(_GUID const &);
	virtual long Execute();
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

class CCommandStoreShimOverIContextMenuCB
{
	long _GetMenuCommandId(HMENU__ *,HWND__ *,IContextMenuCB *,IDataObject *,unsigned int,unsigned int *);
	long _ValidateOrInvokeVerb(IDataObject *,int);
public:
	CCommandStoreShimOverIContextMenuCB();
	virtual long Execute();
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

struct CCommonCommandState
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
};

struct CCommonLayoutDefinition
{
	virtual long ChooseLayout(tagLAYOUTTYPE);
	virtual long GetLayoutDefinition(IUnknown * *);
	virtual long GetLayoutProperties(LAYOUTPROPERTYFLAGS *);
	virtual long GetPossibleRedirectTarget(_GUID const &,int *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCommonLayoutModifier
{
	virtual long AdjustLayout(IUnknown *,IUnknown * *);
	virtual long ChooseBrowserLayout(BROWSERLAYOUTTYPE);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCommonParentUndoUnit
{
	IOleUndoUnit * _PeekStack();
	IOleUndoUnit * _PopStack();
	int _GetStackSize();
	long _PushStack(IOleUndoUnit *);
	unsigned long _GetMemoryUsage(IOleUndoUnit *);
public:
	CCommonParentUndoUnit();
	long DiscardFrom(IOleUndoUnit *);
	long DoAll(IOleUndoManager *,int *);
	long EnumDoableWithOwner(IUnknown *,IEnumOleUndoUnits * *);
	long GetLastDoDescription(unsigned short * *);
	long PopItem(IOleUndoUnit * *);
	virtual long Add(IOleUndoUnit *);
	virtual long Close(IOleParentUndoUnit *,int);
	virtual long DisconnectObject(unsigned long);
	virtual long Do(IOleUndoManager *);
	virtual long FindUnit(IOleUndoUnit *);
	virtual long GetChildUnitCount(unsigned long *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long GetMemoryUsage(unsigned long *);
	virtual long GetParentState(unsigned long *);
	virtual long GetUnitType(_GUID *,long *);
	virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
	virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual long OnNextAdd();
	virtual long Open(IOleParentUndoUnit *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReleaseMarshalData(IStream *);
	virtual long SetLongText(unsigned short const *);
	virtual long SetShortText(unsigned short const *);
	virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void GetUndoText(unsigned short *,unsigned int,int);
	~CCommonParentUndoUnit();
};

class CCommonPlaceFolder
{
	bool _CanAddFavoriteInBrowser();
	long _AddLocationInBrowser();
	static long _AddItem(IShellItem *);
	static long _DeleteQueryResults(IItemCollection *,unsigned int,unsigned int);
	static long _QueryLinks(IShellItem *,IItemCollection * *);
	virtual long v_InternalQueryInterface(_GUID const &,void * *);
	virtual ~CCommonPlaceFolder();
public:
	CCommonPlaceFolder();
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateNewIDList(unsigned short const *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD * *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFlags(SEARCHBOX_FLAGS *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetMRULocation(_GUID *);
	virtual long GetNavigationOptions(NAVIGATIONOPTIONS *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetPropertiesToApply(IPropertyStore *,_GUID const &,void * *);
	virtual long GetRealLocations(IShellItemArray * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetSuggestPopupSetting(SEARCH_BOX_SUGGEST_POPUP_SETTING *);
	virtual long GetTimerDelay(unsigned int *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long IsTypeSupported(unsigned short const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long OnBindToObject(IShellFolder *,_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
	virtual long OnCreateViewObject(IShellFolder *,HWND__ *,_GUID const &,void * *);
	virtual long OnGetAttributesOf(IShellFolder *,unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long OnGetDetailsEx(IShellFolder *,_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long OnGetDisplayNameOf(IShellFolder *,_ITEMID_CHILD const *,unsigned long,unsigned short *,int);
	virtual long OnGetUIObjectOf(IShellFolder *,HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,void * *);
	virtual long OnParseDisplayName(IShellFolder *,HWND__ *,IBindCtx *,unsigned short *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCommonPlacesViewCB
{
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

struct CCompareCompactItem
{
	int Compare(CompactItem const &,CompactItem const &);
};

struct CComposeCallback
{
	virtual long ForceImagePresent(IAggregateImageList *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CConditionEvaluator
{
	long _DoesItemMatchAnd(ICondition *,int,TRIBIT *,int *);
	long _DoesItemMatchConditionWorker(ICondition *,int,TRIBIT *,int *);
	long _DoesItemMatchLeafCondition(ICondition *,int,TRIBIT *,int *);
	long _DoesItemMatchOr(ICondition *,int,TRIBIT *,int *);
	long _EvaluateProperty(tagPROPVARIANT const &,tagPROPVARIANT const &,_tagpropertykey const &,tagCONDITION_OPERATION,ICondition *,int,int *,int *);
protected:
	unsigned long _GetInputLocale();
	virtual long v_DoesItemMatchLeafCondition(tagPROPVARIANT const &,_tagpropertykey const &,tagCONDITION_OPERATION,ICondition *,int,TRIBIT *,int *);
public:
	long DoesItemMatchCondition(TRIBIT *);
	long FilterConditionCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,_tagpropertykey const &,tagCONDITION_OPERATION,int,int,IPropertyInfoProvider *,int,IPropertyChangeArray *,BITSSET,unsigned short *,unsigned long,int *,int *);
	long FinalizeDeferredConditions();
	long LikeOpCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,tagCONDITION_OPERATION,_tagpropertykey const &,int,int,IPropertyInfoProvider *,int,unsigned long,int *);
	virtual long Initialize(tagCONDITIONEVALINFO const *,int);
	virtual ~CConditionEvaluator();
};

struct CConditionallySetTemporarySite
{
	CConditionallySetTemporarySite(IUnknown *,IUnknown *);
	void ClearSite();
};

class CConfirmConflictItem
{
	static long s_Duplicate(CONFIRM_CONFLICT_ITEM *,CONFIRM_CONFLICT_ITEM const *);
public:
	CConfirmConflictItem();
	~CConfirmConflictItem();
};

class CConfirmConflictResultInfo
{
	static long s_Duplicate(CONFIRM_CONFLICT_RESULT_INFO *,CONFIRM_CONFLICT_RESULT_INFO const *);
public:
	CConfirmConflictResultInfo();
	~CConfirmConflictResultInfo();
};

struct CConfirmationCommandBase
{
	static long s_CreateInstance<CAddRemoveProgramsCommand>(unsigned int,unsigned int,OPERATION_INTERRUPT_RESPONSE_SINGLE,_GUID const &,void * *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetInterruptResponse(OPERATION_INTERRUPT_RESPONSE_SINGLE *);
	virtual long GetName(unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CConfirmationDlgBase
{
	static __int64 s_ConfirmDialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CConfirmationInterrupt
{
	long _FormatDescription(unsigned short const *,unsigned short * *);
	long _GetErrorInformation(unsigned short * *);
	long _GetMergeFolderInfo(unsigned short * *);
	long _GetOwnerInformation(unsigned short * *);
	long _GetSourceCreationDate(unsigned short * *);
	long _Initialize(CONFIRMOP const *);
	long _InitializeFromInterruptInfo(CONFIRMOP const *);
	long _InitializeSpecialCases(CONFIRMOP const *);
	long _SetAppUsageFromInfo(unsigned short * *,bool);
	unsigned int _GetElevatedDescriptionResource(CONFIRMOP const *);
public:
	static long s_CreateInstance(CONFIRMOP const *,_GUID const &,void * *);
	virtual long GetCustomCommands(_GUID const &,void * *);
	virtual long GetDefaultResponse(OPERATION_INTERRUPT_FLAGS *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetFlags(OPERATION_INTERRUPT_FLAGS *);
	virtual long GetItem(IShellItem * *);
	virtual long GetLastMessageResourceId(unsigned int *);
	virtual long GetMultipleDelete(int *);
	virtual long GetTitle(unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CConflictDialogData
{
	long _ScheduleWorkItem(CConflictDialogData::DIALOG_DATA_WORK_TYPE,unsigned long);
	unsigned long _DialogDataWorkerProc();
	void _DrainWorkQueue();
	void _ProcessRequestItem(unsigned long);
protected:
	CConflictDialogData();
public:
	static unsigned long s_CreateAndMarshalOnNewSTASyncProc(void *);
	static unsigned long s_DialogDataWorkerProc(void *);
	virtual long CancelRequest(unsigned long);
	virtual long Cleanup();
	virtual long GetConflictCount(unsigned long *);
	virtual long GetConflictItemsStateCount(INDIVIDUAL_CONFLICT_MAPPING_DATA const *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned long *);
	virtual long GetInterruptResponseAndCleanup(OPERATION_INTERRUPT_RESPONSE_AGGREGATED * *);
	virtual long Initialize(IConflictInterrupt *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RequestConflictData(unsigned long);
	virtual long SetDialogCallback(IConflictDialogCallback *);
	virtual long ThumbnailDataReady(unsigned long,CONFLICT_ITEM_DATA_FLAGS,HBITMAP__ *);
	virtual long UpdateConflictItemState(INDIVIDUAL_CONFLICT_MAPPING_DATA,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	virtual long UpdateConflictItemsStateFromData(INDIVIDUAL_CONFLICT_MAPPING_DATA const *,unsigned long,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CConflictDialogDataDecorator
{
	long _Initialize(IConflictDialogData *,IConflictDialogCallback *,CMappingData const *);
	void _UpdateInterruptResponseItemsKept(CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE,INDIVIDUAL_CONFLICT_MAPPING_DATA const &);
	void s_UpdateKeptCountsOnMasterChange(CONFLICT_CHECKBOX_STATE,unsigned long,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned long *);
protected:
	CConflictDialogDataDecorator();
public:
	static long CreateInstance(IConflictDialogData *,IConflictDialogCallback *,CMappingData const *,_GUID const &,void * *);
	virtual long CancelRequest(unsigned long);
	virtual long GetConflictCount(unsigned long *);
	virtual long GetConflictItemStateCount(unsigned long *,unsigned long *,unsigned long *,unsigned long *);
	virtual long GetConflictItemsStateCount(INDIVIDUAL_CONFLICT_MAPPING_DATA const *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned long *);
	virtual long GetGlobalConflictState(CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE *);
	virtual long InitializeAsCurrentMode();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RequestConflictData(unsigned long);
	virtual long SetDialogCallback(IConflictDialogCallback *);
	virtual long UpdateComplementaryConflictState(CONFLICT_CHECKBOX_STATE,CONFLICT_CHECKBOX_STATE);
	virtual long UpdateConflictItemState(INDIVIDUAL_CONFLICT_MAPPING_DATA,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	virtual long UpdateConflictItemsStateFromData(INDIVIDUAL_CONFLICT_MAPPING_DATA const *,unsigned long,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	virtual long UpdateGlobalConflictState(CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CConflictInterrupt
{
	long _GetDestinationItem(unsigned long,_GUID const &,void * *);
	long _GetItemMetadata(unsigned long,IFileOperationConflictItemsMetadata *,CONFLICT_ITEM_METADATA *);
	long _GetSourceItem(unsigned long,_GUID const &,void * *);
	long _Initialize(CONFIRM_CONFLICT_PARAMS const *,ISyncMgrConflictItems *,IConflictOperationScheduler *);
public:
	static long s_CreateInstance(CONFIRM_CONFLICT_PARAMS const *,ISyncMgrConflictItems *,IConflictOperationScheduler *,_GUID const &,void * *);
	virtual long CancelRequest(unsigned long);
	virtual long GetConflictCount(unsigned long *);
	virtual long GetConflictFilterMapping(CONFLICT_FILTER,INDIVIDUAL_CONFLICT_MAPPING_DATA * *,unsigned int *,INDIVIDUAL_CONFLICT_MAPPING_DATA * *,unsigned int *,unsigned long * *,unsigned int *,unsigned int *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetDestinationItem(_GUID const &,void * *);
	virtual long GetFlags(OPERATION_INTERRUPT_FLAGS *);
	virtual long GetResolutionDescription(RESOLUTION_TYPE,unsigned short * *);
	virtual long GetSourceItem(_GUID const &,void * *);
	virtual long GetTitle(unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RequestConflictData(unsigned long,INDIVIDUAL_CONFLICT_FAST_DATA *,IShellItem * *,IShellItem * *);
	virtual long SetConflictItemDataCallback(IConflictItemDataCallback *);
	virtual long ThumbnailDataReady(unsigned long,CONFLICT_ITEM_DATA_FLAGS,HBITMAP__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CConflictResolutionDlg
{
	bool _CompareDates(CItemTile *);
	bool _CompareSizes(CItemTile *);
	long _CreateAndAddItem(unsigned int,CONFIRM_CONFLICT_ITEM const &,DirectUI::Element *,CItemTile * *);
	long _GetShellItems(unsigned int *,IShellItem * * *);
	long _InitFileConflictUI();
	long _InitItems();
	long _InitMainUI();
	long _InitResolveWith();
	long _InitSyncConflictUI();
	void _CheckForDeletedItem();
protected:
	static __int64 s_DialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static int s_HelpNotifyHandler(unsigned int,unsigned __int64,__int64,__int64 *,void *);
	static int s_ResolveNotifyHandler(unsigned int,unsigned __int64,__int64,__int64 *,void *);
	virtual __int64 OnCommand(unsigned __int64,__int64);
	virtual __int64 OnDestroy(unsigned __int64,__int64);
	virtual __int64 OnHelp();
	virtual __int64 OnInitDialog(unsigned __int64,__int64);
	virtual __int64 OnResolve();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnGetDlgCode(tagMSG *,__int64 *);
public:
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element * *,HINSTANCE__ *);
	static long ShowDialog(CONFIRM_CONFLICT_PARAMS const *,ISyncMgrConflictItems *,CONFIRM_CONFLICT_RESULT *,ISyncMgrConflictResolutionItems * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual ~CConflictResolutionDlg();
};

struct CConnectionPoint
{
	virtual long Advise(IUnknown *,unsigned long *);
	virtual long EnumConnections(IEnumConnections * *);
	virtual long GetConnectionInterface(_GUID *);
	virtual long GetConnectionPointContainer(IConnectionPointContainer * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Unadvise(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	~CConnectionPoint();
};

struct CConnectionPointEnum
{
	CConnectionPointEnum(CConnectionPoint *,int);
	virtual long Clone(IEnumConnections * *);
	virtual long Next(unsigned long,tagCONNECTDATA *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CContainerIterator
{
	static long NextItem(IEnumShellItems *,IShellItem2 * *);
};

struct CContextMenuCBImpl
{
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CContextMenuExtensionImpl
{
protected:
	long GetItem(_GUID const &,void * *);
	virtual int get_DefaultMenu(unsigned int *);
	virtual long _OnQueryContextMenu(HMENU__ *,unsigned int);
	virtual ~CContextMenuExtensionImpl();
public:
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CContextMenuForwarder
{
protected:
	virtual ~CContextMenuForwarder();
public:
	CContextMenuForwarder(IUnknown *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetMenuRestrictions(DEFAULT_FOLDER_MENU_RESTRICTIONS,DEFAULT_FOLDER_MENU_RESTRICTIONS *);
	virtual long GetSelection(_GUID const &,void * *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(HWND__ *,IContextMenuCB *,_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,unsigned int,_ITEMID_CHILD const * const *,IUnknown *,unsigned int,HKEY__ * const *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetHandlerClsid(_GUID const &);
	virtual long SetInvokeVerbs(unsigned short const * const * const,unsigned int);
	virtual long SetMenuRestrictions(DEFAULT_FOLDER_MENU_RESTRICTIONS);
	virtual long SetSelection(IShellItemArray *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CContextMenuOnContextMenuArray
{
protected:
	CContextMenuOnContextMenuArray();
	virtual long _QueryNthContextMenu(unsigned int,HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual ~CContextMenuOnContextMenuArray();
public:
	long Initialize(IContextMenu * * const,unsigned int);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetMenuRestrictions(DEFAULT_FOLDER_MENU_RESTRICTIONS,DEFAULT_FOLDER_MENU_RESTRICTIONS *);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(HWND__ *,IContextMenuCB *,_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,unsigned int,_ITEMID_CHILD const * const *,IUnknown *,unsigned int,HKEY__ * const *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetHandlerClsid(_GUID const &);
	virtual long SetInvokeVerbs(unsigned short const * const * const,unsigned int);
	virtual long SetMenuRestrictions(DEFAULT_FOLDER_MENU_RESTRICTIONS);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CContextMenuOnContextMenuArrayNoDuplicateVerbs
{
protected:
	CContextMenuOnContextMenuArrayNoDuplicateVerbs();
	long Initialize(IContextMenu * * const,unsigned int);
	virtual ~CContextMenuOnContextMenuArrayNoDuplicateVerbs();
public:
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
};

class CContextMenuOnHMENU
{
	void _FlipMenu(HMENU__ *,int);
	void _RebaseMenu(HMENU__ *);
public:
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CContextMenuRenameVerb
{
protected:
	virtual ~CContextMenuRenameVerb();
public:
	CContextMenuRenameVerb(IUnknown *,unsigned long);
	long Initialize(unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
};

class CContextMenuReplaceVerb
{
protected:
	virtual long _QueryNthContextMenu(unsigned int,HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual ~CContextMenuReplaceVerb();
public:
	CContextMenuReplaceVerb();
	long Init(REPLACEVERB const *,int);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
};

struct CContextMenuWithoutVerbs
{
	CContextMenuWithoutVerbs(IUnknown *,unsigned short const *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
};

class CControlPanelAppletList
{
	long _AddAppletsToCategories(IShellFolder2 *,IEnumIDList *,bool);
	static int s_FindAppletInSortArray(unsigned short const *,unsigned short const * const *,int);
	static int s_SortAppletsAlphabetically(int const *,int const *,__int64);
	static int s_SortAppletsInCategory(int const *,int const *,__int64);
	virtual ~CControlPanelAppletList();
public:
	CControlPanelAppletList();
	long EnsureLoaded(unsigned long,IShellFolder2 * *,IEnumIDList * *);
	long LoadSlowApplets(IShellFolder2 *,IEnumIDList *,bool *);
	static bool AppletMatchesQuery(CControlPanelItem *,unsigned short const *,ICondition *,bool *);
};

struct CControlPanelAssocHandler
{
	virtual long CreateInvoker(IDataObject *,IAssocHandlerInvoker * *);
	virtual long GetAppID(unsigned short * *);
	virtual long GetIconLocation(unsigned short * *,int *);
	virtual long GetName(unsigned short * *);
	virtual long GetProgID(unsigned short * *);
	virtual long GetUIName(unsigned short * *);
	virtual long Invoke(IDataObject *);
	virtual long IsRecommended();
	virtual long MakeDefault(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetAppID(unsigned short const *);
	virtual long SetProgID(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CControlPanelCategoryEnum
{
	static long CreateInstance(_GUID const &,void * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
};

class CControlPanelCategoryFolder
{
	CPCATIDL * _IsValidCategoryPidl(_ITEMIDLIST_RELATIVE const *);
	long _GetCategoryIcon(tagCPCAT,_GUID const &,void * *);
public:
	static long CreateIDList(unsigned long,_ITEMID_CHILD * *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFlags(SEARCHBOX_FLAGS *);
	virtual long GetFolderType(_GUID *);
	virtual long GetMRULocation(_GUID *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetSuggestPopupSetting(SEARCH_BOX_SUGGEST_POPUP_SETTING *);
	virtual long GetTimerDelay(unsigned int *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CControlPanelCategoryList
{
	long _LoadCategories(IShellFolder2 *);
public:
	virtual long EnsureLoaded();
};

struct CControlPanelCategoryModule
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CControlPanelCategoryModuleInner
{
	CPICONPREF_VAL _LoadIconSizePref();
	__int64 _WndProc(unsigned int,unsigned __int64,__int64);
	bool _ShouldAppletOpenInNewWindow(_ITEMIDLIST_ABSOLUTE const *);
	long _AddElements();
	long _AddHelpLink(DirectUI::Element *);
	long _AddTasks(CControlPanelTaskEnum *,DirectUI::Element *);
	long _CreateSectionElement(CControlPanelItem *,CControlPanelTaskEnum *,TASKMATCH *,CControlPanelLink * *);
	long _ExecuteApplet(_ITEMIDLIST_ABSOLUTE const *);
	long _GetSearchQuery();
	long _Navigate(_ITEMIDLIST_ABSOLUTE const *);
	long _SetFocusToFirstItem();
	long _ShowAppletContextMenu(_ITEMIDLIST_ABSOLUTE const *,tagPOINT *);
	long _StartIconWorkerThread(DirectUI::Element *,CControlPanelItem *,bool);
	static DirectUI::Value * s_GetSheetCallback(unsigned short const *,void *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static int s_SortAppletsInSearchResultsRank(CControlPanelCategoryModuleInner::SEARCHRESULTAPPLET const *,CControlPanelCategoryModuleInner::SEARCHRESULTAPPLET const *,__int64);
	void _AddRankedAppletsToPanel(CDSA<CControlPanelCategoryModuleInner::SEARCHRESULTAPPLET> *,DirectUI::Element *);
	void _AddViewByButton(DirectUI::Element *);
	void _OnClickedViewByButton(tagPOINT *);
	void _SearchHelp(unsigned short const *);
protected:
	virtual void OnHosted(DirectUI::Element *);
	virtual ~CControlPanelCategoryModuleInner();
public:
	CControlPanelCategoryModuleInner();
	long Load();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OptionallyTakeInitialFocus(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
	void OnItemsLoaded(bool,IShellFolder2 *,IEnumIDList *);
};

class CControlPanelCategoryViewCallback
{
	long _OnSFVMDelayWindowCreate(unsigned long,HWND__ *);
public:
	CControlPanelCategoryViewCallback(CControlPanelCategoryFolder *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CControlPanelDataWorkItem
{
	long _LoadFastData();
	long _LoadSlowData();
public:
	CControlPanelDataWorkItem();
	long Initialize(CControlPanelCategoryModuleInner *,CControlPanelAppletList *,CControlPanelCategoryList *,CControlPanelTasks *,bool,IUnknown *,IShellFolder2 *,IEnumIDList *);
	virtual long Dispatch();
	virtual long DoWork();
};

class CControlPanelEnum
{
	bool _CanEnumerateApplet(CPLMODULE const *,CPLITEM const *,_ITEMID_CHILD * *);
	bool _NextCachedCpl(_ITEMID_CHILD * *);
	bool _NextCachedWowCpl(_ITEMID_CHILD * *);
	bool _NextNonCachedCpl(_ITEMID_CHILD * *);
	long _UpdateWowCache();
	~CControlPanelEnum();
public:
	CControlPanelEnum(unsigned long,IRegItemCustomAttributes *);
	long Init();
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long SetFlags(unsigned long,PRIVENUMF);
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CControlPanelEnumHandlers
{
	virtual long Next(unsigned long,IAssocHandler * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CControlPanelFolder
{
	bool _FindMatchingAppletId(HKEY__ *,unsigned short const *,unsigned short *,unsigned int);
	bool _IsRegisteredCPLApplet(unsigned short const *);
	bool _LookupExtPropRegValName(int,unsigned short *,int,unsigned short *,unsigned int,bool *,bool *);
	long _EnumAndCacheExtPropRegValues(HKEY__ *,HKEY__ *,int,bool,bool);
	long _GetAppletPathForTemporaryAppId(unsigned short const *,unsigned short *,unsigned int);
	long _GetExtPropVariantFromCachedName(int,_tagpropertykey const &,unsigned short *,int,tagVARIANT *);
	long _GetPidlFromAppletId(unsigned short const *,_ITEMID_CHILD * *);
	long _GetTemporaryAppIdForApplet(_IDCONTROL const *,unsigned short *,unsigned int);
	long _InitExtPropRegValNameCache(int,_tagpropertykey const &,bool);
	long _PropertyFromPidl(_IDCONTROL const *,_tagpropertykey const &,bool,tagVARIANT *);
	static CDSA<CControlPanelFolder::PATHTOAPPID> s_dsaTemporaryAppId;
	static _IDCONTROL * _IsValid(_ITEMIDLIST_RELATIVE const *);
	static _IDCONTROLW const * _IsUnicodeCPLWorker(_IDCONTROL const *);
	static _RTL_SRWLOCK s_srwTemporaryAppIdLock;
	static bool _IsBitLockerOrDeviceEncryptionSupported();
	static bool _IsDigitizerAttached();
	static bool _IsIrDASupported();
	static bool _IsWowCPL(_IDCONTROL const *);
	static int _CacheIndexFromPropkey(_tagpropertykey const &);
	static int _DestroyExtPropsRegValEntry(void *,void *);
	static int s_DSAFindAppId(CControlPanelFolder::PATHTOAPPID const *,CControlPanelFolder::PATHTOAPPID const *,__int64);
	static int s_DSAFindAppletPath(CControlPanelFolder::PATHTOAPPID const *,CControlPanelFolder::PATHTOAPPID const *,__int64);
	static long _GetDescription(_IDCONTROL const *,unsigned short *,unsigned int);
	static long _GetExtPropRegKey(HKEY__ *,_tagpropertykey const &,bool,HKEY__ * *,HKEY__ * *);
	static long _GetFullCPLName(_IDCONTROL const *,bool,unsigned short *,unsigned int);
	unsigned long _CacheExtPropRegValName(int,unsigned short const *,unsigned short const *,bool,bool);
	unsigned long _NormalizeCplSpec(unsigned short *,unsigned short *,unsigned int);
	unsigned long _NormalizePath(unsigned short const *,unsigned short *,unsigned int);
	void _TrimSpaces(unsigned short *);
protected:
	static long GetDisplayName(_IDCONTROL const *,unsigned short *,unsigned int);
	static long GetExecName(_IDCONTROL const *,bool,unsigned short *,unsigned int);
	static long GetModule(_IDCONTROL const *,unsigned short *,unsigned int);
	static long GetModuleMapped(_IDCONTROL const *,bool,unsigned short *,unsigned int,unsigned int *,unsigned short *,unsigned int);
	virtual long v_InternalQueryInterface(_GUID const &,void * *);
	virtual ~CControlPanelFolder();
public:
	CControlPanelFolder(IUnknown *,tagCPCAT);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetCustomAttributes(_ITEMID_CHILD const *,unsigned long,tagControlPanelCategoryInfo *,unsigned long *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFlags(SEARCHBOX_FLAGS *);
	virtual long GetFolderType(_GUID *);
	virtual long GetMRULocation(_GUID *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetRealLocations(IShellItemArray * *);
	virtual long GetSuggestPopupSetting(SEARCH_BOX_SUGGEST_POPUP_SETTING *);
	virtual long GetTimerDelay(unsigned int *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual long Update(IBindCtx *,_ITEMID_CHILD const *,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CControlPanelIconWorkItem
{
	long _LoadIcon();
public:
	CControlPanelIconWorkItem(DirectUI::Element *,CControlPanelItem *,bool);
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long Dispatch();
	virtual long DoWork();
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

struct CControlPanelItem
{
	static long s_Create(CControlPanelItem * *);
	unsigned long Release();
};

class CControlPanelItemListBase
{
protected:
	long AppendItem(IShellFolder2 *,_ITEMID_CHILD *,int *);
	virtual long EnsureLoaded();
	virtual ~CControlPanelItemListBase();
public:
	unsigned long Release();
};

class CControlPanelLink
{
	long _BeginDrag();
public:
	CControlPanelLink();
	long AdjustAppletPidlForCategoryView();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnDestroy();
	virtual void OnInput(DirectUI::InputEvent *);
	void SetNavTaskCommand(CControlPanelNavLinkCommand *);
};

struct CControlPanelNavLinkCommand
{
	CControlPanelNavLinkCommand * Copy();
	bool CanInvoke(IOpenControlPanel *);
	long Invoke(HWND__ *,IUnknown *);
	~CControlPanelNavLinkCommand();
};

struct CControlPanelNavModule
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CControlPanelNavModuleInner
{
	bool _IsAnimationAllowed();
	long _EnableAppletModeLinks(bool);
	long _EnableSelectedCategoryLink(bool);
	long _GetIsSearchResults();
	long _ShowElementsForMode();
	long _UpdateCategoryList(_ITEMIDLIST_ABSOLUTE const *);
	void _FadeIn(DirectUI::Element *,int);
	void _FadeOut(DirectUI::Element *,int,CAnimationCallback *);
	void _Navigate(_ITEMIDLIST_ABSOLUTE const *);
	void _UpdateAppletModeLinks(CControlPanelNavLinks *);
protected:
	virtual void OnHosted(DirectUI::Element *);
	virtual ~CControlPanelNavModuleInner();
public:
	CControlPanelNavModuleInner();
	long Load();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnEvent(DirectUI::Event *);
};

class CControlPanelPage
{
protected:
	virtual long v_GetSearchTargetServices(_GUID const &,void * *);
public:
	CControlPanelPage();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual void LogCPLPerfTrackStopEvent();
};

class CControlPanelTaskEnum
{
	static int _DestroyTaskCB(CONTROLPANELTASK *,void *);
public:
	void Destroy();
};

class CControlPanelTasks
{
	bool _ReachedEndElement(IXmlReader *);
	long _AddTaskIdsToCategoryDSA(IXmlReader *,CDSA<TASKWITHOVERRIDE> * const);
	long _CreateEnum(CDSA<TASKWITHOVERRIDE> *,ICondition *,unsigned short const *,TASKMATCH *,CControlPanelTaskEnum * *);
	long _GetAppletEnum(unsigned short const *,tagCPCAT,ICondition *,unsigned short const *,TASKMATCH *,CControlPanelTaskEnum * *);
	long _GetElementText(IXmlReader *,unsigned short const * *);
	long _IncreaseTaskKeywordsBuffer(unsigned short * *,int *);
	long _LoadAppletTasks(IShellFolder2 *,unsigned long,IEnumIDList *);
	long _LoadAppletTasksFromXml(IXmlReader *,unsigned short const *);
	long _LoadCategoryTasks(IXmlReader *,unsigned short const *,CDSA<TASKWITHOVERRIDE> * const,int);
	long _LoadHomePageTasks();
	long _LoadTaskCondition(IXmlReader *,ITaskCondition * *);
	long _LoadTaskConditionParams(IXmlReader *,INamedPropertyStore * *);
	long _LoadTasksFromXml(IXmlReader *,CDPACoTaskMem<unsigned short> *);
	long _ReachedCategoryOrEndElement(IXmlReader *,unsigned short const *);
	static bool _SearchTask(CONTROLPANELTASK *,TASKWITHOVERRIDE *,ICondition *,unsigned short const *,TASKMATCH *);
	static int _DestroyTaskCB(CONTROLPANELTASK *,void *);
	static int _DestroyTaskIdsCB(TASKWITHOVERRIDE *,void *);
	static long _LoadXMLFromExternalFile(unsigned short const *,IXmlReader * *);
	static long _LoadXMLFromExternalResource(unsigned short const *,IXmlReader * *);
	static unsigned short * _GetControlPanelName(unsigned short const *);
	static void _CopyTask(CONTROLPANELTASK const *,unsigned short const *,CONTROLPANELTASK *);
	void _APPLETTASKS_Destroy(APPLETTASKS *);
	~CControlPanelTasks();
public:
	CControlPanelTasks();
	CONTROLPANELTASK * GetTask(int);
	bool CanShowTask(CONTROLPANELTASK const *);
	int GetCount();
	int GetTaskIndex(_GUID const &);
	long AddTasksFromSlowApplets(IShellFolder2 *,IEnumIDList *);
	long EnsureHomePageTasksLoaded();
	long EnsureLoaded(IShellFolder2 *,IEnumIDList *,unsigned long);
	static long ExecuteTask(IUnknown *,unsigned short const *,bool,_ITEMID_CHILD const *);
	unsigned long Release();
};

class CControlPanelTypeAhead
{
	int _GetFocusIndex();
	long _FindAndSelectItem(unsigned short const *,bool);
	long _IncrementSearchString(unsigned short);
	static int s_DSA_FindAppletElement(APPLETELEMENT const *,APPLETELEMENT const *,__int64);
public:
	void OnInput(DirectUI::KeyboardEvent *);
};

struct CControlPanelViewCallback
{
	CControlPanelViewCallback(CControlPanelFolder *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CCopyAsPathMenu
{
	bool _IsNavigatedToRecycleBin();
	long _Invoke(IDataObject *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCopyHook
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned int CopyCallback(HWND__ *,unsigned int,unsigned int,char const *,unsigned long,char const *,unsigned long);
	virtual unsigned int CopyCallback(HWND__ *,unsigned int,unsigned int,unsigned short const *,unsigned long,unsigned short const *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCopyItemCachedData
{
	static int s_DataCompare(COPY_CACHE_ITEM const *,COPY_CACHE_ITEM const *,__int64);
	static int s_DataDestroy(COPY_CACHE_ITEM *,void *);
public:
	long AddItem(IShellItem *,IFileOperation *);
	long LookupAndRemoveFromCache(IShellItem *,IFileOperation * *);
};

class CCopyMoveToChooseFolder
{
	long _SetupContextMenu(IShellItemArray *,IBindCtx *,IContextMenu * *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCopyMoveToEnumeration
{
	long _DeDupKnownFolders(IShellItem *);
	long _FailIfLocationIsBlocklisted(IShellItem *);
	long _GetFrequentDestination(unsigned int,IExplorerCommand * *);
	long _GetKnownFolderDestination(unsigned int,IExplorerCommand * *);
	long _GetNextSubCommand(IExplorerCommand * *);
public:
	CCopyMoveToEnumeration(bool);
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCopyMoveToItem
{
	long _EnsureDestination(HWND__ *,_ITEMIDLIST_ABSOLUTE * *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCopyMoveToMenu
{
	void _GenerateDialogTitle(unsigned short *,unsigned int);
public:
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetEnumFlags(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,HWND__ * *,unsigned long *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShouldShow(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCopyMoveToMenuCommand
{
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCopyThread
{
	long _CopyThreadProc();
	static unsigned long s_CopyThreadProc(void *);
	void PositionFileFromDrop(IFolderView2 *,unsigned short const *);
public:
	CCopyThread(IUnknown *,unsigned short const *,IDataObject *,unsigned long,unsigned short const *);
	long DoAsyncCopy();
	long DoCopy();
};

struct CCreateObjectHandler
{
	virtual long CreateObject(_GUID const &,IUnknown *,_GUID const &,void * *);
};

struct CCreateObjectTaskDelegate
{
	virtual long Pause();
	virtual long Resume();
	virtual long Start(IUnknown *,unsigned short *);
	virtual long Stop(long *);
};

struct CCreateObjectTaskServer
{
	CCreateObjectTaskServer();
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long LockServer(int);
	virtual long Pause();
	virtual long Resume();
	virtual long Start(IUnknown *,unsigned short *);
	virtual long Stop(long *);
};

struct CCritSecDelayInit
{
	CCritSecDelayInit();
	~CCritSecDelayInit();
};

struct CCritSecDelayInitBase
{
	void Enter();
};

struct CCscComTaskContext
{
	long GetCscCacheObject(_GUID const &,void * *);
	virtual long InitContext();
	virtual unsigned long CoInitFlags();
	virtual void UninitContext();
};

struct CCscPropHelper
{
	long Query(unsigned short const *,unsigned long *,unsigned long *);
	~CCscPropHelper();
};

class CCscUiCmdObj_WorkOfflineOnline
{
	long _EnsureStateInfo(IShellItemArray *);
	long _GetOnlineOfflineState(IUnknown *);
	long _GetOnlineOfflineStateOfMultiLocations(IShellItemArray *,unsigned long);
protected:
	virtual long v_GetCanonicalName(_GUID *);
	virtual long v_GetCmdFlags(int *);
	virtual long v_GetIconResID(IShellItemArray *,unsigned int *,SHSTOCKICONID *);
	virtual long v_GetState(IUnknown *,IShellItemArray *,int,int *);
	virtual long v_GetTitleResIDs(IShellItemArray *,unsigned int *,unsigned int *,unsigned int *,unsigned int *);
	virtual long v_GetTooltipResID(IShellItemArray *,unsigned int *);
	virtual long v_InvokeCmd(IUnknown *,IShellItemArray *,IBindCtx *);
public:
	virtual long GetKeyAndName(HKEY__ * *,unsigned short * *);
	virtual long GetPosition(CMDPOS *,_GUID *);
	virtual long InvokeFromContextMenu(_CMINVOKECOMMANDINFOEX const *,IShellItemArray *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetInternalExtensionClasses(_GUID const *,unsigned long);
	virtual long SetKeyAndName(HKEY__ *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCscUiCmdObject_Sync
{
protected:
	virtual long v_GetCanonicalName(_GUID *);
	virtual long v_GetCmdFlags(int *);
	virtual long v_GetIconResID(IShellItemArray *,unsigned int *,SHSTOCKICONID *);
	virtual long v_GetState(IUnknown *,IShellItemArray *,int,int *);
	virtual long v_GetTitleResIDs(IShellItemArray *,unsigned int *,unsigned int *,unsigned int *,unsigned int *);
	virtual long v_GetTooltipResID(IShellItemArray *,unsigned int *);
	virtual long v_InvokeCmd(IUnknown *,IShellItemArray *,IBindCtx *);
};

class CCscWorkOfflineTaskDialog
{
	long _Initialize();
	long _OnOptionsButtonClicked(int);
	long _OnOptionsTryAgain();
	long _TransitionItemOffline(int,int *);
	static long _OptionsCallbackProc(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	static long _ProgressCallbackProc(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	void _InitOptionsConfigInfo();
	void _OnProgressTimer(unsigned long);
public:
	CCscWorkOfflineTaskDialog(HWND__ *);
	long Init(unsigned short const * *,unsigned long);
	~CCscWorkOfflineTaskDialog();
};

class CCscWorkOnlineErrorTaskDialog
{
	static long _OptionsCallbackProc(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	void _InitOptionsConfigInfo();
public:
	long Init(unsigned short const * *,unsigned long);
};

struct CCtrlExtIconBase
{
	virtual long _ExtractW(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long _GetIconLocationW(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
};

struct CCtrlMouseWheelHandler
{
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDPA<CMultimonWallpaperState::CMultimonWallpaperEntry,CTContainer_PolicyUnOwned<CMultimonWallpaperState::CMultimonWallpaperEntry> >
{
	void DestroyCallback(int (*)(CMultimonWallpaperState::CMultimonWallpaperEntry *,void *),void *);
};

struct CDPA<CVolume,CTContainer_PolicyUnOwned<CVolume> >
{
	void DestroyCallback(int (*)(CVolume *,void *),void *);
};

struct CDPA<IAssocHandler,CTContainer_PolicyUnOwned<IAssocHandler> >
{
	void DestroyCallback(int (*)(IAssocHandler *,void *),void *);
};

struct CDPA<IChildId,CTContainer_PolicyUnOwned<IChildId> >
{
	void DestroyCallback(int (*)(IChildId *,void *),void *);
};

struct CDPA<ICondition,CTContainer_PolicyUnOwned<ICondition> >
{
	void DestroyCallback(int (*)(ICondition *,void *),void *);
};

struct CDPA<IFilterCondition,CTContainer_PolicyUnOwned<IFilterCondition> >
{
	void DestroyCallback(int (*)(IFilterCondition *,void *),void *);
};

struct CDPA<IInfoBarMessage,CTContainer_PolicyUnOwned<IInfoBarMessage> >
{
	void DestroyCallback(int (*)(IInfoBarMessage *,void *),void *);
};

struct CDPA<IRecycleBin,CTContainer_PolicyUnOwned<IRecycleBin> >
{
	void DestroyCallback(int (*)(IRecycleBin *,void *),void *);
};

struct CDPA<IShellItem,CTContainer_PolicyUnOwned<IShellItem> >
{
	void DestroyCallback(int (*)(IShellItem *,void *),void *);
};

struct CDPA<ORDERITEM,CTContainer_PolicyUnOwned<ORDERITEM> >
{
	void DestroyCallback(int (*)(ORDERITEM *,void *),void *);
};

struct CDPA<ParserForResID,CTContainer_PolicyUnOwned<ParserForResID> >
{
	void DestroyCallback(int (*)(ParserForResID *,void *),void *);
};

struct CDPA<_ITEMIDLIST_ABSOLUTE,CTContainer_PolicyUnOwned<_ITEMIDLIST_ABSOLUTE> >
{
	void DestroyCallback(int (*)(_ITEMIDLIST_ABSOLUTE *,void *),void *);
};

struct CDPA<_ITEMID_CHILD,CTContainer_PolicyUnOwned<_ITEMID_CHILD> >
{
	void DestroyCallback(int (*)(_ITEMID_CHILD *,void *),void *);
};

struct CDPA<_SID,CTContainer_PolicyUnOwned<_SID> >
{
	void DestroyCallback(int (*)(_SID *,void *),void *);
};

struct CDPA<_tagDPAProfilePaths,CTContainer_PolicyUnOwned<_tagDPAProfilePaths> >
{
	void DestroyCallback(int (*)(_tagDPAProfilePaths *,void *),void *);
};

struct CDPA<_tagpropertykey,CTContainer_PolicyUnOwned<_tagpropertykey> >
{
	void DestroyCallback(int (*)(_tagpropertykey *,void *),void *);
};

struct CDPA<unsigned short,CTContainer_PolicyCoTaskMem>
{
	int SortedInsertPtr(unsigned short const *,int,int (*)(unsigned short const *,unsigned short const *,__int64),__int64,unsigned int,unsigned short const *);
};

struct CDPA<unsigned short,CTContainer_PolicyUnOwned<unsigned short> >
{
	void DestroyCallback(int (*)(unsigned short *,void *),void *);
};

struct CDPANewMem<CDeviceEventInfo>
{
	CDPANewMem<CDeviceEventInfo>();
	~CDPANewMem<CDeviceEventInfo>();
};

class CDPA_Base<CAce,CTContainer_PolicyUnOwned<CAce> >
{
	static int _StandardDestroyCB(CAce *,void *);
public:
	int Create(int);
	long AppendPtr(CAce *,int *);
};

class CDPA_Base<CAppInfo,CTContainer_PolicyUnOwned<CAppInfo> >
{
	static int _StandardDestroyCB(CAppInfo *,void *);
};

class CDPA_Base<CAssocHandler,CTContainer_PolicyUnOwned<CAssocHandler> >
{
	static int _StandardDestroyCB(CAssocHandler *,void *);
public:
	int Destroy();
};

class CDPA_Base<CAutoplayDeviceData,CTContainer_PolicyUnOwned<CAutoplayDeviceData> >
{
	static int _StandardDestroyCB(CAutoplayDeviceData *,void *);
};

class CDPA_Base<CCacheShortcut const ,CTContainer_PolicyUnOwned<CCacheShortcut const > >
{
	static int _StandardDestroyCB(CCacheShortcut const *,void *);
public:
	int Destroy();
};

class CDPA_Base<CCategoryEntry,CTContainer_PolicyUnOwned<CCategoryEntry> >
{
	static int _StandardDestroyCB(CCategoryEntry *,void *);
};

class CDPA_Base<CControlPanelItem,CTContainer_PolicyRelease<CControlPanelItem> >
{
	static int _StandardDestroyCB(CControlPanelItem *,void *);
};

class CDPA_Base<CDeviceEventInfo,CTContainer_PolicyNewMem>
{
	static int _StandardDestroyCB(CDeviceEventInfo *,void *);
public:
	int Destroy();
};

class CDPA_Base<CEnumExtract,CTContainer_PolicyUnOwned<CEnumExtract> >
{
	static int _StandardDestroyCB(CEnumExtract *,void *);
};

class CDPA_Base<CIDLNode,CTContainer_PolicyUnOwned<CIDLNode> >
{
	static int _StandardDestroyCB(CIDLNode *,void *);
public:
	int Destroy();
};

class CDPA_Base<CLayoutFolderChild,CTContainer_PolicyUnOwned<CLayoutFolderChild> >
{
	static int _StandardDestroyCB(CLayoutFolderChild *,void *);
};

class CDPA_Base<CLinkedWalk<CIDLNode>,CTContainer_PolicyUnOwned<CLinkedWalk<CIDLNode> > >
{
	static int _StandardDestroyCB(CLinkedWalk<CIDLNode> *,void *);
public:
	void DestroyCallback(int (*)(CLinkedWalk<CIDLNode> *,void *),void *);
};

class CDPA_Base<CMultimonWallpaperState::CMultimonWallpaperEntry,CTContainer_PolicyUnOwned<CMultimonWallpaperState::CMultimonWallpaperEntry> >
{
	static int _StandardDestroyCB(CMultimonWallpaperState::CMultimonWallpaperEntry *,void *);
public:
	long InsertPtr(int,CMultimonWallpaperState::CMultimonWallpaperEntry *,int *);
};

class CDPA_Base<CNotifyEvent,CTContainer_PolicyUnOwned<CNotifyEvent> >
{
	static int _StandardDestroyCB(CNotifyEvent *,void *);
public:
	int Destroy();
};

class CDPA_Base<CPLMODULE,CTContainer_PolicyUnOwned<CPLMODULE> >
{
	static int _StandardDestroyCB(CPLMODULE *,void *);
};

class CDPA_Base<CRecycleBinData,CTContainer_PolicyUnOwned<CRecycleBinData> >
{
	static int _StandardDestroyCB(CRecycleBinData *,void *);
};

class CDPA_Base<CRichPreviewThreadData,CTContainer_PolicyUnOwned<CRichPreviewThreadData> >
{
	static int _StandardDestroyCB(CRichPreviewThreadData *,void *);
public:
	int Destroy();
};

class CDPA_Base<CUADBLog::UADR_ENTRY,CTContainer_PolicyNewMem>
{
	static int _StandardDestroyCB(CUADBLog::UADR_ENTRY *,void *);
public:
	int Destroy();
};

class CDPA_Base<CUnmappedXmlAttrib,CTContainer_PolicyNewMem>
{
	static int _StandardDestroyCB(CUnmappedXmlAttrib *,void *);
};

class CDPA_Base<CUnmappedXmlString,CTContainer_PolicyNewMem>
{
	static int _StandardDestroyCB(CUnmappedXmlString *,void *);
};

class CDPA_Base<CVolume,CTContainer_PolicyUnOwned<CVolume> >
{
	static int _StandardDestroyCB(CVolume *,void *);
public:
	int Create(int);
	long AppendPtr(CVolume *,int *);
};

class CDPA_Base<CXmlEntity,CTContainer_PolicyNewMem>
{
	static int _StandardDestroyCB(CXmlEntity *,void *);
};

class CDPA_Base<DYNASTGDATA,CTContainer_PolicyUnOwned<DYNASTGDATA> >
{
	static int _StandardDestroyCB(DYNASTGDATA *,void *);
};

class CDPA_Base<DirectUI::Element,CTContainer_PolicyUnOwned<DirectUI::Element> >
{
	static int _StandardDestroyCB(DirectUI::Element *,void *);
public:
	int Destroy();
};

class CDPA_Base<FOLDERMENUITEMDATA,CTContainer_PolicyUnOwned<FOLDERMENUITEMDATA> >
{
	static int _StandardDestroyCB(FOLDERMENUITEMDATA *,void *);
public:
	int Create(int);
};

class CDPA_Base<IAssocHandler,CTContainer_PolicyUnOwned<IAssocHandler> >
{
	static int _StandardDestroyCB(IAssocHandler *,void *);
};

class CDPA_Base<IAutoplayHandler,CTContainer_PolicyUnOwned<IAutoplayHandler> >
{
	static int _StandardDestroyCB(IAutoplayHandler *,void *);
};

class CDPA_Base<ICategoryDescription,CTContainer_PolicyUnOwned<ICategoryDescription> >
{
	static int _StandardDestroyCB(ICategoryDescription *,void *);
public:
	int Create(int);
	long AppendPtr(ICategoryDescription *,int *);
};

class CDPA_Base<IChildId,CTContainer_PolicyRelease<IChildId> >
{
	static int _StandardDestroyCB(IChildId *,void *);
public:
	int Destroy();
};

class CDPA_Base<IChildId,CTContainer_PolicyUnOwned<IChildId> >
{
	static int _StandardDestroyCB(IChildId *,void *);
public:
	int Create(int);
	long AppendPtr(IChildId *,int *);
};

class CDPA_Base<ICondition,CTContainer_PolicyRelease<ICondition> >
{
	static int _StandardDestroyCB(ICondition *,void *);
public:
	int Create(int);
	long AppendPtr(ICondition *,int *);
};

class CDPA_Base<ICondition,CTContainer_PolicyUnOwned<ICondition> >
{
	static int _StandardDestroyCB(ICondition *,void *);
public:
	int Create(int);
	long AppendPtr(ICondition *,int *);
};

class CDPA_Base<IExplorerBrowserEvents,CTContainer_PolicyUnOwned<IExplorerBrowserEvents> >
{
	static int _StandardDestroyCB(IExplorerBrowserEvents *,void *);
};

class CDPA_Base<IExplorerCommand,CTContainer_PolicyRelease<IExplorerCommand> >
{
	static int _StandardDestroyCB(IExplorerCommand *,void *);
public:
	int Create(int);
	long AppendPtr(IExplorerCommand *,int *);
};

class CDPA_Base<IFilterCondition,CTContainer_PolicyUnOwned<IFilterCondition> >
{
	static int _StandardDestroyCB(IFilterCondition *,void *);
public:
	int Create(int);
	long AppendPtr(IFilterCondition *,int *);
};

class CDPA_Base<IFilterWorkerItem,CTContainer_PolicyRelease<IFilterWorkerItem> >
{
	static int _StandardDestroyCB(IFilterWorkerItem *,void *);
};

class CDPA_Base<IFrameWorkItem,CTContainer_PolicyUnOwned<IFrameWorkItem> >
{
	static int _StandardDestroyCB(IFrameWorkItem *,void *);
};

class CDPA_Base<IInfoBarMessage,CTContainer_PolicyUnOwned<IInfoBarMessage> >
{
	static int _StandardDestroyCB(IInfoBarMessage *,void *);
public:
	int Create(int);
	long AppendPtr(IInfoBarMessage *,int *);
};

class CDPA_Base<IItem,CTContainer_PolicyRelease<IItem> >
{
	static int _StandardDestroyCB(IItem *,void *);
public:
	int Destroy();
};

class CDPA_Base<IOleUndoUnit,CTContainer_PolicyUnOwned<IOleUndoUnit> >
{
	static int _StandardDestroyCB(IOleUndoUnit *,void *);
public:
	IOleUndoUnit * PopPtr();
};

class CDPA_Base<IPropertyStore,CTContainer_PolicyRelease<IPropertyStore> >
{
	static int _StandardDestroyCB(IPropertyStore *,void *);
};

class CDPA_Base<IPropertyStoreFactory,CTContainer_PolicyRelease<IPropertyStoreFactory> >
{
	static int _StandardDestroyCB(IPropertyStoreFactory *,void *);
public:
	long AppendPtr(IPropertyStoreFactory *,int *);
};

class CDPA_Base<IPublishedItemDescription,CTContainer_PolicyRelease<IPublishedItemDescription> >
{
	static int _StandardDestroyCB(IPublishedItemDescription *,void *);
public:
	int Create(int);
	long AppendPtr(IPublishedItemDescription *,int *);
};

class CDPA_Base<IQueueItem2,CTContainer_PolicyRelease<IQueueItem2> >
{
	static int _StandardDestroyCB(IQueueItem2 *,void *);
public:
	int Destroy();
};

class CDPA_Base<IRecycleBin,CTContainer_PolicyUnOwned<IRecycleBin> >
{
	static int _StandardDestroyCB(IRecycleBin *,void *);
public:
	int Create(int);
};

class CDPA_Base<IShellFolder,CTContainer_PolicyUnOwned<IShellFolder> >
{
	static int _StandardDestroyCB(IShellFolder *,void *);
};

class CDPA_Base<IShellItem,CTContainer_PolicyUnOwned<IShellItem> >
{
	static int _StandardDestroyCB(IShellItem *,void *);
public:
	int Create(int);
	long AppendPtr(IShellItem *,int *);
};

class CDPA_Base<ITaskCondition,CTContainer_PolicyUnOwned<ITaskCondition> >
{
	static int _StandardDestroyCB(ITaskCondition *,void *);
};

struct CDPA_Base<IUICommand,CTContainer_PolicyUnOwned<IUICommand> >
{
	long AppendPtr(IUICommand *,int *);
};

class CDPA_Base<IUnknown,CTContainer_PolicyRelease<IUnknown> >
{
	static int _StandardDestroyCB(IUnknown *,void *);
public:
	int Create(int);
	long AppendPtr(IUnknown *,int *);
};

class CDPA_Base<IUnknown,CTContainer_PolicyUnOwned<IUnknown> >
{
	static int _StandardDestroyCB(IUnknown *,void *);
public:
	long AppendPtr(IUnknown *,int *);
};

class CDPA_Base<IconLayout,CTContainer_PolicyUnOwned<IconLayout> >
{
	static int _StandardDestroyCB(IconLayout *,void *);
public:
	int Destroy();
};

class CDPA_Base<IdElement,CTContainer_PolicyUnOwned<IdElement> >
{
	static int _StandardDestroyCB(IdElement *,void *);
public:
	int Destroy();
};

class CDPA_Base<NEWOBJECTINFO,CTContainer_PolicyUnOwned<NEWOBJECTINFO> >
{
	static int _StandardDestroyCB(NEWOBJECTINFO *,void *);
};

class CDPA_Base<OFFSET<CCacheShortcut>,CTContainer_PolicyUnOwned<OFFSET<CCacheShortcut> > >
{
	static int _StandardDestroyCB(OFFSET<CCacheShortcut> *,void *);
public:
	int Create(int);
	int DeleteAllPtrs();
	int Destroy();
	long AppendPtr(OFFSET<CCacheShortcut> *,int *);
};

class CDPA_Base<ORDERITEM,CTContainer_PolicyUnOwned<ORDERITEM> >
{
	static int _StandardDestroyCB(ORDERITEM *,void *);
public:
	int Create(int);
};

class CDPA_Base<ParserForResID,CTContainer_PolicyUnOwned<ParserForResID> >
{
	static int _StandardDestroyCB(ParserForResID *,void *);
};

class CDPA_Base<RESULT_FOLDER_ITEM,CTContainer_PolicyUnOwned<RESULT_FOLDER_ITEM> >
{
	static int _StandardDestroyCB(RESULT_FOLDER_ITEM *,void *);
public:
	int Destroy();
};

class CDPA_Base<STR_RESULTS_PROCESSING_CONFIG,CTContainer_PolicyNewMem>
{
	static int _StandardDestroyCB(STR_RESULTS_PROCESSING_CONFIG *,void *);
public:
	int Destroy();
};

class CDPA_Base<USEREVENTINFO,CTContainer_PolicyUnOwned<USEREVENTINFO> >
{
	static int _StandardDestroyCB(USEREVENTINFO *,void *);
};

class CDPA_Base<VIEWSTATE_POSITION,CTContainer_PolicyUnOwned<VIEWSTATE_POSITION> >
{
	static int _StandardDestroyCB(VIEWSTATE_POSITION *,void *);
public:
	int Destroy();
};

class CDPA_Base<WALLPAPER_SLIDESHOW_IMAGE_ENTRY,CTContainer_PolicyUnOwned<WALLPAPER_SLIDESHOW_IMAGE_ENTRY> >
{
	static int _StandardDestroyCB(WALLPAPER_SLIDESHOW_IMAGE_ENTRY *,void *);
};

class CDPA_Base<XMLPROP_ITEM,CTContainer_PolicyNewMem>
{
	static int _StandardDestroyCB(XMLPROP_ITEM *,void *);
};

class CDPA_Base<_ITEMIDLIST_ABSOLUTE,CTContainer_PolicyCoTaskMem>
{
	static int _StandardDestroyCB(_ITEMIDLIST_ABSOLUTE *,void *);
public:
	long AppendPtr(_ITEMIDLIST_ABSOLUTE *,int *);
};

class CDPA_Base<_ITEMIDLIST_ABSOLUTE,CTContainer_PolicyUnOwned<_ITEMIDLIST_ABSOLUTE> >
{
	static int _StandardDestroyCB(_ITEMIDLIST_ABSOLUTE *,void *);
public:
	int Create(int);
	long AppendPtr(_ITEMIDLIST_ABSOLUTE *,int *);
};

class CDPA_Base<_ITEMID_CHILD,CTContainer_PolicyCoTaskMem>
{
	static int _StandardDestroyCB(_ITEMID_CHILD *,void *);
};

class CDPA_Base<_ITEMID_CHILD,CTContainer_PolicyUnOwned<_ITEMID_CHILD> >
{
	static int _StandardDestroyCB(_ITEMID_CHILD *,void *);
public:
	int Create(int);
	long AppendPtr(_ITEMID_CHILD *,int *);
	long InsertPtr(int,_ITEMID_CHILD *,int *);
	void DestroyCallback(int (*)(_ITEMID_CHILD *,void *),void *);
};

class CDPA_Base<_SID,CTContainer_PolicyUnOwned<_SID> >
{
	static int _StandardDestroyCB(_SID *,void *);
};

class CDPA_Base<_tagDPAProfilePaths,CTContainer_PolicyUnOwned<_tagDPAProfilePaths> >
{
	static int _StandardDestroyCB(_tagDPAProfilePaths *,void *);
};

class CDPA_Base<_tagpropertykey,CTContainer_PolicyUnOwned<_tagpropertykey> >
{
	static int _StandardDestroyCB(_tagpropertykey *,void *);
public:
	int Create(int);
	long AppendPtr(_tagpropertykey *,int *);
};

class CDPA_Base<tagWVTASKITEM const ,CTContainer_PolicyUnOwned<tagWVTASKITEM const > >
{
	static int _StandardDestroyCB(tagWVTASKITEM const *,void *);
public:
	int Destroy();
};

class CDPA_Base<unsigned short const ,CTContainer_PolicyUnOwned<unsigned short const > >
{
	static int _StandardDestroyCB(unsigned short const *,void *);
public:
	long AppendPtr(unsigned short const *,int *);
};

class CDPA_Base<unsigned short,CTContainer_PolicyCoTaskMem>
{
	static int _StandardDestroyCB(unsigned short *,void *);
public:
	int Create(int);
	int Destroy();
	long AppendPtr(unsigned short *,int *);
};

class CDPA_Base<unsigned short,CTContainer_PolicyLocalMem>
{
	static int _StandardDestroyCB(unsigned short *,void *);
public:
	int Create(int);
	int Destroy();
	long AppendPtr(unsigned short *,int *);
};

class CDPA_Base<unsigned short,CTContainer_PolicyUnOwned<unsigned short> >
{
	static int _StandardDestroyCB(unsigned short *,void *);
public:
	int Create(int);
	long AppendPtr(unsigned short *,int *);
};

class CDPA_Base<void,CTContainer_PolicyUnOwned<void> >
{
	static int _StandardDestroyCB(void *,void *);
public:
	int Destroy();
};

struct CDSA<CControlPanelFolder::PATHTOAPPID>
{
	CDSA<CControlPanelFolder::PATHTOAPPID>(_DSA *);
};

struct CDSA<MENUIDMAP>
{
	~CDSA<MENUIDMAP>();
};

struct CDSA<TASKWITHOVERRIDE>
{
	~CDSA<TASKWITHOVERRIDE>();
};

struct CDSA<int>
{
	~CDSA<int>();
};

struct CDSA_Base<APPLETELEMENT>
{
	int Search(APPLETELEMENT const *,int,int (*)(APPLETELEMENT const *,APPLETELEMENT const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<APPLETTASKS>
{
	int Search(APPLETTASKS const *,int,int (*)(APPLETTASKS const *,APPLETTASKS const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<CAppletAndTaskEnum::SEARCHRESULTAPPLET>
{
	int Create(int);
	int Destroy();
	int Sort(int (*)(CAppletAndTaskEnum::SEARCHRESULTAPPLET const *,CAppletAndTaskEnum::SEARCHRESULTAPPLET const *,__int64),__int64);
	long AppendItem(CAppletAndTaskEnum::SEARCHRESULTAPPLET const *,int *);
};

struct CDSA_Base<CAppletAndTaskEnum::SEARCHRESULTINDEX>
{
	long AppendItem(CAppletAndTaskEnum::SEARCHRESULTINDEX const *,int *);
};

struct CDSA_Base<CControlPanelCategoryModuleInner::SEARCHRESULTAPPLET>
{
	int Create(int);
	int Destroy();
	int Sort(int (*)(CControlPanelCategoryModuleInner::SEARCHRESULTAPPLET const *,CControlPanelCategoryModuleInner::SEARCHRESULTAPPLET const *,__int64),__int64);
	long AppendItem(CControlPanelCategoryModuleInner::SEARCHRESULTAPPLET const *,int *);
};

struct CDSA_Base<CControlPanelFolder::PATHTOAPPID>
{
	int Search(CControlPanelFolder::PATHTOAPPID const *,int,int (*)(CControlPanelFolder::PATHTOAPPID const *,CControlPanelFolder::PATHTOAPPID const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<CItemThumbnail::CHILDID_AND_ITEM>
{
	void DestroyCallback(int (*)(CItemThumbnail::CHILDID_AND_ITEM *,void *),void *);
};

struct CDSA_Base<CLSID_CACHE_ENTRY>
{
	int Destroy();
	int Search(CLSID_CACHE_ENTRY const *,int,int (*)(CLSID_CACHE_ENTRY const *,CLSID_CACHE_ENTRY const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<CMCCandidate>
{
	int Search(CMCCandidate const *,int,int (*)(CMCCandidate const *,CMCCandidate const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<CMCIndex>
{
	int Search(CMCIndex const *,int,int (*)(CMCIndex const *,CMCIndex const *,__int64),__int64,unsigned int);
	long AppendItem(CMCIndex const *,int *);
};

struct CDSA_Base<CMCMatch>
{
	int Search(CMCMatch const *,int,int (*)(CMCMatch const *,CMCMatch const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<CNotifySubclassWndProc::NOTIFYREGISTERDATA>
{
	int Search(CNotifySubclassWndProc::NOTIFYREGISTERDATA const *,int,int (*)(CNotifySubclassWndProc::NOTIFYREGISTERDATA const *,CNotifySubclassWndProc::NOTIFYREGISTERDATA const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<CONTROLPANELTASK>
{
	int Create(int);
	int Search(CONTROLPANELTASK const *,int,int (*)(CONTROLPANELTASK const *,CONTROLPANELTASK const *,__int64),__int64,unsigned int);
	void DestroyCallback(int (*)(CONTROLPANELTASK *,void *),void *);
};

struct CDSA_Base<COPY_CACHE_ITEM>
{
	int Search(COPY_CACHE_ITEM const *,int,int (*)(COPY_CACHE_ITEM const *,COPY_CACHE_ITEM const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<CTaskXmlFile>
{
	int Search(CTaskXmlFile const *,int,int (*)(CTaskXmlFile const *,CTaskXmlFile const *,__int64),__int64,unsigned int);
	long AppendItem(CTaskXmlFile const *,int *);
};

struct CDSA_Base<DEADCOUNTS>
{
	long AppendItem(DEADCOUNTS const *,int *);
};

struct CDSA_Base<FSIconOverlay>
{
	int Create(int);
	long AppendItem(FSIconOverlay const *,int *);
	void DestroyCallback(int (*)(FSIconOverlay *,void *),void *);
};

struct CDSA_Base<GROUP_ITEM_ENTRY>
{
	int Create(int);
	long AppendItem(GROUP_ITEM_ENTRY const *,int *);
	void DestroyCallback(int (*)(GROUP_ITEM_ENTRY *,void *),void *);
};

struct CDSA_Base<HANDLERINFO>
{
	int Create(int);
	long AppendItem(HANDLERINFO const *,int *);
	long Search(HANDLERINFO const *,int,int (*)(HANDLERINFO const *,HANDLERINFO const *,__int64),__int64,unsigned int,int *);
	void DestroyCallback(int (*)(HANDLERINFO *,void *),void *);
};

struct CDSA_Base<HWND__ *>
{
	int Destroy();
	long InsertItem(int,HWND__ * const *,int *);
};

struct CDSA_Base<MENU_COMMAND_MATCH>
{
	int Search(MENU_COMMAND_MATCH const *,int,int (*)(MENU_COMMAND_MATCH const *,MENU_COMMAND_MATCH const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<MODULEENTRY>
{
	int Create(int);
	void DestroyCallback(int (*)(MODULEENTRY *,void *),void *);
};

struct CDSA_Base<MVPTOKENDATA>
{
	int Create(int);
	long AppendItem(MVPTOKENDATA const *,int *);
	void DestroyCallback(int (*)(MVPTOKENDATA *,void *),void *);
};

struct CDSA_Base<TASKWITHOVERRIDE>
{
	int Create(int);
	int Search(TASKWITHOVERRIDE const *,int,int (*)(TASKWITHOVERRIDE const *,TASKWITHOVERRIDE const *,__int64),__int64,unsigned int);
	void DestroyCallback(int (*)(TASKWITHOVERRIDE *,void *),void *);
};

struct CDSA_Base<TOPVIEWENTRY>
{
	void DestroyCallback(int (*)(TOPVIEWENTRY *,void *),void *);
};

struct CDSA_Base<TRACKEDOPERATION>
{
	int Search(TRACKEDOPERATION const *,int,int (*)(TRACKEDOPERATION const *,TRACKEDOPERATION const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<_AdapterInfo>
{
	int Create(int);
};

struct CDSA_Base<_GUID>
{
	int Create(int);
	int Destroy();
	int Search(_GUID const *,int,int (*)(_GUID const *,_GUID const *,__int64),__int64,unsigned int);
	long AppendItem(_GUID const *,int *);
};

struct CDSA_Base<_tagpropertykey>
{
	int Create(int);
	int Destroy();
	long AppendItem(_tagpropertykey const *,int *);
};

struct CDSA_Base<int>
{
	int Create(int);
	int Destroy();
	long AppendItem(int const *,int *);
};

struct CDSA_Base<tagCONDITIONBITSSETCACHE>
{
	int Search(tagCONDITIONBITSSETCACHE const *,int,int (*)(tagCONDITIONBITSSETCACHE const *,tagCONDITIONBITSSETCACHE const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<tagENUMTYPE_MERGEITEM>
{
	long AppendItem(tagENUMTYPE_MERGEITEM const *,int *);
	void DestroyCallback(int (*)(tagENUMTYPE_MERGEITEM *,void *),void *);
};

struct CDSA_Base<tagITEMKEY>
{
	int Create(int);
	int Destroy();
	long AppendItem(tagITEMKEY const *,int *);
};

struct CDSA_Base<tagITEM_CHANGE_RECORD>
{
	int Create(int);
	int Destroy();
	long AppendItem(tagITEM_CHANGE_RECORD const *,int *);
};

struct CDSA_Base<tagPROPVARIANT>
{
	int Create(int);
	long AppendItem(tagPROPVARIANT const *,int *);
	void DestroyCallback(int (*)(tagPROPVARIANT *,void *),void *);
};

struct CDSA_Base<unsigned int>
{
	int Create(int);
	int Destroy();
};

struct CDSA_Base<unsigned long>
{
	int Create(int);
};

class CDUIResourceManager
{
	CDUIResourceManager::REFCOUNTEDPARSER * _GetRefCountedParserForThread();
	long _InitParserForThread();
	long _RegisterElements();
	void _UnregisterElements(unsigned int);
public:
	DirectUI::DUIXmlParser * GetParserForThread();
	long CreateElement(unsigned short const *,DirectUI::Element *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long InitThread(unsigned int,DUI_RESOURCE_MANAGER_INIT_FLAGS);
	void UninitThread();
};

class CDUISizerElement
{
	POLICYSTATE _GetPolicyState();
	int _ComputeBoundedSize(int);
	long _AdjustTargetSize();
	long _GetLogicalContainerSize(int *);
	long _GetResizeDelta(int *);
	long _ReadMaxxedOutFromPropBag(int *);
	long _ReadSizeFromPropBag(int *);
	long _ReadVisibleFromPropBag(int *);
	long _Render();
	long _WriteLoadedToPropBag(int);
	long _WriteMaxxedOutToPropBag(int);
	long _WriteSizeToPropBag(int);
	long _WriteVisibleToPropBag(int);
	void _CheckPaneVisibility();
	void _StopListening();
public:
	CDUISizerElement();
	bool GetSlidesUpAndDown();
	int GetFramePersistType();
	int GetInitialSize();
	int GetMinSize();
	long LoadFromStream();
	long SaveToStream();
	long SetInitialSize(int);
	long SetMinSize(int);
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnDestroy();
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

struct CDUIView
{
	static DirectUI::IClassInfo * Class;
	static long Create(unsigned int,HWND__ *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual HWND__ * CreateHWND(HWND__ *);
	virtual bool OnMessage(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void SetKeyFocus();
	void DetachListview();
};

class CDUIViewFrame
{
	DirectUI::Element * _GetListviewHostElement();
	int _IsNewLayout(unsigned short const *,unsigned int *);
	int _IsSameCLSIDAsCurrent(IUnknown *,_GUID const &);
	long _AdjustLayout(IUnknown *,IUnknown * *,bool *);
	long _CreateHostWindow(HWND__ *);
	long _GetGlobalPersistStream(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,IStream * *);
	long _GetPerBrowserPropertyBag(_GUID const &,_GUID const &,void * *);
	long _GetPerFolderPersistStream(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,IStream * *);
	long _GetPerFolderTypeIdPersistStream(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,IStream * *);
	long _GetPerLayoutPersistStream(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,IStream * *);
	long _GetRegistryPathForLocation(_ITEMIDLIST_ABSOLUTE const *,bool,unsigned short const *,unsigned short *,unsigned int);
	long _GetUIFile(IUnknown *,unsigned short * *,bool *);
	long _OnResize(long,long);
	long _PerformPendingActivate(VIEWREASONTOACTIVATE);
	long _UpdateNamespaceID();
	static __int64 _DUIHostWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static int _CompareModuleEntry(MODULEENTRY const *,MODULEENTRY const *,__int64);
	static int _ModuleEntryClearCB(MODULEENTRY *,void *);
	static long _InnerObjectDeepQueryInterface(IUnknown *,_GUID const &,void * *);
	static void _CreateOrSetInnerObject(IUnknown *,__int64);
	static void _RemoveInnerObject(IUnknown *,__int64);
	static void _SeeIfUnknownWantsFocus(IUnknown *,__int64);
	static void s_ParserErrorCallback(unsigned short const *,unsigned short const *,int,void *);
	static void s_PropertyWriteCallback(__int64,unsigned short const *);
	unsigned long _GetMRUSize(unsigned short const *);
	virtual ~CDUIViewFrame();
	void _CheckForLayoutChangeOnContentsChange();
	void _ConnectShellView();
	void _DetachElementTree();
	void _DisconnectShellView();
	void _FixUpKeyboardFocus(VIEWREASONTOACTIVATE);
	void _FixupCrossDUIViewFocus();
	void _ProfferToBrowser(bool);
	void _RedrawFrame();
	void _SetElementProvider(IElementClassProvider *);
	void _SetFocusToFirstTabStopElement(DirectUI::Element *);
	void _UpdateInitialStates();
public:
	CDUIViewFrame();
	virtual long ContextSensitiveHelp(int);
	virtual long CreateFrameWindow(IViewFrameHost *,tagRECT const *,HWND__ * *);
	virtual long DestroyFrameWindow();
	virtual long Enter(IShellSearchScope *);
	virtual long Exit();
	virtual long GetACEnumString(IEnumString * *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetLayoutType(tagLAYOUTTYPE *);
	virtual long GetMenu(HMENU__ * *);
	virtual long GetPersistStream(int,unsigned short const *,unsigned short const *,unsigned long,IStream * *);
	virtual long GetPromptText(unsigned short *,unsigned int);
	virtual long GetSearchText(unsigned short *,unsigned int);
	virtual long GetShellView(IShellView * *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long GetWindow(HWND__ * *);
	virtual long InitMenuPopup(HMENU__ *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long IsLayoutSupported(IFrameLayoutDefinition *);
	virtual long OnMenuCommand(unsigned long);
	virtual long OnSearchTextNotify(unsigned short const *,unsigned short const *,SHELLSEARCHNOTIFY);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long Read(unsigned short const *,tagVARIANT *,IErrorLog *);
	virtual long Search(unsigned short const *,unsigned long);
	virtual long SetLayoutDefinition(IFrameLayoutDefinition *);
	virtual long SetMode(VFMODE);
	virtual long SetShellView(IShellView *,HWND__ *,IUnknown *,SETVIEWFLAGS);
	virtual long TranslateAcceleratorGlobalVF(tagMSG *);
	virtual long TranslateAcceleratorVF(tagMSG *);
	virtual long UIActivateVF(unsigned int,VIEWREASONTOACTIVATE);
	virtual long Write(unsigned short const *,tagVARIANT *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDUIViewHost
{
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class CDVBackgrndHMENU
{
protected:
	virtual long _OnGetCommandString(unsigned __int64,unsigned int,char *,unsigned int);
};

class CDVDropTarget
{
	long _GetItemAfterInsertMark(IChildId * *);
	void _GetDropTargetForIItem(IItem *,IDropTarget * *);
	void _PerformDrop(HWND__ *,IDropTarget *,IDataObject *,unsigned long,_POINTL,_ITEMID_CHILD const *,unsigned long *);
public:
	long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	long DragLeave();
	long DragOver(unsigned long,_POINTL,unsigned long *);
	long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	long IsEvaluatingEdpPolicy(int *);
	long SetDropSourceEnterpriseId(unsigned short const *);
	void ReleaseCurrentDropTarget();
	void ReleaseDataObject();
};

struct CDViewEvents
{
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDarwinAd
{
	void CheckInstalled();
};

struct CDateGroupingDescription
{
	static long s_CreateInstance(DATE_TIME_UNIT,_FILETIME const &,_FILETIME const &,_GUID const &,void * *);
	virtual long GetClassID(_GUID *);
	virtual long GetDateUnitAndInterval(DATE_TIME_UNIT *,_FILETIME *,_FILETIME *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long IsDirty();
	virtual long Load(IStream *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IStream *,int);
	virtual long SetDateUnitAndInterval(DATE_TIME_UNIT,_FILETIME const *,_FILETIME const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDebugOutput
{
	virtual long PopIndent();
	virtual long PushIndent();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long WriteLine(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDecodeStream
{
	long FilterAccess();
public:
	long DisplayName(unsigned short *,unsigned int);
	long Resume(int);
	long Suspend();
	virtual long Clone(IStream * *);
	virtual long Commit(unsigned long);
	virtual long CopyTo(IStream *,_ULARGE_INTEGER,_ULARGE_INTEGER *,_ULARGE_INTEGER *);
	virtual long LockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(void *,unsigned long,unsigned long *);
	virtual long Revert();
	virtual long Seek(_LARGE_INTEGER,unsigned long,_ULARGE_INTEGER *);
	virtual long SetSize(_ULARGE_INTEGER);
	virtual long Stat(tagSTATSTG *,unsigned long);
	virtual long UnlockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long Write(void const *,unsigned long,unsigned long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDecryptWrapperMenu
{
	CDecryptWrapperMenu(unsigned short const *,IContextMenu *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
};

struct CDefBackgroundMenuCB
{
	CDefBackgroundMenuCB(_ITEMIDLIST_ABSOLUTE const *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDefFolderMenu
{
	TRIBIT _IsResourceVerbBeingInvoked();
	long _FindVerbByMenuText(IContextMenu *,unsigned short const *,HMENU__ *,unsigned int *);
	long _GetMenuVerb(HMENU__ *,int,int,int,unsigned short *,unsigned long);
	long _HandlePartialSelectionInvoke(_CMINVOKECOMMANDINFO *,CDefFolderMenu::SELECTIONFLAG);
	long _InitDropTarget();
	long _ProcessEditPaste(HWND__ *,int);
	long _ProcessLink(HWND__ *,unsigned short const *,unsigned long);
	long _ProcessRename();
	static void _KillTimerAndSetCursor(unsigned __int64,unsigned short const *);
	static void _TimerProc(HWND__ *,unsigned int,unsigned __int64,unsigned long);
	unsigned long _AttributesOfItems(unsigned long);
	unsigned long _InitFileCommands(HMENU__ *,unsigned int,unsigned int);
	virtual ~CDefFolderMenu();
	void _AddHandlersToDCA(CDSA<unsigned int> &,int);
	void _AddToRecentDocs();
	void _GetAssocElementsAndKeys();
	void _GetHandlerInfoFromPartialSelection(_CMINVOKECOMMANDINFO *,DEFAULT_FOLDER_MENU_RESTRICTIONS *,_GUID *);
	void _SetMenuDefault(HMENU__ *,unsigned int,unsigned int);
	void _UnduplicateVerbs(HMENU__ *,int,int);
public:
	CDefFolderMenu();
	long Initialize(DEFCONTEXTMENU const *);
	virtual long ContextSensitiveHelp(int);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetMenuIds(unsigned int *,unsigned int *);
	virtual long GetMenuRestrictions(DEFAULT_FOLDER_MENU_RESTRICTIONS,DEFAULT_FOLDER_MENU_RESTRICTIONS *);
	virtual long GetSelection(_GUID const &,void * *);
	virtual long GetState(IContextMenuForProgInvoke *);
	virtual long GetWindow(HWND__ * *);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(HWND__ *,IContextMenuCB *,_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,unsigned int,_ITEMID_CHILD const * const *,IUnknown *,unsigned int,HKEY__ * const *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long IsHandlerAvailable(_GUID const &);
	virtual long OnTaskComplete(unsigned int,unsigned long);
	virtual long OnTaskStart();
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetHandlerClsid(_GUID const &);
	virtual long SetInvokeVerbs(unsigned short const * const * const,unsigned int);
	virtual long SetMenuRestrictions(DEFAULT_FOLDER_MENU_RESTRICTIONS);
	virtual long SetSelection(IShellItemArray *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDefFolderMenuCallback
{
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDefView
{
	BROWSER_VIEW_FLAGS _GetViewFlags();
	FOLDERVIEWOPTIONS _GetFolderViewOptions();
	HIDEFILENAMES_STATE GetHideFilenamesState();
	VIEW_ARRANGEMENT_MODE _GetArrangeMode();
	__int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _OnClipboardChange();
	__int64 _OnCommand(unsigned __int64,__int64);
	__int64 _OnCreate(HWND__ *);
	__int64 _OnInitMenuPopup(HMENU__ *,int,int);
	__int64 _OnMenuMessage(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _OnSizeChanged(HWND__ *);
	int IsFolderViewCapabilitySupported(FOLDER_VIEW_CAPABILITY);
	int IsSafeToDefaultVerb();
	int IsSafeToDrop(IDataObject *,int);
	int _AddColumnsToMenu(HMENU__ *,int,unsigned long);
	int _AllowCommand(unsigned int);
	int _AllowEditCommand(unsigned int);
	int _CachedIsCustomizable();
	int _CanGroupBy(_tagpropertykey const &);
	int _CanPositionByAnchor();
	int _CurrentAutolistHasSameDisplayNameAsKnownFolder(_GUID);
	int _DeleteMenuItems(HMENU__ *,unsigned long,unsigned long);
	int _GetDragPoint(tagPOINT *);
	int _GetDropPoint(tagPOINT *);
	int _GetFileSystemFolderPath(unsigned short *,unsigned int);
	int _GetInsertPoint(tagPOINT *);
	int _GetProviderAttributes(PROVIDER_ATTRIBUTES *);
	int _GetSelectedItemsArray(int * *,int *);
	int _GetVisibleSlotCount();
	int _InitGroupByMenu(HMENU__ *);
	int _InitSortByMenu(HMENU__ *);
	int _InvokeCustomization();
	int _IsGroupedAndSortedByItemDateSpecialCase(int *);
	int _IsHostedInFrame();
	int _IsInsertMarkView();
	int _IsItemCountPending();
	int _IsPositionableView();
	int _IsPositionedView();
	int _IsUserLibraryRoot();
	int _IsViewStacked();
	int _OnActivate(unsigned int);
	int _OnDeactivate();
	int _OnFolderFlagsChanged(FOLDERFLAGS);
	int _SearchTargetNavigatesToSearch();
	int _SelectionHasFolderJunction();
	int _ShouldAddKnownFolder(_GUID const &);
	int _ShouldAddTextFilterToLocation();
	int _ShouldSuppressCollection();
	int _ShowingView();
	int _UseItemsView();
	int _ViewHasSubfolders();
	long _AddColumnVerbsToMenu(_tagpropertykey const &,HMENU__ *,unsigned long);
	long _AddConditionToDPA(CDPA<ICondition,CTContainer_PolicyUnOwned<ICondition> > *,IFilterCondition *);
	long _AddEnumFlagsCondition(CDPA<ICondition,CTContainer_PolicyUnOwned<ICondition> > *);
	long _AddSubfolderTryHarderItem(IObjectCollection *);
	long _AddTextFilterToLocation(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
	long _AddToRecentDocs(_ITEMID_CHILD const *);
	long _AddTryHarderCustom(IObjectCollection *);
	long _AddTryHarderForAllLibraries(IObjectCollection *);
	long _AddTryHarderForCurrentLibrary(IObjectCollection *);
	long _AddTryHarderForHomeGroup(IObjectCollection *);
	long _AddTryHarderForLibraryItem(IShellItem *,IObjectCollection *);
	long _AddTryHarderFullText(IObjectCollection *);
	long _AddTryHarderInternetSearch(IObjectCollection *,unsigned short const *);
	long _AddTryHarderItemForComputer(IObjectCollection *);
	long _AddTryHarderItemsFromFolder(IObjectCollection *);
	long _AddTryHarderItemsFromView(IObjectCollection *);
	long _AddTryHarderPinnedItems(IObjectCollection *,unsigned short const *);
	long _BrowseToIDList(_ITEMIDLIST_ABSOLUTE const *,unsigned long);
	long _BuildConditionForCollection(IItemFilter *,ICondition * *,_tagpropertykey *);
	long _CBackgrndMenu_CreateInstance(_GUID const &,void * *);
	long _CallCBWithFolderTypeFallback(unsigned int,unsigned __int64,__int64);
	long _CreateAttribCondition(IConditionFactory2 *,unsigned long,CDefView::ATTRIB_CONDITION_TYPE,_GUID const &,void * *);
	long _CreateCollection(UPDATE_FLAGS,int,FILTER_OPERATION_FLAGS,IItemCollection * *,unsigned int *);
	long _CreateCollectionFactory(UPDATE_FLAGS,int,FILTER_OPERATION_FLAGS,IItemCollectionFactory * *);
	long _CreateGroupFolderSearchItem(IItem *,_ITEMIDLIST_ABSOLUTE * *);
	long _CreateInitialCollection(UPDATE_FLAGS);
	long _CreateNewCollection(UPDATE_FLAGS,int,FILTER_OPERATION_FLAGS);
	long _CreateSearchOnAnyFolder(IShellItem *,_GUID,_tagpropertykey const &,SCOPE_ITEM_DEPTH,_ITEMIDLIST_ABSOLUTE * *);
	long _CreateSelectionContextMenu(int,_GUID const &,void * *);
	long _CreateSortColumnArray(_tagpropertykey const &,int,ISortColumnArray * *);
	long _CreateSortColumnArrayWithSecondaryColumn(_tagpropertykey const &,ISortColumnArray * *);
	long _CreateStackedIDList(_tagpropertykey const &,_ITEMIDLIST_ABSOLUTE * *);
	long _Create_BackgrndHMENU(unsigned int,_GUID const &,void * *);
	long _DelaySelectAndPositionItem(_ITEMID_CHILD const *,unsigned int,int,tagPOINT *);
	long _DestroyView(int);
	long _DoContextMenuPopup(IUnknown *,unsigned int,tagPOINT);
	long _EnsureCollectionSink();
	long _Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	long _ExecuteRename(IItem *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	long _ExplorerCommand(unsigned int);
	long _FindItem(_ITEMID_CHILD const *,tagLCITEM *);
	long _FindItemAndIndex(_ITEMID_CHILD const *,tagLCITEM *);
	long _FireEvent(long,tagVARIANT *);
	long _FireFolderTypeKnownEvent();
	long _ForwardMenuMessages(unsigned long,unsigned int,unsigned __int64,__int64,__int64 *,int *);
	long _GetChildId(int,IChildId * *);
	long _GetChildIdArray(IObjectCollection *,_GUID const &,void * *);
	long _GetChildIdArrayFromItemArray(IObjectCollection *,CDPARelease<IChildId,CTContainer_PolicyRelease<IChildId> > *,unsigned int *,_ITEMID_CHILD const * * *);
	long _GetCommandString(unsigned __int64,unsigned short *,unsigned int);
	long _GetContextMenuFromObjectCollection(IObjectCollection *,_GUID const &,void * *);
	long _GetDragHelper(_GUID const &,void * *);
	long _GetFirstSortColumnIndex(unsigned int *,int *);
	long _GetFolder(IShellItemArray * *);
	long _GetFolderTypeDescription(IFolderTypeDescription * *);
	long _GetIPersistHistoryObject(IPersistHistory * *);
	long _GetItem(int,IItem * *);
	long _GetItemArray(unsigned int,_GUID const &,void * *);
	long _GetItemFromPidl(_ITEMID_CHILD const *,IItem * *);
	long _GetItems(unsigned int,int,_GUID const &,void * *);
	long _GetItemsWorker(unsigned int,int,_GUID const &,void * *);
	long _GetPropertyKeysForTextFilter(_tagpropertykey * *,unsigned int *);
	long _GetResultShape(IResultShape * *);
	long _GetSelection(int,IShellItemArray * *);
	long _GetShellItemArrayFromObjectCollection(IObjectCollection *,_GUID const &,void * *);
	long _GetTryHarderItems(_GUID const &,void * *);
	long _GetUIObjectFromItemArray(IObjectCollection *,int,_GUID const &,void * *);
	long _InvokeContextMenu(IContextMenu *,_CMINVOKECOMMANDINFOEX *);
	long _InvokeContextMenuVerbOnSelection(char const *,unsigned int);
	long _InvokeContextMenuVerbOnSelectionWorker(char const *,unsigned int);
	long _InvokeFilterOperation(int,FILTER_OPERATION_FLAGS);
	long _LoadPersistedHistory();
	long _MoveItems(int,int const *,int,int *);
	long _NavigateTextFilter();
	long _NavigateTextFilterWorker(_ITEMIDLIST_ABSOLUTE *,unsigned long);
	long _NavigateToColumnFilter(_tagpropertykey const &,IFilterCondition *,tagARRANGE_MODE,int);
	long _OnCollectionCreated();
	long _OnCollectionStarted();
	long _OnDefaultCommand();
	long _OnDelayedSQMViewStateChange();
	long _OnItemCountChanged();
	long _OnStateChange(unsigned int);
	long _ReInitialize();
	long _RefreshView(UPDATE_FLAGS);
	long _ReloadItems(UPDATE_FLAGS);
	long _ReloadView(UPDATE_FLAGS);
	long _RenameSelection(IShellItemArray *,unsigned short const *);
	long _SearchOnTextFilter();
	long _SelectAndPosition(tagLCITEM const *,unsigned int,tagPOINT *);
	long _SelectFromPreviousView(IShellView *);
	long _SetBusyState(int);
	long _SetItemCollection(IItemCollection *,unsigned int,UPDATE_FLAGS,CEventResult *);
	long _SetTextFilter(unsigned short const *,unsigned short const *,SET_TEXT_FILTER_FLAGS);
	long _SetTileViewProperties(_ITEMID_CHILD const *,_tagpropertykey const &,unsigned short const *);
	long _ShouldReparentItem(_ITEMIDLIST_ABSOLUTE const *);
	long _ShowHideListView();
	long _TryModifyMenu(IContextMenu *,int,_GUID const &,void * *);
	long _UpdateSortColumnArray(_tagpropertykey const &,int,SORTCOLUMN *,unsigned int,unsigned int *);
	long _ZoneCheck(unsigned long,unsigned long);
	long _ZoneCheckFrame(unsigned long,int);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static int s_DSAFreeDelaySelectCB(SAP_ITEM *,void *);
	unsigned int GetMenuIDFromViewModeAndIconSize(unsigned int,unsigned int,int);
	unsigned int _CheckCurrentViewMenuItem(HMENU__ *);
	unsigned int _GetExplorerFlag();
	unsigned int _GetMaxItemCount();
	unsigned int _ItemFlagsToListViewState(LC_ITEM_FLAGS);
	unsigned long _Attributes(IItem *,unsigned long);
	unsigned long _AttributesFromSelection(unsigned long);
	unsigned long _GetCommonDialogViewFlags();
	unsigned long _GetEnumFlags();
	unsigned long _GetNeededSecurityAction(int);
	unsigned long _GetSQMFolderClass(_GUID);
	unsigned long _GetSQMFolderHash();
	virtual ~CDefView();
	void OnDPIChanged();
	void _AddCopyHook();
	void _AddZoneToDataObject(IDataObject *);
	void _AlterEffect(unsigned long,unsigned long *,unsigned int);
	void _AppendSortBuddies(_tagpropertykey const &,SORTCOLUMN *,unsigned int,unsigned int *);
	void _ApplyArrangeBy(ISortColumnArray *,_tagpropertykey const &,int,_tagpropertykey const &);
	void _ApplySettings(int,int);
	void _ApplySniffedFolderType();
	void _ArrangeByCommandId(unsigned int);
	void _ArrangeByMode(int,_tagpropertykey const &,VIEW_ARRANGEMENT_MODE);
	void _CallRefresh(int);
	void _CancelTryHarderInvoke();
	void _ClearCachedSelection();
	void _ClearDelaySelectedItems();
	void _DoColumnClicked(_tagpropertykey const &);
	void _DoColumnDropDownMenu(HWND__ *,_tagpropertykey const &,tagPOINT const *);
	void _DoContextMenu(unsigned long);
	void _FillDone();
	void _FilterItems(int,FILTER_OPERATION_FLAGS);
	void _FireCountDoneEnd();
	void _FireFilterInvoked();
	void _FireTrackEvent(int,int);
	void _FireTryHarderFlagsSQM(IObjectCollection *);
	void _FireTryHarderScopeSQM(ITryHarderItem *);
	void _GetCBText(unsigned __int64,unsigned int,unsigned int,unsigned int,unsigned short *,unsigned int);
	void _GetCurrentSortColumnArray(SORTCOLUMN *,unsigned int,unsigned int *);
	void _GetFullTextKey(_tagpropertykey *);
	void _GetMenuHelpText(unsigned __int64,unsigned short *,unsigned int);
	void _HandleNM_SETFOCUS();
	void _InitFromPreviousView(IShellView *);
	void _InitViewMenu(HMENU__ *);
	void _InitViewMenuViews(HMENU__ *);
	void _MergeViewMenu(HMENU__ *,HMENU__ *);
	void _OnColumnsChanged(COLUMN_CHANGED_FLAGS);
	void _OnContentsChanged(CONTENTS_CHANGED_FLAGS);
	void _OnContextMenu(__int64);
	void _OnDelayedColumnsChanged(COLUMN_CHANGED_FLAGS);
	void _OnDelayedContentsChanged();
	void _OnDelayedFilterContents(int);
	void _OnDelayedSelectionChange();
	void _OnEnumDoneMessage();
	void _OnItemCountDone();
	void _OnItemMoved();
	void _OnSelectionOrFocusChanged();
	void _OnThemeChange();
	void _OnWinIniChange(unsigned __int64,unsigned short const *);
	void _OnWinIniChangeDesktop(unsigned __int64,unsigned short const *);
	void _PaintErrMsg(HWND__ *);
	void _PersistSingleSelection();
	void _PositionSelectedItems(int,int,int);
	void _ProcessDelayActivationWorker();
	void _PropagateOnViewChange(unsigned long,long);
	void _RegisterWindow();
	void _ReleaseCurrentCollection();
	void _ReloadSettings(UPDATE_FLAGS);
	void _RemoveCopyHook();
	void _ReportDevirtualizationSQMData(SQM_DEVIRTUALIZATION_SOURCE);
	void _SameViewMoveIcons();
	void _SelectDelaySelectedItems(int);
	void _SendPerfTrackFilters(int,_tagpropertykey const &);
	void _SetEditMenus(HMENU__ *);
	void _SetFocus();
	void _SetMenusForShowingView(HMENU__ *,unsigned int const *,unsigned int,int);
	void _SetPoints(unsigned int,_ITEMID_CHILD const * const *,IDataObject *);
	void _SetUpMenus(unsigned int);
	void _SetViewColors();
	void _StopCollection();
	void _SwitchToViewModeAndIconSize(FOLDERVIEWMODE,int);
	void _UnCheckMenuItems(HMENU__ *);
	void _UpdateCollectionPriority();
	void _UpdateColors();
	void _UpdateTextFilter();
	void _ViewWindowSetFocus();
protected:
	virtual int v_IsRootEntryAutoNavigated();
public:
	CDefView(IShellFolderViewCB *,IShellView *);
	long Init(IShellFolder *);
	static int CanDesktopUseSolidBackgroundColorHelper();
	virtual int CanGroupView();
	virtual int CanSortView();
	virtual int EqualsViewIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual int IsGroupView();
	virtual int IsViewSorted();
	virtual int IsViewStacked();
	virtual long AddObject(_ITEMID_CHILD *,unsigned int *);
	virtual long AddPropertySheetPages(unsigned long,int (*)(_PSP *,__int64),__int64);
	virtual long AddToCache(IShellItem *,IFileOperation *);
	virtual long ArrangeGrid();
	virtual long AutoArrange();
	virtual long CancelDelayActivation();
	virtual long CheckCache(IShellItem *);
	virtual long ContextSensitiveHelp(int);
	virtual long CreateEnumIDListFromContents(_ITEMIDLIST_ABSOLUTE const *,unsigned long,IEnumIDList * *);
	virtual long CreateItemCollection(IItemCollection * *);
	virtual long CreateViewWindow(IShellView *,FOLDERSETTINGS const *,IShellBrowser *,tagRECT *,HWND__ * *);
	virtual long CreateViewWindow2(_SV2CVW2_PARAMS *);
	virtual long CreateViewWindow3(IShellBrowser *,IShellView *,unsigned long,FOLDERFLAGS,FOLDERFLAGS,FOLDERVIEWMODE,_GUID const *,tagRECT const *,HWND__ * *);
	virtual long DelayActivation();
	virtual long DestroyViewWindow();
	virtual long DoContextMenuPopup(IUnknown *,unsigned int,tagPOINT);
	virtual long DoRename();
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Draw(unsigned long,long,void *,tagDVTARGETDEVICE *,HDC__ *,HDC__ *,_RECTL const *,_RECTL const *,int (*)(unsigned __int64),unsigned __int64);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DumpContents(int,IDebugOutput *,unsigned __int64 *);
	virtual long EnableAlphaShadow(int);
	virtual long EnableModeless(int);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long FilterByCondition(IFilterCondition *);
	virtual long FilterByText(unsigned short const *,unsigned short const *);
	virtual long FilterContent();
	virtual long Freeze(unsigned long,long,void *,unsigned long *);
	virtual long GetAdvise(unsigned long *,unsigned long *,IAdviseSink * *);
	virtual long GetArrangeParam(__int64 *);
	virtual long GetAutoArrange();
	virtual long GetClassID(_GUID *);
	virtual long GetColor(VPCOLORFLAGS,unsigned long *);
	virtual long GetColorSet(unsigned long,long,void *,tagDVTARGETDEVICE *,HDC__ *,tagLOGPALETTE * *);
	virtual long GetColumnCount(CM_ENUM_FLAGS,unsigned int *);
	virtual long GetColumnInfo(_tagpropertykey const &,CM_COLUMNINFO *);
	virtual long GetColumns(CM_ENUM_FLAGS,_tagpropertykey *,unsigned int);
	virtual long GetCurrentFolderFlags(unsigned long *);
	virtual long GetCurrentInfo(FOLDERSETTINGS *);
	virtual long GetCurrentPropertyKey(_tagpropertykey *);
	virtual long GetCurrentValue(tagPROPVARIANT *);
	virtual long GetCurrentViewMode(unsigned int *);
	virtual long GetDefaultSpacing(tagPOINT *);
	virtual long GetDragPoint(tagPOINT *);
	virtual long GetDropPoint(tagPOINT *);
	virtual long GetFirstSortColumn(SORTCOLUMN *);
	virtual long GetFocusedItem(int *);
	virtual long GetFolder(_GUID const &,void * *);
	virtual long GetFolderType(_GUID *);
	virtual long GetFolderViewOptions(FOLDERVIEWOPTIONS *);
	virtual long GetFont(tagLOGFONTW *);
	virtual long GetGroupBy(_tagpropertykey *,int *);
	virtual long GetGroupSubsetCount(unsigned int *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetInheritFlags(IHVS_FLAGS *);
	virtual long GetInsertMark(int *);
	virtual long GetInvocationLocation(EXPLORER_COMMAND_SQM_INVOCATION_LOCATION *);
	virtual long GetItem(int,_GUID const &,void * *);
	virtual long GetItemHeight(int *);
	virtual long GetItemObject(unsigned int,_GUID const &,void * *);
	virtual long GetItemPosition(_ITEMID_CHILD const *,tagPOINT *);
	virtual long GetItemRect(int,tagRECT *);
	virtual long GetItemSpacing(_ITEMSPACING *);
	virtual long GetItemToTranslate(IItem * *);
	virtual long GetMaxItemCount(unsigned int *);
	virtual long GetMenu(HMENU__ * *);
	virtual long GetObjectCount(unsigned int *);
	virtual long GetObjectW(_ITEMID_CHILD * *,unsigned int);
	virtual long GetOperationID(unsigned long *);
	virtual long GetPromptText(unsigned short *,unsigned int);
	virtual long GetSearchText(unsigned short *,unsigned int);
	virtual long GetSelectedCount(unsigned int *);
	virtual long GetSelectedItem(int,int *);
	virtual long GetSelectedObjects(_ITEMID_CHILD const * * *,unsigned int *);
	virtual long GetSelection(int,IShellItemArray * *);
	virtual long GetSelectionMarkedItem(int *);
	virtual long GetSelectionState(_ITEMID_CHILD const *,unsigned long *);
	virtual long GetSortColumnCount(int *);
	virtual long GetSortColumns(SORTCOLUMN *,int);
	virtual long GetSpacing(tagPOINT *);
	virtual long GetStatus(DEFVIEWSTATUS *);
	virtual long GetView(_GUID *,unsigned long);
	virtual long GetViewModeAndIconSize(FOLDERVIEWMODE *,int *);
	virtual long GetViewProperty(_ITEMID_CHILD const *,_tagpropertykey const &,tagPROPVARIANT *);
	virtual long GetVisibleItem(int,int,int *);
	virtual long GetWindow(HWND__ * *);
	virtual long HandleRename(_ITEMID_CHILD const *);
	virtual long HasFocusIO();
	virtual long HitTestItem(tagPOINT,int *);
	virtual long IncludeItem(IChildId *,int *);
	virtual long IncludeItems(int *);
	virtual long InitMenuPopup(HMENU__ *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long InvokeVerbOnSelection(char const *);
	virtual long IsBkDropTarget(IDropTarget *);
	virtual long IsDropOnSource();
	virtual long IsDropOnSource(IDropTarget *);
	virtual long IsEvaluatingEdpPolicy(int *);
	virtual long IsItemInDeferredQueue(IItem *);
	virtual long IsMoveInSameFolder();
	virtual long Item(int,_ITEMID_CHILD * *);
	virtual long ItemCount(unsigned int,int *);
	virtual long Items(unsigned int,_GUID const &,void * *);
	virtual long LimitItemsToVisibleCount(int);
	virtual long LookupAndRemoveFromCache(IShellItem *,IFileOperation * *);
	virtual long MapRect(int,HWND__ *,tagRECT *);
	virtual long MoveIcons(IDataObject *);
	virtual long MoveObjects(_ITEMID_CHILD const * const *,unsigned int,int);
	virtual long NavigateToIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long OnActivateSelection(unsigned long);
	virtual long OnBackgroundContextMenu(tagPOINT const *);
	virtual long OnBeginDrag(tagPOINT const *);
	virtual long OnBeginLabelEdit(IItem *,HWND__ *);
	virtual long OnCancelAsyncFilters(unsigned int);
	virtual long OnClearFilterPreview(unsigned int);
	virtual long OnColumnClicked(int,_tagpropertykey const &,tagPOINT const *);
	virtual long OnColumnsChanged();
	virtual long OnCommit(unsigned int,_tagpropertykey const &,tagARRANGE_MODE);
	virtual long OnContentsChanged(int);
	virtual long OnDestroyFilterControl(unsigned int);
	virtual long OnDoCollapseColumn();
	virtual long OnEndLabelEdit(IItem *,unsigned short const *,RenameOperationStatus);
	virtual long OnExplorerWindowReady();
	virtual long OnFilterChanged(unsigned int,_tagpropertykey const &,IFilterCondition *);
	virtual long OnFiltersCreated(IObjectCollection *,_tagpropertykey const &);
	virtual long OnFocusChange(int);
	virtual long OnGetColumnHeaderFilterVisible();
	virtual long OnGetEmptyText(unsigned short *,unsigned int);
	virtual long OnGetSortColumn(GETSORTCOLUMN,SORTCOLUMN *);
	virtual long OnGetTryHarderArray(_GUID const &,void * *);
	virtual long OnGroupZoom(IItem *);
	virtual long OnInitialEnumerationDone();
	virtual long OnInvokeTryHarder(ITryHarderItem *);
	virtual long OnInvokeVerb(tagLCITEM const &,unsigned short const *);
	virtual long OnItemMoved(IItem *);
	virtual long OnItemStateChanged(LC_ITEM_FLAGS,LC_ITEM_FLAGS);
	virtual long OnKeyDown(unsigned int);
	virtual long OnMenuCommand(unsigned long);
	virtual long OnPaintDone();
	virtual long OnRequestReposition(unsigned int,tagRECT const *);
	virtual long OnScrollImageSize(short);
	virtual long OnSearchTextNotify(unsigned short const *,unsigned short const *,SHELLSEARCHNOTIFY);
	virtual long OnSelectionContextMenu(tagPOINT const *);
	virtual long OnSetFocus();
	virtual long OnSetTitle(tagVARIANT *);
	virtual long OnSettingsChanged(unsigned long);
	virtual long OnSettingsLoad(IPropertyBag *);
	virtual long OnSettingsSave(IPropertyBag *);
	virtual long OnVisibleColumnMenu(_tagpropertykey,tagPOINT const *);
	virtual long ProcessDelayActivation();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long QuerySupport(unsigned int *);
	virtual long Rearrange(__int64);
	virtual long Refresh();
	virtual long RefreshObject(_ITEMID_CHILD *,unsigned int *);
	virtual long RemoveObject(_ITEMID_CHILD *,unsigned int *);
	virtual long SaveViewState();
	virtual long Search(unsigned short const *,unsigned long);
	virtual long Select(unsigned int);
	virtual long SelectAndEditItem(_ITEMIDLIST_ABSOLUTE const *,int);
	virtual long SelectAndPositionItem(_ITEMID_CHILD const *,unsigned int,tagPOINT *);
	virtual long SelectAndPositionItems(unsigned int,_ITEMID_CHILD const * const *,tagPOINT *,unsigned long);
	virtual long SelectItem(_ITEMID_CHILD const *,unsigned int);
	virtual long SelectItem(int,unsigned long);
	virtual long SetAccessibleName(unsigned short const *);
	virtual long SetAdvise(unsigned long,unsigned long,IAdviseSink *);
	virtual long SetAutomationObject(IDispatch *);
	virtual long SetCallback(IShellFolderViewCB *,IShellFolderViewCB * *);
	virtual long SetClipboard(int);
	virtual long SetColor(VPCOLORFLAGS,unsigned long);
	virtual long SetColumnInfo(_tagpropertykey const &,CM_COLUMNINFO const *);
	virtual long SetColumns(_tagpropertykey const *,unsigned int);
	virtual long SetCondition(ICondition *);
	virtual long SetCurrentFolderFlags(unsigned long,unsigned long);
	virtual long SetCurrentViewMode(unsigned int);
	virtual long SetDropSourceEnterpriseId(unsigned short const *);
	virtual long SetEnumReadyCallback(IEnumReadyCallback *);
	virtual long SetExtendedTileViewProperties(_ITEMID_CHILD const *,unsigned short const *);
	virtual long SetFolderViewOptions(FOLDERVIEWOPTIONS,FOLDERVIEWOPTIONS);
	virtual long SetFont(tagLOGFONTW const *,int);
	virtual long SetGroupBy(_tagpropertykey const &,int);
	virtual long SetGroupSubsetCount(unsigned int);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetInvocationLocation(EXPLORER_COMMAND_SQM_INVOCATION_LOCATION);
	virtual long SetItemHeight(int);
	virtual long SetItemPos(_ITEMID_CHILD const *,tagPOINT *);
	virtual long SetMaxItemCount(unsigned int);
	virtual long SetObjectCount(unsigned int,unsigned int);
	virtual long SetPoints(IDataObject *);
	virtual long SetRedraw(int);
	virtual long SetResultShape(IResultShape *);
	virtual long SetSortColumns(SORTCOLUMN const *,int);
	virtual long SetText(FVTEXTTYPE,unsigned short const *);
	virtual long SetTheme(unsigned short const *,unsigned short const *);
	virtual long SetTileViewProperties(_ITEMID_CHILD const *,unsigned short const *);
	virtual long SetTileWidth(int);
	virtual long SetViewModeAndIconSize(FOLDERVIEWMODE,int);
	virtual long SetViewProperty(_ITEMID_CHILD const *,_tagpropertykey const &,tagPROPVARIANT const &);
	virtual long SetViewSQMInfo(unsigned long);
	virtual long SetWatermark(HBITMAP__ *,VPWATERMARKFLAGS);
	virtual long StackByProperty(_tagpropertykey const &);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long TranslateAcceleratorW(tagMSG *);
	virtual long TranslateViewAccelerator(tagMSG *);
	virtual long UIActivate(unsigned int);
	virtual long UIActivateIO(int,tagMSG *);
	virtual long Unfreeze(unsigned long);
	virtual long UpdateObject(_ITEMID_CHILD *,_ITEMID_CHILD *,unsigned int *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void ArrangeByColumn(ARRANGEMENT_TYPE,_tagpropertykey const &);
	virtual void AutoSizeAllColumns();
	virtual void ToggleVisibleColumn(_tagpropertykey const &);
};

class CDefViewPersistHistory
{
	void _LoadFromPropertyBag(IPropertyBag *);
	void _SaveToPropertyBag(IPropertyBag *);
public:
	virtual long Advise(IAdviseSink *,unsigned long *);
	virtual long Close(unsigned long);
	virtual long DoVerb(long,tagMSG *,IOleClientSite *,long,HWND__ *,tagRECT const *);
	virtual long EnumAdvise(IEnumSTATDATA * *);
	virtual long EnumVerbs(IEnumOLEVERB * *);
	virtual long GetClassID(_GUID *);
	virtual long GetClientSite(IOleClientSite * *);
	virtual long GetClipboardData(unsigned long,IDataObject * *);
	virtual long GetExtent(unsigned long,tagSIZE *);
	virtual long GetMiscStatus(unsigned long,unsigned long *);
	virtual long GetMoniker(unsigned long,unsigned long,IMoniker * *);
	virtual long GetPositionCookie(unsigned long *);
	virtual long GetUserClassID(_GUID *);
	virtual long GetUserType(unsigned long,unsigned short * *);
	virtual long InitFromData(IDataObject *,int,unsigned long);
	virtual long IsUpToDate();
	virtual long LoadHistory(IStream *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SaveHistory(IStream *);
	virtual long SetClientSite(IOleClientSite *);
	virtual long SetColorScheme(tagLOGPALETTE *);
	virtual long SetExtent(unsigned long,tagSIZE *);
	virtual long SetHostNames(unsigned short const *,unsigned short const *);
	virtual long SetMoniker(unsigned long,IMoniker *);
	virtual long SetPositionCookie(unsigned long);
	virtual long Unadvise(unsigned long);
	virtual long Update();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDefViewSink
{
	long _Invoke(unsigned int,unsigned __int64,__int64);
public:
	virtual long NotifyDispatchEvent(long,tagVARIANT *);
	virtual long NotifyWinEvent(unsigned long,int,long);
	virtual long OnCancelled();
	virtual long OnCollectionChanged(unsigned int,tagCOLLECTION_CHANGE_STATE);
	virtual long OnGetCountDone(unsigned int,tagCOUNT_TYPE,long);
	virtual long OnItemMoved(IItem *,IItem *);
	virtual long OnItemTranslated(IItem *,IItem *);
	virtual long OnItemsAdded(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnItemsDeleted(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnPrepareDone(unsigned int,long);
	virtual long OnUniqueLeafCountChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDefaultAssociationsProfileHandler
{
	TRIBIT _ReadDesktopSettingRegkey(HKEY__ *,unsigned short const *,unsigned short const *,bool);
	TRIBIT _ReadDesktopSettingUnattendValue(unsigned short const *);
	long _ExpandFilePathAndApply(unsigned short const *);
	long _ExpandFilePathAndReapply(unsigned short const *,bool);
	void _HandleEventForDesktopSetting(CDefaultAssociationsProfileHandler::ProfileEvent);
public:
	virtual long OnCreate(unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnDelete(unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnLoad(unsigned short const *,unsigned short const *,unsigned long,int);
	virtual long OnMigrate(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnUnload(unsigned short const *,unsigned short const *,unsigned long,int);
	virtual long OnUpgrade(unsigned short const *,unsigned short const *,unsigned long);
};

struct CDefaultProgramsMatches
{
	int Next(CAssocHandler * *);
	long Init(HKEY__ *,unsigned short const *);
	~CDefaultProgramsMatches();
};

class CDefaultRegistry
{
	virtual long GetDWORD(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long *);
	virtual long GetString(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long);
	virtual long SetDWORD(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long);
	virtual long SetString(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short *);
public:
	CDefaultRegistry();
};

struct CDeferredCollectionNotifier
{
	CDeferredCollectionNotifier();
	long RuntimeClassInitialize(IItemCollection *,IUnknown *);
};

struct CDeferredCollectionSink
{
	CDeferredCollectionSink();
	long RuntimeClassInitialize(IItemCollection *,IUnknown *);
	long Unadvise(IItemCollection *);
	virtual long OnCancelled();
	virtual long OnCollectionChanged(unsigned int,tagCOLLECTION_CHANGE_STATE);
	virtual long OnExternalCollectionChanged(unsigned int);
	virtual long OnGetCountDone(unsigned int,tagCOUNT_TYPE,long);
	virtual long OnItemMoved(IItem *,IItem *);
	virtual long OnItemTranslated(IItem *,IItem *);
	virtual long OnItemsAdded(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnItemsDeleted(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnPrepareDone(unsigned int,long);
	virtual long OnUniqueLeafCountChanged();
};

class CDelegateAccessibleImpl
{
protected:
	long _DefQueryInterface(_GUID const &,void * *);
	virtual ~CDelegateAccessibleImpl();
public:
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long accDoDefaultAction(tagVARIANT);
	virtual long accHitTest(long,long,tagVARIANT *);
	virtual long accLocation(long *,long *,long *,long *,tagVARIANT);
	virtual long accNavigate(long,tagVARIANT,tagVARIANT *);
	virtual long accSelect(long,tagVARIANT);
	virtual long get_accChild(tagVARIANT,IDispatch * *);
	virtual long get_accChildCount(long *);
	virtual long get_accDefaultAction(tagVARIANT,unsigned short * *);
	virtual long get_accDescription(tagVARIANT,unsigned short * *);
	virtual long get_accFocus(tagVARIANT *);
	virtual long get_accHelp(tagVARIANT,unsigned short * *);
	virtual long get_accHelpTopic(unsigned short * *,tagVARIANT,long *);
	virtual long get_accKeyboardShortcut(tagVARIANT,unsigned short * *);
	virtual long get_accName(tagVARIANT,unsigned short * *);
	virtual long get_accParent(IDispatch * *);
	virtual long get_accRole(tagVARIANT,tagVARIANT *);
	virtual long get_accSelection(tagVARIANT *);
	virtual long get_accState(tagVARIANT,tagVARIANT *);
	virtual long get_accValue(tagVARIANT,unsigned short * *);
	virtual long put_accName(tagVARIANT,unsigned short *);
	virtual long put_accValue(tagVARIANT,unsigned short *);
};

class CDelegateDropTarget
{
	void _ReleaseCurrentDropTarget();
protected:
	virtual ~CDelegateDropTarget();
public:
	long Init();
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long IsEvaluatingEdpPolicy(int *);
	virtual long SetDropSourceEnterpriseId(unsigned short const *);
};

struct CDelegateEnum
{
	CDelegateEnum(IShellFolder *,IEnumIDList *,IShellFolder *);
	static long s_CreateInstance(IShellFolder *,IEnumIDList *,IShellFolder *,_GUID const &,void * *);
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDelegateFolderBase
{
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
};

class CDelegateFolderBaseNoUI
{
	long _CreateAndInit(_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
protected:
	long _AddAggregatorCookieIfAvailable(IPropertyBag *,IBindCtx *);
	long _GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	virtual long AddInitProperties(IPropertyBag *,IBindCtx *);
	virtual long CreateFolder(IPropertyBag *,_GUID const &,void * *);
	virtual long _GetInFolderDisplayName(_ITEMID_CHILD const *,unsigned short * *);
	virtual long _GetInFolderParsingName(_ITEMID_CHILD const *,unsigned short * *);
	virtual long _GetInFolderParsingNameHelper(_ITEMID_CHILD const *,unsigned short * *);
	virtual ~CDelegateFolderBaseNoUI();
public:
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDelegatePropStoreFactory
{
	long _AggregatePropStore(IPropertyStore *,GETPROPERTYSTOREFLAGS,_GUID const &,void * *);
public:
	static long s_CreateInstance(IPropertyStoreFactory *,IShellFolder *,IPropertyStore *,IShellItem *,_GUID const &,void * *);
	virtual long GetPropertyStore(GETPROPERTYSTOREFLAGS,IUnknown *,_GUID const &,void * *);
	virtual long GetPropertyStoreForKeys(_tagpropertykey const *,unsigned int,GETPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDelegatingTransfer
{
	struct CTransferAdviseWrapper
	{
		CTransferAdviseWrapper(ITransferAdviseSink *,ITransferSource *);
		~CTransferAdviseWrapper();
	};

	long _GetDelegateSourceItem(IShellItem *,_GUID const &,void * *);
	long _GetTransfer(IShellItem *,_GUID const &,void * *);
	virtual ~CDelegatingTransfer();
public:
	CDelegatingTransfer();
	virtual long Advise(ITransferAdviseSink *,unsigned long *);
	virtual long ApplyPropertiesToItem(IShellItem *,IShellItem * *);
	virtual long CopyItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,COPY_ITEM_FLAGS,IShellItem * *);
	virtual long EnterFolder(IShellItem *);
	virtual long GetDefaultDestinationName(IShellItem *,IShellItem *,unsigned short * *);
	virtual long IsCopySupported(IShellItem *,IShellItem *,int *);
	virtual long LastCopyError(LAST_COPYITEM_ERROR_TYPE *);
	virtual long LeaveFolder(IShellItem *);
	virtual long LinkItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long MoveItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long OpenItem(IShellItem *,unsigned long,_GUID const &,void * *);
	virtual long RecycleItem(IShellItem *,IShellItem *,unsigned long,IShellItem * *);
	virtual long RemoveItem(IShellItem *,unsigned long);
	virtual long RenameItem(IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long SetFileOperationContext(IFileOperationContext *);
	virtual long SetProperties(IPropertyChangeArray *);
	virtual long Unadvise(unsigned long);
};

struct CDeleteDiskCacheTask
{
	virtual long InternalResumeRT();
};

class CDeskHtmlProp
{
	long _InitBackgroundTab();
public:
	CDeskHtmlProp();
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long GetAdvancedDialog(IAdvancedDialog * *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long OnApply(tagPropPageOnApply);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(unsigned short const *,tagVARIANT *,IErrorLog *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual long SetSite(IUnknown *);
	virtual long Write(unsigned short const *,tagVARIANT *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDesktopBrowser
{
protected:
	HWND__ * _GetListview(HWND__ *);
	__int64 _OnCommand(unsigned __int64,__int64);
	__int64 _RaisedWndProc(unsigned int,unsigned __int64,__int64);
	__int64 _WndProcBS(HWND__ *,unsigned int,unsigned __int64,__int64);
	bool _EnsureDesktopWallpaper();
	bool _GetViewBorderRects(unsigned int,tagRECT *);
	bool _IsDesktopWallpaperInitialized();
	bool _IsUserPositionedView();
	bool _RegisterDesktopWallpaper();
	int _IsInBoxRegItems(unsigned short const *,unsigned long *);
	long _ActivateView();
	long _AddCurLayout();
	long _AddDesktopTask(IRunnableTask *,unsigned long);
	long _CleanupAnimation(bool);
	long _CreateAndFadeWallpaper(unsigned long);
	long _CreateDesktopView();
	long _EnableTransparentRaisedDesktop(bool);
	long _EnableTransparentView(bool);
	long _EnsureRaisedDesktop();
	long _HandleMonSetupChange();
	long _InitLayoutStoreState();
	long _InitScheduler();
	long _Initialize(HWND__ *);
	long _IsDisplayChange();
	long _OnCreate(tagCREATESTRUCTW const *);
	long _OnDestroy();
	long _OnFocusMsg(unsigned int,unsigned __int64,__int64);
	long _OnSize(unsigned __int64);
	long _OnWallpaperUpdate(unsigned __int64,__int64);
	long _PrepareDesktopForAnimation(bool);
	long _RestoreCurrentLayout();
	long _SaveCurLayout();
	long _SaveViewState();
	long _SetAcceleratorMenu(HACCEL__ *);
	long _UpdateLayoutStoreState();
	long _UpdateViewSize(bool,HWND__ *);
	static void _CreateSavedWindows();
	unsigned int _PeekForAMessage();
	void _EnsureAutoColorization(bool);
	void _HandleSlideshowEnableDisable();
	void _InitMonitors();
	void _LoadWallpaper();
	void _LogDesktopSQM();
	void _OnAddToRecent(void *,unsigned long);
	void _OnAnimationRequirementsChanged();
	void _OnCreateApiSurface(unsigned __int64,__int64);
	void _OnDPIChanged();
	void _OnFinalInitialize(__int64);
	void _OnRaise(unsigned __int64,__int64);
	void _OnShowDesktopVisuals(unsigned __int64,__int64);
	void _OnSystemParametersChanged(unsigned int,unsigned __int64,__int64);
	void _Raise(bool);
	void _SaveState();
	void _SetDWMAndImmersiveColor(unsigned long);
	void _SetWorkAreas(bool,HWND__ *,unsigned int,tagRECT *);
	void _SetupAppRan(unsigned __int64,__int64);
	void _ShowOrHideDesktopIconsBasedOnDesktopVisibility();
	void _ShowWindowWithoutHourglass();
	void _SubtractBottommostTray(tagRECT *);
	void _SuspendResumeViewPositionTracking(bool);
	void _SwapParents(HWND__ *,HWND__ *);
	void _UpdateShouldLaunchEverythingMaximized();
	~CDesktopBrowser();
public:
	CDesktopBrowser(IDeskTray *);
	static __int64 s_DesktopWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_RaisedWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static bool s_IsAnimationEnabled();
	static bool s_IsWallpaperForcedSolid();
	virtual int IsOccluded();
	virtual int ShouldDefer();
	virtual long AdjustLayout(IUnknown *,IUnknown * *);
	virtual long BrowseItem(IShellItem *,unsigned int);
	virtual long BrowseObject(_ITEMIDLIST_RELATIVE const *,unsigned int);
	virtual long ContextSensitiveHelp(int);
	virtual long CreateViewWindow(IShellItem *,IShellView *,IShellView *,tagRECT *,HWND__ * *);
	virtual long DisplayParseError(long,unsigned short const *);
	virtual long EnableModelessSB(int);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long GetColumnPropertyList(_GUID const &,void * *);
	virtual long GetControlWindow(unsigned int,HWND__ * *);
	virtual long GetCurrentItem(_GUID const &,void * *);
	virtual long GetFlags(unsigned long *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long GetGroupSubsetCount(unsigned int *);
	virtual long GetHistoryObject(IOleObject * *,IStream * *,IBindCtx * *);
	virtual long GetIconSize(unsigned int *);
	virtual long GetNavigateState(tagBNSTATE *);
	virtual long GetPalette(HPALETTE__ * *);
	virtual long GetPendingItem(_GUID const &,void * *);
	virtual long GetPidl(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetPropertyBag(unsigned long,_GUID const &,void * *);
	virtual long GetSortColumns(SORTCOLUMN *,unsigned int,unsigned int *);
	virtual long GetTitle(IShellView *,unsigned short *,unsigned long);
	virtual long GetTravelLog(ITravelLog * *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long GetViewStateStream(unsigned long,IStream * *);
	virtual long GetWindow(HWND__ * *);
	virtual long InsertMenusSB(HMENU__ *,tagOleMenuGroupWidths *);
	virtual long IsControlWindowShown(unsigned int,int *);
	virtual long OnAnimationComplete(IAnimatedWallpaper *);
	virtual long OnFocusChangeIS(IUnknown *,int);
	virtual long OnViewWindowActive(IShellView *);
	virtual long OnViewWindowCreated(HWND__ *);
	virtual long PaintWallpaper(HWND__ *,HDC__ *);
	virtual long QueryActiveShellView(IShellView * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long RegisterWindow(int,int);
	virtual long RemoveMenusSB(HMENU__ *);
	virtual long SendControlMsg(unsigned int,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long SetAsDefFolderSettings();
	virtual long SetFlags(unsigned long,unsigned long);
	virtual long SetMenuSB(HMENU__ *,void *,HWND__ *);
	virtual long SetNavigateState(tagBNSTATE);
	virtual long SetStatusTextSB(unsigned short const *);
	virtual long SetToolbarItems(_TBBUTTON *,unsigned int,unsigned int);
	virtual long ShowControlWindow(unsigned int,int);
	virtual long TranslateAcceleratorSB(tagMSG *,unsigned short);
	virtual long UpdateBackForwardState();
	virtual long UpdateWindowList();
	virtual unsigned long AddRef();
	virtual unsigned long GetBrowserIndex();
	virtual unsigned long Release();
	virtual void ClearSavedLayouts();
	virtual void FlushDisplayChanges();
	virtual void GetAppViewData(APPLICATION_VIEW_DATA *);
	void _MessageLoop();
};

struct CDesktopGadget
{
	virtual long RunGadget(unsigned short const *);
};

class CDesktopIconPropSheetPage
{
	virtual ~CDesktopIconPropSheetPage();
protected:
	HWND__ * _CreateListView(HWND__ *);
	long _LoadDeskIconState(IPropertyBag *);
	long _LoadIconState(IPropertyBag *);
	long _MergeDeskIconState(IPropertyBag *);
	long _MergeIconState(IPropertyBag *);
	long _OnInitDesktopOptionsUI(HWND__ *);
	long _UpdateDesktopIconsUI(HWND__ *);
public:
	long IsDirty(IPropertyBag *,int *,int *);
	long LoadState(IPropertyBag *);
	long OnInit(HWND__ *,IPropertyBag *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void OnCommand(HWND__ *,unsigned short,unsigned short,HWND__ *);
	void OnNotify(HWND__ *,unsigned __int64,tagNMHDR *);
	void OnSettingChange(HWND__ *,__int64);
};

class CDesktopWallpaper
{
	bool _EnsureModifiedState();
	bool _EnsureSlideshow();
	long _CommitModifiedState();
	long _DelayUpdate();
	long _EstimateSlideshowPersistCount();
	long _ReadHeader(IStream *);
	long _ReadImages(IStream *,bool);
	long _ReadMonitors(IStream *,bool);
	long _ReadOptions(IStream *,bool);
	long _ReadSlideshow(IStream *,bool);
	long _SetBackgroundColor(unsigned long);
	long _SetPosition(DESKTOP_WALLPAPER_POSITION);
	long _SetSlideshow(CFileSource *);
	long _SetSlideshowOptions(DESKTOP_SLIDESHOW_OPTIONS,unsigned int);
	long _SetWallpaper(unsigned short const *,unsigned short const *);
	long _SetWallpaperFromModifiedState();
	long _UpdateImageHistory(unsigned short const *);
	long _WriteHeader(IStream *);
	long _WriteImages(IStream *);
	long _WriteMonitors(IStream *);
	long _WriteOptions(IStream *);
	long _WriteSlideshow(IStream *);
	static long _Read(IStream *,tagRECT *);
	static long s_ReadShellItemArrayFromStream(IStream *,IShellItemArray * *);
	static void s_RegistryChangeCallback_Wallpaper(void *);
	void _FullyInitializeSlideshow();
	void _UpdateScreenWithAnimation(bool);
public:
	CDesktopWallpaper();
	__int64 HandlePowerBroadcastMessage(unsigned __int64,__int64);
	__int64 HandleSlideshowMessage(unsigned int,unsigned __int64,__int64);
	long RevokeClassObject();
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual long AdvanceSlideshow(unsigned short const *,DESKTOP_SLIDESHOW_DIRECTION);
	virtual long ComputeImageColorizationColor(unsigned long *);
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long Enable(int);
	virtual long Flush();
	virtual long GetBackgroundColor(unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetMonitorDevicePathAt(unsigned int,unsigned short * *);
	virtual long GetMonitorDevicePathCount(unsigned int *);
	virtual long GetMonitorNumber(unsigned short const *,unsigned int *);
	virtual long GetMonitorRECT(unsigned short const *,tagRECT *);
	virtual long GetPosition(DESKTOP_WALLPAPER_POSITION *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetSlideshow(IShellItemArray * *);
	virtual long GetSlideshowOptions(DESKTOP_SLIDESHOW_OPTIONS *,unsigned int *);
	virtual long GetStatus(DESKTOP_SLIDESHOW_STATE *);
	virtual long GetWallpaper(unsigned short const *,unsigned short * *);
	virtual long IsDirty();
	virtual long Load(IStream *);
	virtual long LockServer(int);
	virtual long PaintWallpaperBitmapFromShellTask();
	virtual long PaintWallpaperThumbnail(__int64,int,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IStream *,int);
	virtual long SetBackgroundColor(unsigned long);
	virtual long SetPosition(DESKTOP_WALLPAPER_POSITION);
	virtual long SetSlideshow(IShellItemArray *);
	virtual long SetSlideshowOptions(DESKTOP_SLIDESHOW_OPTIONS,unsigned int);
	virtual long SetWallpaper(unsigned short const *,unsigned short const *);
	virtual long SetWallpaperNoGP(unsigned short const *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void Destroy();
	void Initialize();
};

class CDesktopWatermark
{
	static bool s_IsCanPaintDesktopSet();
	static bool s_IsCleanBoot();
	static bool s_IsDrawProductNameAlwaysSet();
	static bool s_IsRetailReady();
	static bool s_IsTSExcludeDesktopVersionSet();
	static bool s_IsTestSigningEnabled();
	static bool s_IsTimeBasedLicenseOn();
	static bool s_fBuildStringRequired;
	static long s_GetLicensePolicyValueDWORD(unsigned long *,unsigned short const *);
	static void s_DesktopBuildPaint(HDC__ *,tagRECT const *,HFONT__ *);
	static void s_GetEvaluationString(unsigned short *,unsigned int);
	static void s_GetProductBuildString(unsigned short *,unsigned int);
	static void s_GetSafeModeString(unsigned short *,unsigned int);
public:
	static bool s_WantWatermark();
	static void s_PaintWatermark(HDC__ *,tagRECT const *,HFONT__ *);
};

class CDetailCategorizer
{
	long _AddCategoryForValue(unsigned short const *,unsigned short const *,tagPROPVARIANT const &,unsigned long *);
	long _GetCategoryName(unsigned long,unsigned short * *);
	long _UpdateCategoryForValue(ICategoryDescription *,tagPROPVARIANT const &,ICategoryDescription * *);
protected:
	long _AddCategory(unsigned short const *,tagPROPVARIANT const &,unsigned long *);
	virtual int OnCompareCategory(unsigned long,unsigned long);
	virtual long OnGetCategoryDescription(unsigned long,ICategoryDescription * *);
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
	virtual ~CDetailCategorizer();
public:
	CDetailCategorizer(_GUID const &,_tagpropertykey const &);
	long Initialize();
};

class CDetailsContainer
{
	long _SaveToStream();
	void _SaveSQMInfoPaneStateChanging(CDetailsContainer::PANE_TRACKING_STATE,CDetailsContainer::PANE_TRACKING_STATE);
	void _SetVisibility(int);
	void _Update();
	void _UpdatePaneTrackingStateFromVisibleSettings();
public:
	CDetailsContainer();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnEvent(DirectUI::Event *);
	virtual void SetVisibilitySetting(int *);
	virtual ~CDetailsContainer();
};

struct CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition
{
	static long IsOSVolumeProvisioned(bool *);
	virtual long Evaluate(INamedPropertyStore *,int *);
};

struct CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition
{
	virtual long Evaluate(INamedPropertyStore *,int *);
};

class CDeviceEventHandler
{
	static CCoSimpleArray<DISPLAY_OBJECT_CONTAINER_DATA,4294967294,CSimpleArrayStandardCompareHelper<DISPLAY_OBJECT_CONTAINER_DATA> > s_saDOCD;
	static CCritSecDelayInitBase s_csAutoplayPrompt;
	static CDPANewMem<CDeviceEventInfo> s_dpaDeviceInterfaceEvents;
	static int s_DeviceAlreadyHandledByDXP(_GUID const &,unsigned short const *);
	static long s_AddInterfaceToDXPHandledList(_GUID const &,unsigned short const *);
	static long s_ConditionallyLaunchDXP(_GUID const &,unsigned short const *,int,int *,int *,unsigned short * *);
	static long s_HandlePossibleDXPDeviceInterfaceRemoval(unsigned short const *);
	static unsigned long s_ProcessDeviceEvents(void *);
	static unsigned long s_dwThreadIDQueueOwner;
public:
	static long s_LaunchDXP(_GUID const &,unsigned short const *,unsigned short const *,int,int *);
	virtual long HandleEvent(unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long HandleEventWithContent(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,IDataObject *);
	virtual long Initialize(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetContainerID(_GUID const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDeviceEventInfo
{
protected:
	long Init(_GUID const &,unsigned short const *,int,unsigned short const *,unsigned short const *);
public:
	static long CreateInstance(_GUID const &,unsigned short const *,int,unsigned short const *,unsigned short const *,CDeviceEventInfo * *);
	virtual ~CDeviceEventInfo();
};

struct CDirectoryAssocList
{
	CDirectoryAssocList(unsigned short const *,bool);
	virtual long CreateAssoc(unsigned int,_GUID const &,void * *);
	virtual long GetStorageProviderData(STORAGE_PROVIDER_DATA *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetStorageProviderData(STORAGE_PROVIDER_DATA *);
	virtual unsigned int const * GetAssocTable(unsigned long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDiscImageMountVerb
{
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long Execute();
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDiscretionaryShareHelper
{
	bool _HasSharedItemsInPublishedItem(IPublishedItemDescription *);
	bool _HasSharedItemsInPublishedMessage(IUsersFilesDescription *);
	long _EnsureInitialized();
public:
	bool HasSharedItemsForCurrentUser(IUnknown *);
};

class CDiscretionaryShareUser
{
protected:
	virtual long _GetXPMap(XMLPROP_ITEM const * *);
public:
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDispatchNotification<<lambda_123c6e1712e64f6386bb9327112e5f60> >
{
	virtual void Dispatch();
};

struct CDispatchNotification<<lambda_26d12d7c24b193715e7aced9afbeda64> >
{
	CDispatchNotification<<lambda_26d12d7c24b193715e7aced9afbeda64> >(<lambda_26d12d7c24b193715e7aced9afbeda64> const &);
	virtual void Dispatch();
};

struct CDispatchNotification<<lambda_6d63b24307e8dbf56959c6fde0623a82> >
{
	virtual void Dispatch();
};

struct CDispatchNotification<<lambda_7ef650f26fe411c1dbd48024cadbb3db> >
{
	CDispatchNotification<<lambda_7ef650f26fe411c1dbd48024cadbb3db> >(<lambda_7ef650f26fe411c1dbd48024cadbb3db> const &);
	virtual void Dispatch();
};

struct CDispatchNotification<<lambda_b62b57cb627ecc77a35b5e251ce4857a> >
{
	CDispatchNotification<<lambda_b62b57cb627ecc77a35b5e251ce4857a> >(<lambda_b62b57cb627ecc77a35b5e251ce4857a> const &);
	virtual void Dispatch();
};

struct CDispatchNotification<<lambda_e06a986b332aaefa0e130a3c94120dd0> >
{
	virtual void Dispatch();
};

struct CDispatchNotification<<lambda_fbc298754eb7256a143bd2fe6002cc58> >
{
	virtual void Dispatch();
};

class CDisplayElement
{
protected:
	long _AddDisplayText(IPropertyDescription *);
	long _AddDrawControl(IPropertyDescription *,_GUID const &);
	void _InitFont(HDC__ *,HFONT__ * *,DirectUI::FontCache * *);
	void _SetThemeOnControl(DirectUI::Value *);
	void _UninitFont(HDC__ *,HFONT__ *,DirectUI::FontCache *);
public:
	long InitializeTargetInfo(IUnknown *,IPropertyDescription *,IPropertyDescriptionPriv *,TARGETINFO_DRAWING_OPTIONS_FLAGS);
	long SetCurrentValue(IUnknown *);
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual tagSIZE GetContentSize(int,int,DirectUI::Surface *);
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void Paint(HDC__ *,tagRECT const *,tagRECT const *,tagRECT *,tagRECT *);
	void GetHotZone(int,tagRECT *);
};

struct CDisplayInfo
{
	virtual long PopulateLogoProperties(IPropertyStore *);
	virtual unsigned int GetBackgroundColor();
	virtual unsigned int GetForegroundColor();
	virtual unsigned int GetTileFlags();
	virtual unsigned short const * GetLogoPath();
	virtual unsigned short const * GetPackageInstallPath();
	virtual unsigned short const * GetTinyLogoPath();
};

struct CDisplayNameRemapTransferSource
{
	virtual long Advise(ITransferAdviseSink *,unsigned long *);
	virtual long ApplyPropertiesToItem(IShellItem *,IShellItem * *);
	virtual long EnterFolder(IShellItem *);
	virtual long GetDefaultDestinationName(IShellItem *,IShellItem *,unsigned short * *);
	virtual long LeaveFolder(IShellItem *);
	virtual long LinkItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long MoveItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long OpenItem(IShellItem *,unsigned long,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RecycleItem(IShellItem *,IShellItem *,unsigned long,IShellItem * *);
	virtual long RemoveItem(IShellItem *,unsigned long);
	virtual long RenameItem(IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long SetProperties(IPropertyChangeArray *);
	virtual long Unadvise(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDragDropHelper
{
	__int64 _DragWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _AddTimeSample(tagPOINT const *,unsigned long);
	int _ApplyAlphaToDragBitmap(int,void * *);
	int _AutoScroll(HWND__ *,tagPOINT const *);
	int _CreateDragWindow();
	int _CurrentVelocity();
	int _IsDescriptionAllowed();
	int _MapDropImageTypeToThemePart(DROPIMAGETYPE);
	long _AddInfoToWindow();
	long _CreateDefaultDragImage(IDataObject *,SHDRAGIMAGE *);
	long _GetEffectImageRect(tagRECT *);
	long _GetImageBackgroundRect(tagRECT *);
	long _GetTextRect(tagRECT *);
	long _LoadFromDataObject(IDataObject *);
	long _LoadLayeredBitmapBits(void *,int);
	long _SaveLayeredBitmapBits(void * *,int);
	long _SaveToDataObject(IDataObject *);
	long _SetLayeredDragging(SHDRAGIMAGE *);
	long _SizeDescriptionLine(int,unsigned short const *,unsigned short const *,unsigned short const *,tagRECT *,tagRECT *,tagRECT *,tagRECT *);
	static __int64 s_DragWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned long s_ExtractThumbnailThreadProc(void *);
	static void s_DetermineThumbnailFlags(IShellItemArray *,ITSIF *);
	void MakeRectOpaqueOnBitmap(tagRECT const &);
	void _ComputeFinalSize();
	void _DrawCustomImageAndDescription();
	void _DrawDefaultImageAndDescription();
	void _DrawDescriptionLine(int,int,unsigned short const *,tagRECT const *);
	void _DrawDescriptionLineComp(int,unsigned short const *,unsigned short const *,unsigned short const *,tagRECT *,tagRECT *,tagRECT *);
	void _DrawTooltipBg(tagRECT *,tagRECT *,long);
	void _EnsureDescriptionOnScreen(tagRECT *,tagRECT *);
	void _ExtractContinualData();
	void _ExtractOneTimeData();
	void _FreeDragData();
	void _FreeSourceDragImage();
	void _GetTTipRect(tagRECT *,tagRECT *,tagRECT *);
	void _MapCoordsWindowToScreen(HWND__ *,tagPOINT *);
	void _RepositionRectIfRTL(tagRECT *,tagRECT *);
	void _RepositionRectIfRTL(tagRECT *,tagRECT *,bool,tagRECT *,tagRECT *,tagRECT *);
	void _StartExtractionThread();
public:
	int DragEnterWindowCoords(HWND__ *,tagPOINT,IDataObject *);
	virtual long DragEnter(HWND__ *,IDataObject *,tagPOINT *,unsigned long);
	virtual long DragEnterWithScroll(HWND__ *,IScrollingWindow *,IDataObject *,tagPOINT *,unsigned long);
	virtual long DragLeave();
	virtual long DragOver(tagPOINT *,unsigned long);
	virtual long Drop(IDataObject *,tagPOINT *,unsigned long);
	virtual long Initialize(HWND__ *);
	virtual long InitializeFromBitmap(SHDRAGIMAGE *,IDataObject *);
	virtual long InitializeFromWindow(HWND__ *,tagPOINT *,IDataObject *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFlags(unsigned long);
	virtual long Show(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDrawPercentFull
{
protected:
	virtual void v_MakeColor(unsigned long *,FILLSTATES *,unsigned long,int);
public:
	virtual long GetDisplayText(unsigned short * *);
	virtual long GetSize(PROPCTL_RECT_TYPE,HDC__ *,tagSIZE const *,tagSIZE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(IUnknown *);
	virtual long WindowlessDraw(HDC__ *,tagRECT const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDrawProgressBar
{
	virtual long GetDisplayText(unsigned short * *);
	virtual long GetSize(PROPCTL_RECT_TYPE,HDC__ *,tagSIZE const *,tagSIZE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(IUnknown *);
	virtual long WindowlessDraw(HDC__ *,tagRECT const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDrawProgressBase
{
protected:
	long _DrawBorder(HDC__ *,tagRECT const *,unsigned long,TRANSPARENTBARSTATES);
	long _DrawMarquee(HDC__ *,tagRECT const *,unsigned long,FILLSTATES,unsigned int,int);
	long _DrawNormal(HDC__ *,tagRECT const *,unsigned long,TRANSPARENTBARSTATES,FILLSTATES,unsigned int,unsigned int);
	long _FillRectColor(HDC__ *,tagRECT const *,tagRECT const *,unsigned long,FILLSTATES);
	virtual void v_MakeColor(unsigned long *,FILLSTATES *,unsigned long,int);
	virtual ~CDrawProgressBase();
public:
	virtual long AdjustWindowRectPCB(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long Destroy();
	virtual long GetDrawFlags(int *);
	virtual long GetFlags(int *);
	virtual long GetFormatFlags(PROPDESC_FORMAT_FLAGS *);
	virtual long GetTooltipInfo(HDC__ *,tagSIZE const *,int *);
	virtual long HasVisibleContent();
	virtual long Initialize(IUnknown *,tagPROPDESC_CONTROL_TYPE);
	virtual long InvokeDefaultAction();
	virtual long OnDPIChanged();
	virtual long SetFlags(int,int);
	virtual long SetFont(HFONT__ *);
	virtual long SetFormatFlags(PROPDESC_FORMAT_FLAGS);
	virtual long SetTextColor(unsigned long);
	virtual long SetWindowTheme(unsigned short const *,unsigned short const *);
	virtual long SetWindowlessParentWindow(HWND__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDriveLetterCache
{
	CDriveLetterData * GetDriveLetterData(int);
	CMtPtLocal * GetLocal(int);
	CMtPtRemote * GetRemote(int);
	long AddPathLookupEntry(unsigned short const *,unsigned short const *,CMountPoint *);
	long GetVolumePathNameAndCachedMountPoint(unsigned short const *,AddToDriveLetterCache,unsigned short *,unsigned __int64,CMountPoint * *);
	void RemovePathLookupEntry(CMountPoint *);
	void SetLocal(int,CMtPtLocal *);
	void SetRemote(int,CMtPtRemote *);
};

struct CDriveProps
{
	unsigned long Release();
};

struct CDrivesBackgroundMenuCB
{
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDrivesCleanUpCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

class CDrivesDefragmentCommand
{
	long _CheckAndGetDefragmentPath();
public:
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CDrivesDropTarget
{
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
};

class CDrivesViewCallback
{
	static long _CheckBurnTasks(IShellItemArray *,CDrivesViewCallback::TASKCHECKENUM,int *);
	static long _CheckMountPointTasks(IShellItemArray *,CDrivesViewCallback::TASKCHECKENUM,int *);
	static long _GetDriveNumber(IShellItemArray *,int *);
	virtual ~CDrivesViewCallback();
public:
	CDrivesViewCallback(IDriveFolderViewCallbackProvider *);
	static long _CanAddRemovePrograms(IUnknown *,IShellItemArray *,int,int *);
	static long _CanAutoplay(IUnknown *,IShellItemArray *,int,int *);
	static long _CanBurnDisc(IUnknown *,IShellItemArray *,int,int *);
	static long _CanClearStagingArea(IUnknown *,IShellItemArray *,int,int *);
	static long _CanCloseUDFSession(IUnknown *,IShellItemArray *,int,int *);
	static long _CanDriveProperties(IUnknown *,IShellItemArray *,int,int *);
	static long _CanEject(IUnknown *,IShellItemArray *,int,int *);
	static long _CanEraseDisc(IUnknown *,IShellItemArray *,int,int *);
	static long _CanMapDrive(IUnknown *,IShellItemArray *,int,int *);
	static long _CanOpenSystemSettings(IUnknown *,IShellItemArray *,int,int *);
	static long _CanSysProperties(IUnknown *,IShellItemArray *,int,int *);
	static long _OnAddRemovePrograms(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnAddRemoveProgramsPunkSite(IUnknown *,IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnAutoplay(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnBurnDisc(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnClearStagingArea(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnCloseUDFSession(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnDriveProperties(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnEject(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnEraseDisc(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnMapDrive(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnMapDrivePunkSite(IUnknown *,IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnOpenSystemSettings(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnOpenSystemSettingsPunkSite(IUnknown *,IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnSystemProperties(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnSystemPropertiesPunkSite(IUnknown *,IUnknown *,IShellItemArray *,IBindCtx *);
	virtual long GetEnumFlags(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,HWND__ * *,unsigned long *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
	virtual long ShouldShow(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDropListControlBase
{
	__int64 _SubclassBaseWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _SubclassWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	long _PopulateComboBox();
	long _UpdateSelection();
	static __int64 s_subclassBaseProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_subclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
protected:
	long _SetIndex(int,unsigned int);
	static long _GetCompositeMismatch(unsigned short * *);
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual int v_OnBaseSetCursor();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_DrawContent(HDC__ *,tagRECT *,int,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
	virtual ~CDropListControlBase();
public:
	CDropListControlBase();
	virtual long GetDisplayText(unsigned short * *);
	virtual long GetSize(PROPCTL_RECT_TYPE,HDC__ *,tagSIZE const *,tagSIZE *);
};

class CDropShadowAdorner
{
protected:
	long _SelectShadowTemplate(int);
	virtual HBITMAP__ * _GetAdornmentBitmap(unsigned long);
	virtual ~CDropShadowAdorner();
public:
	static long CreateInstance(_GUID const &,void * *);
	virtual long ComputeBounds(tagRECT *,tagRECT *);
	virtual long Draw(HDC__ *);
};

struct CDropSource
{
	CDropSource(IDataObject *);
	virtual long GiveFeedback(unsigned long);
	virtual long QueryContinueDrag(int,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDrvExtIconBase
{
	long _GetPlainIconLocation(unsigned short *,unsigned int,int *,unsigned int *);
public:
	virtual long _ExtractW(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long _GetIconLocationW(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
};

struct CDrvSizeThreadData
{
	long Release();
};

struct CDummyRowsetListener
{
	virtual long OnChangedItem(tagPROPVARIANT const &,__MIDL___MIDL_itf_searchapi_0000_0023_0001,__MIDL___MIDL_itf_searchapi_0000_0023_0001);
	virtual long OnDeletedItem(tagPROPVARIANT const &,__MIDL___MIDL_itf_searchapi_0000_0023_0001);
	virtual long OnNewItem(tagPROPVARIANT const &,__MIDL___MIDL_itf_searchapi_0000_0023_0001);
	virtual long OnRowsetEvent(__MIDL___MIDL_itf_searchapi_0000_0023_0002,tagPROPVARIANT const &);
};

struct CDummyUnknown
{
	virtual long ContextSensitiveHelp(int);
	virtual long GetClassID(_GUID *);
	virtual long GetMode(FOLDER_ENUM_MODE *);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetMode(FOLDER_ENUM_MODE);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDumpObject
{
	void Init(IDebugOutput *,unsigned short const *,int);
	~CDumpObject();
};

class CDynamicStorage
{
	long _EnsureDirectory();
	long _GetStreamOrStorage(int,unsigned long,_GUID const &,void * *);
	long _InsertItem(unsigned short const *,IShellItem *,tagDSTGF);
	static int s_DataCompare(DYNASTGDATA const *,DYNASTGDATA const *,__int64);
	static int s_DataDestroy(DYNASTGDATA *,void *);
public:
	virtual long AddIDList(unsigned long,_ITEMIDLIST_ABSOLUTE const * *,tagDSTGF);
	virtual long BindToItem(unsigned short const *,_GUID const &,void * *);
	virtual long Commit(unsigned long);
	virtual long CopyTo(unsigned long,_GUID const *,unsigned short * *,IStorage *);
	virtual long CreateStorage(unsigned short const *,unsigned long,unsigned long,unsigned long,IStorage * *);
	virtual long CreateStream(unsigned short const *,unsigned long,unsigned long,unsigned long,IStream * *);
	virtual long DestroyElement(unsigned short const *);
	virtual long EnumElements(unsigned long,void *,unsigned long,IEnumSTATSTG * *);
	virtual long EnumItems(IEnumShellItems * *);
	virtual long GetClassID(_GUID *);
	virtual long HandsOffStorage();
	virtual long InitNew(IStorage *);
	virtual long IsDirty();
	virtual long Load(IStorage *);
	virtual long MoveElementTo(unsigned short const *,IStorage *,unsigned short const *,unsigned long);
	virtual long OpenStorage(unsigned short const *,IStorage *,unsigned long,unsigned short * *,unsigned long,IStorage * *);
	virtual long OpenStream(unsigned short const *,void *,unsigned long,unsigned long,IStream * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RenameElement(unsigned short const *,unsigned short const *);
	virtual long Revert();
	virtual long Save(IStorage *,int);
	virtual long SaveCompleted(IStorage *);
	virtual long SetClass(_GUID const &);
	virtual long SetElementTimes(unsigned short const *,_FILETIME const *,_FILETIME const *,_FILETIME const *);
	virtual long SetStateBits(unsigned long,unsigned long);
	virtual long Stat(tagSTATSTG *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDynamicStorageEnum
{
	virtual long Clone(IEnumSTATSTG * *);
	virtual long Clone(IEnumShellItems * *);
	virtual long Next(unsigned long,IShellItem * *,unsigned long *);
	virtual long Next(unsigned long,tagSTATSTG *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEditElement
{
	static UID TriggerEditState;
	void _PostTriggerEditEvent(EditStateEvent::STATEEVENT_REASON,unsigned short const *);
	void _SetThemeOnControl(DirectUI::Value *);
protected:
	virtual HWND__ * CreateHWND(HWND__ *);
public:
	CEditElement();
	int IsModified();
	long InitializeEditInfo(IPropertyDescription *,IPropertyDescriptionPriv *,tagPROPDESC_CONTROL_TYPE,_GUID,int,HWND__ *);
	long SetCurrentValue(IUnknown *);
	static DirectUI::IClassInfo * Class;
	static UID EditState;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long Cancel();
	virtual long Commit(int);
	virtual long NextControl(int);
	virtual long OnChanging(int);
	virtual long OnFocusChangeIS(IUnknown *,int);
	virtual long OnInvokeVerb(unsigned short const *);
	virtual long OnStateChange(int,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RequestResize();
	virtual long Validate(unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void AdjustWindowRectHF(tagRECT *);
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class CEfsUtil
{
	long FailIfOtherPromptsActive(void *);
	static CCritSecDelayInitBase _csPromptUI;
	static void * _hUIEvent;
public:
	bool IsDpapiNgProtectedFile();
	long CanEncrypt(unsigned long *,int *);
	long EnsureEncryptFileWillSucceed(HWND__ *);
	long IsPinRequired(int *);
	long IsPinRequired(int *,unsigned long);
	long SetPinOnFile(HWND__ *);
	static int SmartcardCredsNeededError(unsigned long);
};

struct CElementWithIUnknown
{
	static DirectUI::IClassInfo * Class;
	static IUnknown * GetUnknownFromElement(DirectUI::Element *);
};

struct CElementWithProxy<DirectUI::HWNDElement>
{
	virtual ~CElementWithProxy<DirectUI::HWNDElement>();
};

class CElementWithSite
{
protected:
	virtual ~CElementWithSite();
public:
	CElementWithSite();
	long GetPersistStream(int,unsigned long,IStream * *);
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long GetSite(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CElevatableDiscImageMount
{
	virtual long Eject(IShellItem *,unsigned long);
	virtual long EjectByPath(unsigned short const *);
	virtual long Mount(IShellItemArray *,int,unsigned long *,HWND__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CElsServiceInstance
{
protected:
	long Initialize(_GUID);
};

class CEmptyLibraryPage
{
	void _AddLocation();
protected:
	virtual int _GetInstructionResourceId();
public:
	CEmptyLibraryPage();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual void OnEvent(DirectUI::Event *);
};

struct CEmptyRecycleBinExecute
{
	virtual long Execute();
	virtual long QueryInterface(_GUID const &,void * *);
};

struct CEmptyRecycleBinState
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEncoderInfo
{
protected:
	long _GetDataFormatFromPath(unsigned short const *,_GUID *);
	long _GetEncoderFromFormat(_GUID const &,_GUID *);
	long _GetEncoderList();
};

struct CEncryptFilePropSheetPage
{
	int ApplySingleFileAttributesNoDlg(HWND__ *);
	int InitMultiplePrshtNoDlg();
	int InitSinglePrshtNoDlg();
};

class CEncryptionContextMenu
{
	bool _IsFirstFileOnEncryptableVolume(Microsoft::WRL::ComPtr<IShellItemArray> const &);
	long _StoreItemPath(Microsoft::WRL::ComPtr<IShellItem>);
	static unsigned long EncryptThreadProc(void *);
	unsigned long _Encrypt();
protected:
	virtual ICIVERBTOIDMAP const * get_MappingArray();
	virtual long _OnInvokeCommand(unsigned int,_CMINVOKECOMMANDINFO *);
	virtual unsigned int get_MenuID();
	virtual ~CEncryptionContextMenu();
public:
	long Init_FolderContentsInfo();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
};

struct CEnlightenmentPromptHelpers
{
	CEnlightenmentPromptHelpers();
	static TrustLevel InternalGetTrustLevelStatic();
	static unsigned short const * InternalGetRuntimeClassNameStatic();
	virtual long ActivateInstance(IInspectable * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HasEnlightenedUserAboutApp(HSTRING__ *,unsigned char *);
	virtual long IsUserInSampleGroup(unsigned char *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetEnlightenedUserAboutApp(HSTRING__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumAny<IEnumAssocHandlers,IAssocHandler *>
{
	virtual long Next(unsigned long,IAssocHandler * *,unsigned long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumAny<IEnumExplorerCommand,IExplorerCommand *>
{
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumAny<IEnumIDList,_ITEMID_CHILD *>
{
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumAny<IEnumMCString,tagMCSTRING>
{
	virtual long Clone(IEnumMCString * *);
	virtual long Next(unsigned long,tagMCSTRING *,unsigned long *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumAny<IEnumUICommand,IUICommand *>
{
	virtual long Clone(IEnumUICommand * *);
	virtual long Next(unsigned long,IUICommand * *,unsigned long *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumCategoryGUID
{
	virtual long Clone(IEnumGUID * *);
	virtual long Next(unsigned long,_GUID *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumChildIDListArray
{
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long Reset();
	virtual long Skip(unsigned long);
};

class CEnumChildIDListOverItemCollection
{
	virtual int _Next(_ITEMID_CHILD * *);
public:
	virtual long Clone(IEnumIDList * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
};

struct CEnumEntry
{
	virtual long Clone(IEnumTravelLogEntry * *);
	virtual long Next(unsigned long,ITravelLogEntry * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void Init(CTravelLog *,IUnknown *,unsigned long,unsigned long);
	void SetBase();
};

class CEnumExplorerCommandOnEnumUICommand
{
protected:
	virtual int _Next(IExplorerCommand * *);
public:
	static long CreateInstance(IEnumUICommand *,IEnumExplorerCommand * *);
	virtual long QueryInterface(_GUID const &,void * *);
};

class CEnumExplorerCommandOverDPA
{
protected:
	virtual ~CEnumExplorerCommandOverDPA();
public:
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEnumExplorerCommandOverIContextMenu
{
	long _CreateSubCommands(IObjectCollection *);
	long _CreateSubCommandsFromHMENU(IObjectCollection *,IContextMenu3 *,HMENU__ *);
	long _EnsureSubCommandCollection();
public:
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumFolderItemVerbs
{
	virtual long Clone(IEnumVARIANT * *);
	virtual long Next(unsigned long,tagVARIANT *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumFolderItems
{
	virtual long Clone(IEnumVARIANT * *);
	virtual long Next(unsigned long,tagVARIANT *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumFolderItemsMultiLevel
{
	virtual long Clone(IEnumVARIANT * *);
	virtual long Next(unsigned long,tagVARIANT *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumFolderTypeCommand
{
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
};

class CEnumHandlers
{
	int _NextDefault(CAssocHandler * *);
	int _NextOpenWithList(OWL *,CAssocHandler * *);
	void _HandleNewAssoc(CAssocHandler * *,IAssocHandler * *,unsigned int *);
	~CEnumHandlers();
public:
	CEnumHandlers(ASSOC_FILTER);
	int Init(unsigned short const *);
	virtual long Next(unsigned long,IAssocHandler * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEnumIDListArrayBase
{
protected:
	virtual ~CEnumIDListArrayBase();
};

class CEnumIDListBase
{
protected:
	virtual ~CEnumIDListBase();
public:
	virtual long Clone(IEnumIDList * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumJobInfo
{
	long CreateJob(IClassFactory *,CMCJob * *);
};

class CEnumLibrariesCommand
{
	long _EnsureCommandDPA();
public:
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
};

class CEnumLibraryLocationsCommand
{
	long _EnsureLocations();
public:
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
};

struct CEnumLock
{
	int IsCanceled();
	long AddItem(_ITEMID_CHILD *);
	long Init(CEventResult * *);
	long NextItemBatch(CDPA<_ITEMID_CHILD,CTContainer_PolicyUnOwned<_ITEMID_CHILD> > *,int *);
	long Release();
	void SetState(ENUM_STATE);
};

class CEnumNewItemSubCommands
{
	long _CreateAndInitializeNewMenu(_GUID const &,void * *);
	long _CreateSubCommands(IObjectCollection *);
	long _CreateSubCommandsFromHMENU(IObjectCollection *,IContextMenu3 *,HMENU__ *);
	long _EnsureSubCommandCollection();
public:
	static long s_CreateInstance(_ITEMIDLIST_ABSOLUTE const *,_GUID const &,void * *);
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumOleUndoUnit
{
	CEnumOleUndoUnit(IUnknown *,CDPA<IOleUndoUnit,CTContainer_PolicyUnOwned<IOleUndoUnit> > *);
	virtual long Clone(IEnumOleUndoUnits * *);
	virtual long Next(unsigned long,IOleUndoUnit * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumPropStg
{
	CEnumPropStg(CEnumPropStg const *);
	long Initialize(_GUID const &,_tagpropertykey const * const * const,unsigned int);
	virtual long Clone(IEnumSTATPROPSTG * *);
	virtual long Next(unsigned long,tagSTATPROPSTG *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEnumProtocolHandlers
{
	virtual int _Next(IAssocHandler * *);
public:
	long AppendHandler(IAssocHandler *);
	virtual long QueryInterface(_GUID const &,void * *);
};

struct CEnumSetStg
{
	CEnumSetStg(CEnumSetStg const *);
	long Initialize(_tagpropertykey const * const * const,unsigned int,unsigned long);
	virtual long Clone(IEnumSTATPROPSETSTG * *);
	virtual long Next(unsigned long,tagSTATPROPSETSTG *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumShellItemsFromHDROP
{
	long Initialize(HDROP__ *);
	virtual long Clone(IEnumShellItems * *);
	virtual long Next(unsigned long,IShellItem * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEnumTask
{
	int _FilterItem(IItemStoreOwner *,tagITEMKEY const *,IShellFolder2 *);
	int _ShouldPostBatch(unsigned long,unsigned int);
	int _ShouldStack();
	long _AddItemChangeRecord(tagITEM_CHANGE_RECORD *);
	long _AddObject(int,IItemStore *,tagITEMKEY const *,IShellFolder2 *,int);
	long _CalculateFolderType(IItemStore *,CDSA<tagITEMKEY> const *,IShellFolder2 *);
	long _CreateStackItems(IItemStore *,IEnumIDList * *);
	long _EnumItemsFromFolder(IShellFolder2 *,IItemStoreOwner *,CDSA<tagITEMKEY> *);
	long _EnumItemsToDPA(IEnumIDList *,IItemStoreOwner *,IShellFolder2 *,int,CDSA<tagITEMKEY> *);
	long _FilterFlatItemStore(IShellFolder2 *);
	long _IncrEnumFolder(IShellFolder2 *,int);
	long _MergeEnum(int,IShellFolder2 *,IItemStoreOwner *,CDSA<tagITEMKEY> *,IItemStore *);
	long _MergeEnumToView(int,IShellFolder2 *,IItemStore *,CDSA<tagITEMKEY> *,IItemStore *,CDSA<tagITEMKEY> *);
	long _RemoveObject(int,tagITEMKEY const *);
	long _ShouldQuit();
	long _StartEnumThread(CEventResult * *,CEnumLock * *);
	long _UpdateObject(int,IItemStore *,tagITEMKEY const *,tagITEMKEY const *);
	virtual ~CEnumTask();
	void _EmptyViewForIncrEnum();
	void _IncrFillEnumToView(IShellFolder2 *,CDSA<tagITEMKEY> *,CDSA<tagITEMKEY> *,int);
	void _PushBatchToView(IShellFolder2 *,CDSA<tagITEMKEY> *,CDSA<tagITEMKEY> *,IItemStore *);
	void _SortByCustomOrder();
	void _SortItems(CDSA<tagITEMKEY> *,IShellFolder2 *,IItemStore *);
public:
	CEnumTask();
	long Initialize(ENUM_TASK_INIT_DATA const *);
	virtual long InternalResumeRT();
};

class CEnumThread
{
	long _EnumFolder(IEnumIDList *,unsigned int *);
	static unsigned long s_EnumThreadProc(void *);
	virtual ~CEnumThread();
public:
	CEnumThread(unsigned long);
	long Run(CEnumLock *,_ITEMIDLIST_ABSOLUTE const *,unsigned long,HWND__ *,IShellView *,unsigned int,IViewStateInfo *,IItemFilter *,IItemSetOperationCallback *);
	virtual long GetCookie(_GUID const &,unsigned long *);
	virtual long InternalResumeRT();
	virtual long QueryContinue();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEnumUICommand
{
	long _Initialize(IUnknown *,tagWVTASKITEM const *,unsigned long,IUnknown * *,unsigned int);
	long _Next(unsigned long,_GUID const &,void * *,unsigned long *);
	~CEnumUICommand();
public:
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long Clone(IEnumUICommand * *);
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
	virtual long Next(unsigned long,IUICommand * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEnumUITasks
{
protected:
	virtual int _Next(IUICommand * *);
public:
	long InitTasks(_GUID const * const * const,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
};

class CEnumerableObjectCollection
{
protected:
	long Clone(_GUID const &,void * *);
	long InitializeClone(CEnumerableObjectCollection *);
	virtual ~CEnumerableObjectCollection();
public:
	static long CreateInstance(int,_GUID const &,void * *);
	virtual long AddFromArray(IObjectArray *);
	virtual long AddObject(IUnknown *);
	virtual long Clear();
	virtual long Clone(IEnumObjects * *);
	virtual long Clone(IEnumUnknown * *);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long Next(unsigned long,IUnknown * *,unsigned long *);
	virtual long Next(unsigned long,_GUID const &,void * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveObjectAt(unsigned int);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEnumeratedDropListControl
{
	long _EnsurePropEnumTypeList();
	long _GetFilterCondPropVars(IFilterCondition *,tagPROPVARIANT *,tagPROPVARIANT *);
	long _GetFilterCondition(IFilterCondition * *);
	long _SetFilterCondition(IFilterCondition *);
protected:
	virtual long v_GetIndexFromValue(tagPROPVARIANT const &,unsigned int *);
	virtual long v_GetTextFromIndex(unsigned int,unsigned short * *);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_GetValueCount(unsigned int *);
	virtual long v_GetValueFromIndex(unsigned int,tagPROPVARIANT *);
	virtual long v_GetValueType(unsigned int,PROPENUMTYPE *);
	virtual long v_SetValue(IUnknown *);
	virtual ~CEnumeratedDropListControl();
public:
	CEnumeratedDropListControl();
};

struct CEraseEventHandler
{
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Update(IDispatch *,long,long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CErrorOverlayHandler
{
	CErrorOverlayHandler();
};

class CErrorResolutionVerb
{
	long _ExecuteConflictResolutionHandler(IShellItem *);
protected:
	virtual bool v_EnableCommand(IShellItemArray *,bool);
public:
	virtual long Execute();
};

class CEtwProviderT<void>
{
	class CETWApiSet
	{
		void Init();
	};

protected:
	static CEtwProviderT<void>::CETWApiSet g_etwApi;
public:
	void Unregister();
};

struct CEventResult
{
	long Wait(int,unsigned long,int *);
	static long CreateInstance(int,CEventResult * *);
	unsigned long Release();
	void SignalDone(long);
};

struct CEventSinkContainer
{
	struct EVENT_SINK_ENTRY
	{
		EVENT_SINK_ENTRY(EVENT_SINK_ENTRY const &);
	};

	long AddSink(IUnknown *,unsigned long *);
	long GetSinkAt(int,_GUID const &,void * *);
	long RemoveSink(unsigned long);
};

class CEventSource<ICompositionChangedSink>
{
	static void s_CallSinksAdaptor<<lambda_2181fb921aeb2d4177189377b3d49bb2> >(ICompositionChangedSink *,<lambda_2181fb921aeb2d4177189377b3d49bb2> const *);
public:
	long Advise(ICompositionChangedSink *,unsigned long *);
	void CallSinks<<lambda_2181fb921aeb2d4177189377b3d49bb2> >(<lambda_2181fb921aeb2d4177189377b3d49bb2>);
};

class CEventSource<IImeCompatibleChangedSink>
{
	static void s_CallSinksAdaptor<<lambda_2635f6322623adb934d53ccf4e490600> >(IImeCompatibleChangedSink *,<lambda_2635f6322623adb934d53ccf4e490600> const *);
public:
	long Advise(IImeCompatibleChangedSink *,unsigned long *);
};

class CEventSource<IOperationStatusSink>
{
	static void s_CallSinksAdaptor<<lambda_44b0b518a09b0f95c5584e335dfb68be> >(IOperationStatusSink *,<lambda_44b0b518a09b0f95c5584e335dfb68be> const *);
	static void s_CallSinksAdaptor<<lambda_5c1b4b37e1ca1062a2a46d72ef3635b9> >(IOperationStatusSink *,<lambda_5c1b4b37e1ca1062a2a46d72ef3635b9> const *);
	static void s_CallSinksAdaptor<<lambda_8f30e903acc88a83dad1996d851e15d5> >(IOperationStatusSink *,<lambda_8f30e903acc88a83dad1996d851e15d5> const *);
	static void s_CallSinksAdaptor<<lambda_c8f57f90dde1829bffdf5a606b3ff4c4> >(IOperationStatusSink *,<lambda_c8f57f90dde1829bffdf5a606b3ff4c4> const *);
public:
	long Advise(IOperationStatusSink *,unsigned long *);
};

struct CEventSource<ISearchTypeAheadEventsSink>
{
	long Advise(ISearchTypeAheadEventsSink *,unsigned long *);
	void CallSinks<IObjectCollection *>(void (*)(ISearchTypeAheadEventsSink *,IObjectCollection *),IObjectCollection *);
};

class CExeDropTarget
{
	int _GetParameters(IDataObject *,unsigned short * *,unsigned short *,unsigned long,unsigned long *);
	long _InitICIX(unsigned short const *,unsigned short const *,_CMINVOKECOMMANDINFOEX *,void * *);
	long _InvokeContextMenu(IContextMenu *,unsigned short const *,unsigned short const *);
	void _AddDescriptionToDataObject(unsigned long);
public:
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFile(unsigned short * *);
	virtual long IsDirty();
	virtual long Load(unsigned short const *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(unsigned short const *,int);
	virtual long SaveCompleted(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CExecuteAppIDAndActivationContext
{
	long _AdjustPropStoreForImmersiveExecute(unsigned short const *,IPropertyStore *);
	long _ExecuteAppIDAndActivationContext(unsigned short const *,unsigned short const *,IPropertyStore *);
	long _ExecuteSettingActivationContext(unsigned short const *,IShellItem2 *,_GUID const &);
	long _GetGUIDProperty(IShellItem2 *,_tagpropertykey const &,_GUID *);
	long _GetStringProperty(IShellItem2 *,_tagpropertykey const &,unsigned short * *);
public:
	CExecuteAppIDAndActivationContext();
	virtual long Execute();
};

class CExecuteCommandBase
{
protected:
	long _GetSelectedItem(unsigned long,_GUID const &,void * *);
	unsigned long _SelectionCount();
	virtual ~CExecuteCommandBase();
public:
	CExecuteCommandBase();
	virtual long GetAssocElement(_GUID const &,void * *);
	virtual long GetSelection(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetAssocElement(IAssociationElement *);
	virtual long SetDirectory(unsigned short const *);
	virtual long SetKeyState(unsigned long);
	virtual long SetNoShowUI(int);
	virtual long SetParameters(unsigned short const *);
	virtual long SetPosition(tagPOINT);
	virtual long SetSelection(IShellItemArray *);
	virtual long SetShowWindow(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CExecuteCommon
{
	static long s_CreateInstance(long (*)(IUnknown *,IShellItemArray *,IBindCtx *),_GUID const &,void * *);
	virtual long Execute();
};

class CExecuteItem
{
	long _GetContextMenu(IContextMenu * *);
public:
	CExecuteItem(IShellItem *);
	long Execute();
	long SetAssociationOverride(unsigned long,unsigned short const *);
	void SetInvokePointFromMonitor(HMONITOR__ *);
	~CExecuteItem();
};

class CExecuteOpenSearchDescription
{
	int _IsSameLocation(ILocationDescription *,ILocationDescription *);
	long _CreateFavorite(IShellItem *,IShellItem * *);
	long _GetLocationDescriptionForItem(IShellItem *,_GUID const &,void * *);
	long _SaveLocationAsSearchConnector(ILocationDescription *,unsigned short const *,int *,IShellItem * *);
	long _ShowErrorDialog(long);
	long _ShowInstallDialog(unsigned short const *,ILocationDescription *);
public:
	virtual long Execute();
};

class CExecuteRunAppFilter
{
	virtual ~CExecuteRunAppFilter();
public:
	virtual long OnCreated(ICreateProcessOutputs *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CExecuteTypeDelegator
{
	long _DelegateExecuteBasedOnType(IShellItem *,unsigned short const *);
public:
	CExecuteTypeDelegator();
	virtual long Execute();
	virtual long GetValue(AHE_TYPE *);
};

struct CExecuteVerbOnProperty
{
	CExecuteVerbOnProperty();
	virtual long Execute();
	virtual long Initialize(unsigned short const *,IPropertyBag *);
};

class CExplorerBrowser
{
	long _ApplyFolderSettings(IShellView *);
	long _BrowseInViewFromTL(unsigned long,IStream *,IBindCtx *);
	long _BrowseObjectInternal(_ITEMIDLIST_RELATIVE const *,unsigned int);
	long _BrowseToResultsFolder(EXPLORER_BROWSER_FILL_FLAGS);
	long _BrowseToView(_ITEMIDLIST_ABSOLUTE const *,int);
	long _BrowseToViewFromTL(IStream *,IBindCtx *);
	long _CanNavigate(unsigned int);
	long _CreateViewWindow(tagRECT const *,HWND__ * *);
	long _DetermineInitialViewMode(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,FOLDERSETTINGS *);
	long _DetermineViewMode(_ITEMIDLIST_ABSOLUTE const *,FOLDERSETTINGS *);
	long _EnsureNavigationWindow();
	long _EnsureTrackEvents();
	long _GetFrameOrCurrentView(HWND__ * *);
	long _OnBrowseObject();
	long _PopulateWithWalkResults(EXPLORER_BROWSER_FILL_FLAGS,IUnknown *);
	long _SaveHistory(IStream *);
	long _SetAccessibleName(IShellView *);
	long _SwitchView(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,int,TelemetryCorrelationVectorServiceProvider *);
	long _TryBrowseToSameView(_ITEMIDLIST_ABSOLUTE const *,int);
	long _UpdateTravelLog(int,int);
	static __int64 s_NavigationWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CExplorerBrowser();
	void _CancelCurrentView();
	void _CleanupFrame();
	void _NavigateNotifySuccess();
	void _OnFSNotify(unsigned __int64,__int64);
	void _PersistViewState(IShellView *);
	void _SaveTopView();
	void _SetGroupBy(IShellView *);
	void _SetViewRectAdjustForWrapper(tagRECT const &);
	void _WaitCursor(int);
public:
	CExplorerBrowser();
	virtual long Advise(IExplorerBrowserEvents *,unsigned long *);
	virtual long BrowseItem(IShellItem *,unsigned int);
	virtual long BrowseObject(_ITEMIDLIST_RELATIVE const *,unsigned int);
	virtual long BrowseToIDList(_ITEMIDLIST_RELATIVE const *,unsigned int);
	virtual long BrowseToObject(IUnknown *,unsigned int);
	virtual long ContextSensitiveHelp(int);
	virtual long Destroy();
	virtual long EnableModelessSB(int);
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long EnumConnectionPoints(IEnumConnectionPoints * *);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long FillFromObject(IUnknown *,EXPLORER_BROWSER_FILL_FLAGS);
	virtual long FindConnectionPoint(_GUID const &,IConnectionPoint * *);
	virtual long FindWindowByIndex(unsigned long,IUnknown * *);
	virtual long FindWindowByIndex(unsigned long,_GUID *,IUnknown * *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long GetBorder(tagRECT *);
	virtual long GetClassID(_GUID *);
	virtual long GetControlWindow(unsigned int,HWND__ * *);
	virtual long GetCurrentFilter(unsigned short *,int);
	virtual long GetCurrentItem(_GUID const &,void * *);
	virtual long GetCurrentView(_GUID const &,void * *);
	virtual long GetDefaultMenuText(IShellView *,unsigned short *,int);
	virtual long GetDummyWindowData(unsigned short const *,unsigned short const *,IStream *,_WINDOWDATA *);
	virtual long GetFolderViewOptions(FOLDERVIEWOPTIONS *);
	virtual long GetHistoryObject(IOleObject * *,IStream * *,IBindCtx * *);
	virtual long GetOptions(EXPLORER_BROWSER_OPTIONS *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetPendingItem(_GUID const &,void * *);
	virtual long GetPidl(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetPositionCookie(unsigned long *);
	virtual long GetPropertyBag(unsigned long,_GUID const &,void * *);
	virtual long GetTravelLog(ITravelLog * *);
	virtual long GetViewFlags(unsigned long *);
	virtual long GetViewFrame(IViewFrame * *);
	virtual long GetViewStateStream(unsigned long,IStream * *);
	virtual long GetWindow(HWND__ * *);
	virtual long GetWindowData(IStream *,_WINDOWDATA *);
	virtual long HasFocusIO();
	virtual long IncludeObject(IShellView *,_ITEMID_CHILD const *);
	virtual long Initialize(HWND__ *,IDataObject *,tagRECT *);
	virtual long Initialize(HWND__ *,tagRECT const *,FOLDERSETTINGS const *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long InsertMenusSB(HMENU__ *,tagOleMenuGroupWidths *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long LoadHistory(IStream *,IBindCtx *);
	virtual long LoadHistoryPosition(unsigned short *,unsigned long);
	virtual long Notify(IShellView *,unsigned long);
	virtual long OnColumnClicked(IShellView *,int);
	virtual long OnDefaultCommand(IShellView *);
	virtual long OnPreViewCreated(IShellView *);
	virtual long OnStateChange(IShellView *,unsigned long);
	virtual long OnViewWindowActive(IShellView *);
	virtual long QueryActiveShellView(IShellView * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long RefreshViewFrame();
	virtual long RemoveAll();
	virtual long RemoveMenusSB(HMENU__ *);
	virtual long RequestBorderSpace(tagRECT const *);
	virtual long SaveHistory(IStream *);
	virtual long SaveHistoryEx(IStream *,IBindCtx *);
	virtual long SendControlMsg(unsigned int,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long SetAccessibleName(unsigned short const *);
	virtual long SetActiveObject(IOleInPlaceActiveObject *,unsigned short const *);
	virtual long SetBorderSpace(tagRECT const *);
	virtual long SetEmptyText(unsigned short const *);
	virtual long SetFilter(IUnknown *);
	virtual long SetFolderSettings(FOLDERSETTINGS const *);
	virtual long SetFolderViewOptions(FOLDERVIEWOPTIONS,FOLDERVIEWOPTIONS);
	virtual long SetMenuSB(HMENU__ *,void *,HWND__ *);
	virtual long SetOptions(EXPLORER_BROWSER_OPTIONS);
	virtual long SetPositionCookie(unsigned long);
	virtual long SetPropertyBag(unsigned short const *);
	virtual long SetRect(void * *,tagRECT);
	virtual long SetStatusTextSB(unsigned short const *);
	virtual long SetToolbarItems(_TBBUTTON *,unsigned int,unsigned int);
	virtual long TranslateAcceleratorGlobal(tagMSG *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long TranslateAcceleratorSB(tagMSG *,unsigned short);
	virtual long UIActivateIO(int,tagMSG *);
	virtual long Unadvise(unsigned long);
	virtual long WalkComplete(long);
	virtual unsigned long AddRef();
	virtual unsigned long GetBrowserIndex();
	virtual unsigned long Release();
};

class CExplorerBrowserHost
{
protected:
	virtual HWND__ * CreateHWND(HWND__ *);
	virtual void OnDestroy();
public:
	long GetExplorerBrowser(_GUID const &,void * *);
	static DirectUI::IClassInfo * Class;
	static long Create(unsigned int,unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	void Destroy();
};

struct CExplorerBrowserResultsFolder
{
	virtual long GetChildClassID(_GUID *,IPropertyBag *);
	virtual long GetClassID(_GUID *);
};

class CExplorerCommandBase
{
protected:
	virtual ~CExplorerCommandBase();
public:
	virtual long CancelPreview(IShellItemArray *);
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetDescription(IShellItemArray *,unsigned short * *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetIconAsBitmap(IShellItemArray *,tagSIZE,HBITMAP__ * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long GetToolTipTitle(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long Preview(IShellItemArray *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CExplorerCommandOnUICommand
{
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetBackgroundColor(IShellItemArray *,unsigned long *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CExplorerCommandOverCommandStoreVerbList
{
	long _ChooseEnabledCommand(IShellItemArray *,int,unsigned long *,IExplorerCommand * *);
	long _Initialize(HKEY__ *,unsigned short const *);
public:
	virtual long GetKeyAndName(HKEY__ * *,unsigned short * *);
	virtual long GetPosition(CMDPOS *,_GUID *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long InvokeFromContextMenu(_CMINVOKECOMMANDINFOEX const *,IShellItemArray *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetInternalExtensionClasses(_GUID const *,unsigned long);
	virtual long SetKeyAndName(HKEY__ *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CExplorerCommandOverIContextMenu
{
	CExplorerCommandOverIContextMenu();
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetFlags(unsigned long *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Initialize(unsigned short const *,IPropertyBag *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CExplorerCommandStateOverIContextMenu
{
	long _IsHandlerAvailable(IShellItemArray *,bool *);
public:
	CExplorerCommandStateOverIContextMenu();
	virtual long Execute();
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

struct CExplorerSubCommandOverIContextMenu
{
	CExplorerSubCommandOverIContextMenu();
	long Initialize(IContextMenu3 *,unsigned int,unsigned short const *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

class CExtractConstIcon
{
	long _CopyIconLocation(unsigned short *,unsigned int,int,int *,unsigned int *);
	long _TryGetIconPathWithStreamName(IShellItem2 *,unsigned short *);
public:
	CExtractConstIcon();
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetClassID(_GUID *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long InitNew();
	virtual long Initialize(IShellItem *,unsigned long);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetDefaultIcon(unsigned short const *,int);
	virtual long SetFlags(unsigned int);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetKey(HKEY__ *);
	virtual long SetNormalIcon(unsigned short const *,int);
	virtual long SetOpenIcon(unsigned short const *,int);
	virtual long SetOplockProvider(IOplockProvider *);
	virtual long SetShortcutIcon(unsigned short const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CExtractIcon
{
	struct IconLocation
	{
		long Set(unsigned short const *,int);
		long SetFromRegistry(unsigned short *);
	};

	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDefaultIcon(unsigned short const *,int);
	virtual long SetFlags(unsigned int);
	virtual long SetKey(HKEY__ *);
	virtual long SetNormalIcon(unsigned short const *,int);
	virtual long SetOpenIcon(unsigned short const *,int);
	virtual long SetShortcutIcon(unsigned short const *,int);
	virtual long _ExtractW(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long _GetIconLocationW(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CExtractIconBase
{
	virtual long Extract(char const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetIconLocation(unsigned int,char *,unsigned int,int *,unsigned int *);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CExtractIconWForA
{
	virtual long Extract(char const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetIconLocation(unsigned int,char *,unsigned int,int *,unsigned int *);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CExtractThumbnailTask
{
	virtual long InternalResumeRT();
};

struct CExtractToCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

class CExtrinsicPropertyStore
{
	long _CommitPlaceholderProperties();
	long _CommitThumbnail();
	long _CreateEmptyFileStream(unsigned short const *,IStream * *);
	long _EnsureMemoryPropertyStore();
	long _GetFileHandleObjectAndDuplicateHandle(IFileHandle * *,void * *,unsigned long);
	long _UpdateProperties(IPersistStream *);
	static CExtrinsicPropertyStore::CUSTOM_PKEY_HANDLER const * const c_rgCustomPKeyHandlers;
	static long s_CopyStreamContents(IStream *,IStream *);
	static long s_GetThumbnailStreamValue(CExtrinsicPropertyStore *,tagPROPVARIANT *);
	static long s_SetThumbnailStreamValue(CExtrinsicPropertyStore *,tagPROPVARIANT const &);
public:
	CExtrinsicPropertyStore();
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetCount(unsigned long *);
	virtual long GetMode(unsigned long *);
	virtual long GetNameAt(unsigned long,unsigned short * *);
	virtual long GetNameCount(unsigned long *);
	virtual long GetNamedValue(unsigned short const *,tagPROPVARIANT *);
	virtual long GetUsnSource(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long InitializeWithFindData(unsigned short const *,_WIN32_FIND_DATAW const &,unsigned long);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long SetFileNameAndMode(unsigned short const *,unsigned long);
	virtual long SetMode(unsigned long);
	virtual long SetNamedValue(unsigned short const *,tagPROPVARIANT const &);
	virtual long SetUsnSource(unsigned long);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
};

class CFDFolderNotifySource
{
	long _EnsureEventName();
	static unsigned long s_CleanUpThreadProc(void *);
	static unsigned long s_InitThreadProc(void *);
	static void s_PubSvcListenerCallback(void *,unsigned char);
	void _InitSSO();
public:
	long Initialize();
	long Suspend();
	unsigned long Release();
};

struct CFDFolderNotifySourceWrapper
{
	virtual long Flush();
	virtual long GetClassID(_GUID *);
	virtual long GetClientCount(unsigned long *);
	virtual long GetEvent(int,void * *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long Initialize(IChangeNotifySink *,IShellItem *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset(int);
	virtual long SetClientCount(unsigned long);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Suspend(SCNSUSPENDFLAGS);
	virtual long SuspendDevice(int,void *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFONProps
{
	struct CNameList
	{
		int AddIfUnique(char const *);
	};

	long _ReadFontDirEntry(void *,unsigned long,unsigned long);
	long _ReadResourceTableEntry(void *,unsigned short);
	long _ReadResourceTables(void *,unsigned long);
	long _SkipNullTermString(char * *,void const *);
public:
	virtual long GetAuthor(unsigned short * *);
	virtual long GetCopyright(unsigned short * *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetEmbeddability(unsigned short * *);
	virtual long GetLicense(unsigned short * *);
	virtual long GetManufacturer(unsigned short * *);
	virtual long GetTitle(tagPROPVARIANT *);
	virtual long GetTrademark(unsigned short * *);
	virtual long GetVersion(unsigned short * *);
	virtual long Load(unsigned short const *);
};

class CFSDropTarget
{
	int _CanDestTransferHIDA(IShellFolder *);
	int _CanMoveCopyHIDA(IDataObject *,IShellFolder *);
	int _CanSourceTransferHIDA(IDataObject *);
	int _IsFromSameBriefcase();
	int _IsFromSneakernetBriefcase();
	int _IsSlowTarget();
	long _CreatePackage(IDataObject *);
	long _DragDropMenu(unsigned long,_POINTL,unsigned long *,HMENU__ *,unsigned long,unsigned int *);
	long _PopulateDragDropMenu(HMENU__ *,_DSA *,int);
	static CFSDropTarget::FORMATETCFILTER const * const rgFmtsInOrder;
	static long _FilterBriefcase(CFSDropTarget *,tagFORMATETC *,unsigned long,unsigned long,unsigned long *,unsigned long *,FSMENUINFO *);
	static long _FilterFileContents(CFSDropTarget *,tagFORMATETC *,unsigned long,unsigned long,unsigned long *,unsigned long *,FSMENUINFO *);
	static long _FilterHDROP(CFSDropTarget *,tagFORMATETC *,unsigned long,unsigned long,unsigned long *,unsigned long *,FSMENUINFO *);
	static long _FilterHIDA(CFSDropTarget *,tagFORMATETC *,unsigned long,unsigned long,unsigned long *,unsigned long *,FSMENUINFO *);
	static long _FilterOlePackage(CFSDropTarget *,tagFORMATETC *,unsigned long,unsigned long,unsigned long *,unsigned long *,FSMENUINFO *);
	static long _FilterSneakernetBriefcase(CFSDropTarget *,tagFORMATETC *,unsigned long,unsigned long,unsigned long *,unsigned long *,FSMENUINFO *);
	static void _AddVerbs(unsigned long *,unsigned long,unsigned long,unsigned int,unsigned int,unsigned int,unsigned long,FSMENUINFO *);
	unsigned long _DetermineEffects(unsigned long,unsigned long *,HMENU__ *);
	unsigned long _EffectFromFolder();
	unsigned long _FilesystemAdjustedDefaultEffect(unsigned long);
	unsigned long _GetAllowedHIDAEffects(IDataObject *);
	unsigned long _GetDefaultEffect(unsigned long,unsigned long,unsigned long,unsigned long);
	virtual ~CFSDropTarget();
	void _AddDescriptionToDataObject(unsigned long);
	void _FixUpDefaultItem(HMENU__ *,unsigned long);
	void _GetStateFromSite();
	void _PrepLogicalEffect(unsigned long *);
public:
	CFSDropTarget(IShellFolder2 *,HWND__ *);
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long IsEvaluatingEdpPolicy(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDropSourceEnterpriseId(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSDropTargetHelper
{
	int _AreItemsInDataObjectInThisFolder();
	long _Drop();
	long _GetDestNames(unsigned short const *,unsigned short * *);
	long _Unmarshal();
	static unsigned long s_DoDropThreadProc(void *);
	static void s_CheckRestoredFiles(unsigned short const *);
	void _MoveCopyHDROP(HDROP__ *);
	void _MoveCopyHIDA();
	void _MoveSelectIcons(IShellFolder *,_ITEMID_CHILD const * const *,unsigned int,void *,unsigned short const *,HDROP__ *);
public:
	long AsyncDrop(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,IFolderView2 *,IShellFolder2 *,IUnknown *);
	long SyncDrop(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,IFolderView2 *,IShellFolder2 *,IUnknown *);
};

class CFSFolder
{
	struct CItemCacheCtx
	{
		long SetItemCacheCtxFromBindCtx(IBindCtx *);
	};

	struct CTItemCacheCtxItemPtr<IConvertToSidString>
	{
		long Get(IConvertToSidString * *);
	};

	struct CTItemCacheCtxItemPtr<IResolveSidToUserName>
	{
		long Get(IResolveSidToUserName * *);
	};

	struct CTItemCacheCtxItemPtr<IShareEngine>
	{
		long Get(IShareEngine * *);
		long Set(IShareEngine *);
	};

protected:
	FOLDER_ENUM_MODE _GetEnumMode(_ITEMID_CHILD const *,FOLDER_ENUM_MODE);
	IDFOLDER const * _IsValidID(_ITEMIDLIST_RELATIVE const *);
	SHSTOCKICONID GetFolderIconId();
	_GUID _GetFolderType();
	bool _ComputeIsSlowFolder();
	bool _IsOfflineAndRemote(unsigned long);
	bool _IsUnderRecycleBinFolder();
	int _DefaultShowExt();
	int _DiscoverJunctionCLSID(_ITEMIDLIST_RELATIVE const *,IDFOLDER const *,unsigned short const *,_GUID *);
	int _GetDriveIndex();
	int _GetFolderIconPath(_ITEMIDLIST_RELATIVE const *,int,unsigned short *,int,int *);
	int _GetJunctionClsid(_ITEMID_CHILD const *,IDFOLDER const *,_GUID *);
	int _GetMountingPointInfo(IDFOLDER const *,unsigned short *,unsigned long);
	int _IsCDRomFolder();
	int _IsNetFolder();
	int _IsReal(IDFOLDER const *);
	int _ItemHasNavigationEnum(_ITEMID_CHILD const *);
	int _RequiresEncryptionUI(IDFOLDER const *);
	int _ShouldCheckDesktopIni();
	int _ShowExtension(_ITEMID_CHILD const *,IDFOLDER const *);
	long _Bind(IBindCtx *,_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	long _BindHandler(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,IBindCtx *,_GUID const &,void * *);
	long _BindToChild(IBindCtx *,_ITEMID_CHILD const *,IDFOLDER const *,_GUID const &,void * *);
	long _BindToPropertyStore(_ITEMID_CHILD const *,GETPROPERTYSTOREFLAGS,IUnknown *,_GUID const &,void * *);
	long _BuildAttributeString(IDFOLDER const *,unsigned short *,unsigned long);
	long _CheckDriveRestriction(HWND__ *,_GUID const &);
	long _ClearChildFolder(unsigned short const *);
	long _CombineWithFolderIDList(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_ABSOLUTE * *);
	long _CompareAttribs(IDFOLDER const *,IDFOLDER const *);
	long _CompareFolderness(IDFOLDER const *,IDFOLDER const *);
	long _CompareModifiedDate(_ITEMIDLIST_RELATIVE const *,IDFOLDER const *,_ITEMIDLIST_RELATIVE const *,IDFOLDER const *);
	long _ConvertPermissionsToSidString(ISharePermissionList *,unsigned long,unsigned short * *);
	long _CopyHiddenData(_ITEMIDLIST_RELATIVE const *,CREATE_IDLIST_FLAGS,_ITEMID_CHILD * *);
	long _CreateDefExtIcon(_ITEMID_CHILD const *,IDFOLDER const *,IBindCtx *,_GUID const &,void * *);
	long _CreateFileFolderDefExtIcon(_ITEMID_CHILD const *,IDFOLDER const *,IBindCtx *,_GUID const &,void * *);
	long _CreateFileLinks(HWND__ *,IUnknown *,IDataObject *,unsigned short const *,unsigned long);
	long _CreateFolderPropertyBag(unsigned long,_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	long _CreateIDList(tagWIN32_FIND_DATA_EX const *,_ITEMIDLIST_RELATIVE const *,unsigned short const *,unsigned short const *,IDLHID,CREATE_IDLIST_FLAGS,FOLDER_ENUM_MODE,_ITEMID_CHILD * *);
	long _CreateIDListFromName(unsigned short const *,unsigned long,int,IBindCtx *,_ITEMID_CHILD * *);
	long _CreateIDListWithBindCtx(tagWIN32_FIND_DATA_EX *,_ITEMIDLIST_RELATIVE const *,unsigned short const *,IBindCtx *,CREATE_IDLIST_FLAGS,_ITEMID_CHILD * *);
	long _CreatePerClassDefExtIcon(unsigned long,int,_GUID const &,void * *);
	long _CreatePerInstanceDefExtIcon(_ITEMID_CHILD const *,IDFOLDER const *,IBindCtx *,unsigned long,_GUID const &,void * *);
	long _CreateUIHandler(_GUID const &,void * *);
	long _Delete(unsigned short const *);
	long _DiscoverLocalizedName(_ITEMIDLIST_RELATIVE const *,tagWIN32_FIND_DATA_EX const *,unsigned short *,unsigned int);
	long _EnsureItemFolderPathDisplay();
	long _EnsureMetadataList();
	long _FindDataFromIDFolder(_ITEMID_CHILD const *,IDFOLDER const *,tagWIN32_FIND_DATA_EX *);
	long _FindDataFromName(unsigned short const *,unsigned long,int,IBindCtx *,tagWIN32_FIND_DATA_EX *);
	long _FormatPropVariantForDisplay(_tagpropertykey const &,tagPROPVARIANT const &,_SHELLDETAILS *);
	long _GetAssoc(_ITEMID_CHILD const *,IDFOLDER const *,CFFFLAGS,_GUID const &,void * *);
	long _GetAttributesDescriptionBuilder(unsigned short *,unsigned long,unsigned int);
	long _GetBasicColumnStringByColNumber(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	long _GetBasicColumnValue(_ITEMID_CHILD const *,_tagpropertykey const &,tagPROPVARIANT *);
	long _GetComputerNameFromPath(unsigned short const *,tagPROPVARIANT *);
	long _GetDesktopIni(ICachedPrivateProfile * *);
	long _GetDesktopIniForItem(_ITEMIDLIST_RELATIVE const *,ICachedPrivateProfile * *);
	long _GetFindDataByHandleFromName(unsigned short const *,tagWIN32_FIND_DATA_EX * *);
	long _GetHTTPURLForItem(_ITEMID_CHILD const *,unsigned short *,unsigned long);
	long _GetIndexerCalculatedProperty(_tagpropertykey const &,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	long _GetInplaceSharePermissions(_ITEMID_CHILD const *,unsigned long,ISharePermissionList * *);
	long _GetItemPathDisplayAsString(_ITEMID_CHILD const *,unsigned short * *);
	long _GetLinkTargetAsString(_ITEMID_CHILD const *,unsigned short * *);
	long _GetLocalizedFolderPath(unsigned short * *);
	long _GetMountPoint(CMountPoint * *);
	long _GetNormalDisplayName(_ITEMID_CHILD const *,unsigned long,FSIS_UINAME_OPTIONS,unsigned short *,unsigned int);
	long _GetNormalDisplayNameAsPropVariant(_ITEMID_CHILD const *,unsigned long,FSIS_UINAME_OPTIONS,tagPROPVARIANT *);
	long _GetOfflineAvailabilityValue(_ITEMID_CHILD const *,IDFOLDER const *,unsigned long *);
	long _GetOverlayInfo(_ITEMID_CHILD const *,int *,unsigned long);
	long _GetPath(unsigned short *,unsigned long);
	long _GetPathForItemName(unsigned short const *,unsigned short *,unsigned int);
	long _GetRemoteUncPathForOfflineState(_ITEMID_CHILD const *,unsigned short * *);
	long _GetSMBSharePermissions(_ITEMID_CHILD const *,ISharePermissionList * *);
	long _GetShareEngine(SHARE_MODE,_GUID const &,void * *);
	long _GetSharingStatus(CFSFolder *,IShellItem *,SHARING_STATUS *);
	long _GetStorageProviderInfoFromChildId(_ITEMID_CHILD const *,unsigned short * *,unsigned short * *,STORAGE_PROVIDER_INFO_FLAGS *,STORAGE_PROVIDER_PATH_COMPARE_FLAGS *,unsigned short * *,unsigned short * *,IStorageProviderHandlerPriv * *);
	long _GetStorageProviderSharingStatus(unsigned short const *,unsigned long *,unsigned long *);
	long _GetSyncStatusProperties(_tagpropertykey const &,_ITEMID_CHILD const *,tagPROPVARIANT *);
	long _GetSyncTransferStatusEndpoint(_GUID const &,void * *);
	long _GetTargetIDList(_ITEMIDLIST_ABSOLUTE * *);
	long _ILCloneNoDelegate(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE * *);
	long _InitFolder(IBindCtx *,_ITEMIDLIST_RELATIVE const *,IUnknown * *);
	long _LookupOwnerName(_ITEMID_CHILD const *,tagPROPVARIANT *);
	long _OpenCreateStorage(unsigned short const *,unsigned long,IStorage * *,int);
	long _OpenCreateStream(unsigned short const *,unsigned long,IStream * *,int);
	long _ResetForInitialize();
	long _SetLocalizedDisplayName(_ITEMID_CHILD const *,IDFOLDER const *,bool,unsigned short const *);
	long _SetParseAndCreateItem(IBindCtx *,_ITEMIDLIST_RELATIVE const *);
	long _TrySimpleParse(unsigned short const *,IBindCtx *,_ITEMIDLIST_RELATIVE * *);
	static CFSFolder::PKEYTOGETDETAILSEXHELPER const * const c_rgPropertiesEnumerated;
	static CFSFolder::PKEYTOGETDETAILSEXHELPER const * const c_rgPropertiesNotEnumerated;
	static CFSFolder::PKEYTOGETDETAILSEXHELPER const * s_LookupHelperForKey(_tagpropertykey const &);
	static bool ResultMightRequireRetry(long);
	static bool s_IsPropertyAllowed(CFSFolder::PKEYTOGETDETAILSEXHELPER const *);
	static long GetAllowedEDPIdentities(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long GetEncryptionOwnersDisplay(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long GetEncryptionOwnersHelper(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,bool,tagPROPVARIANT *);
	static long GetStorageProviderState(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long GetStorageProviderTransferProgress(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long GetStorageProviderUIStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetAppZoneIdentifier(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetAttributes(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetAttributesDescription(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetCachedIconIndex(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetCapacity(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetComputerName(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetCreateTime(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetDescriptionID(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetDirectory(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetEncryptionOwners(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetFileAllocationSize(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetFileExtension(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetFileIndex(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetFileOfflineAvailabilityStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetFindData(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetFreeSpace(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetFullStorageProviderId(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetIconPath(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetIsDavResource(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetIsSendtoTarget(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetIsShared(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetIsVolumeRoot(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetItemFolderPathDisplay(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetItemFolderPathDisplayNarrow(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetItemOfflineStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetItemPathDisplay(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetItemPathDisplayNarrow(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetItemType(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetKind(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetLastAccessTime(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetLastSyncError(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetLastWriteTime(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetLastWriterPackageFamilyName(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetLinkTarget(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetLinkTargetExtension(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetLinkTargetSFGAOFlags(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetName(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetNameWithoutExtension(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetNamespaceCLSID(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetNetworkLocation(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetNotUserContent(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetOfflineAvailability(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetOfflineStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetOwner(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetParsingBindCtx(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetParsingName(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetParsingPath(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetPerceivedType(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetPercentFull(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetPlaceholderStates(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetPropListStatusIcons(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetPropertyFail(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetPropertyTrue(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetReparsePointTag(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSFGAOFlags(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSearchLocationHeaderType(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetShareScope(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSharedWith(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSharingStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSize(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSpaceHelper(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,_ULARGE_INTEGER *,_ULARGE_INTEGER *,_ULARGE_INTEGER *);
	static long _GetStorageProviderDescendantSharingStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetStorageProviderError(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetStorageProviderFileIdentifier(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetStorageProviderId(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetStorageProviderRemoteUri(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetStorageProviderSharingStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetStorageProviderStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSyncActivityStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSyncLastSynced(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSyncStatusActionValue(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSyncStatusDescriptionValue(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSyncStatusTextValue(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSyncStatusValue(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetSyncTransferStatus(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetThumbnailCacheId(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetTransferOrder(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetTransferPosition(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetTransferSize(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetTypeName(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetVolumeId(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static long _GetVolumeIdHelper(CFSFolder *,_GUID *);
	static long _GetZoneIdentifier(CFSFolder *,_ITEMID_CHILD const *,IDFOLDER const *,tagPROPVARIANT *);
	static void _AdjustStateForSlowColumn(IPropertyDescriptionList *,unsigned int,unsigned long *);
	static void _AdjustStateForSlowProperty(_tagpropertykey const &,unsigned long *);
	unsigned int _GetCSIDL();
	unsigned int _GetPathDriveType(unsigned short const *);
	unsigned long _Attributes();
	unsigned long _GetVolumeInformationFlags();
	unsigned short * _CopyName(_ITEMID_CHILD const *,IDFOLDER const *,unsigned short *,unsigned int);
	virtual long v_InternalQueryInterface(_GUID const &,void * *);
	virtual ~CFSFolder();
	void _PopulateID(tagWIN32_FIND_DATA_EX const *,void const *,unsigned int,int,IDFOLDER *);
	void _PopulateIDXHelper(tagWIN32_FIND_DATA_EX const *,IDFOLDEREX_V3 *);
	void _PopulateIDXLatest(tagWIN32_FIND_DATA_EX const *,unsigned int,unsigned short const *,unsigned int,IDFOLDEREX_V4 *);
	void _PopulateIDXV3(tagWIN32_FIND_DATA_EX const *,unsigned int,unsigned short const *,unsigned int,IDFOLDEREX_V3 *);
public:
	CFSFolder(IUnknown *);
	static long s_GetAssoc(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetContextMenu(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetCustomIconManager(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetDataObject(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetDropTarget(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetExtractIcon(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetExtractLogo(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetQueryInfo(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetThumbnailExtractor(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	static long s_GetUriObject(CFSFolder *,HWND__ *,IBindCtx *,_ITEMID_CHILD const * const *,unsigned int,IDFOLDER const *,_GUID const &,void * *);
	virtual int IsOfflineAndRemote(IDFOLDER const *);
	virtual long AddRefBackReference();
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long CheckForEncryptedAndAccessDenied(_ITEMID_CHILD const *);
	virtual long Commit(unsigned long);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CopyTo(unsigned long,_GUID const *,unsigned short * *,IStorage *);
	virtual long CreateChildItem(_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long CreateStorage(unsigned short const *,unsigned long,unsigned long,unsigned long,IStorage * *);
	virtual long CreateStream(unsigned short const *,unsigned long,unsigned long,unsigned long,IStream * *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long DestroyElement(unsigned short const *);
	virtual long EnumElements(unsigned long,void *,unsigned long,IEnumSTATSTG * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long FindLastID(_ITEMIDLIST_RELATIVE const *,IDFOLDER * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetAttributesRequiringElevation(_ITEMID_CHILD const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetColumnState(_tagpropertykey const &,unsigned long *,unsigned long *);
	virtual long GetContextMenu(HWND__ *,IShellItemArray *,IBindCtx *,_GUID const &,void * *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFastProperties(_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long GetFolderCapabilities(NSTCFOLDERCAPABILITIES,NSTCFOLDERCAPABILITIES *);
	virtual long GetFolderTargetInfo(_PERSIST_FOLDER_TARGET_INFO *);
	virtual long GetFolderType(_GUID *);
	virtual long GetFormatForDisplayFlags(_tagpropertykey const &,PROPDESC_FORMAT_FLAGS *);
	virtual long GetHandlerClsidAndFlags(_ITEMID_CHILD const *,unsigned short const *,_GUID *,HANDLERFLAGS *);
	virtual long GetIconOf(_ITEMID_CHILD const *,unsigned int,int *);
	virtual long GetInnateDetailsWithHandlerExceptions(HANDLERFLAGS,_ITEMID_CHILD const *,_tagpropertykey const &,int *,tagPROPVARIANT *);
	virtual long GetInnatePropertyKeyAt(unsigned long,_tagpropertykey *);
	virtual long GetInnatePropertyKeyCount(unsigned long *);
	virtual long GetKey(unsigned long,HKEY__ * *);
	virtual long GetMaxLength(unsigned short const *,int *);
	virtual long GetOverlayIconIndex(_ITEMID_CHILD const *,int *);
	virtual long GetOverlayIndex(_ITEMID_CHILD const *,int *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetParentAndItem(_ITEMIDLIST_ABSOLUTE * *,IShellFolder * *,_ITEMID_CHILD * *);
	virtual long GetPathForItem(_ITEMIDLIST_RELATIVE const *,unsigned short *,unsigned long);
	virtual long GetPreferences(NAMESPACE_FOLDER_PREFERENCES_FLAGS *);
	virtual long GetRealLocations(IShellItemArray * *);
	virtual long GetResourceDisplayName(_ITEMID_CHILD const *,unsigned short *,unsigned int,int *);
	virtual long GetScopeAndSubQueries(SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IScope * *,IShellItemArray * *);
	virtual long GetSearchRoot(IShellItem * *);
	virtual long GetThumbnailHandler(_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long GetValidCharacters(unsigned short * *,unsigned short * *);
	virtual long InitNew();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Initialize(unsigned short const *,int);
	virtual long InitializeEx(IBindCtx *,_ITEMIDLIST_ABSOLUTE const *,_PERSIST_FOLDER_TARGET_INFO const *);
	virtual long IsCDInLiveFileSystemMode(int *);
	virtual long IsChildFolderJunction(_ITEMID_CHILD const *,int *);
	virtual long IsFastProperty(_ITEMID_CHILD const *,_tagpropertykey const &);
	virtual long IsInnateProperty(HANDLERFLAGS,_tagpropertykey const &,int *);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long LoadHandler(_ITEMID_CHILD const *,IUnknown *,unsigned long,unsigned short const *,IBindCtx *,IOplockProvider *,_GUID const &,_GUID const &,void * *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long MoveElementTo(unsigned short const *,IStorage *,unsigned short const *,unsigned long);
	virtual long OpenStorage(unsigned short const *,IStorage *,unsigned long,unsigned short * *,unsigned long,IStorage * *);
	virtual long OpenStream(unsigned short const *,void *,unsigned long,unsigned long,IStream * *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long PreferSortByColumnId(_tagpropertykey const &,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long ReleaseBackReference();
	virtual long RemoveBackReferences();
	virtual long RemoveLocalizedDisplayName(_ITEMID_CHILD const *);
	virtual long RenameElement(unsigned short const *,unsigned short const *);
	virtual long Revert();
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetClass(_GUID const &);
	virtual long SetElementTimes(unsigned short const *,_FILETIME const *,_FILETIME const *,_FILETIME const *);
	virtual long SetEnumRestriction(unsigned long,unsigned long);
	virtual long SetItemAlloc(IMalloc *);
	virtual long SetKey(HKEY__ *);
	virtual long SetLocalizedDisplayName(_ITEMID_CHILD const *,unsigned short const *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,unsigned long,_ITEMID_CHILD * *);
	virtual long SetParentAndItem(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_ITEMID_CHILD const *);
	virtual long SetResourceDisplayName(_ITEMID_CHILD const *,unsigned short const *,int);
	virtual long SetStateBits(unsigned long,unsigned long);
	virtual long SetWrapperFolderWeakReference(IShellFolder2 *);
	virtual long Stat(tagSTATSTG *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual unsigned short const * HandlerName(_GUID const &);
};

class CFSFolderEnumSTATSTG
{
protected:
	CFSFolderEnumSTATSTG(CFSFolder *);
public:
	virtual long Clone(IEnumSTATSTG * *);
	virtual long Next(unsigned long,tagSTATSTG *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFSFolderExtractIcon
{
	long InitFXI(unsigned short const *,unsigned int,unsigned short);
	virtual long GetElevationCache(ELEVATION_STATE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetElevationCache(ELEVATION_STATE);
	virtual long _ExtractW(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long _GetIconLocationW(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSFolderPropertyBag
{
	virtual ~CFSFolderPropertyBag();
public:
	long Init(_ITEMIDLIST_RELATIVE const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(unsigned short const *,tagVARIANT *,IErrorLog *);
	virtual long Write(unsigned short const *,tagVARIANT *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFSFolderPropertyStore
{
	long Initialize(IFreeThreadedItemContainer *,HANDLERFLAGS,GETPROPERTYSTOREFLAGS,_ITEMID_CHILD const *);
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetClassIdentity(unsigned short * *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
};

struct CFSFolderPropertyStoreBase
{
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetClassIdentity(unsigned short * *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSFolderViewCB
{
	long OnFSNotify(unsigned long,_ITEMIDLIST_ABSOLUTE const * *,long);
	long OnGetEmptyText(unsigned long,int,unsigned short *);
	long OnGetFolderType(unsigned long,_GUID *);
	long OnGetWebViewTasks(unsigned long,SFVM_WEBVIEW_TASKSECTION_DATA *);
	long _OnGetZone(unsigned long,unsigned long *);
	void _CommitFolderType(_GUID);
public:
	CFSFolderViewCB(CFSFolder *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CFSIDLData
{
	long CreateFileGroupDescriptor(tagSTGMEDIUM *);
	long GetEnterpriseIdForSelection(unsigned short * *);
	long GetFileAttributesW(tagSTGMEDIUM *);
	long GetFileContents(long,tagSTGMEDIUM *);
	long GetFileGroupDescriptor(tagFORMATETC *,tagSTGMEDIUM *);
	long GetNetResourceArray(tagSTGMEDIUM *);
	long HasFolder(IShellItemArray * *,bool *);
	long StartComputationOfEnterpriseIdForSelectionAsync();
public:
	CFSIDLData(_ITEMIDLIST_ABSOLUTE const *,unsigned int,_ITEMIDLIST_RELATIVE const * const *,IDataObject *);
	long CreateHDrop(tagSTGMEDIUM *,int);
	long GetHDrop(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long GetData(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long QueryGetData(tagFORMATETC *);
	virtual long SetData(tagFORMATETC *,tagSTGMEDIUM *,int);
	virtual ~CFSIDLData();
};

struct CFSIconManager
{
	virtual long GetDefaultIconHandle(HICON__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDefaultIcon();
	virtual long SetIcon(unsigned short const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSIconOverlayManager
{
	int _GetImageIndex(FSIconOverlay const *);
	long _GetFileOverlayInfo(unsigned short const *,unsigned long,int,int *,unsigned long);
	static int _s_ReleaseOverlay(FSIconOverlay *,void *);
	static long _s_LoadIconOverlayIdentifiers(CDSA<_GUID> const *,CDSA<FSIconOverlay> *);
public:
	static long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long GetFileOverlayInfo(unsigned short const *,unsigned long,int *,unsigned long);
	virtual long GetReservedOverlayInfo(unsigned short const *,unsigned long,int *,unsigned long,int);
	virtual long LoadNonloadedOverlayIdentifiers();
	virtual long OverlayIndexFromImageIndex(int,int *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RefreshOverlayImages(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSInterruptSource
{
	struct CSuspendedChild
	{
		static long Create(_ITEMIDLIST_ABSOLUTE const *,int,CSuspendedChild * *);
	};

protected:
	virtual void v_CloseHandle();
	virtual void v_CreateEvent(unsigned short const *);
	virtual void v_ReleaseResources();
	virtual void v_ResetHandle();
	virtual ~CFSInterruptSource();
	void _CreatePnPNotification(unsigned short const *,void *);
	void _ReleasePnPNotification();
	void _ResetSource(CFSInterruptSource::ATTEMPT);
	void _SetAttempt(CFSInterruptSource::ATTEMPT);
public:
	static long CreateInstance(_GUID const &,void * *);
	virtual long Flush();
	virtual long GetClassID(_GUID *);
	virtual long GetClientCount(unsigned long *);
	virtual long GetEvent(int,void * *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long Initialize(IChangeNotifySink *,IShellItem *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset(int);
	virtual long SetClientCount(unsigned long);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Suspend(SCNSUSPENDFLAGS);
	virtual long SuspendChild(SCNSUSPENDFLAGS,_ITEMIDLIST_ABSOLUTE const *);
	virtual long SuspendDevice(int,void *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSItemResources
{
	bool _IsStreamSupported(unsigned short const *);
	long _OpenOrCreateResource(SHELL_ITEM_RESOURCE const *,int,_GUID const &,void * *);
	~CFSItemResources();
public:
	long InitializeResources(unsigned short const *,void *,IShellItem *);
	virtual long CreateResource(SHELL_ITEM_RESOURCE const *,_GUID const &,void * *);
	virtual long EnumResources(IEnumResources * *);
	virtual long GetAttributes(unsigned long *);
	virtual long GetFileHandle(void * *);
	virtual long GetResourceDescription(SHELL_ITEM_RESOURCE const *,unsigned short * *);
	virtual long GetResourceDisplayName(_ITEMID_CHILD const *,unsigned short *,unsigned int,int *);
	virtual long GetSize(unsigned __int64 *);
	virtual long GetTimes(_FILETIME *,_FILETIME *,_FILETIME *);
	virtual long MarkForDelete();
	virtual long OpenResource(SHELL_ITEM_RESOURCE const *,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveLocalizedDisplayName(_ITEMID_CHILD const *);
	virtual long SetAttributes(unsigned long);
	virtual long SetLocalizedDisplayName(_ITEMID_CHILD const *,unsigned short const *);
	virtual long SetResourceDisplayName(_ITEMID_CHILD const *,unsigned short const *,int);
	virtual long SetTimes(_FILETIME const *,_FILETIME const *,_FILETIME const *);
	virtual long SupportsResource(SHELL_ITEM_RESOURCE const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFSItemResourcesEnum
{
	long AddResource(SHELL_ITEM_RESOURCE const *);
	virtual long Clone(IEnumResources * *);
	virtual long Next(unsigned long,SHELL_ITEM_RESOURCE *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSNotifyHelper
{
protected:
	long _CheckForReNavigateOrClose(IUnknown *,long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual ~CFSNotifyHelper();
	void _UnRegisterFSNotify();
};

class CFSPropertyStoreFactory
{
	bool _IsFilePlaceholder();
	bool _ShouldGetExtrinsicStore(IDFOLDER const *,GETPROPERTYSTOREFLAGS);
	bool _ShouldGetFallBackStore(IDFOLDER const *,GETPROPERTYSTOREFLAGS);
	bool _ShouldGetFileStore(IDFOLDER const *,GETPROPERTYSTOREFLAGS);
	int _IsInnateProperty(HANDLERFLAGS,_tagpropertykey const &);
	long _CreateOplockWrapper(IOplockProvider *,IPropertyStore *,HANDLERFLAGS,IUnknown * *);
	long _GetDelayedPropertyStore(GETPROPERTYSTOREFLAGS,_tagpropertykey const &,unsigned long,_GUID const &,void * *);
	long _GetDesktopIniStore(IUnknown *,GETPROPERTYSTOREFLAGS,IUnknown * *);
	long _GetExtrinsicStore(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown * *);
	long _GetFallBackStore(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown * *);
	long _GetFileStore(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown * *);
	long _GetInnateStore(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown * *);
	long _GetMultiplexDelayedPropertyStore(GETPROPERTYSTOREFLAGS,_tagpropertykey const &,_GUID const &,void * *);
	long _GetMultiplexPropertyStore(GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown *,_GUID const &,void * *);
	long _GetPropertyStore(GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown *,_GUID const &,void * *);
	long _GetWin32FindData(IShellFolder2 *,_WIN32_FIND_DATAW *);
	static bool _s_ShouldGetExtrinsicStore(CFSPropertyStoreFactory *,IDFOLDER const *,GETPROPERTYSTOREFLAGS);
	static bool _s_ShouldGetFallBackStore(CFSPropertyStoreFactory *,IDFOLDER const *,GETPROPERTYSTOREFLAGS);
	static bool _s_ShouldGetFileStore(CFSPropertyStoreFactory *,IDFOLDER const *,GETPROPERTYSTOREFLAGS);
	static bool _s_ShouldGetInnateStore(CFSPropertyStoreFactory *,IDFOLDER const *,GETPROPERTYSTOREFLAGS);
	static long _s_GetExtrinsicStore(CFSPropertyStoreFactory *,IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown * *);
	static long _s_GetFallBackStore(CFSPropertyStoreFactory *,IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown * *);
	static long _s_GetFileStore(CFSPropertyStoreFactory *,IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown * *);
	static long _s_GetInnateStore(CFSPropertyStoreFactory *,IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const &,IUnknown * *);
public:
	long Initialize(IFreeThreadedItemContainer *,_ITEMID_CHILD const *);
	virtual long GetDelayedPropertyStore(GETPROPERTYSTOREFLAGS,unsigned long,_GUID const &,void * *);
	virtual long GetPropertyStore(GETPROPERTYSTOREFLAGS,IUnknown *,_GUID const &,void * *);
	virtual long GetPropertyStoreForKeys(_tagpropertykey const *,unsigned int,GETPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long GetShellFolder(_GUID const &,void * *);
	virtual long GetShellItem(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSTransfer
{
	_COPYFILE2_MESSAGE_ACTION _ActionFromProgressCallback(long);
	_COPYFILE2_MESSAGE_ACTION _CopyProgressCallback(COPYFILE2_MESSAGE const *);
	bool _MakeUniqueDestName();
	bool _ReduceDesiredAccess(unsigned long *);
	bool _ShouldAttemptHardLink(IShellItem *,unsigned long,unsigned long);
	int _HasMoveAccess();
	int _ShouldExcludeItem(IShellItem *);
	long DestinationCreate(unsigned short const *,unsigned __int64,unsigned long,void * *,FSITEMRESOURCEFLAGS *);
	long DestinationCreateRetryLoop(unsigned short const *,unsigned __int64,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,void * *);
	long _CheckAndDeleteFile(unsigned long,IShellItem *,unsigned short const *,IShellItem * *);
	long _CheckAndScheduleProfileFlush();
	long _CheckDecryptionUI(unsigned short const *);
	long _CheckEncryptionDest();
	long _CheckEncryptionUI(unsigned short const *);
	long _CheckFolderSizeAndDeleteability(FOLDERDELETEINFO *,unsigned __int64);
	long _CheckForStreamLoss(void *,void *);
	long _CheckSourceOrItemAccess(unsigned long,IShellItem *);
	long _CopyFilePlaceholderToNewFileAndWait(unsigned short const *,unsigned short const *,IFilePlaceholder *,CFilePlaceholderDownloadCallback *,unsigned long,Windows::Internal::FilePlaceholderHelper::FILL_PRIMARY_STREAM_CREATESTREAM_TYPE,Windows::Internal::FilePlaceholderHelper::SYNC_ROOT_OPERATION_FLAGS);
	long _CopySecurityInformation();
	long _CreateDestinationItemFromHandle(void *,_GUID const &,void * *);
	long _CreateFileWithRetry(unsigned __int64,unsigned long,void * *,FSITEMRESOURCEFLAGS *);
	long _CreatePlaceholderStatusNotCondition(unsigned int,_GUID const &,void * *);
	long _CreateSearchFolderItemOverPath(unsigned short const *,_GUID const &,void * *);
	long _DeleteFile(unsigned __int64,unsigned long,IShellItem *,unsigned short const *,IShellItem * *);
	long _DownloadPlaceholderFileInPlace(IShellItem *);
	long _FindUniqueName(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
	long _GetFSTransferCache(IFSTransferCache * *);
	long _GetFindDataForTransfer(IShellItem *,_WIN32_FIND_DATAW *);
	long _GetItemDest(unsigned short const *,unsigned long,IShellItem * *);
	long _GetResourceFlagsFromHandle(void *,FSITEMRESOURCEFLAGS *);
	long _HandleAccessDeniedSrcCDRom();
	long _HandleBadAttributes();
	long _HandleBaseApiErrors(long,unsigned long,unsigned long,IShellItem *);
	long _HandleBaseApiErrorsDest(long,unsigned long);
	long _HandleBaseApiErrorsSrc(long,unsigned long,IShellItem *);
	long _HandleDiskFull();
	long _HandleFileTooLarge();
	long _HandleFirstCopyCallback(void *,void *);
	long _HandleNameCollision(unsigned long);
	long _HandleRecycleErrors(long,unsigned long,unsigned long,IShellItem *);
	long _HandleReplace();
	long _HandleWrongType();
	long _InitRecycleBin();
	long _InitTransferInfoSrc(IShellItem *,IShellItem *,unsigned int,unsigned long);
	long _IsAllowedRecycleBinOperation(Windows::Internal::FilePlaceholderHelper::SYNC_ROOT_OPERATION_FLAGS,bool *);
	long _IsOperationUnderSameSyncRoot(Windows::Internal::FilePlaceholderHelper::SYNC_ROOT_OPERATION_FLAGS *);
	long _ModifyCreateFileParameters(unsigned long,unsigned long *,unsigned long *);
	long _OpenFileWithRetry(unsigned short const *,unsigned long,void * *,FSITEMRESOURCEFLAGS *);
	long _PerformCopyFileWithRetry(unsigned long);
	long _PerformCopyItemPostProcessing(unsigned long,COPY_ITEM_FLAGS,Windows::Internal::FilePlaceholderHelper::SYNC_ROOT_OPERATION_FLAGS,_GUID const &,void * *);
	long _PerformPlaceholderCopyWithRetry(IShellItem *,Windows::Internal::FilePlaceholderHelper::SYNC_ROOT_OPERATION_FLAGS,unsigned long);
	long _QueryForPauseOrCancelIfNeeded(long,long *,bool *);
	long _ReadPersistentACLs(void *,unsigned char * *,unsigned long *);
	long _RemoveDirectory(unsigned short const *);
	long _ResolveAccessDeniedCDRom(unsigned short const *);
	long _SameVolumeMoveOrRename(unsigned long,bool,IShellItem * *);
	long _SetNameDst(unsigned short const *);
	long _ShouldRetryCopy(long,unsigned long);
	long _WritePersistentACLs(void *,unsigned char const *,unsigned long);
	static _COPYFILE2_MESSAGE_ACTION s_CopyProgressCallback(COPYFILE2_MESSAGE const *,void *);
	static bool _IsMoveSecurityAttributesEnabled();
	unsigned long _GetCopyFileFlagsFromTransferSourceFlags(unsigned long);
	unsigned long _GetReparsePointTag(IShellItem *);
	virtual ~CFSTransfer();
	void _ClearTransferInfo();
	void _EnsureVolumeAttributes();
	void _ResetInheritedACL(_ACL *,unsigned short,unsigned long);
public:
	CFSTransfer(IShellItem *,HWND__ *);
	static long s_CreateInstance(IShellItem *,HWND__ *,unsigned short const *,_GUID const &,void * *);
	virtual long Advise(ITransferAdviseSink *,unsigned long *);
	virtual long ApplyPropertiesToItem(IShellItem *,IShellItem * *);
	virtual long ConfirmEncryptionLoss(IShellItem *);
	virtual long ConfirmOverwrite(IShellItem *,IShellItem *,unsigned short const *);
	virtual long CopyItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,COPY_ITEM_FLAGS,IShellItem * *);
	virtual long CreateItem(unsigned short const *,unsigned long,unsigned __int64,unsigned long,_GUID const &,void * *,_GUID const &,void * *);
	virtual long EnterFolder(IShellItem *);
	virtual long FileFailure(IShellItem *,unsigned short const *,long,unsigned short *,unsigned long);
	virtual long FindUniqueName(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
	virtual long GetDefaultDestinationName(IShellItem *,IShellItem *,unsigned short * *);
	virtual long GetDestinationFlags(IShellItem *,TRANSFERDESTFLAGS *);
	virtual long GetSourceFlags(IShellItem *,TRANSFERSOURCEFLAGS *);
	virtual long GetUsnSource(unsigned long *);
	virtual long IsCopySupported(IShellItem *,IShellItem *,int *);
	virtual long LastCopyError(LAST_COPYITEM_ERROR_TYPE *);
	virtual long LeaveFolder(IShellItem *);
	virtual long LinkItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long MoveItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long OpenItem(IShellItem *,unsigned long,_GUID const &,void * *);
	virtual long PropertyFailure(IShellItem *,_tagpropertykey const *,long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long RecycleItem(IShellItem *,IShellItem *,unsigned long,IShellItem * *);
	virtual long RemoveItem(IShellItem *,unsigned long);
	virtual long RenameItem(IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long SetEnterpriseId(unsigned short const *);
	virtual long SetFileOperationContext(IFileOperationContext *);
	virtual long SetProperties(IPropertyChangeArray *);
	virtual long SetRestrictions(TRANSFERRESTRICTIONS);
	virtual long SetUsnSource(unsigned long);
	virtual long SubStreamFailure(IShellItem *,unsigned short const *,long);
	virtual long Unadvise(unsigned long);
	virtual long UpdateProgress(unsigned __int64,unsigned __int64,int,int,int,int);
	virtual long UpdateTransferState(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFSTransferCache
{
	struct SAclCache
	{
		~SAclCache();
	};

	bool _HasSameInheritableACEs(_ACL *,_ACL *);
	long _GetDacl(unsigned short const *,CFSTransferCache::SAclCache *);
public:
	static long s_CreateInstance(_GUID const &,void * *);
	virtual long CompareInheritableDacls(unsigned short const *,unsigned short const *,int *);
	virtual long GetUniqueNameIndex(unsigned short const *,int,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetUniqueNameIndex(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFTAssocInfo
{
protected:
	int _IsValidProgID(unsigned short const *);
	long _ClassIDToProgID(unsigned short const *,unsigned short *,unsigned long);
	long _ClassKeyToProgID(HKEY__ *,unsigned short *,unsigned long);
	long _CreateProgID();
	long _ExtIsAssociated(int *);
	long _GetAppIcon(int,int *);
	long _GetExtDocIcon(unsigned short const *,int,int *);
	long _GetIconLocation(unsigned short *,unsigned long);
	long _GetOpenWithInfo(unsigned short *,unsigned long);
	long _GetProgIDActionAttributes(unsigned long *);
	long _GetProgIDDefaultAction(unsigned short *,unsigned long);
	long _GetProgIDDescr(unsigned short *,unsigned long);
	long _GetProgIDDocIcon(int,int *);
	long _GetProgIDEditFlags(unsigned long *);
	long _IsBrowseInPlace(int *);
	long _IsEditFlagSet(unsigned long,int *);
	long _SetBrowseInPlace(int);
	long _SetEditFlagSet(unsigned long,int);
	long _SetIconLocation(unsigned short const *);
	static _IMAGELIST * _himlSysLarge;
	static _IMAGELIST * _himlSysSmall;
public:
	CFTAssocInfo();
	virtual long Create();
	virtual long DelString(unsigned long);
	virtual long Delete(unsigned long);
	virtual long GetBOOL(unsigned long,int *);
	virtual long GetDWORD(unsigned long,unsigned long *);
	virtual long GetData(unsigned long,unsigned char *,unsigned long *);
	virtual long GetString(unsigned long,unsigned short *,unsigned long *);
	virtual long Init(unsigned long,unsigned short const *);
	virtual long InitComplex(unsigned long,unsigned short const *,unsigned long,unsigned short const *);
	virtual long InitWithClassKey(HKEY__ *,unsigned long,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetBOOL(unsigned long,int);
	virtual long SetDWORD(unsigned long,unsigned long);
	virtual long SetData(unsigned long,unsigned char *,unsigned long);
	virtual long SetString(unsigned long,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFTAssocStore
{
	static long _hresAccess;
public:
	virtual long CheckAccess();
	virtual long EnumAssocInfo(unsigned long,unsigned short const *,unsigned long,IEnumAssocInfo * *);
	virtual long GetAssocInfo(unsigned short const *,unsigned long,IAssocInfo * *);
	virtual long GetAssocInfoFromClassKey(HKEY__ *,unsigned short const *,unsigned long,IAssocInfo * *);
	virtual long GetComplexAssocInfo(unsigned short const *,unsigned long,unsigned short const *,unsigned long,IAssocInfo * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFTEnumAssocInfo
{
protected:
	int _EnumKCRSkip(unsigned long,unsigned short const *);
	long _EnumHKCR(unsigned long,unsigned short *,unsigned long);
	long _EnumProgIDActions(unsigned short *,unsigned long);
public:
	virtual long Clone(IEnumAssocInfo * *);
	virtual long Init(unsigned long,unsigned short const *,unsigned long);
	virtual long Next(IAssocInfo * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFadeTask
{
	CFadeTask();
	static unsigned long s_FadeSyncProc(void *);
	static unsigned long s_FadeThreadProc(void *);
	void _DoFade();
	void _DoPreFade();
	void _StopFade(int);
public:
	virtual long FadeRect(tagRECT const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFakeStreamForReadProbe
{
	CFakeStreamForReadProbe();
	virtual long Clone(IStream * *);
	virtual long Commit(unsigned long);
	virtual long CopyTo(IStream *,_ULARGE_INTEGER,_ULARGE_INTEGER *,_ULARGE_INTEGER *);
	virtual long LockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long Read(void *,unsigned long,unsigned long *);
	virtual long Revert();
	virtual long Seek(_LARGE_INTEGER,unsigned long,_ULARGE_INTEGER *);
	virtual long SetSize(_ULARGE_INTEGER);
	virtual long Stat(tagSTATSTG *,unsigned long);
	virtual long UnlockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long Write(void const *,unsigned long,unsigned long *);
};

struct CFallbackPropStore
{
	CFallbackPropStore(IItemStore *,tagITEMKEY const *,IShellFolder2 *,IViewStateInfo *);
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFileAssocList
{
	int _IsLink();
public:
	virtual long CreateAssoc(unsigned int,_GUID const &,void * *);
	virtual long GetStorageProviderData(STORAGE_PROVIDER_DATA *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetStorageProviderData(STORAGE_PROVIDER_DATA *);
	virtual unsigned int const * GetAssocTable(unsigned long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFileChunkMap
{
	struct ChunkLock
	{
		~ChunkLock();
	};

	long _AcquireLock(CFileChunkMap::ChunkLock *);
	long _AcquireLockAndCurrentChunkMapView(CFileChunkMap::ChunkLock *,unsigned long);
	long _CalculateExpandedRange(unsigned __int64,unsigned __int64,unsigned __int64 *,unsigned __int64 *,bool *);
	long _GetAlignedReadValues(unsigned __int64,unsigned __int64,bool,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *);
	long _OpenChunkMapFileHandle(unsigned long,unsigned short const *,unsigned __int64,bool *);
public:
	CFileChunkMap();
	virtual long Close();
	virtual long GetFileCompletionState(__MIDL___MIDL_itf_fileplaceholder_0000_0004_0001 *);
	virtual long GetFileSize(unsigned __int64 *);
	virtual long GetFirstUncachedChunk(unsigned __int64,unsigned __int64,int,unsigned __int64 *,unsigned __int64 *);
	virtual long MarkChunkCached(unsigned __int64,unsigned __int64);
	virtual long SetFileCompletionState(__MIDL___MIDL_itf_fileplaceholder_0000_0004_0001);
};

struct CFileChunkMapAccessChannel
{
	long GetLastKnownFileCompletionState(__MIDL___MIDL_itf_fileplaceholder_0000_0004_0001 *);
	long SetMapFileSize(void *,unsigned __int64);
	long UpdateFileCompletionState(__MIDL___MIDL_itf_fileplaceholder_0000_0004_0001);
	static long s_OpenChannel(unsigned short const *,unsigned __int64,void * *,CFileChunkMapAccessChannel * *);
};

class CFileChunkMapView
{
	static long s_OpenFileChunkMapView(void *,void * *,CFileChunkMapView * *);
public:
	bool IsChunkMapValid(void *,unsigned __int64);
	long CalculateLocalCompletionState(__MIDL___MIDL_itf_fileplaceholder_0000_0004_0001 *);
	long GetAlignedBeginAndEndForPositionAndSize(unsigned __int64,unsigned __int64,unsigned __int64 *,unsigned __int64 *);
	long GetAllSetBitsForChunkMapByte(unsigned __int64,unsigned __int64,unsigned char *);
	long GetChunkCachedAt(unsigned __int64,bool *);
	long GetChunkSize(unsigned __int64 *);
	long GetPrimaryStreamSize(unsigned __int64 *);
	long UpdateMapWithFileCompletionState(__MIDL___MIDL_itf_fileplaceholder_0000_0004_0001);
	static long s_OpenViewOnAccessChannel(CFileChunkMapAccessChannel &,void *,unsigned __int64,PLACEHOLDER_STATES,bool,void * *,CFileChunkMapView * *);
};

class CFileExtension
{
protected:
	int _ShouldShowExtension(int);
	long _EnsureIconIndex(int,int,bool,unsigned short,int *);
	long _EnsureKinds();
	long _GetIconLocation(unsigned short * *,int);
	unsigned long _EnsureClassFlags(int,int);
	unsigned long _GetFlagsFromAssocArray(IAssociationArray *,int);
	virtual long _EnsureAssocArray(CFFFLAGS,_GUID const &,void * *);
	virtual long _GetRawKinds(unsigned short * *);
	virtual unsigned long _GetExtensionFlags(int);
public:
	long GetFilterClsid(_GUID *);
	long GetTypeName(unsigned short *,unsigned long);
	virtual int ShouldShowExtension();
	virtual long GetIcon(unsigned long,int *);
	virtual unsigned long ClassFlags();
	virtual unsigned short const * Class();
	virtual unsigned short const * ItemType();
	virtual ~CFileExtension();
};

class CFileFolderIconManager
{
	virtual long _SetDefaultIconEx(int);
	virtual long _SetIconEx(unsigned short const *,int,int);
public:
	virtual long GetIcon(unsigned short *,int,int *);
};

class CFileGroupDescriptorReader
{
	bool _IsFileNamePresent(unsigned short const *,unsigned int);
	long _GetDataWithAspectFallback(IDataObject *,unsigned short);
public:
	long GetDescriptor(unsigned int,_FILEDESCRIPTORW *);
	long GetDescriptorWithNameCleanup(unsigned short const *,unsigned int,_FILEDESCRIPTORW *);
	long Initialize(IDataObject *);
	unsigned __int64 GetTotalFileSize();
	unsigned int Size();
};

class CFileInUsePLMResolver
{
	long _CloseFile(CFileInUsePLMResolver::CloseType);
public:
	CFileInUsePLMResolver();
	virtual long CloseFile();
	virtual long GetAppName(unsigned short * *);
	virtual long GetCapabilities(unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFile(unsigned short * *);
	virtual long GetSwitchToHWND(HWND__ * *);
	virtual long GetUsage(FILE_USAGE_TYPE *);
	virtual long IsDirty();
	virtual long Load(unsigned short const *,unsigned long);
	virtual long Save(unsigned short const *,int);
	virtual long SaveCompleted(unsigned short const *);
};

struct CFileInUseRestartManager
{
	long Initialize(IShellItem *);
	virtual long CloseFile();
	virtual long GetAppName(unsigned short * *);
	virtual long GetCapabilities(unsigned long *);
	virtual long GetSwitchToHWND(HWND__ * *);
	virtual long GetUsage(FILE_USAGE_TYPE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFileInUseWrapper
{
	long _GetAppNameFromCLSID(_GUID const &,unsigned short * *);
public:
	virtual long CloseFile();
	virtual long GetAppName(unsigned short * *);
	virtual long GetCapabilities(unsigned long *);
	virtual long GetSwitchToHWND(HWND__ * *);
	virtual long GetUsage(FILE_USAGE_TYPE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFilePlaceholder
{
	long _ClearChunkMap();
	long _CreateLocalFileStream(FILE_PLACEHOLDER_STREAM_HANDLER,unsigned short const *,unsigned long,_GUID const &,void * *);
	long _GetFileDataFromHandle(void *);
	long _RestoreLastModifiedDateAndUpdateInternalState(void *);
	long _SetExtrinsicPropertyStoreFileNameAndGrfMode();
public:
	CFilePlaceholder();
	virtual long ClearPrimaryStream();
	virtual long GetExtrinsicPropertyStore(IPropertyStore * *);
	virtual long GetPlaceholderStates(PLACEHOLDER_STATES *);
	virtual long GetUsnSource(unsigned long *);
	virtual long Initialize(unsigned short const *,unsigned long);
	virtual long InitializeWithFindData(unsigned short const *,_WIN32_FIND_DATAW const &,unsigned long);
	virtual long OpenPrimaryStreamAsync(FILE_PLACEHOLDER_STREAM_HANDLER,FILE_PLACEHOLDER_OPEN_OPTION,unsigned long,IFilePlaceholderCallback *);
	virtual long OpenPrimaryStreamAsyncWithQos(FILE_PLACEHOLDER_STREAM_HANDLER,FILE_PLACEHOLDER_OPEN_OPTION,unsigned long,IFilePlaceholderCallback *,IQosRecorder *);
	virtual long Save(unsigned short const *,PLACEHOLDER_SAVE_OPTION);
	virtual long SetFileCompletionState(IFileHandle *,FILE_PLACEHOLDER_COMPLETION_STATE);
	virtual long SetPlaceholderStatesAsync(PLACEHOLDER_STATES,PLACEHOLDER_STATES,IFilePlaceholderCallback *);
	virtual long SetPlaceholderStatesAsyncWithQos(PLACEHOLDER_STATES,PLACEHOLDER_STATES,IFilePlaceholderCallback *,IQosRecorder *);
	virtual long SetUsnSource(unsigned long);
	virtual long UpdatePlaceholderInformationAndGetChunkMap(IFileHandle *,_GUID const &,void * *);
};

struct CFilePlaceholderCallbackCrashDetector
{
	CFilePlaceholderCallbackCrashDetector();
	virtual long OnComplete(long);
	virtual long OnCompleteForThumbnail(long,unsigned int,unsigned int);
	virtual long OnCompleteWithResult(long,IUnknown *);
	virtual long OnProgress(unsigned __int64,unsigned __int64);
	virtual long ShouldContinue();
};

struct CFilePlaceholderDownloadCallback
{
	long RuntimeClassInitialize(ITransferAdviseSink *);
	long WaitForCompletion();
	virtual long OnComplete(long);
	virtual long OnCompleteForThumbnail(long,unsigned int,unsigned int);
	virtual long OnCompleteWithResult(long,IUnknown *);
	virtual long OnProgress(unsigned __int64,unsigned __int64);
	virtual long ShouldContinue();
};

class CFilePlaceholderRemoteStream
{
	long _InitializeEventHandle();
	void _SetIsTimeout(bool);
public:
	CFilePlaceholderRemoteStream();
	virtual long BeginOperation();
	virtual long CancelOperation();
	virtual long Clone(IStream * *);
	virtual long Commit(unsigned long);
	virtual long CopyTo(IStream *,_ULARGE_INTEGER,_ULARGE_INTEGER *,_ULARGE_INTEGER *);
	virtual long LockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long OnComplete(long);
	virtual long OnCompleteForThumbnail(long,unsigned int,unsigned int);
	virtual long OnCompleteWithResult(long,IUnknown *);
	virtual long OnProgress(unsigned __int64,unsigned __int64);
	virtual long Read(void *,unsigned long,unsigned long *);
	virtual long ReadAtPosition(_LARGE_INTEGER,unsigned char *,unsigned long,unsigned long *);
	virtual long Revert();
	virtual long Seek(_LARGE_INTEGER,unsigned long,_ULARGE_INTEGER *);
	virtual long SetSize(_ULARGE_INTEGER);
	virtual long ShouldContinue();
	virtual long Stat(tagSTATSTG *,unsigned long);
	virtual long UnlockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long WaitOnComplete(unsigned long);
	virtual long Write(void const *,unsigned long,unsigned long *);
	virtual ~CFilePlaceholderRemoteStream();
};

class CFilePlaceholderThumbnailCallback
{
	long _OnComplete(long);
public:
	virtual long OnComplete(long);
	virtual long OnCompleteForThumbnail(long,unsigned int,unsigned int);
	virtual long OnCompleteWithResult(long,IUnknown *);
	virtual long OnProgress(unsigned __int64,unsigned __int64);
	virtual long ShouldContinue();
};

class CFilePlaceholderThumbnailHandler
{
	long _GetThumbnailInternal(HBITMAP__ * *,WTS_ALPHATYPE *);
	long _RetrieveThumbnailStreamFromResolver(IPropertyStore *,IStream * *);
public:
	CFilePlaceholderThumbnailHandler();
	virtual long Extract(HBITMAP__ * *);
	virtual long GetLocation(unsigned short *,unsigned long,unsigned long *,tagSIZE const *,unsigned long,unsigned long *);
	virtual long GetThumbnail(unsigned int,HBITMAP__ * *,WTS_ALPHATYPE *);
	virtual long Initialize(IShellItem *,unsigned long);
};

class CFilePropSheetPage
{
	__int64 _AdvancedFileAttribsDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _MultiplePrshtDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _SingleFilePrshtDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _ApplyMultipleThreadProc();
	int _ApplyRename(int);
	int _ApplySingleThreadProc();
	int _InitMultiplePrsht();
	int _InitSingleFilePrsht();
	int _IsBadAttributeFile(unsigned short const *);
	int _RunWorker(unsigned long (*)(void *));
	int _SetAttributePromptText(HWND__ *,int *);
	int _WaitForWorker();
	long _AddPathToClipboard(_ITEMIDLIST_ABSOLUTE const *);
	long _CopyToClipboard();
	long _ShowElevationDialog(HWND__ *);
	long _UpdateProgressBar();
	static __int64 s_AdvancedFileAttribsDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_SingleFilePrshtDlgCopySubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static long ElevationDialogCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	void _DisplayApplyError(unsigned int);
	void _FreeDlgDependentInfo();
	void _HideMotw();
	void _OnInitRecursivePrompt(HWND__ *);
	void _UpdateSizeCount();
	void _UpdateTriStateCheckboxes();
protected:
	int _ApplyFileAttributesRetainElevatedHelper(unsigned short const *,HWND__ *,int *);
	int _ApplyRecursiveFolderAttribsRetainElevatedHelper(unsigned short const *);
	int _CreateAttributeProgressDlg();
	int _DestroyAttributeProgressDlg();
	long _UpdateOpensWithInfo();
	virtual ~CFilePropSheetPage();
	void _SetInitialFileAttribs(unsigned long,unsigned long);
	void _UpdateSizeField(_WIN32_FIND_DATAW const *);
public:
	int ApplyFileAttributes(unsigned short const *,HWND__ *,int *);
	int ApplyMultipleFileAttributes();
	int ApplyRecursiveFolderAttribs(unsigned short const *);
	int ApplySingleFileAttributes();
	int HasUserCanceledAttributeProgressDlg();
	long GetFolderContentsInfo(CFolderContentsInfo * *);
	long InitCommonPrsht();
	long InitWithItems(IShellItemArray *,IBindCtx *);
	static __int64 s_MultiplePrshtDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_RecursivePromptDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_SingleFilePrshtDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned long s_ApplyMultipleThreadProc(void *);
	static unsigned long s_ApplySingleThreadProc(void *);
	unsigned long Release();
	void ApplyFileAttributesAsync(ATTRIBUTESTATE const *,HWND__ *);
};

struct CFilePropSheetPageHelper
{
	virtual long CompressFile(unsigned short const *,int);
	virtual long EncryptFileW(unsigned short const *,int,int,HWND__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveZoneInfo(unsigned short const *);
	virtual long SetAttributes(unsigned short const *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFileSource
{
	long _GetAllCandidates(CRefCountedDPA<CDPAItemIdList<_ITEMIDLIST_ABSOLUTE> > * *);
	long _GetCandidateFilePosition(unsigned short const *,unsigned long *);
	long _GetShellFolder(IShellFolder * *);
	long _GetShellItem(IShellItem * *);
	static bool s_CompareArrays(CRefCountedDPA<CDPAItemIdList<_ITEMIDLIST_ABSOLUTE> > *,CRefCountedDPA<CDPAItemIdList<_ITEMIDLIST_ABSOLUTE> > *);
	static bool s_CompareItems(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	static bool s_ExtensionIsWallpaperFile(unsigned short const *);
	static long s_LoadPIDL(ICachedPrivateProfile *,unsigned short const *,unsigned short const *,bool,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *,bool *);
	static long s_LoadPIDLFromPath(ICachedPrivateProfile *,unsigned short const *,unsigned short const *,bool,_ITEMIDLIST_ABSOLUTE * *,bool *);
	static long s_SaveChildPIDL(CMultiSzBuilderW *,_ITEMIDLIST_RELATIVE const *,unsigned long);
	static long s_SavePIDL(CMultiSzBuilderW *,unsigned short const *,_ITEMIDLIST_RELATIVE const *);
	void _RemoveExtraSections(ICachedPrivateProfile *,unsigned long);
public:
	bool IsEqual(CFileSource *);
	long GetCandidates(unsigned short const *,GCF_FLAGS,int *,CWallpaperCollection * *);
	long GetSpecificFile(unsigned long,_ITEMIDLIST_ABSOLUTE * *);
	long Save(ICachedPrivateProfile *);
	static bool s_IsItemValidWallpaper(IShellItem *);
	static long s_ConvertToShellItemArray(CFileSource *,IShellItemArray * *);
	static long s_CreateFromShellItemArray(IShellItemArray *,CFileSource * *);
	static long s_CreateFromShellItems(_ITEMIDLIST_ABSOLUTE const *,IShellItemArray *,CFileSource * *);
	static long s_LoadFromProfile(ICachedPrivateProfile *,CFileSource * *);
	unsigned long GetSpecificFileCount();
	unsigned long Release();
};

struct CFileSysBindData
{
	virtual long GetFileID(_LARGE_INTEGER *);
	virtual long GetFindData(_WIN32_FIND_DATAW *);
	virtual long GetJunctionCLSID(_GUID *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFileID(_LARGE_INTEGER);
	virtual long SetFindData(_WIN32_FIND_DATAW const *);
	virtual long SetJunctionCLSID(_GUID const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFileSysItemString
{
protected:
	KNOWNHANDLERTYPE _HandlerTypeStringToKnownHandlerType(unsigned short const *);
	int _ResourceName(unsigned short *,unsigned long);
	long _EnsureFolderType();
	long _GetCustomClass(unsigned short * *);
	long _GetFindDataAllowSimpleHelper(tagWIN32_FIND_DATA_EX *);
	long _LookupFileClassKnownHandler(KNOWNHANDLERTYPE,_GUID *,HANDLERFLAGS *);
	long _PropertyHandlerCreateInstance(HANDLERFLAGS,_GUID const &,EXTCOCREATEFLAGS,unsigned long,IOplockProvider *,_GUID const &,void * *);
	unsigned short const * _Class(int);
	virtual long _EnsureAssocArray(CFFFLAGS,_GUID const &,void * *);
	virtual long _GetRawKinds(unsigned short * *);
	virtual unsigned long _GetExtensionFlags(int);
	void _LookupFileSystemPropertyOverridesForHandler(_GUID const &,HANDLERFLAGS *);
	void _SetFileClassKnownHandler(KNOWNHANDLERTYPE,_GUID const &,HANDLERFLAGS);
public:
	CFileSysItemString(CFSFolder *,_ITEMIDLIST_RELATIVE const *,IDFOLDER const *);
	FOLDER_ENUM_MODE GetEnumMode();
	bool FileHasPlaceholderReparsePointTag();
	char const * AltName();
	int GetJunctionClsid(FSIS_JUNCTION_FLAGS,_GUID *);
	int IsSimple();
	long ClassIconFlags(unsigned long,int *,unsigned long *);
	long GetFileID(unsigned __int64 *);
	long GetFindData(GET_FIND_DATA_FLAGS,tagWIN32_FIND_DATA_EX *);
	long GetHandlerClsidAndFlags(unsigned short const *,_GUID *,HANDLERFLAGS *);
	long HandlerCreateInstance(HANDLERFLAGS,_GUID const &,EXTCOCREATEFLAGS,unsigned long,IOplockProvider *,_GUID const &,void * *);
	long LoadHandler(unsigned long,unsigned short const *,IBindCtx *,IOplockProvider *,_GUID const &,_GUID const &,void * *);
	tagPERCEIVED PerceivedType();
	unsigned long GetReparsePointTag();
	unsigned short const * FSName();
	unsigned short const * FSNameExtension();
	unsigned short const * MayCopyFSName(int,unsigned short *,unsigned long);
	unsigned short const * ResourceName();
	unsigned short const * UIName(FSIS_UINAME_OPTIONS);
	virtual int ShouldShowExtension();
	virtual long GetIcon(unsigned long,int *);
	virtual unsigned long ClassFlags();
	virtual unsigned short const * Class();
	virtual unsigned short const * ItemType();
	virtual ~CFileSysItemString();
};

class CFileSystemDriveProps
{
protected:
	virtual ~CFileSystemDriveProps();
public:
	CFileSystemDriveProps(CMountPoint *,unsigned short const *);
	virtual long GetAttributes(unsigned long *);
	virtual long GetCapacity(unsigned __int64 *,unsigned __int64 *);
	virtual long GetDisplayName(unsigned short *,int);
	virtual long GetFileSystem(unsigned short *,int);
	virtual long GetIcon(HICON__ * *);
	virtual long GetPath(unsigned short *,int);
	virtual long GetType(unsigned short *,int);
	virtual long GetVolumeLabel(unsigned short *,int,int *,unsigned int *);
};

struct CFillIDLTreeWalkCB
{
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFilterCondition
{
	long _Initialize(unsigned short const *,unsigned short const *,_tagpropertykey const &,FC_FLAGS,ICondition *);
public:
	static long s_CreateInstance(unsigned short const *,unsigned short const *,_tagpropertykey const &,FC_FLAGS,ICondition *,_GUID const &,void * *);
	virtual long AddFromArray(IObjectArray *);
	virtual long AddObject(IUnknown *);
	virtual long Clear();
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetClassID(_GUID *);
	virtual long GetCondition(ICondition * *);
	virtual long GetCount(unsigned int *);
	virtual long GetFilterName(FC_FILTERNAME,unsigned short * *);
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetTypeFlags(FC_FLAGS *);
	virtual long IsDirty();
	virtual long Load(IStream *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveObjectAt(unsigned int);
	virtual long Save(IStream *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFilterConditionCategorizer
{
protected:
	long AppendFilterCondition(IFilterCondition *);
	virtual long OnGetFilterCondition(unsigned long,IFilterCondition * *);
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
	virtual ~CFilterConditionCategorizer();
};

class CFilterControl
{
	int _AreFilterWorkerItemsEqual(IFilterWorkerItem *,IFilterWorkerItem *);
	int _GetSpinnerIndex();
	int _HasFilterStatesChanged();
	long _ApplyFilters();
	long _CreatePropertyControl(_GUID *,IPropertyControl * *);
	long _GetCheckedFilters(CDPA<IFilterCondition,CTContainer_PolicyUnOwned<IFilterCondition> > *);
	long _GetColumnName(_tagpropertykey,unsigned short *,int);
	long _GetFilterForCheckedItems(IFilterCondition * *);
	long _GetOrFilterName(CDPA<IFilterCondition,CTContainer_PolicyUnOwned<IFilterCondition> > *,unsigned short * *);
	long _InitPropertyControl();
	long _InsertFilter(int,unsigned short const *);
	long _InsertFilterWorkerItem(int,IFilterWorkerItem *,unsigned short const *);
	long _InsertFilters(int);
	long _MergeFilterCollection(IObjectCollection *);
	long _OnCheckItem(unsigned int,int);
	long _ResetPropCtrlValue();
	long _ShowIncrementalProgress();
	unsigned int _GetCheckedCount();
	void _AddPropCtrlText();
	void _CheckAndApplyFilter(int);
	void _UncheckAllFilters();
public:
	virtual long CreateAndShow(unsigned int,_tagpropertykey,FCFLAGS,FICFLAGS,HWND__ *,tagPOINT,int,int,IFilterControlCallback *,IFilterCondition *);
	virtual long Destroy();
	virtual long GetItemState(LVPVIEWID,tagLVITEMW * const,int *);
	virtual long HasPropertyControl();
	virtual long IsVisible();
	virtual long OnCreated();
	virtual long OnDestroy();
	virtual long OnDismiss(int);
	virtual long OnGetSearchText(SEARCHTEXTTYPE,unsigned short *,unsigned int);
	virtual long OnItemChanged(LVPVIEWID,tagNMLISTVIEW const *,int);
	virtual long OnItemFocused(LVPVIEWID,tagLVITEMW * const,tagLVITEMW * const);
	virtual long OnItemInvoke(LVPVIEWID,tagLVITEMW * const);
	virtual long OnItemRemoved(REMOVEITEMTYPE,LVPVIEWID,tagLVITEMW * const);
	virtual long OnMouseLeave();
	virtual long OnPropCtrlInvoke(IFilterCondition *);
	virtual long OnRequestReposition(tagRECT const *);
	virtual long OnSpinnerCancel(LVPVIEWID);
	virtual long OnToolBarItemInvoke(int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFilterCollection(SFCFLAGS,IObjectCollection *);
	virtual long SetPosition(unsigned int,unsigned int);
	virtual long SpecialCharacter(tagMSG const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFilterDispatchEvent
{
	virtual void DispatchEvent();
	virtual ~CFilterDispatchEvent();
};

struct CFilterEventSink
{
	virtual long OnFiltersCreated(IObjectCollection *,_tagpropertykey const &);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFilterSmoother
{
	CFilterSmoother(double const *,int,double const *,int,int,double);
public:
	double GetNext(double);
	static long s_CreateInstance(double const *,int,double const *,int,int,double,CFilterSmoother * *);
};

class CFilterTask
{
	long _AddFilterRecord(tagITEMKEY const *,ITEM_FLAGS,ITEM_FLAGS);
	virtual ~CFilterTask();
	void _FilterItems(IShellFolder2 *);
	void _PostIncrResult(IShellFolder2 *);
	void _PushBatchToView(IShellFolder2 *,CDSA<tagITEMKEY> *,CDSA<tagITEMKEY> *);
public:
	long Initialize(FILTER_TASK_INIT_DATA const *);
	virtual long InternalResumeRT();
};

struct CFilterWorkerItem
{
	virtual long GetCount(int *);
	virtual long GetFilterCondition(_GUID const &,void * *);
	virtual long GetFlags(FISFLAGS *);
	virtual long GetOrigFlags(FISFLAGS *);
	virtual long Init(int,FISFLAGS,IFilterCondition *);
	virtual long InitFlags(FISFLAGS);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFlags(FISFLAGS);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFindExtensionsMenu
{
	unsigned int _AddStatic(HMENU__ *,unsigned int,unsigned int,HKEY__ *);
	unsigned int _AddVerbs(HKEY__ *,_QCMINFO *);
	void _InvokeStatic(unsigned int);
public:
	bool Initialize(HMENU__ *,unsigned int,unsigned int);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFlyoutMenuCallback
{
	virtual long CallbackSM(tagSMDATA *,unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFocusIndicator
{
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class CFolder
{
	IShellDetails * _GetShellDetails();
	long _Application(IDispatch * *);
	long _MoveOrCopy(unsigned int,tagVARIANT,tagVARIANT);
	long _ParentFolder(Folder * *);
	virtual ~CFolder();
public:
	CFolder(HWND__ *);
	long GetShellFolderView(IShellFolderView * *);
	long Init(_ITEMIDLIST_RELATIVE const *,IShellFolder *);
	long InvokeVerbHelper(tagVARIANT,tagVARIANT,_ITEMID_CHILD const * const *,int,unsigned long);
	virtual long CopyHere(tagVARIANT,tagVARIANT);
	virtual long DismissedWebViewBarricade();
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDetailsOf(tagVARIANT,int,unsigned short * *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long Items(FolderItems * *);
	virtual long MoveHere(tagVARIANT,tagVARIANT);
	virtual long NewFolder(unsigned short *,tagVARIANT);
	virtual long ParseName(unsigned short *,FolderItem * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetOwner(IUnknown *);
	virtual long SetSite(IUnknown *);
	virtual long Synchronize();
	virtual long get_Application(IDispatch * *);
	virtual long get_HaveToShowWebViewBarricade(short *);
	virtual long get_OfflineStatus(long *);
	virtual long get_Parent(IDispatch * *);
	virtual long get_ParentFolder(Folder * *);
	virtual long get_Self(FolderItem * *);
	virtual long get_ShowWebViewBarricade(short *);
	virtual long get_Title(unsigned short * *);
	virtual long put_ShowWebViewBarricade(short);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolder2Shim
{
	long _EnsureCallback();
public:
	long Initialize(IShellFolder *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFolderAttribTreeWalker
{
	virtual long EnterFolder(unsigned short const *,TREEWALKERSTATS const *,_WIN32_FIND_DATAW const *);
	virtual long FoundFile(unsigned short const *,TREEWALKERSTATS const *,_WIN32_FIND_DATAW const *,unsigned __int64);
};

struct CFolderContentsInfo
{
	long FolderSize(unsigned short const *);
	static unsigned long s_SizeThreadProc(void *);
	unsigned long Release();
	void CreateSizeThread();
	void SizeThreadProc();
};

class CFolderCustomize
{
	int _HandleWMCommand(HWND__ *,unsigned short,unsigned short,HWND__ *);
	int _NotifyAboutWebView(HWND__ *);
	int _RestoreSpecialFolder(HWND__ *);
	int _ShouldEnableChangeOfThumbnail();
	long _ApplyChanges(HWND__ *);
	long _ApplyChangesToBag(HWND__ *,IPropertyBag *,int);
	long _GetDesktopIni(ICachedPrivateProfile * *);
	long _GetPropBagForDesktopIni(IPropertyBag * *);
	long _ProcessIconChange(unsigned short const *,HWND__ *);
	static __int64 _DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned int _PrshtCallback(HWND__ *,unsigned int,_PROPSHEETPAGEW *);
	void _ChangeFolderIcon(HWND__ *);
	void _CreateFolderIcon(HWND__ *);
	void _DeleteCustomizationInBag(IPropertyBag *);
	void _DirTouch(_ITEMIDLIST_ABSOLUTE const *);
	void _EnableApply(HWND__ *);
	void _FillTemplateComboBox(HWND__ *);
	void _HideIconSection(HWND__ *);
	void _HideThumbnailSection(HWND__ *);
	void _InitDialog(HWND__ *);
	void _SetRecurseBox(HWND__ *);
	void _SetThumbnail(HWND__ *);
	void _UpdateViewState(HWND__ *,IPropertyBag *,int,int);
public:
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderInfoTip
{
	long _BufferInsert(unsigned short *,unsigned int *,unsigned int,unsigned short const *,unsigned int);
	long _BuildFileBlurb(long,unsigned short *,unsigned long);
	long _BuildFolderBlurb(long,unsigned short *,unsigned long);
	long _BuildSizeBlurb(long,unsigned short *,unsigned long);
	long _CheckEllapsedTime();
	long _WalkNameSpace(unsigned short *,unsigned long);
public:
	CFolderInfoTip();
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long GetInfoFlags(unsigned long *);
	virtual long GetInfoTip(unsigned long,unsigned short * *);
	virtual long GetParentAndItem(_ITEMIDLIST_ABSOLUTE * *,IShellFolder * *,_ITEMID_CHILD * *);
	virtual long InitializeFolderInfoTip(IUnknown *,IUnknown *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetExtraProperties(_tagpropertykey const *,unsigned int);
	virtual long SetParentAndItem(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_ITEMID_CHILD const *);
	virtual long SetPrefixText(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderItem
{
	long _CheckAttribute(unsigned long,short *);
	long _GetUIObjectOf(_GUID const &,void * *);
	long _ItemName(unsigned int,unsigned short * *);
	long _SecurityCheck();
public:
	CFolderItem();
	long Init(CFolder *,_ITEMID_CHILD const *);
	static _ITEMID_CHILD * _GetIDListFromVariant(tagVARIANT const *);
	virtual long ExtendedProperty(unsigned short *,tagVARIANT *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetParentAndItem(_ITEMIDLIST_ABSOLUTE * *,IShellFolder * *,_ITEMID_CHILD * *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long InvokeVerb(tagVARIANT);
	virtual long InvokeVerbEx(tagVARIANT,tagVARIANT);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetParentAndItem(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_ITEMID_CHILD const *);
	virtual long Verbs(FolderItemVerbs * *);
	virtual long get_Application(IDispatch * *);
	virtual long get_GetFolder(IDispatch * *);
	virtual long get_GetLink(IDispatch * *);
	virtual long get_IsBrowsable(short *);
	virtual long get_IsFileSystem(short *);
	virtual long get_IsFolder(short *);
	virtual long get_IsLink(short *);
	virtual long get_ModifyDate(double *);
	virtual long get_Name(unsigned short * *);
	virtual long get_Parent(IDispatch * *);
	virtual long get_Path(unsigned short * *);
	virtual long get_Size(long *);
	virtual long get_Type(unsigned short * *);
	virtual long put_ModifyDate(double);
	virtual long put_Name(unsigned short *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFolderItemVerb
{
	virtual long DoIt();
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Application(IDispatch * *);
	virtual long get_Name(unsigned short * *);
	virtual long get_Parent(IDispatch * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderItemVerbs
{
	virtual ~CFolderItemVerbs();
public:
	CFolderItemVerbs(IContextMenu *);
	int Init();
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long Item(tagVARIANT,FolderItemVerb * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long _NewEnum(IUnknown * *);
	virtual long get_Application(IDispatch * *);
	virtual long get_Count(long *);
	virtual long get_Parent(IDispatch * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderItems
{
protected:
	_DPA * _GetHDPA();
	__int64 _CopyItem(unsigned int,_ITEMID_CHILD const *);
	int _IncludeItem(IShellFolder *,_ITEMID_CHILD *);
	long _GetUIObjectOf(_GUID const &,void * *);
	long _SecurityCheck();
	unsigned int _GetHDPACount();
	virtual long _EnsureItem(unsigned int,_ITEMID_CHILD * *);
	virtual ~CFolderItems();
	void _ResetIDListArray();
public:
	CFolderItems(CFolder *,int);
	virtual long Filter(long,unsigned short *);
	virtual long GetClassID(_GUID *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long InvokeVerbEx(tagVARIANT,tagVARIANT);
	virtual long Item(tagVARIANT,FolderItem * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long _NewEnum(IUnknown * *);
	virtual long get_Application(IDispatch * *);
	virtual long get_Count(long *);
	virtual long get_Parent(IDispatch * *);
	virtual long get_Verbs(FolderItemVerbs * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderItemsMultiLevel
{
protected:
	_DPA * _GetHDPA();
	long _GetUIObjectOf(_GUID const &,void * *);
	long _SecurityCheck();
	unsigned int _GetHDPACount();
	virtual long _EnsureItem(unsigned int,_ITEMIDLIST_RELATIVE * *);
	virtual ~CFolderItemsMultiLevel();
public:
	virtual long Filter(long,unsigned short *);
	virtual long GetClassID(_GUID *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long InsertItem(_ITEMIDLIST_RELATIVE const *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long InvokeVerbEx(tagVARIANT,tagVARIANT);
	virtual long Item(tagVARIANT,FolderItem * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long _NewEnum(IUnknown * *);
	virtual long get_Application(IDispatch * *);
	virtual long get_Count(long *);
	virtual long get_Parent(IDispatch * *);
	virtual long get_Verbs(FolderItemVerbs * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderMenu
{
	CFolderMenu(IShellFolder *,unsigned int,int,HWND__ *);
	FOLDERMENUITEMDATA const * FindItemByCommandId(HMENU__ *,unsigned int);
	FOLDERMENUITEMDATA const * FindItemByVerbName(HMENU__ *,_CMINVOKECOMMANDINFO const *);
	long _AllocFolderMenuItemData(IExplorerCommand *,IShellItemArray *,CFolderMenu::ICONSTATE,FOLDERMENUITEMDATA * *);
	long _ComposeMenuFromCommandFolder(IShellFolder *,IShellItemArray *,HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int *,unsigned int);
	long _ComposeMenuFromEnumCommand(IEnumExplorerCommand *,IShellItemArray *,HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int *);
	long _EnsureTaskScheduler();
	long _GetRightSideAndTotalCommand(IEnumIDList *,IShellFolder *,IShellItemArray *,unsigned int *,unsigned int *);
	long _GetSelection(IShellItemArray * *);
	long _InsertCommandToMenu(IExplorerCommand *,IShellItemArray *,HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int *,CommandMenuFlags *,CFolderMenu::ICONSTATE,unsigned int *);
	long _MatchMenuItem(HMENU__ *,unsigned short,__int64 *);
	long _UpdateBackgroundTaskMenuItem(HMENU__ *,unsigned int,unsigned long);
	static int s_FreeMenuItemData(FOLDERMENUITEMDATA *,void *);
	virtual ~CFolderMenu();
public:
	CFolderMenu();
	static long CreateInstance(IShellFolder *,unsigned int,int,HWND__ *,_GUID const &,void * *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long OnTaskComplete(unsigned int,unsigned long);
	virtual long OnTaskStart();
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetEnumExplorerCommand(IEnumExplorerCommand *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFolderOptionsCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
};

class CFolderOptionsPsx
{
	static unsigned int PropCallback(HWND__ *,unsigned int,_PROPSHEETPAGEW *);
public:
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderShortcut
{
	int _ShouldResolveOnBindToObject(IBindCtx *);
	long _BindFolder(int);
	long _CleanUpBindCtx(IBindCtx * *);
	long _GetFolder(int);
	long _GetFolder2();
	long _GetLink();
	long _GetLinkA();
	long _GetLinkQI(_GUID const &,void * *);
	long _GetTargetFolder(_GUID const &,void * *);
	long _GetTargetIDList(int);
	long _GetTargetPath(unsigned short *,unsigned long);
	long _LoadShortcut();
	long _PreBindCtxHelper(IBindCtx * *);
	void _ClearState();
	void _ClearTargetFolder();
	~CFolderShortcut();
public:
	CFolderShortcut();
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateFilteredIDList(IFilterCondition *,tagFILTERIDLISTTYPE,IPropertyStore *,_ITEMID_CHILD * *);
	virtual long CreateStackedIDList(_tagpropertykey const &,_ITEMIDLIST_ABSOLUTE * *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumObjectsEx(HWND__ *,IBindCtx *,unsigned long,IItemFilter *,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetArguments(char *,int);
	virtual long GetArguments(unsigned short *,int);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetAutoListFlags(unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetConditions(_tagpropertykey const &,CONDITIONSOURCEFLAGS,_GUID const &,void * *);
	virtual long GetCurFile(unsigned short * *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDescription(char *,int);
	virtual long GetDescription(unsigned short *,int);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFilteredIDListType(_ITEMID_CHILD const *,tagFILTERIDLISTTYPE *);
	virtual long GetFolderTargetInfo(_PERSIST_FOLDER_TARGET_INFO *);
	virtual long GetFrameOptions(unsigned long,unsigned long *);
	virtual long GetHotkey(unsigned short *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetIconLocation(char *,int,int *);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long GetIconLocation(unsigned short *,int,int *);
	virtual long GetInfoFlags(unsigned long *);
	virtual long GetInfoTip(unsigned long,unsigned short * *);
	virtual long GetOverlayIconIndex(_ITEMID_CHILD const *,int *);
	virtual long GetOverlayIndex(_ITEMID_CHILD const *,int *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetPath(char *,int,_WIN32_FIND_DATAA *,unsigned long);
	virtual long GetPath(unsigned short *,int,_WIN32_FIND_DATAW *,unsigned long);
	virtual long GetRealLocations(IShellItemArray * *);
	virtual long GetScopeAndSubQueries(SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IScope * *,IShellItemArray * *);
	virtual long GetSearchRoot(IShellItem * *);
	virtual long GetShowCmd(int *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetStackData(_GUID const &,void * *);
	virtual long GetStackedKey(_tagpropertykey *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long GetWorkingDirectory(char *,int);
	virtual long GetWorkingDirectory(unsigned short *,int);
	virtual long InitNew();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long InitializeEx(IBindCtx *,_ITEMIDLIST_ABSOLUTE const *,_PERSIST_FOLDER_TARGET_INFO const *);
	virtual long IsDirty();
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long Load(IStream *);
	virtual long Load(unsigned short const *,unsigned long);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ModifyFilteredIDList(_ITEMID_CHILD const *,IFilterCondition *,_ITEMID_CHILD * *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReparentFilteredIDList(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE * *);
	virtual long Resolve(HWND__ *,unsigned long);
	virtual long Save(IPropertyBag *,int,int);
	virtual long Save(IStream *,int);
	virtual long Save(unsigned short const *,int);
	virtual long SaveCompleted(unsigned short const *);
	virtual long SetArguments(char const *);
	virtual long SetArguments(unsigned short const *);
	virtual long SetDescription(char const *);
	virtual long SetDescription(unsigned short const *);
	virtual long SetHotkey(unsigned short);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetIconLocation(char const *,int);
	virtual long SetIconLocation(unsigned short const *,int);
	virtual long SetItemAlloc(IMalloc *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual long SetPath(char const *);
	virtual long SetPath(unsigned short const *);
	virtual long SetRelativePath(char const *,unsigned long);
	virtual long SetRelativePath(unsigned short const *,unsigned long);
	virtual long SetShowCmd(int);
	virtual long SetWorkingDirectory(char const *);
	virtual long SetWorkingDirectory(unsigned short const *);
	virtual long SetWrapperFolderWeakReference(IShellFolder2 *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFolderSizeTreeWalkerCB
{
	virtual long EnterFolder(unsigned short const *,TREEWALKERSTATS const *,_WIN32_FIND_DATAW const *);
	virtual long FoundFile(unsigned short const *,TREEWALKERSTATS const *,_WIN32_FIND_DATAW const *,unsigned __int64);
};

class CFolderThumbnail
{
	SHSTOCKICONID GetIconId(bool);
	bool NoThumbnail(tagSIZE const *,unsigned short const *,bool);
	bool UseSingleItem();
	bool _UseItem(IShellFolder *,_ITEMID_CHILD const *);
	bool _UseShortcut(IShellFolder *,_ITEMID_CHILD const *);
	long CombineThumbnails(CDPA<IShellItem,CTContainer_PolicyUnOwned<IShellItem> > &,tagSIZE,HBITMAP__ * *);
	long _AddItemToExtractionArray(IShellFolder2 *,_ITEMID_CHILD const *,unsigned long,CDPA<CEnumExtract,CTContainer_PolicyUnOwned<CEnumExtract> > *);
	long _GetItemStore(_GUID const &,void * *);
	long _GetItemsToExtract(unsigned long,CDPA<CEnumExtract,CTContainer_PolicyUnOwned<CEnumExtract> > *);
	long _GetItemsToExtractByEnumerating(IShellFolder2 *,unsigned long,CDPA<CEnumExtract,CTContainer_PolicyUnOwned<CEnumExtract> > *);
	long _GetItemsToExtractFromItemStore(IShellFolder2 *,IItemKeyArray *,IItemStore *,unsigned long,CDPA<CEnumExtract,CTContainer_PolicyUnOwned<CEnumExtract> > *);
	long _GetThumbnailFromPath(unsigned short const *,CDPA<IShellItem,CTContainer_PolicyUnOwned<IShellItem> > &);
	long _GetThumbnailPathFromDesktopINI(unsigned short const *,unsigned short *,unsigned long);
	long _GetThumbnailPathFromFolderJPG(unsigned short const *,unsigned short *,unsigned long);
	long _GetThumbnails(unsigned char,CDPA<IShellItem,CTContainer_PolicyUnOwned<IShellItem> > &);
	long _GetThumbnailsFromEnumeration(unsigned char,CDPA<IShellItem,CTContainer_PolicyUnOwned<IShellItem> > &);
	long _LoadLogoFromPropertyBag(IPropertyBag *,unsigned short *,unsigned long);
	long _LoadWideLogoFromPropertyBag(IPropertyBag *,unsigned short *,unsigned long);
	long _SkewThumbnail(unsigned int,IShellItem *,HDC__ *,tagSIZE);
	static long s_DrawIcon(SHSTOCKICONID,HDC__ *,tagSIZE,int);
	void _AddExtractToDSA(CDPA<CEnumExtract,CTContainer_PolicyUnOwned<CEnumExtract> > *,IShellFolder2 *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_FILETIME);
public:
	CFolderThumbnail();
	virtual long Extract(HBITMAP__ * *);
	virtual long GetClassID(_GUID *);
	virtual long GetLocation(unsigned short *,unsigned long,unsigned long *,tagSIZE const *,unsigned long,unsigned long *);
	virtual long InitNew();
	virtual long Initialize(IShellItem *,unsigned long);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetContext(WTS_CONTEXTFLAGS);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderTypeDescription
{
	class CCanonicalNameResourceGuard
	{
	protected:
		virtual bool v_IsResourceReady();
		virtual long v_LoadResource();
	};

	class CFolderTypeInfoResourceGuard
	{
	protected:
		virtual bool v_IsResourceReady();
		virtual long v_LoadResource();
	};

	CFolderTypeDescription(_GUID const &);
	long _EnsureCanonicalName();
	long _GetTopViewAt(unsigned int,_GUID const &,void * *);
	long _GetTopViewByID(_GUID const &,_GUID const &,void * *);
	long _LoadFolderTypeInfo(unsigned short const *,int);
	long _LoadTopViews(unsigned short const *,int);
	void _Reset();
public:
	static long s_CreateInstance(_GUID const &,_GUID const &,void * *);
	virtual long GetCanonicalName(unsigned short * *);
	virtual long GetClass(unsigned short * *);
	virtual long GetDefaultTopView(_GUID const &,void * *);
	virtual long GetDefaultTopViewID(_GUID *);
	virtual long GetExplorerCommandProvider(IExplorerCommandProvider * *);
	virtual long GetFolderTypeMode(FT_MODE *);
	virtual long GetHelpTopic(unsigned short * *);
	virtual long GetLayout(tagLAYOUTTYPE *);
	virtual long GetModifiedFolderType(unsigned short const *,_GUID *);
	virtual long GetMostRelevantPropertyList(_GUID const &,void * *);
	virtual long GetParentFolderType(_GUID *);
	virtual long GetPerceivedType(tagPERCEIVED *);
	virtual long GetTheme(unsigned short * *);
	virtual long GetTopViewAt(unsigned int,_GUID const &,void * *);
	virtual long GetTopViewByID(_GUID const &,_GUID const &,void * *);
	virtual long GetTopViewCount(unsigned int *);
	virtual long GetTopViewPersistence(FTTV_PERSIST_TYPE *);
	virtual long GetViewSettingsPersistence(FTVS_PERSIST_TYPE *);
	virtual long InvalidateCachedState();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDefaultTopViewID(_GUID const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFolderWithCapabilitiesBase
{
protected:
	long _EnsureCapabilities(_ITEMIDLIST_ABSOLUTE const *,_GUID const &,void * *);
};

class CFontPropertySetStg
{
	long _CreateCFontProps(unsigned short const *);
public:
	virtual long Commit();
	virtual long Create(_GUID const &,_GUID const *,unsigned long,unsigned long,IPropertyStorage * *);
	virtual long Delete(_GUID const &);
	virtual long Enum(IEnumSTATPROPSETSTG * *);
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long Initialize(unsigned short const *,unsigned long);
	virtual long Open(_GUID const &,unsigned long,IPropertyStorage * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFontPropertyStg
{
	long _ReadProp(tagPROPSPEC const *,tagPROPVARIANT *);
public:
	virtual long Commit(unsigned long);
	virtual long DeleteMultiple(unsigned long,tagPROPSPEC const * const);
	virtual long DeletePropertyNames(unsigned long,unsigned long const * const);
	virtual long Enum(IEnumSTATPROPSTG * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReadMultiple(unsigned long,tagPROPSPEC const * const,tagPROPVARIANT * const);
	virtual long ReadPropertyNames(unsigned long,unsigned long const * const,unsigned short * * const);
	virtual long Revert();
	virtual long SetClass(_GUID const &);
	virtual long SetTimes(_FILETIME const *,_FILETIME const *,_FILETIME const *);
	virtual long Stat(tagSTATPROPSETSTG *);
	virtual long WriteMultiple(unsigned long,tagPROPSPEC const * const,tagPROPVARIANT const * const,unsigned long);
	virtual long WritePropertyNames(unsigned long,unsigned long const * const,unsigned short * const * const);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFontProps
{
	static long ConcatenateStringArray(unsigned short * *,unsigned long,tagPROPVARIANT *);
};

class CFormatEngine
{
	long _EnumFileSystems(FORMATINFO * *,unsigned long *);
	long _GetFormatInfoSupportedMedia();
	void _FillFormatEx2Param(FMIFS_FORMATEX2_PARAM *,int,int);
	void _GetFormatInfoDeviceInfo();
	void _GetFormatInfoFilteredMediaTypes();
	~CFormatEngine();
public:
	int HandleFormatCallbackErrorPackets(_FMIFS_PACKET_TYPE,int *,unsigned int *);
	int HandleFormatCallbackLongTimeFormatPacket(unsigned short const *);
	int ValidateVolumeName(unsigned short const *,unsigned short const *,HWND__ *,HWND__ *,int);
	long FSComboPopulateUDFOptions(HWND__ *,int);
	long PopulateFormatInfo(unsigned short *,unsigned long,int *);
	static long CreateInstance(CFormatEngine * *);
	virtual long FormatSucceeded(int *);
	virtual long FormatWasCancelled(int *);
	virtual long Initialize(unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Run(HWND__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void ExecuteFormat(int,_FMIFS_MEDIA_TYPE,unsigned short const *,unsigned char (*)(_FMIFS_PACKET_TYPE,unsigned long,void *));
	void FSComboSelectFS(HWND__ *,unsigned long);
	void OnFormatCompleted(unsigned short const *);
	void ShowFormatErrorMessage(_FMIFS_PACKET_TYPE,unsigned int,unsigned short const *);
};

struct CFormatForDisplayHelper
{
	virtual long FormatForDisplay(PROPDESC_DISPLAYTYPE,tagPSFORMATAS,_tagpropertykey const &,tagPROPVARIANT const &,unsigned short * *,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFrameModule
{
	CFrameModule();
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long GetModuleID(unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetInnerObject(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFrameTask
{
protected:
	virtual ~CFrameTask();
public:
	CFrameTask(IStream *,IFrameWorkItem *);
	virtual long InternalResumeRT();
};

class CFrameTaskManager
{
	static int s_DispatchWorkItem(IFrameWorkItem *,void *);
	static int s_ReleaseWorkItemEntryCB(WORKITEMENTRY *,void *);
public:
	virtual long CancelAllWorkItems();
	virtual long DispatchCompletedWorkItems();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long StartWorkItem(IFrameWorkItem *,_GUID const &,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFrameWorkItem
{
protected:
	int _ShouldContinue();
public:
	CFrameWorkItem();
	virtual long GetDispatchable(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDispatchable(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFreeThreadedConflictDialogProxyWrapper
{
	static long CreateInstance(CSafeElementProxy *,CONFLICT_FILTER,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetConflictDataAndState(unsigned long,CONFLICT_CHECKBOX_STATE,CONFLICT_CHECKBOX_STATE,IShellItem *,IShellItem *,INDIVIDUAL_CONFLICT_FAST_DATA *);
	virtual long SetConflictItemThumbnail(unsigned long,CONFLICT_ITEM_DATA_FLAGS,HBITMAP__ *);
	virtual long SetGlobalItemState(CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CGCTask
{
protected:
	virtual ~CGCTask();
public:
	virtual long InternalResumeRT();
};

struct CGITCookieProvider
{
	static long s_CreateInstance(unsigned long,_GUID const &,void * *);
	virtual long GetCookie(_GUID const &,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CGenericMutex
{
	long InitializeAndLock(MUTEX_SESSION_TYPE,unsigned short const *);
};

class CGetCommandStateTask
{
	long SetData(IShellFolder *,_ITEMID_CHILD *,IExplorerCommand *,IShellItemArray *,IUnknown *,_GUID const &,HWND__ *,unsigned int);
	virtual ~CGetCommandStateTask();
public:
	virtual long Dispatch();
	virtual long DoWork();
};

struct CGetCountDoneEvent
{
	virtual void DispatchEvent();
};

struct CGetFileOrIconInfo
{
	long GetIcon(unsigned int,int *,HICON__ * *);
	long Init(unsigned int);
};

class CGetFindDataWithTimeout
{
	static unsigned long s_ThreadProc(void *);
public:
	long FindFirstWithTimeout(tagWIN32_FIND_DATA_EX *);
	unsigned long Release();
};

struct CGetIconTask
{
	virtual long InternalResumeRT();
};

class CGetPropertiesWorkItem
{
	CGetPropertiesWorkItem(CStatusBarModuleInner *,unsigned int,unsigned int,_tagpropertykey const &,bool);
	long _CacheProperty(IPropertyStore *,IPropertyDescription *);
	long _CacheRelatedProperty(IPropertyStore *,IPropertyDescriptionRelatedPropertyInfo *,unsigned short const *);
	long _CreatePropertyDescriptionList(IPropertyStore *,IPropertyDescriptionList * *);
	long _Initialize(IUnknown *,IShellItemArray *,IShellItemArray *);
	long _InitializeWork(IPropertyStore * *);
	void _CachePropertyList(IPropertyStore *,IPropertyDescriptionList *);
public:
	virtual long Dispatch();
	virtual long DoWork();
};

class CGetSupportStatusTask
{
	static long s_InitSupportStatusProperty(ILocationDescription *,IShellItem *,int,tagPROPVARIANT *);
public:
	static unsigned long s_UpdateLocationSupportStatus(void *);
	unsigned long Release();
};

struct CGetVolumeInformationParams
{
	long GetOutParams(unsigned short *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short *,unsigned long);
	virtual long Call();
	virtual unsigned long GetTimeout();
};

struct CGetVolumeNameForVolumeMountPointParams
{
	virtual long Call();
	virtual unsigned long GetTimeout();
};

struct CGraphicsInit
{
	CGraphicsInit();
	~CGraphicsInit();
};

class CGrep
{
	long _DoesTextPropertyMatchCondition(ICondition *,tagPROPVARIANT const &,CConditionEvaluator *,int *);
	long _EnsureChunkBufferCapacity();
	long _GetNextTextBlock();
	long _InitializeChunkBuffer();
	void _InitializeTextMatchBuffer();
public:
	CGrep(IFilter *,IQueryContinue *);
	long GrepText(tagSTAT_CHUNK const &,CConditionEvaluator *,TRIBIT *);
};

class CGrepConditionEvaluator
{
	long EvalValueChunk(ICondition *,TRIBIT *);
	long _GetNextChunk();
	long _InitFilter();
protected:
	virtual long v_DoesItemMatchLeafCondition(tagPROPVARIANT const &,_tagpropertykey const &,tagCONDITION_OPERATION,ICondition *,int,TRIBIT *,int *);
public:
	long DoesContentMatchCondition(TRIBIT *);
	virtual long Initialize(tagCONDITIONEVALINFO const *,int);
	virtual ~CGrepConditionEvaluator();
};

struct CHANGEEVENT
{
	int IsValid();
};

struct CHANGEREGISTER
{
	int IsValid();
};

class CHWNDView
{
protected:
	DirectUI::Element * _FindAppropriateElement(DirectUI::Element *,HWND__ *);
	bool _ShouldDoDefaultActionOnEnter(DirectUI::Element *);
	static void s_FindInputObjectWithFocus(IUnknown *,__int64);
public:
	int Navigate(tagMSG *);
	static DirectUI::IClassInfo * Class;
	static long Create(HWND__ *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual __int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual void ActivateTooltip(DirectUI::Element *,unsigned long);
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *);
};

struct CHWShellExecute
{
	virtual long HandleEvent(unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long HandleEventWithContent(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,IDataObject *);
	virtual long Initialize(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CHandleStream
{
	long _EnsureOverlappedInitialized();
public:
	static long s_CreateInstance(void *,FSITEMRESOURCEFLAGS,_GUID const &,void * *);
	virtual long Clone(IStream * *);
	virtual long Commit(unsigned long);
	virtual long CopyTo(IStream *,_ULARGE_INTEGER,_ULARGE_INTEGER *,_ULARGE_INTEGER *);
	virtual long LockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(void *,unsigned long,unsigned long *);
	virtual long Revert();
	virtual long Seek(_LARGE_INTEGER,unsigned long,_ULARGE_INTEGER *);
	virtual long SetSize(_ULARGE_INTEGER);
	virtual long Stat(tagSTATSTG *,unsigned long);
	virtual long UnlockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long Write(void const *,unsigned long,unsigned long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CHardwareFailureDialog
{
	static long s_HardwareFailureDialogCallbackProc(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
public:
	int Show(HWND__ *,unsigned int);
};

class CHashTable<AssocCapabilityEntry,unsigned short>
{
	static void s_DestroyCallback(unsigned char *,unsigned int,void *);
public:
	long AddPtr(unsigned short const *,AssocCapabilityEntry *);
	long GetPtr(unsigned short const *,AssocCapabilityEntry * *);
};

class CHashTable<CNetParsingCache::PARSECACHEENTRY,unsigned short>
{
	static void s_DestroyCallback(unsigned char *,unsigned int,void *);
public:
	long AddPtr(unsigned short const *,CNetParsingCache::PARSECACHEENTRY *);
	long GetPtr(unsigned short const *,CNetParsingCache::PARSECACHEENTRY * *);
};

class CHashTable<ICategoryDescription,unsigned short>
{
	static void s_DestroyCallback(unsigned char *,unsigned int,void *);
public:
	long AddPtr(unsigned short const *,ICategoryDescription *);
	long GetPtr(unsigned short const *,ICategoryDescription * *);
	long SetPtr(unsigned short const *,ICategoryDescription *,ICategoryDescription * *);
};

class CHashTable<IUnknown,unsigned short>
{
	static void s_DestroyCallback(unsigned char *,unsigned int,void *);
public:
	long AddPtr(unsigned short const *,IUnknown *);
};

class CHashTableOfStructs<FILECLASSENTRY>
{
	static int s_EnumCallback(unsigned char const *,unsigned int,unsigned char const *,unsigned int,void *);
	static void s_DestroyCallback(unsigned char *,unsigned int,void *);
public:
	long GetItemPtr(unsigned short const *,FILECLASSENTRY * *);
};

struct CHashTableOfStructs<HandlerClsidAndFlags>
{
	long GetItemPtr(unsigned short const *,HandlerClsidAndFlags * *);
};

struct CHelpExecute
{
	virtual long Execute();
};

class CHideSelectedCommand
{
	bool _InRecycleBin();
public:
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CHistoryCommand
{
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CHomeFilter
{
	CHomeFilter(IShellItem *);
	virtual long GetEnumFlagsForItem(IShellItem *,unsigned long *);
	virtual long IncludeItem(IShellItem *);
};

struct CHomeGroupCapabilities
{
	virtual long GetClassID(_GUID *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long InitializeCapabilities(unsigned long,void * *);
	virtual long IsDirty();
	virtual long IsSupported(void *);
	virtual long Load(IStream *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IStream *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CHomeGroupCommandState
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
};

class CHomeGroupComputerStatusHelper
{
	static unsigned long _s_DummyThreadProc(void *);
	static unsigned long _s_SyncGetComputerState(void *);
public:
	long GetHomeGroupComputerStatus(unsigned short const *,HOMEGROUP_COMPUTER_STATE *);
	long GetHomeGroupComputerStatusOnBgThread(unsigned short const *,HOMEGROUP_COMPUTER_STATE *);
};

class CHomeGroupEnumeratorBase
{
	long _EnsureEnumerator();
	long _GetNextItem(_ITEMID_CHILD * *);
public:
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CHomeGroupMachineImage
{
	long _DoExtract(HICON__ * *,HICON__ * *,unsigned int);
	long _EnsureComputerInfo();
public:
	CHomeGroupMachineImage();
	virtual long Extract(HBITMAP__ * *);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long GetLocation(unsigned short *,unsigned long,unsigned long *,tagSIZE const *,unsigned long,unsigned long *);
};

class CHomeGroupUserFolder
{
	long _CompareAttributes(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	long _CreateFolderForItem(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _CreateItemPropertyStore(unsigned short const *,IUsersFilesDescription *,TRIBIT,IPropertyStore * *);
	long _GetAbsoluteName(_ITEMID_CHILD const *,unsigned long,unsigned short * *);
	long _GetAttributes(_ITEMID_CHILD const *,unsigned long,unsigned long *);
	long _GetPropertyForItem(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagPROPVARIANT *);
	long _GetString(_ITEMID_CHILD const *,_tagpropertykey const &,unsigned short * *);
	long _GetUsersFilesDescription(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _ValidateItem(_ITEMID_CHILD const *);
	static long s_GetAbsoluteFriendlyName(CHomeGroupUserFolder *,_ITEMID_CHILD const *,unsigned short * *);
	static long s_GetAbsoluteParsingName(CHomeGroupUserFolder *,_ITEMID_CHILD const *,unsigned short * *);
	static long s_GetDisplayName(CHomeGroupUserFolder *,_ITEMID_CHILD const *,unsigned short * *);
	static long s_GetParsingName(CHomeGroupUserFolder *,_ITEMID_CHILD const *,unsigned short * *);
	virtual ~CHomeGroupUserFolder();
public:
	long CreateItemFromData(unsigned short const *,IUsersFilesDescription *,TRIBIT,_ITEMID_CHILD * *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFolderCapabilities(NSTCFOLDERCAPABILITIES,NSTCFOLDERCAPABILITIES *);
	virtual long GetFolderType(_GUID *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetScopeAndSubQueries(SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IScope * *,IShellItemArray * *);
	virtual long GetSearchRoot(IShellItem * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CHomeGroupUserFolderViewCB
{
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CHomeGroupUserGroupedAutoList
{
	long _EnsureAutoList();
	long _PopulateSortedDpa(IShellFolder *,CDPA<ORDERITEM,CTContainer_PolicyUnOwned<ORDERITEM> > *);
public:
	static long s_CreateInstance(ITopViewDescription *,_GUID const &,IShellItem *,_GUID const &,void * *);
	virtual long GetAutoListFlags(AUTOLISTFLAGS *);
	virtual long GetCanonicalLocationItem(IShellItem * *);
	virtual long GetConditions(_GUID const &,void * *);
	virtual long GetCurrentTopView(TOPVIEWKEY *);
	virtual long GetDefaultTopView(TOPVIEWKEY *);
	virtual long GetDisplayName(unsigned short * *);
	virtual long GetFolderFlags(unsigned long *);
	virtual long GetFolderType(_GUID *);
	virtual long GetGroupBy(_tagpropertykey *,int *);
	virtual long GetGroupSubsetRows(unsigned int *);
	virtual long GetIconSize(int *);
	virtual long GetOverrideColumns(_GUID const &,void * *);
	virtual long GetParsingName(unsigned short * *);
	virtual long GetRelevanceProperties(_GUID const &,void * *);
	virtual long GetScope(GET_SCOPE_TYPE,_GUID const &,void * *);
	virtual long GetSortColumn(unsigned int,_tagpropertykey *,int *);
	virtual long GetStackBy(unsigned int,_tagpropertykey *);
	virtual long GetStackByData(_GUID const &,void * *);
	virtual long GetStackIconSize(int *);
	virtual long GetStackViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long GetSubQueries(_GUID const &,void * *);
	virtual long GetTaskFlags(unsigned long *);
	virtual long GetTopViewItem(TOPVIEWKEY const &,IShellItem * *);
	virtual long GetUICommands(IVisibleInList *,IUnknown *,IEnumUICommand * *,IEnumUICommand * *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long GetVisibleInList(_GUID const &,void * *);
	virtual long InvalidateCachedState();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CHomeGroupUserGroupedFolder
{
	bool _AreAllChildrenLibraries(IShellFolder *,unsigned int,_ITEMID_CHILD const * const *);
	bool _IsChildLibrary(IShellFolder *,_ITEMID_CHILD const *);
	long _ConvertIDListType(FOLDER_ENUM_MODE,_GUID const &,void * *);
	long _ConvertItem(FOLDER_ENUM_MODE,_ITEMIDLIST_RELATIVE const *,int,_GUID const &,void * *);
	long _CreateDefaultAutolistDescription(IAutoListDescription * *);
	long _CreateHomeGroupUserFolder(_GUID const &,void * *);
	long _CreateSearchFolder(_GUID const &,void * *);
	long _EnsureDelegateFolder();
	long _EnumDelegate(HWND__ *,unsigned long,_ITEMID_CHILD const *,IEnumIDList * *);
	long _GetTopViewDescription(_GUID *,ITopViewDescription * *);
	long _QueryDelegate(_GUID const &,void * *);
	virtual ~CHomeGroupUserGroupedFolder();
public:
	CHomeGroupUserGroupedFolder();
	virtual long ApplyPropertiesToItem(IShellItem *,IPropertyChangeArray *,ITransferAdviseSink *,IShellItem * *);
	virtual long BindToDelegatePropertyStore(_ITEMID_CHILD const *,GETPROPERTYSTOREFLAGS,IPropertyStore * *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateFilteredIDList(IFilterCondition *,tagFILTERIDLISTTYPE,IPropertyStore *,_ITEMID_CHILD * *);
	virtual long CreateStackedIDList(_tagpropertykey const &,_ITEMIDLIST_ABSOLUTE * *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long DelegateBindToParent(IShellItem *,_GUID const &,void * *,IShellItem * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumObjectsEx(HWND__ *,IBindCtx *,unsigned long,IItemFilter *,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetAutoListFlags(unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetConditions(_tagpropertykey const &,CONDITIONSOURCEFLAGS,_GUID const &,void * *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFilteredIDListType(_ITEMID_CHILD const *,tagFILTERIDLISTTYPE *);
	virtual long GetFolderCapabilities(NSTCFOLDERCAPABILITIES,NSTCFOLDERCAPABILITIES *);
	virtual long GetFolderTargetInfo(_PERSIST_FOLDER_TARGET_INFO *);
	virtual long GetFolderType(_GUID *);
	virtual long GetMode(FOLDER_ENUM_MODE *);
	virtual long GetNavigationEnumItem(_ITEMIDLIST_RELATIVE const *,int,_GUID const &,void * *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetPropertyStorageFromIDListPriv(_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long GetQueryStore(_ITEMID_CHILD const *,PROPERTY_GET_TYPE,IPropertyKeyStore *,IScope *,_GUID const &,void * *);
	virtual long GetRealLocations(IShellItemArray * *);
	virtual long GetScopeAndSubQueries(SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IScope * *,IShellItemArray * *);
	virtual long GetSearchRoot(IShellItem * *);
	virtual long GetStackData(_GUID const &,void * *);
	virtual long GetStackedKey(_tagpropertykey *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long GetViewResultEnumItem(_ITEMIDLIST_RELATIVE const *,int,_GUID const &,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long InitializeEx(IBindCtx *,_ITEMIDLIST_ABSOLUTE const *,_PERSIST_FOLDER_TARGET_INFO const *);
	virtual long IsItemRealized(IChildId *,int *);
	virtual long IsQuery(_ITEMID_CHILD const *);
	virtual long IsStack(_ITEMID_CHILD const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ModifyFilteredIDList(_ITEMID_CHILD const *,IFilterCondition *,_ITEMID_CHILD * *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long ReparentFilteredIDList(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE * *);
	virtual long SetMode(FOLDER_ENUM_MODE);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual long ShouldDelegateForHandler(_ITEMID_CHILD const *,DELEGATION_FLAGS);
	virtual long UpdateIDListOnRename(_ITEMID_CHILD const *,IShellFolder *,_ITEMID_CHILD const *,_ITEMID_CHILD * *);
	virtual long UpdateItemFromChangeArray(_ITEMID_CHILD const *,IPropertyChangeArray *,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CHomeGroupUserGroupedViewCB
{
	CHomeGroupUserGroupedViewCB(_ITEMIDLIST_ABSOLUTE const *,IUnknown *,IShellFolderViewCB *);
	virtual ~CHomeGroupUserGroupedViewCB();
public:
	static long s_CreateInstance(_ITEMIDLIST_ABSOLUTE const *,IUnknown *,IShellFolderViewCB *,_GUID const &,void * *);
	virtual long GetColumnPropertyList(_GUID const &,void * *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long GetIconSize(unsigned int *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetSortColumns(SORTCOLUMN *,unsigned int,unsigned int *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
	virtual long SetSite(IUnknown *);
};

class CHomeGroupUserImage
{
	long _DoExtract(tagSIZE,HBITMAP__ * *);
public:
	long Initialize(unsigned short const *,unsigned short *);
	virtual long Extract(HBITMAP__ * *);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long GetLocation(unsigned short *,unsigned long,unsigned long *,tagSIZE const *,unsigned long,unsigned long *);
	virtual long GetSupportedContext(WTS_CONTEXTFLAGS *);
	virtual long GetThumbnail(unsigned int,HBITMAP__ * *,WTS_ALPHATYPE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetContext(WTS_CONTEXTFLAGS);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CHomeGroupUserShareEnumerator
{
protected:
	virtual bool _IncludeItem(IObjectWithOwner *);
	virtual long _CreateIDList(IObjectWithOwner *,unsigned long,_ITEMID_CHILD * *);
	virtual ~CHomeGroupUserShareEnumerator();
public:
	static long s_CreateInstance(HWND__ *,unsigned long,CHomeGroupUserFolder *,unsigned short const *,_GUID const &,void * *);
};

class CHomeGroupUserTileHelper
{
	static int _s_CompareUsersByDateModified(IPropertyStore const *,IPropertyStore const *,__int64);
	static long _s_GetUserTileData(unsigned short const *,unsigned char * *,unsigned long *);
	static unsigned long _s_DummyThreadProc(void *);
	static unsigned long _s_SyncRetrieveUserTileData(void *);
public:
	static long s_GetTileData(unsigned short const *,unsigned char * *,unsigned long *);
};

class CHomeOperationSink
{
	struct RenameData
	{
		long Add(IShellItem *,IShellItem *);
	};

	bool ShouldProceed(long);
	long AddFolder(CCaseInsensitiveStringHashTable<Microsoft::WRL::ComPtr<IShellItem> > &,IShellItem *);
	long GetObjectCollection(CCaseInsensitiveStringHashTable<Microsoft::WRL::ComPtr<IShellItem> > &,IObjectCollection * *);
	long TrimDeletedObjectCollections();
	void ClearCachedData();
public:
	CHomeOperationSink();
	virtual long AppliedPropertiesToItem(IShellItem *,IPropertyChangeArray *,long);
	virtual long FinishOperations(long);
	virtual long PauseTimer();
	virtual long PostCopyItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PostDeleteItem(unsigned long,IShellItem *,long,IShellItem *);
	virtual long PostMoveItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PostNewItem(unsigned long,IShellItem *,unsigned short const *,unsigned short const *,unsigned long,long,IShellItem *);
	virtual long PostRenameItem(unsigned long,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PreCopyItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *);
	virtual long PreDeleteItem(unsigned long,IShellItem *);
	virtual long PreMoveItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *);
	virtual long PreNewItem(unsigned long,IShellItem *,unsigned short const *);
	virtual long PreRenameItem(unsigned long,IShellItem *,unsigned short const *);
	virtual long ResetTimer();
	virtual long ResumeTimer();
	virtual long StartOperations();
	virtual long UpdateProgress(unsigned int,unsigned int);
	virtual void SetOperationFlags(unsigned long);
	virtual ~CHomeOperationSink();
};

class CHyperlinkPropertyControl
{
	HFONT__ * _GetUnderlineFont(HFONT__ *);
	__int64 _SubclassWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _OnNotify(tagNMHDR *);
	long _EnsureMarkup();
	static __int64 s_subclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual __int64 v_BaseWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual int v_OnBaseSetCursor();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_DrawContent(HDC__ *,tagRECT *,int,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
	virtual ~CHyperlinkPropertyControl();
	void _SetText();
public:
	CHyperlinkPropertyControl();
	virtual long CustomDrawText(HDC__ *,unsigned short const *,int,tagRECT *,unsigned int,int);
	virtual long Destroy();
	virtual long GetDrawFlags(int *);
	virtual long GetSize(PROPCTL_RECT_TYPE,HDC__ *,tagSIZE const *,tagSIZE *);
	virtual long GetState(unsigned long,unsigned int);
	virtual long InvalidateRect(unsigned long,tagRECT const *);
	virtual long InvokeDefaultAction();
	virtual long Notify(unsigned long,int,int);
	virtual long OnCustomDraw(unsigned long,HDC__ *,tagRECT const *,unsigned long,int,unsigned int,__int64 *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CIDLDataObj
{
protected:
	CIDLDataObj(_ITEMIDLIST_ABSOLUTE const *,unsigned int,_ITEMIDLIST_RELATIVE const * const *,IDataObject *);
	virtual ~CIDLDataObj();
public:
	static long CreateInstance(_ITEMIDLIST_ABSOLUTE const *,unsigned int,_ITEMIDLIST_RELATIVE const * const *,IDataObject *,_GUID const &,void * *);
	virtual long DAdvise(tagFORMATETC *,unsigned long,IAdviseSink *,unsigned long *);
	virtual long DUnadvise(unsigned long);
	virtual long EndOperation(long,IBindCtx *,unsigned long);
	virtual long EnumDAdvise(IEnumSTATDATA * *);
	virtual long EnumFormatEtc(unsigned long,IEnumFORMATETC * *);
	virtual long GetAsyncMode(int *);
	virtual long GetCanonicalFormatEtc(tagFORMATETC *,tagFORMATETC *);
	virtual long GetData(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long GetDataHere(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long GetFirstItemInSelection(_GUID const &,void * *);
	virtual long GetShellItemArray(_GUID const &,void * *);
	virtual long InOperation(int *);
	virtual long QueryGetData(tagFORMATETC *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetAsyncMode(int);
	virtual long SetData(tagFORMATETC *,tagSTGMEDIUM *,int);
	virtual long SetSafeFlush();
	virtual long SetShellItemArrayWeakRef(IShellItemArray *);
	virtual long StartOperation(IBindCtx *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CIDLDropTarget
{
protected:
	long DragDropMenu(unsigned long,IDataObject *,_POINTL,unsigned long *,HKEY__ *,HKEY__ *,unsigned int,unsigned long);
	long DragDropMenuEx(DRAGDROPMENUPARAM *);
	virtual ~CIDLDropTarget();
public:
	long _Init(_ITEMIDLIST_ABSOLUTE const *);
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CIDLMatchMany
{
	long Next(__int64 *,_ITEMIDLIST_ABSOLUTE * *);
};

class CIDLNode
{
protected:
	CLinkedNode<CIDLNode> * _GetKid(_ITEMIDLIST_RELATIVE const *);
	long GetNode(int,_ITEMIDLIST_RELATIVE const *,CIDLNode * *,IDLDATAF *);
	long _AddData(IDLDATAF,__int64);
	long _InitSF();
	long _RemoveAll();
	long _RemoveData(__int64);
	void _FreshenKids();
public:
	~CIDLNode();
};

class CIDLTree
{
protected:
	CIDLNode * _MatchNode(_ITEMIDLIST_ABSOLUTE const *,IDLDATAF *);
public:
	long AddData(IDLDATAF,_ITEMIDLIST_ABSOLUTE const *,__int64,CIDLNode * *);
	long MatchMany(IDLDATAF,_ITEMIDLIST_ABSOLUTE const *,CIDLMatchMany * *);
	long MatchOne(IDLDATAF,_ITEMIDLIST_ABSOLUTE const *,__int64 *,_ITEMIDLIST_ABSOLUTE * *);
	long RemoveData(_ITEMIDLIST_ABSOLUTE const *,__int64);
	static long Create(CIDLTree * *);
};

class CIDLTreeTraversor
{
	static int _DestroyKidWalkerStackElement(CLinkedWalk<CIDLNode> *,void *);
public:
	long Initialize(CIDLNode *);
	long Next(CIDLNode * *);
};

class CINIPropSetStg
{
protected:
	long _DeleteRegSet(unsigned short const *);
	long _EnumIniEntries(CDPA<_tagpropertykey,CTContainer_PolicyUnOwned<_tagpropertykey> > *);
	long _EnumRegEntries(CDPA<_tagpropertykey,CTContainer_PolicyUnOwned<_tagpropertykey> > *);
	virtual ~CINIPropSetStg();
public:
	long Initialize(HKEY__ *,ICachedPrivateProfile *,unsigned long);
	virtual long Create(_GUID const &,_GUID const *,unsigned long,unsigned long,IPropertyStorage * *);
	virtual long Delete(_GUID const &);
	virtual long Enum(IEnumSTATPROPSETSTG * *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFile(unsigned short * *);
	virtual long InitNew();
	virtual long Initialize(unsigned short const *,unsigned long);
	virtual long IsDirty();
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long Load(unsigned short const *,unsigned long);
	virtual long Open(_GUID const &,unsigned long,IPropertyStorage * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long Save(unsigned short const *,int);
	virtual long SaveCompleted(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CINIPropStg
{
protected:
	long _EnumIniEntries(CDPA<_tagpropertykey,CTContainer_PolicyUnOwned<_tagpropertykey> > *);
	long _EnumRegEntries(CDPA<_tagpropertykey,CTContainer_PolicyUnOwned<_tagpropertykey> > *);
	long _GetPropSettings(tagPROPSPEC const *,INIPROPSETTINGS *);
	long _ReadProp(tagPROPSPEC const *,tagPROPVARIANT *);
	long _WriteProp(tagPROPSPEC const *,tagPROPVARIANT const &);
	virtual ~CINIPropStg();
public:
	CINIPropStg(CINIPropSetStg *,_GUID const &,unsigned long);
	long Initialize(ICachedPrivateProfile *,HKEY__ *);
	virtual long Commit(unsigned long);
	virtual long DeleteMultiple(unsigned long,tagPROPSPEC const * const);
	virtual long DeletePropertyNames(unsigned long,unsigned long const * const);
	virtual long Enum(IEnumSTATPROPSTG * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReadMultiple(unsigned long,tagPROPSPEC const * const,tagPROPVARIANT * const);
	virtual long ReadPropertyNames(unsigned long,unsigned long const * const,unsigned short * * const);
	virtual long Revert();
	virtual long SetClass(_GUID const &);
	virtual long SetTimes(_FILETIME const *,_FILETIME const *,_FILETIME const *);
	virtual long Stat(tagSTATPROPSETSTG *);
	virtual long WriteMultiple(unsigned long,tagPROPSPEC const * const,tagPROPVARIANT const * const,unsigned long);
	virtual long WritePropertyNames(unsigned long,unsigned long const * const,unsigned short * const * const);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CISFBand
{
protected:
	CISFBand();
	__int64 _TryCascadingItem(_ITEMID_CHILD const *,unsigned int);
	__int64 _TrySimpleInvoke(_ITEMID_CHILD const *);
	int _GetIdealSize(tagSIZE *);
	long _DropdownItem(_ITEMID_CHILD const *,unsigned int);
	long _IStreamFromOrderList(tagVARIANT *);
	long _IsPidlVisible(_ITEMID_CHILD const *);
	long _OrderListFromIStream(tagVARIANT *);
	virtual HMENU__ * _GetContextMenu();
	virtual HWND__ * _CreatePager(HWND__ *);
	virtual __int64 _DefWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual __int64 _OnCommand(unsigned __int64,__int64);
	virtual __int64 _OnContextMenu(unsigned __int64,__int64);
	virtual __int64 _OnCustomDraw(tagNMCUSTOMDRAWINFO *);
	virtual __int64 _OnHotItemChange(tagNMTBHOTITEM *);
	virtual __int64 _OnNotify(tagNMHDR *);
	virtual int _UpdateIconSize(unsigned int,int);
	virtual long OnChange(long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long _CreateToolbar(HWND__ *);
	virtual long _GetTitleW(unsigned short *,unsigned long);
	virtual long _TBStyleForPidl(_ITEMID_CHILD const *,unsigned long *,unsigned long *,unsigned long *,int *);
	virtual void _OnDragBegin(int,unsigned long);
	virtual void _SetDirty(int);
	virtual void _ToolbarChanged();
	virtual ~CISFBand();
	void _FixupAppDataDirectory();
	void _ReleaseMenuPopup(IMenuPopup * *);
	void _SetCacheMenuPopup(IMenuPopup *);
	void _UpdateVerticalMode(int);
public:
	virtual long CloseDW(unsigned long);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long GetBandInfo(unsigned long,unsigned long,DESKBANDINFO *);
	virtual long GetBandInfoSFB(BANDINFOSFB *);
	virtual long GetClassID(_GUID *);
	virtual long GetDefaultBandWidth(unsigned long,unsigned long,int *);
	virtual long GetToolbar(HWND__ * *);
	virtual long InitializeSFB(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long Load(IStream *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long Save(IStream *,int);
	virtual long SetAccelerators(int);
	virtual long SetBandInfoSFB(BANDINFOSFB *);
	virtual long SetCascade(int);
	virtual long SetNoIcons(int);
	virtual long SetNoText(int);
	virtual long SetSite(IUnknown *);
	virtual long ShowDW(int);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CISFMenuCallback
{
	int _IsVisible(_ITEMID_CHILD *);
	long _GetObject(tagSMDATA *,_GUID const &,void * *);
	long _SetObject(tagSMDATA *,_GUID const &,void * *);
	virtual ~CISFMenuCallback();
public:
	virtual long CallbackSM(tagSMDATA *,unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CIconAndThumbnailOplockWrapper
{
	CIconAndThumbnailOplockWrapper(IUnknown *,IOplockProvider *);
	~CIconAndThumbnailOplockWrapper();
public:
	static long Create(IUnknown *,IOplockProvider *,_GUID const &,void * *);
	virtual long Extract(HBITMAP__ * *);
	virtual long Extract(char const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetIconLocation(unsigned int,char *,unsigned int,int *,unsigned int *);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long GetLocation(unsigned short *,unsigned long,unsigned long *,tagSIZE const *,unsigned long,unsigned long *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetThumbnail(unsigned int,HBITMAP__ * *,WTS_ALPHATYPE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CIconCache
{
	int _GetFreeImage();
	int _PurgeIcons(int,int);
	long _SetImageListCallback(IImageList2 *,unsigned int);
	long _SetLayerImageListCallback();
	~CIconCache();
public:
	int AddSparseIcon(ADDICONSINFO const *,int,unsigned short const *,int,unsigned int);
	int AgeAndPrune();
	int LookupBackIconIndex(unsigned short const *,int,unsigned int);
	int LookupFrontIconIndex(unsigned short const *,int,unsigned int);
	long AddToBackIconTable(ADDICONSINFO const *,int *);
	long AddToIconTable(CNonFileTable *,unsigned short const *,int,unsigned int,int);
	long ExtractFromOtherImagelist(IImageList2 *,int,int,HICON__ * *);
	long ExtractIconW(int,int,int,HICON__ * *);
	long GetIcon(int,int,HBITMAP__ * *);
	long GetIconResourceInfoGivenILIndex(int,unsigned __int64,unsigned short *,int *,_ITEMIDLIST_ABSOLUTE * *);
	long Initialize();
	long ReadLocations(IStream *);
	long SaveIcon(int,int,HICON__ *);
	long SetImageListSize();
	long WriteLocations(IStream *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void AgeTable(CNonFileTable *);
	void Detach();
	void HandleAssociationChanged();
	void MaybeAgeImageList(int,IImageList2 *,int,unsigned int);
	void RedirectShell32Icon(RECOVERY_ENTRY *);
	void ResetContent();
};

class CIconListControl
{
	long LoadImagelists();
	long _AddIconToList(IImageList *,unsigned short *);
	long _AddToolTips();
	long _GetIconResourceString(IPropertyDescription *,tagPROPVARIANT const &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,unsigned short * *);
	long _GetPropertyDescriptionListFromStore(IPropertyStore *,IPropertyDescriptionList * *,unsigned int *);
	long _InitializeLists(unsigned int);
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual int v_AllowDrawBorders(int);
	virtual int v_HasTooltip();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_DrawContent(HDC__ *,tagRECT *,int,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
	virtual ~CIconListControl();
	void CalculateSize();
	void DestroyImagelists();
	void _AddToolTipToList(IPropertyDescription *,IPropertyStore *);
	void _ClearValues();
public:
	CIconListControl();
	virtual long HasVisibleContent();
	virtual long OnDPIChanged();
};

struct CIconOverlayAdorner
{
	static long CreateInstance(int,CIconOverlayAdorner::Position,_GUID const &,void * *);
	virtual long ComputeBounds(tagRECT *,tagRECT *);
	virtual long Draw(HDC__ *);
};

class CIconResourceEnumHelper
{
	static int MyEnumProcedure(HINSTANCE__ *,unsigned short const *,unsigned short *,__int64);
public:
	bool FindResourceW(HINSTANCE__ *,unsigned short * *,unsigned __int64);
};

struct CIconSizeCommand
{
	long ExitPreview(ICON_SIZE_EXIT_PREVIEW_ACTION);
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
};

class CIconTask
{
	virtual ~CIconTask();
public:
	virtual long InternalResumeRT();
};

class CImageData
{
	long _EnsureImage();
	long _GetDisplayedImage();
	long _GetProperty(unsigned long,tagVARIANT *,unsigned short);
	long _MakeTempFile(unsigned short *);
	long _PropImgToVariant(Gdiplus::PropertyItem *,tagVARIANT *);
	long _ReplaceFile(unsigned short const *);
	long _SaveImages(IStream *,_GUID const &);
	long _SetDecodeStream(CDecodeStream *);
	long _SuspendStream();
	virtual ~CImageData();
	void _CopyImageProperties(Gdiplus::Image *,Gdiplus::Image *);
	void _SetEditImage(Gdiplus::Image *);
public:
	CImageData();
	static int QueryAbort(void *);
	virtual long CloneFrame(Gdiplus::Image * *);
	virtual long Decode(unsigned long,unsigned long,unsigned long);
	virtual long DiscardEdit();
	virtual long DisplayName(unsigned short *,unsigned int);
	virtual long Draw(HDC__ *,tagRECT *,tagRECT *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFile(unsigned short * *);
	virtual long GetCurrentPage(unsigned long *);
	virtual long GetDelay(unsigned long *);
	virtual long GetEncoderParams(_GUID *,Gdiplus::EncoderParameters * *);
	virtual long GetPageCount(unsigned long *);
	virtual long GetPixelFormat(int *);
	virtual long GetProperties(unsigned long,IPropertySetStorage * *);
	virtual long GetRawDataFormat(_GUID *);
	virtual long GetResolution(unsigned long *,unsigned long *);
	virtual long GetSize(tagSIZE *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long Initialize(IStream *,unsigned long);
	virtual long IsAnimated();
	virtual long IsDecoded();
	virtual long IsDirty();
	virtual long IsEditable();
	virtual long IsMultipage();
	virtual long IsPrintable();
	virtual long IsTransparent();
	virtual long IsVector();
	virtual long Load(IStream *);
	virtual long Load(unsigned short const *,unsigned long);
	virtual long NextFrame();
	virtual long NextPage();
	virtual long PrevPage();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RegisterAbort(IShellImageDataAbort *,IShellImageDataAbort * *);
	virtual long ReplaceFrame(Gdiplus::Image *);
	virtual long Rotate(unsigned long);
	virtual long Save(IStream *,int);
	virtual long Save(unsigned short const *,int);
	virtual long SaveCompleted(unsigned short const *);
	virtual long Scale(unsigned long,unsigned long,Gdiplus::InterpolationMode);
	virtual long SelectPage(unsigned long);
	virtual long SetEncoderParams(IPropertyBag *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CImageFactory
{
	virtual long CreateIShellImageData(IShellImageData * *);
	virtual long CreateImageFromFile(unsigned short const *,IShellImageData * *);
	virtual long CreateImageFromStream(IStream *,IShellImageData * *);
	virtual long GetDataFormatFromPath(unsigned short const *,_GUID *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CImagePrefetchWorkItem
{
	long Initialize(IMAGE_PREFETCH_PARAMS const &);
	long _GetChildILIconSize(unsigned int,int *);
	long _GetMaxImageDimensions(unsigned int,tagRECT *);
	long _GetTargetILAndLoadSize(int,int,unsigned int *,int *,int *);
	long _GetThumbnailImageList(unsigned int,_GUID const &,void * *);
	long _LoadThumbnail(int,IShellFolder2 *,_ITEMID_CHILD const *,IItem *,ISharedBitmap * *);
	long _PrefetchIcon(ITEM_IMAGE_RESULT *,IShellFolder2 *,unsigned int);
	long _PrefetchImages(int,IShellFolder2 *,unsigned int,int);
	long _PrefetchThumbnail(int,int,ITEM_IMAGE_RESULT *,IShellFolder2 *,unsigned int);
	virtual ~CImagePrefetchWorkItem();
	void _MoveBmpPtrsFromFirstToFinal();
public:
	static long CreateInstance(IMAGE_PREFETCH_PARAMS const &,IFrameWorkItem * *);
	virtual long Dispatch();
	virtual long DoWork();
};

struct CImageServicesSink
{
	static long s_CreateInstance(CImageServicesSink * *);
	virtual long OnImageListChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CImmersiveColor
{
	static unsigned long GetColor(IMMERSIVE_COLOR_TYPE);
};

struct CImmersiveContextMenuOwnerDrawHelper
{
	static bool s_ContextMenuWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,bool *,GRID_HOW_SELECTED_FLAGS *);
	virtual int ContextMenuWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,int *,GRID_HOW_SELECTED_FLAGS *);
};

class CImmersiveWindowFactory
{
	virtual long v_CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long v_Initialize(IImmersiveMonitor *,tagRECT const *);
	virtual void v_OnAfterSetAppWindow();
public:
	CImmersiveWindowFactory();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CImmersiveWindowFactoryBase
{
	virtual _GUID const & v_GetHandlerCLSID();
	virtual long v_GetAdditionalDataSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long v_MarshalAdditionalData(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
protected:
	virtual long v_CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long v_Initialize(IImmersiveMonitor *,tagRECT const *);
	virtual void v_OnAfterSetAppWindow();
	virtual ~CImmersiveWindowFactoryBase();
public:
	CImmersiveWindowFactoryBase();
	virtual long CreateCoreWindow(HSTRING__ *,Windows::UI::Core::ICoreWindow * *);
	virtual long CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long GetAppWindow(HWND__ * *);
	virtual long HasExistingSplashScreen(int *);
	virtual long Initialize(IImmersiveMonitor *,unsigned short const *);
	virtual long InitializeWithPosition(IImmersiveMonitor *,unsigned short const *,tagRECT const *);
	virtual long SetAppWindow(long);
	virtual long SetAppWindowAndGetHostProcess(long,unsigned __int64 *);
	virtual long SetViewId(unsigned long);
	virtual long get_WindowReuseAllowed(unsigned char *);
};

struct CImpIConnectionPointContainer
{
	virtual long FindConnectionPoint(_GUID const &,IConnectionPoint * *);
};

class CImpIDispatch
{
protected:
	long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
};

class CImpWndProc
{
protected:
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CImpWorkerWndProc
{
protected:
	long HrCreateWorkerWindow(HWND__ *,unsigned long,unsigned long,HMENU__ *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CIncludeInLibrary
{
	CIncludeInLibrary(IShellItem *,tagRECT const *,IUnknown *);
	long _AddItemToPopup(IShellItem *,unsigned short const *,unsigned int);
	long _AddItemsToPopup();
	long _InsertCreateLibraryItem();
	~CIncludeInLibrary();
public:
	static long s_CreateInstance(IShellItem *,tagRECT const *,IUnknown *,_GUID const &,void * *);
	virtual long GetItemState(LVPVIEWID,tagLVITEMW * const,int *);
	virtual long OnCreated();
	virtual long OnDestroy();
	virtual long OnDismiss(int);
	virtual long OnGetSearchText(SEARCHTEXTTYPE,unsigned short *,unsigned int);
	virtual long OnItemChanged(LVPVIEWID,tagNMLISTVIEW const *,int);
	virtual long OnItemFocused(LVPVIEWID,tagLVITEMW * const,tagLVITEMW * const);
	virtual long OnItemInvoke(LVPVIEWID,tagLVITEMW * const);
	virtual long OnItemRemoved(REMOVEITEMTYPE,LVPVIEWID,tagLVITEMW * const);
	virtual long OnMouseLeave();
	virtual long OnPropCtrlInvoke(IFilterCondition *);
	virtual long OnRequestReposition(tagRECT const *);
	virtual long OnSetChanged(IUpdatableItemSet *,tagUISCB_FLAGS,__int64);
	virtual long OnSpinnerCancel(LVPVIEWID);
	virtual long OnToolBarItemInvoke(int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show(HWND__ *);
	virtual long SpecialCharacter(tagMSG const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CIncludeInLibraryCommand
{
	virtual long GetCanonicalName(_GUID *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CIncludeInLibraryContextMenu
{
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CIncludeInLibraryContextMenuHelper
{
	long _PopulateSubMenu(IShellItem * *,unsigned int);
public:
	virtual long OnSetChanged(IUpdatableItemSet *,tagUISCB_FLAGS,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CIndividualConflictFastDataHelper
{
	PROPDESC_FORMAT_FLAGS _GetDateModifiedFormatFlags();
	long _ConvertPropVariantToString(_tagpropertykey const &,tagPROPVARIANT const &,PROPDESC_FORMAT_FLAGS,unsigned short * *);
public:
	int GetCompareDateModifiedOrDefault();
	int GetCompareSizeOrDefault();
	long GetDestDateModifiedOrDefaultAsString(unsigned short * *);
	long GetDestSizeOrDefaultAsString(unsigned short * *);
	long GetSrcDateModifiedOrDefaultAsString(unsigned short * *);
	long GetSrcSizeOrDefaultAsString(unsigned short * *);
};

class CInfoBar
{
	long _DoPopupMenu();
public:
	long SetInfoBarMessage(IInfoBarMessage *);
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
};

struct CInfoBarHostModule
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CInfoBarHostModuleInner
{
	void _ProfferToBrowser(int);
public:
	CInfoBarHostModuleInner();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CancelInform(_GUID const &);
	virtual long Inform(IInfoBarMessage *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CInfoBarManager
{
	virtual long DisableInfoBar(unsigned short const *);
	virtual long EnableAllInfoBars();
	virtual long IsInfoBarEnabled(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CInfoPane
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CInfoPaneInner
{
	long _EnsureLayout();
	long _SetText();
	static int _LinkNotifyHandler(unsigned int,unsigned __int64,__int64,__int64 *,void *);
public:
	CInfoPaneInner();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnContentsChanged();
	virtual long OnFolderChanged();
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CInfoTip
{
	long _GetPropertyDescriptionListAndStore(IPropertyDescriptionList * *,IPropertyStore * *);
public:
	CInfoTip(unsigned short const *,IShellFolder *,_ITEMID_CHILD const *);
	virtual long GetInfoFlags(unsigned long *);
	virtual long GetInfoTip(unsigned long,unsigned short * *);
	virtual long GetParentAndItem(_ITEMIDLIST_ABSOLUTE * *,IShellFolder * *,_ITEMID_CHILD * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetExtraProperties(_tagpropertykey const *,unsigned int);
	virtual long SetParentAndItem(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_ITEMID_CHILD const *);
	virtual long SetPrefixText(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CInitializeAutoPlayForegroundControl
{
	virtual long InitializeTrustedComponentForegroundControl(ITrustedComponentForegroundControl *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShutdownTrustedComponentForegroundControl();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CInputLimiter
{
protected:
	__int64 OnPaste(HWND__ *,unsigned __int64,__int64);
	int IsValidChar(unsigned short,int);
	int OnChar(HWND__ *,unsigned __int64 &,__int64);
	void CreateToolTipWindow();
	void HideToolTip();
	void ShowToolTip();
public:
	int SubclassEditControl(HWND__ *,tagLIMITINPUT const *);
	static __int64 SubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
};

class CInputLimiterNetAddr
{
protected:
	__int64 _WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	long _OnDisplayError();
	long _OnValidate(tagNC_ADDRESS *);
public:
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CInsertDiscDialog
{
	int _IsValidMediaPresent();
	int _Show(HWND__ *);
	long _OnDialogCreated(HWND__ *);
	static __int64 s_InsertDiscDlgWorkerWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long s_InsertDiscDialogCallbackProc(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	unsigned int _HandleChangeNotify(unsigned __int64,__int64);
	unsigned short * _AppendHelpLink(unsigned short const *);
	void _OnDialogDestroyed(HWND__ *);
	void _ShowHelp(HWND__ *);
};

struct CInstClassFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long GetKey(unsigned long,HKEY__ * *);
	virtual long LockServer(int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(unsigned short const *,tagVARIANT *,IErrorLog *);
	virtual long SetKey(HKEY__ *);
	virtual long Write(unsigned short const *,tagVARIANT *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CItemCancelEvent
{
	virtual void DispatchEvent();
};

struct CItemChangedEvent
{
	virtual void DispatchEvent();
};

struct CItemChangingEvent
{
	virtual void DispatchEvent();
};

struct CItemCollectionSink
{
	CItemCollectionSink();
	static long GetCountOnBackgroundThread(IItemCollection *,unsigned int *,unsigned int *);
	virtual long OnCancelled();
	virtual long OnCollectionChanged(unsigned int,tagCOLLECTION_CHANGE_STATE);
	virtual long OnGetCountDone(unsigned int,tagCOUNT_TYPE,long);
	virtual long OnItemMoved(IItem *,IItem *);
	virtual long OnItemTranslated(IItem *,IItem *);
	virtual long OnItemsAdded(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnItemsDeleted(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnPrepareDone(unsigned int,long);
	virtual long OnUniqueLeafCountChanged();
};

struct CItemCommand
{
	CItemCommand();
	long RuntimeClassInitialize(bool,IShellItem *,IContextMenu *,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned int);
	virtual long Execute(IInspectable *);
	virtual long GetItem(IShellItem * *);
};

class CItemCommandBase
{
protected:
	long _EnsureObservableFactory();
	virtual ~CItemCommandBase();
public:
	CItemCommandBase();
	virtual long CanExecute(IInspectable *,unsigned char *);
	virtual long GetChangeCount(unsigned int *);
	virtual long GetCustomProperty(HSTRING__ *,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetIndexedProperty(HSTRING__ *,Windows::UI::Xaml::Interop::TypeName,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long GetItemIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetPropertyValue(HSTRING__ *,IInspectable * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetStringRepresentation(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Invoke(Windows::UI::Popups::IUICommand *);
	virtual long NotifyPropertyChanged(HSTRING__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPlacement(tagRECT const *,unsigned long);
	virtual long add_CanExecuteChanged(Windows::Foundation::IEventHandler<IInspectable *> *,EventRegistrationToken *);
	virtual long get_Command(Windows::UI::Xaml::Input::ICommand * *);
	virtual long get_CommandId(HSTRING__ * *);
	virtual long get_Glyph(HSTRING__ * *);
	virtual long get_GlyphFontSize(unsigned int *);
	virtual long get_Label(HSTRING__ * *);
	virtual long get_Type(Windows::UI::Xaml::Interop::TypeName *);
	virtual long get_UICommand(Windows::UI::Popups::IUICommand * *);
	virtual long put_Label(HSTRING__ *);
	virtual long remove_CanExecuteChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CItemDispatchEvent
{
	CItemDispatchEvent(IItemEventSink *,IItem *);
	virtual ~CItemDispatchEvent();
};

struct CItemEventSink
{
	virtual long OnCancelled(IItem *);
	virtual long OnItemChanged(ITEM_CHANGED_TYPE,IItem *,IPropertyKeyStore *);
	virtual long OnItemChanging(ITEM_CHANGED_TYPE,IItem *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CItemHandlerCache
{
	int _AlreadyPresentInRegistrationList(IShellItem *);
	int _IsReentered();
	long _AddToRegistrationList(IShellItem *,int);
	long _AddToRegistrationListOnMainThread(IShellItem *,int);
	long _FlushOldHandlers();
	long _GetCachedHandler(IShellItem *,_GUID const &,unsigned long,_GUID const &,void * *);
	long _GetHandler(IShellItem *,unsigned long,_GUID const &,_GUID const &,void * *);
	long _RegisterNotifications(HANDLERINFO *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _OnFSNotify(long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
public:
	CItemHandlerCache();
	virtual long GetItemHandler(IShellItem *,_GUID const &,unsigned long,GIHFLAGS,_GUID const &,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetItemHandler(IShellItem *,_GUID const &,unsigned long,IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CItemIDFactory<COMMANDITEM,117842473>
{
	static CItemIDFactory<COMMANDITEM,117842473>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
	static CItemIDFactory<COMMANDITEM,117842473>::CHILDITEMID const * _IsValid(_ITEMIDLIST_RELATIVE const *);
protected:
	virtual ~CItemIDFactory<COMMANDITEM,117842473>();
public:
	static COMMANDITEM const * GetDataFromIDList(_ITEMIDLIST_RELATIVE const *);
	static long GetPropertyFromIDList(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagVARIANT *);
	static long s_CreateItemID(COMMANDITEM const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<DELEGATEBASEITEM,597942229>
{
	static CItemIDFactory<DELEGATEBASEITEM,597942229>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
protected:
	virtual ~CItemIDFactory<DELEGATEBASEITEM,597942229>();
public:
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(DELEGATEBASEITEM const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<ITEM_ID,1495602435>
{
protected:
	virtual ~CItemIDFactory<ITEM_ID,1495602435>();
public:
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<ITEM_ID,427229478>
{
	static CItemIDFactory<ITEM_ID,427229478>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
	static CItemIDFactory<ITEM_ID,427229478>::CHILDITEMID const * _IsValid(_ITEMIDLIST_RELATIVE const *);
protected:
	virtual ~CItemIDFactory<ITEM_ID,427229478>();
public:
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(ITEM_ID const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	static tagSERIALIZEDPROPSTORAGE const * GetPropertyStorage(_ITEMIDLIST_RELATIVE const *,unsigned long *);
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<ITEM_ID,428278548>
{
	static CItemIDFactory<ITEM_ID,428278548>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
	static CItemIDFactory<ITEM_ID,428278548>::CHILDITEMID const * _IsValid(_ITEMIDLIST_RELATIVE const *);
protected:
	virtual ~CItemIDFactory<ITEM_ID,428278548>();
public:
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(ITEM_ID const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	static tagSERIALIZEDPROPSTORAGE const * GetPropertyStorage(_ITEMIDLIST_RELATIVE const *,unsigned long *);
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<NSITEM,3203132928>
{
	static CItemIDFactory<NSITEM,3203132928>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
	static CItemIDFactory<NSITEM,3203132928>::CHILDITEMID const * _IsValid(_ITEMIDLIST_RELATIVE const *);
protected:
	virtual ~CItemIDFactory<NSITEM,3203132928>();
public:
	static long GetPropertyFromIDList(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagVARIANT *);
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(NSITEM const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	static tagSERIALIZEDPROPSTORAGE const * GetPropertyStorage(_ITEMIDLIST_RELATIVE const *,unsigned long *);
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<NSITEM,602722782>
{
protected:
	virtual ~CItemIDFactory<NSITEM,602722782>();
public:
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<NSITEM,602722783>
{
	static CItemIDFactory<NSITEM,602722783>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
protected:
	virtual ~CItemIDFactory<NSITEM,602722783>();
public:
	static long GetPropertyFromIDList(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagPROPVARIANT *);
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(NSITEM const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	static tagSERIALIZEDPROPSTORAGE const * GetPropertyStorage(_ITEMIDLIST_RELATIVE const *,unsigned long *);
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<PCSETTINGIDL,2226236028>
{
	static CItemIDFactory<PCSETTINGIDL,2226236028>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
	static CItemIDFactory<PCSETTINGIDL,2226236028>::CHILDITEMID const * _IsValid(_ITEMIDLIST_RELATIVE const *);
protected:
	virtual ~CItemIDFactory<PCSETTINGIDL,2226236028>();
public:
	static long GetDataFromIDList(_ITEMIDLIST_RELATIVE const *,PCSETTINGIDL const * *);
	static long GetPropertyFromIDList(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagPROPVARIANT *);
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(PCSETTINGIDL const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	static tagSERIALIZEDPROPSTORAGE const * GetPropertyStorage(_ITEMIDLIST_RELATIVE const *,unsigned long *);
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<PUBITEMID,427165698>
{
	static CItemIDFactory<PUBITEMID,427165698>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
	static CItemIDFactory<PUBITEMID,427165698>::CHILDITEMID const * _IsValid(_ITEMIDLIST_RELATIVE const *);
protected:
	virtual ~CItemIDFactory<PUBITEMID,427165698>();
public:
	static long GetDataFromIDList(_ITEMIDLIST_RELATIVE const *,PUBITEMID const * *);
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(PUBITEMID const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	static tagSERIALIZEDPROPSTORAGE const * GetPropertyStorage(_ITEMIDLIST_RELATIVE const *,unsigned long *);
	virtual long SetItemAlloc(IMalloc *);
};

class CItemIDFactory<TASKIDL,587303731>
{
	static CItemIDFactory<TASKIDL,587303731>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
	static CItemIDFactory<TASKIDL,587303731>::CHILDITEMID const * _IsValid(_ITEMIDLIST_RELATIVE const *);
protected:
	virtual ~CItemIDFactory<TASKIDL,587303731>();
public:
	static long GetDataFromIDList(_ITEMIDLIST_RELATIVE const *,TASKIDL const * *);
	static long GetPropertyFromIDList(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagPROPVARIANT *);
	static long GetPropertyFromIDList(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagVARIANT *);
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(TASKIDL const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	static tagSERIALIZEDPROPSTORAGE const * GetPropertyStorage(_ITEMIDLIST_RELATIVE const *,unsigned long *);
	virtual long SetItemAlloc(IMalloc *);
};

struct CItemKeyArray
{
	virtual long Clone(IItemKeyArray * *);
	virtual long DetachHDSA(void *);
	virtual long GetAt(int,tagITEMKEY *);
	virtual long GetCount(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CItemMovedEvent
{
	CItemMovedEvent(ICollectionEventSink *,IItem *,IItem *);
	virtual void DispatchEvent();
	virtual ~CItemMovedEvent();
};

class CItemPositioning
{
	int _ComputeOffsets(tagPOINT *);
	void _DropPositionPoints(tagPOINT *);
	void _DropScalePoints(tagPOINT *);
	void _PositionItems(tagPOINT *);
	void _PositionItemsWithPoints(CItemPositioning::DPIWP);
	void _ScaleIfNeeded(tagPOINT *);
	void _ScalePoints(tagPOINT *,tagPOINT,tagPOINT);
};

class CItemSetOperations
{
	long _BeginEnumTask(ITEM_SET_OPERATION,IItemSetOperationCallback *);
	long _BeginFilterTask(IItemSetOperationCallback *);
	long _BeginSortTask(IItemSetOperationCallback *);
	virtual ~CItemSetOperations();
public:
	virtual long BeginOperation(ITEM_SET_OPERATION,IItemSetOperationCallback *);
	virtual long CancelOperation();
	virtual long GetClassID(_GUID *);
	virtual long GetCookie(unsigned long *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetCategoryArray(ICategoryDescriptionArray *);
	virtual long SetCategoryIdKey(_tagpropertykey const &);
	virtual long SetCookie(unsigned long);
	virtual long SetFilterConditions(IItemFilter *,FILTER_OPERATION_FLAGS);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetItemKeyArrays(IItemKeyArray *,IItemKeyArray *);
	virtual long SetItemStores(IItemStore *,IItemStoreOwner *);
	virtual long SetMaxItemCount(unsigned int);
	virtual long SetOptions(ITEM_OPERATION_FLAGS,unsigned long);
	virtual long SetScheduler(IItemTaskScheduler *);
	virtual long SetViewState(IViewStateInfo *);
	virtual long SetVisibleItemCount(unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CItemSidMapping
{
	bool IsDifferentUserSidList(IPublishedItemDescription *);
	long AddSid(unsigned short const *,IEnumString *);
	long Initialize(IShellItem *);
	unsigned long Release();
};

class CItemStore
{
	long _CreateItemKeyArray(ITEM_FLAGS,ITEM_FLAGS,IItemKeyArray * *);
	static int s_ClearEntry(ITEMENTRY *,void *);
	void _SelectEntry(int,ITEMENTRY *);
	void _UnSelectEntry(ITEMENTRY *);
public:
	virtual long ContainsItem(tagITEMKEY const *);
	virtual long DeleteItem(tagITEMKEY const *);
	virtual long DumpContents(int,IDebugOutput *,unsigned __int64 *);
	virtual long FindItemKey(IShellFolder *,_ITEMID_CHILD const *,tagITEMKEY *);
	virtual long GetClassID(_GUID *);
	virtual long GetData(tagITEMKEY const *,_GUID const &,void * *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetItem(tagITEMKEY const *,IShellFolder *,IViewStateInfo *,_GUID const &,void * *);
	virtual long GetItemArray(IShellFolder *,ITEMSTORE_GETITEMFLAGS,ITEM_FLAGS,ITEM_FLAGS,_GUID const &,void * *);
	virtual long GetItemCategory(tagITEMKEY const *,_tagpropertykey const &,tagPROPVARIANT *);
	virtual long GetItemCount(ITEM_FLAGS,ITEM_FLAGS,int *);
	virtual long GetItemFlags(tagITEMKEY const *,ITEM_FLAGS *);
	virtual long GetItemGroups(tagITEMKEY const *,unsigned long,tagITEMGROUP const * *,int *);
	virtual long GetItemIDList(tagITEMKEY const *,IChildId * *);
	virtual long GetItemPropertyStore(GET_PROPERTY_STORE_TYPE,tagITEMKEY const *,IShellFolder2 *,IViewStateInfo *,int,_GUID const &,void * *);
	virtual long GetUnrealizedItem(tagITEMKEY const *,_GUID const &,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long InsertItem(IChildId *,ITEM_FLAGS,IPropertyStore *,tagITEMKEY *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResetItemUpdateFlags(tagITEMKEY const *,ITEM_FLAGS);
	virtual long SetData(tagITEMKEY const *,IUnknown *);
	virtual long SetFailedToRealizeItem(tagITEMKEY const *);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetItemCategory(tagITEMKEY const *,_tagpropertykey const &,tagPROPVARIANT const &);
	virtual long SetItemGroups(tagITEMKEY const *,unsigned long,tagITEMGROUP const *,int);
	virtual long SetItemIDListAndFlags(tagITEMKEY const *,IChildId *,ITEM_FLAGS,ITEM_FLAGS);
	virtual long SetItemPropertyStore(SET_PROPERTY_STORE_TYPE,tagITEMKEY const *,IPropertyStore *);
	virtual unsigned long AddRef();
	virtual unsigned long GetItemCookie(tagITEMKEY const *,int);
	virtual unsigned long Release();
	virtual void SetItemCookie(tagITEMKEY const *,int,unsigned long);
};

class CItemStoreFilter
{
	long _ExpandTextCondition();
public:
	long Initialize(_ITEMIDLIST_ABSOLUTE const *,IObjectCollection *);
	virtual long GetClassID(_GUID *);
	virtual long GetFilterCondition(IFilterCondition * *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetIDListFilters(IObjectCollection * *);
	virtual long GetPropertyFilter(_tagpropertykey *,IFilterCondition * *);
	virtual long GetTextFilterCondition(tagTEXTFILTER_OPTIONS,IFilterCondition * *);
	virtual long GetTextPropKeys(_tagpropertykey * *,unsigned int *);
	virtual long HasFilter(int,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFilterCondition(IFilterCondition *);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetPropertyFilter(_tagpropertykey const &,IFilterCondition *);
	virtual long SetTextFilterCondition(IFilterCondition *);
	virtual long SetTextPropKeys(_tagpropertykey const *,unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CItemThumbnail
{
	int _NewItemsEqualToCurrent(IShellFolder *,CDSA<CItemThumbnail::CHILDID_AND_ITEM> *);
	long _AddItemImage(IShellFolder *,CItemThumbnail::CHILDID_AND_ITEM const *);
	long _CreateChildIdArray(IShellItemArray *,unsigned int,CDSA<CItemThumbnail::CHILDID_AND_ITEM> *,IShellFolder * *);
	long _EnsureImageLoadSnapSizesAvailable(int,int,int,CDSA<ITEM_IMAGE_RESULT> const *);
	long _GetImageScaledRect(IImageList2 *,int,tagSIZE,tagRECT *);
	long _GetMaxImageDimensions(tagRECT *);
	long _ResetTLT(unsigned int,int);
	long _Resize(int);
	long _SyncPrefetch(int,int);
	long _UpdateWithImageResult(int,IShellFolder *,IMAGE_PREFETCH_RESULT const &);
	static int s_ChildIdAndItemDestroyCB(CItemThumbnail::CHILDID_AND_ITEM *,void *);
	void _ReleaseItems();
public:
	long Initialize(int,int,int,int,int);
	long NotifyImagePrefetchComplete(IMAGE_PREFETCH_RESULT const &);
	virtual long Draw(HDC__ *,tagRECT const *,int);
	virtual long GetContentBounds(tagRECT const *,tagRECT *);
	virtual long GetMaxImageCount(unsigned int *);
	virtual long GetPrefetchTask(int,int,IItemThumbnailCallback *,IFrameWorkItem * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long SetAsync(int);
	virtual long SetItems(IShellItemArray *,ITSIF);
	virtual long SetMultiItemLayout(int,int,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CItemTile
{
	long _GetItemPropertyValueAndText2(IShellItem2 *,_tagpropertykey const &,_tagpropertykey const &,PROPDESC_FORMAT_FLAGS,tagPROPVARIANT *,unsigned short * *);
	long _InitAccName();
	long _InitAlternateName();
	long _InitDate(CONFIRM_CONFLICT_ITEM const *,bool);
	long _InitIcon(CONFIRM_CONFLICT_ITEM const *);
	long _InitKeepAll();
	long _InitName(CONFIRM_CONFLICT_ITEM const *);
	long _InitPath(CONFIRM_CONFLICT_ITEM const *,bool);
	long _InitSize(CONFIRM_CONFLICT_ITEM const *);
public:
	long AppendTag(unsigned short const *,unsigned int);
	long Initialize(DirectUI::Element *,unsigned long *,DirectUI::DUIXmlParser *,CONFLICTDLG_ITEMTILE_TYPE,int,ISyncMgrConflictItems *);
	long OnClick(ISyncMgrConflictResolutionItems * *);
	long OnContextMenu(HWND__ *);
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::DUIXmlParser *,CONFLICTDLG_ITEMTILE_TYPE,int,ISyncMgrConflictItems *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long CreateResolutionItemsItf(ISyncMgrConflictItems *,ISyncMgrConflictResolutionItems * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

struct CItemTranslatedEvent
{
	CItemTranslatedEvent(ICollectionEventSink *,IItem *,IItem *);
	virtual void DispatchEvent();
	virtual ~CItemTranslatedEvent();
};

struct CItemsAddedEvent
{
	virtual void DispatchEvent();
};

struct CItemsDeletedEvent
{
	virtual void DispatchEvent();
};

class CItemsUnavailableDialog
{
	static long _s_CreateDialogRoot(void *,IPopupWindow *,CModalDialogBase * *,DirectUI::Element * *);
	static long _s_CreatePopupWindow(void *,IPopupWindow * *);
public:
	static long s_ShowDialog(HWND__ *,ItemsOfflineAvailability,unsigned short const *,bool *);
};

struct CJobInfo
{
	long DuplicateFrom(CJobInfo const *);
	long NewJob();
	void Destroy();
	void Stop();
};

struct CKeywordStringWordSink
{
	CKeywordStringWordSink(bool);
	virtual long EndAltPhrase();
	virtual long PutAltWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long PutBreak(tagWORDREP_BREAK_TYPE);
	virtual long PutWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long StartAltPhrase();
};

class CKnownFoldersFilter
{
	long EnsureManager();
public:
	_GUID GetKnownFolderTarget(_GUID const &);
	bool IsKnownFolderSetByPolicy(IKnownFolder *);
	long ShouldShowInstanceFolder(_GUID const &,bool *);
	long ShouldShowKnownFolder(IKnownFolder *,bool *);
	long ShouldShowKnownFolder(_GUID const &,bool *);
};

struct CKoreanDecomposition
{
	CKoreanDecomposition();
	long DecomposeKoreanForPrefixMatch(unsigned short const *,unsigned long,unsigned short * *);
	long DecomposeKoreanForPrefixMatch(unsigned short const *,unsigned short * *);
};

struct CLambdaCommandHandler
{
	CLambdaCommandHandler();
	long RuntimeClassInitialize<unsigned int,<lambda_49c7f639766ab656496bc5e729e619cf> >(unsigned int,unsigned int,<lambda_49c7f639766ab656496bc5e729e619cf> const &);
	long RuntimeClassInitialize<unsigned int,<lambda_b9b45446d5f48a282e42d612aaa7f862> >(unsigned int,unsigned int,<lambda_b9b45446d5f48a282e42d612aaa7f862> const &);
	long RuntimeClassInitialize<unsigned int,<lambda_c79e6e0b4a227b8baeade6c57fcf2c18> >(unsigned int,unsigned int,<lambda_c79e6e0b4a227b8baeade6c57fcf2c18> const &);
	virtual long Invoke(IPopupWindow *,IPopupCommand *);
};

class CLaunchActivatedEventArgs
{
	virtual ~CLaunchActivatedEventArgs();
public:
	CLaunchActivatedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Arguments(HSTRING__ * *);
	virtual long get_TileActivatedInfo(Windows::ApplicationModel::Activation::ITileActivatedInfo * *);
	virtual long get_TileId(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLauncherOptions
{
	bool _StringEquals(unsigned short const *,unsigned short const *);
	long _SetStringWithLengthLimitNoNulls(HSTRING__ *,unsigned int,Windows::Internal::String *);
public:
	CLauncherOptions();
	long RuntimeClassInitialize();
	long RuntimeClassInitialize(Windows::Foundation::Point,tagRECT const &);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long get_ContentType(HSTRING__ * *);
	virtual long get_DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference *);
	virtual long get_DisplayApplicationPicker(unsigned char *);
	virtual long get_FallbackUri(Windows::Foundation::IUriRuntimeClass * *);
	virtual long get_IgnoreAppUriHandlers(unsigned char *);
	virtual long get_NeighboringFilesQuery(Windows::Storage::Search::IStorageFileQueryResult * *);
	virtual long get_PreferredApplicationDisplayName(HSTRING__ * *);
	virtual long get_PreferredApplicationPackageFamilyName(HSTRING__ * *);
	virtual long get_TargetApplicationPackageFamilyName(HSTRING__ * *);
	virtual long get_TreatAsUntrusted(unsigned char *);
	virtual long get_UI(Windows::System::ILauncherUIOptions * *);
	virtual long put_ContentType(HSTRING__ *);
	virtual long put_DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference);
	virtual long put_DisplayApplicationPicker(unsigned char);
	virtual long put_FallbackUri(Windows::Foundation::IUriRuntimeClass *);
	virtual long put_IgnoreAppUriHandlers(unsigned char);
	virtual long put_NeighboringFilesQuery(Windows::Storage::Search::IStorageFileQueryResult *);
	virtual long put_PreferredApplicationDisplayName(HSTRING__ *);
	virtual long put_PreferredApplicationPackageFamilyName(HSTRING__ *);
	virtual long put_TargetApplicationPackageFamilyName(HSTRING__ *);
	virtual long put_TreatAsUntrusted(unsigned char);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CLauncherOptions();
};

namespace CLauncherTelemetry
{
	class PinningActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void PinnedListModified(unsigned short const *,LauncherTelemetry::Location,LauncherTelemetry::ModificationType);
		void PinnedListTaskbarAdded(unsigned short const *,LauncherTelemetry::Location,LauncherTelemetry::ModificationType,unsigned short const *);
		void StartActivity();
	};

};

struct CLauncherUIMode
{
	CLauncherUIMode();
	virtual long GetDesktopSwitchPreference(IAM_DESKTOP_SWITCH_OPTION *);
	virtual long GetMonitor(HMONITOR__ * *);
	virtual long GetMonitorPreference(ACTIVATION_MONITOR_PREFERENCE *);
	virtual long GetPlaceModeOption(PLACE_MODE_OPTION *);
	virtual long GetRevertLayoutOption(REVERT_LAYOUT_OPTION *,HWND__ * *);
	virtual long GetSwitchAppFlags(SWITCH_APP_FLAGS *);
	virtual long GetUIMode(EC_HOST_UI_MODE *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ShouldShowDownloadUI();
	virtual long ShouldSwitchToDesktop();
	virtual long ShouldWakeOnRPCCalls();
};

class CLauncherUIModeWithDesktopSwitch
{
	virtual long ShouldSwitchToDesktop();
public:
	CLauncherUIModeWithDesktopSwitch();
};

struct CLauncherUIOptions
{
	CLauncherUIOptions();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetWindowRect(tagRECT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetWindowRect(tagRECT const *);
	virtual long get_InvocationPoint(Windows::Foundation::IReference<Windows::Foundation::Point> * *);
	virtual long get_PreferredPlacement(Windows::UI::Popups::Placement *);
	virtual long get_SelectionRect(Windows::Foundation::IReference<Windows::Foundation::Rect> * *);
	virtual long put_InvocationPoint(Windows::Foundation::IReference<Windows::Foundation::Point> *);
	virtual long put_PreferredPlacement(Windows::UI::Popups::Placement);
	virtual long put_SelectionRect(Windows::Foundation::IReference<Windows::Foundation::Rect> *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CLayerCallback
{
	virtual long ForceImagePresent(ILayerImageList *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CLayoutDefinition
{
	CLayoutDefinition(IStream *,CLayoutFolder *);
	virtual long GetLayoutDefinition(IUnknown * *);
	virtual long GetPossibleRedirectTarget(_GUID const &,int *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Register();
	virtual long UnRegister();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CLayoutDefinition();
};

class CLayoutFolder
{
	long _CompareIDListAllNamedProperties(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	long _CompareIDListProperty(_tagpropertykey const &,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	long _CreateFolder(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _CreateItem(int,unsigned short const *,_ITEMID_CHILD * *);
	long _EnsureChildren();
	long _EnsureLayoutStream();
	long _EnsureOwnProperties();
	long _GetNamedPropertyStore();
	long _GetPropertyStoreForItem(int,unsigned short const *,IPropertyStore * *);
	long _InitializeFromFolderAndDOM(CLayoutFolder *,IXMLDOMElement *);
	long _LoadElementFromStream(IStream *,IXMLDOMElement * *);
	long _ReadLocalOnlyInfo(IXMLDOMElement *,bool *,unsigned short *,int);
	long _ShouldRedirect(_GUID const &,int *);
	virtual ~CLayoutFolder();
public:
	CLayoutFolder();
	long GetPossibleRedirectTarget(_GUID const &,int *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFlags(SEARCHBOX_FLAGS *);
	virtual long GetInputParams(_GUID const &,void * *);
	virtual long GetMRULocation(_GUID *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetParamCount(unsigned long *);
	virtual long GetParamNameAt(unsigned long,unsigned short * *);
	virtual long GetParamValue(unsigned short const *,unsigned short * *);
	virtual long GetRoot(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetSuggestPopupSetting(SEARCH_BOX_SUGGEST_POPUP_SETTING *);
	virtual long GetTimerDelay(unsigned int *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long InitNew();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLayoutFolderCB
{
protected:
	long _InitializeClient();
public:
	CLayoutFolderCB(CLayoutFolder *,_ITEMIDLIST_ABSOLUTE const *,_GUID const &);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

struct CLayoutFolderEnum
{
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLibrariesFolderBase
{
	long _CreatePropertyStore(IShellFolder *,_ITEMID_CHILD const *,_GUID const &,void * *);
	long _GetDisplayName(IShellFolder *,_ITEMID_CHILD const *,unsigned long,unsigned short *,int);
	long _GetTransferMediumItem(IShellFolder *,_ITEMID_CHILD const *,_GUID const &,void * *);
	long _OnBindToObject(IShellFolder *,_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	long _OnCreateViewObject(IShellFolder *,HWND__ *,_GUID const &,void * *);
	long _OnGetAttributesOf(IShellFolder *,unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	long _OnGetDetailsEx(IShellFolder2 *,_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	long _OnGetUIObjectOf(IShellFolder *,HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	long _OnParseDisplayName(IShellFolder *,HWND__ *,IBindCtx *,unsigned short *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	long _WrapPropertyStore(IShellFolder *,_ITEMID_CHILD const *,IUnknown *,unsigned long,_GUID const &,void * *);
protected:
	virtual int v_AreAllLibraries(IShellFolder *,unsigned int,_ITEMID_CHILD const * const *);
	virtual int v_IsLibrary(IShellFolder *,_ITEMID_CHILD const *);
public:
	long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetTransfer(_ITEMIDLIST_RELATIVE const *,HWND__ *,_GUID const &,void * *);
	virtual long OnBindToObject(IShellFolder *,_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
	virtual long OnCreateViewObject(IShellFolder *,HWND__ *,_GUID const &,void * *);
	virtual long OnGetAttributesOf(IShellFolder *,unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long OnGetDetailsEx(IShellFolder *,_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long OnGetDisplayNameOf(IShellFolder *,_ITEMID_CHILD const *,unsigned long,unsigned short *,int);
	virtual long OnGetUIObjectOf(IShellFolder *,HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,void * *);
	virtual long OnParseDisplayName(IShellFolder *,HWND__ *,IBindCtx *,unsigned short *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long Update(IBindCtx *,_ITEMID_CHILD const *,_ITEMID_CHILD * *);
};

class CLibrariesTransfer
{
	void _UnshareLocations(IShellItem *);
public:
	static long s_CreateInstance(ITransferSource *,_GUID const &,void * *);
	virtual long Advise(ITransferAdviseSink *,unsigned long *);
	virtual long ApplyPropertiesToItem(IShellItem *,IShellItem * *);
	virtual long CopyItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,COPY_ITEM_FLAGS,IShellItem * *);
	virtual long EnterFolder(IShellItem *);
	virtual long GetDefaultDestinationName(IShellItem *,IShellItem *,unsigned short * *);
	virtual long IsCopySupported(IShellItem *,IShellItem *,int *);
	virtual long LastCopyError(LAST_COPYITEM_ERROR_TYPE *);
	virtual long LeaveFolder(IShellItem *);
	virtual long LinkItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long MoveItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long OpenItem(IShellItem *,unsigned long,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RecycleItem(IShellItem *,IShellItem *,unsigned long,IShellItem * *);
	virtual long RemoveItem(IShellItem *,unsigned long);
	virtual long RenameItem(IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long SetProperties(IPropertyChangeArray *);
	virtual long Unadvise(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CLibraryAddLocationTask
{
	CLibraryAddLocationTask();
	long _Initialize(HWND__ *,IUnknown *,IShellItem *);
	static unsigned long s_LibraryAddLocation(void *);
	void TransferActivity(LibraryTelemetry::AddLibraryLocation &);
	void _ExpandInNavigationPane(IShellItem *);
	void _LibraryAddLocation();
};

class CLibraryBaseRibbonCommand
{
protected:
	virtual ~CLibraryBaseRibbonCommand();
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CLibraryBaseRibbonCommandEnum
{
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CLibraryDropTarget
{
	CLibraryDropTarget(HWND__ *,IShellItem *);
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
};

class CLibraryFolderContextMenu
{
protected:
	virtual ICIVERBTOIDMAP const * get_MappingArray();
	virtual long _OnInvokeCommand(unsigned int,_CMINVOKECOMMANDINFO *);
	virtual long _OnQueryContextMenu(HMENU__ *,unsigned int);
	virtual unsigned int get_MenuID();
	virtual ~CLibraryFolderContextMenu();
public:
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
};

struct CLibraryLocationCommand
{
	CLibraryLocationCommand(IShellItem *,IShellItem *,bool);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CLibraryLocationFileDialogEvent
{
	virtual long OnFileOk(IFileDialog *);
	virtual long OnFolderChange(IFileDialog *);
	virtual long OnFolderChanging(IFileDialog *,IShellItem *);
	virtual long OnOverwrite(IFileDialog *,IShellItem *,FDE_OVERWRITE_RESPONSE *);
	virtual long OnSelectionChange(IFileDialog *);
	virtual long OnShareViolation(IFileDialog *,IShellItem *,FDE_SHAREVIOLATION_RESPONSE *);
	virtual long OnTypeChange(IFileDialog *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLibraryPropHandler
{
	__int64 _LibraryPropPageProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _IsShared();
	long _CalculateSize();
	long _EnsureExplorerBrowser();
	long _OnApply();
	long _OnInit();
	long _RestoreLibraryLocations();
	long _UpdateDefaultSaveValue(_ITEMID_CHILD const *,IPropertyStore *,tagPROPVARIANT const &);
	unsigned int _GetIconColumnWidth();
	virtual HWND__ * v_GetParentWindow();
	virtual LIBRARY_ADD_LOCATION_ENTRY_POINTS v_GetLibraryManagementEntryPoint();
	virtual long v_ApplyViewSettings();
	virtual long v_AsyncUpdateSupportStatuses();
	virtual long v_InitViewPropertiesForItem(IShellItem *);
	virtual unsigned int v_GetEmptyStringResourceID();
	virtual void v_EnableAddLocationButton(int);
	virtual void v_EnableDefaultPublicSaveButton(int);
	virtual void v_EnableDefaultSaveButton(int);
	virtual void v_EnableRemoveLocationButton(int);
	virtual void v_OnLibraryChanged();
	virtual void v_SetFocusAddLocationButton();
	virtual ~CLibraryPropHandler();
	void _FillTemplateComboBox();
	void _InitDlgIconAndPath();
	void _OnLibraryChanged();
public:
	CLibraryPropHandler();
	static __int64 s_LibraryPropPageProcForPropPage(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned int LibraryPropPageCallback(HWND__ *,unsigned int,_PROPSHEETPAGEW *);
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long ContextSensitiveHelp(int);
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long GetWindow(HWND__ * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual long WalkComplete(long);
	virtual long v_GetDefaultSaveLocationValue(_ITEMID_CHILD const *,unsigned long *);
	virtual long v_SetDefaultSaveLocationValue(_ITEMID_CHILD const *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLibraryPropSheetItemContextMenu
{
protected:
	virtual ICIVERBTOIDMAP const * get_MappingArray();
	virtual long _OnInvokeCommand(unsigned int,_CMINVOKECOMMANDINFO *);
	virtual long _OnQueryContextMenu(HMENU__ *,unsigned int);
	virtual unsigned int get_MenuID();
	virtual ~CLibraryPropSheetItemContextMenu();
public:
	CLibraryPropSheetItemContextMenu(CManageLibraryLocationBase *,int,HWND__ *);
	virtual long GetContextMenu(IContextMenu *,IContextMenu * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLibrarySaveOperation
{
	long _EnsureRealItems();
	long _EnsureStream(SLTIFLAGS);
	virtual ~CLibrarySaveOperation();
	void _ChangeNotifySuspendResume(int);
public:
	long SaveLibrary(HWND__ *,ILibraryDescription *,SLTIFLAGS,IShellItemArray *,IShellItemArray *);
	static long CreateForExistingLibrary(IShellItem *,CLibrarySaveOperation * *);
	static long CreateForNewLibrary(unsigned short const *,CNLIFLAGS,IShellItem *,CLibrarySaveOperation * *);
};

class CLibrarySimpleRibbonCommand
{
	virtual ~CLibrarySimpleRibbonCommand();
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CLibraryTransferHelper
{
	static long s_CreateInstance(ITransferHelper *,_GUID const &,void * *);
	virtual long FindUniqueName(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
	virtual long GetDestinationFlags(IShellItem *,TRANSFERDESTFLAGS *);
	virtual long GetSourceFlags(IShellItem *,TRANSFERSOURCEFLAGS *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetRestrictions(TRANSFERRESTRICTIONS);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLicensePage
{
	__int64 _OnInitDialog();
	static __int64 s_DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned int s_PageCallback(HWND__ *,unsigned int,_PROPSHEETPAGEW *);
public:
	static long CreateInstance(IShellItemArray *,_GUID const &,void * *);
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CLimitedMalloc
{
	static long CreateInstance(unsigned __int64,_GUID const &,void * *);
	virtual int DidAlloc(void *);
	virtual unsigned __int64 GetSize(void *);
	virtual void * Alloc(unsigned __int64);
	virtual void * Realloc(void *,unsigned __int64);
	virtual void Free(void *);
	virtual void HeapMinimize();
};

class CLinguisticAlternativeGenerator
{
	bool _ContainsConvertedText(ITfContext *,unsigned long,ITfRange *);
	bool _IsSafeAlternativeString(unsigned short const *);
	bool _IsUILessModeSupported(_GUID const &);
	long _CandiateListToAlternatives(ITfCandidateList *,unsigned short const *,unsigned int,unsigned int,unsigned short const *,unsigned int *,unsigned short * * *);
	long _EnsureTextServiceInfo();
	long _GetCandidates(unsigned short const *,ITfCandidateList * *);
	long _GetFirstCompositionRange(ITfContext *,ITfRange * *);
	long _GetQueryAndCompositionInfo(unsigned short * *,unsigned int *,unsigned int *,ITfRange * *);
	long _GetQueryFromRange(ITfRange *,unsigned long,unsigned short * *);
	long _SubstituteAlternative(unsigned short const *,unsigned __int64,unsigned __int64,unsigned short const *,unsigned short * *);
	void _EnsureCompatible();
public:
	CLinguisticAlternativeGenerator();
	static long s_BuildOrQuery(unsigned short const *,unsigned int,unsigned int,unsigned short const * *,unsigned short * *);
	static void s_FreeAlternatives(unsigned int,unsigned short * *);
	virtual int CompositionContainsConvertedText();
	virtual int CompositionOccurred();
	virtual int ConversionOccurred();
	virtual int IsImeCompatible();
	virtual int IsImeComposing();
	virtual int IsProcessingPossibleFocusLossKey();
	virtual long AdviseImeCompatible(IImeCompatibleChangedSink *,unsigned long *);
	virtual long AdviseImeComposition(ICompositionChangedSink *,unsigned long *);
	virtual long CanGenerateAlternatives(int *);
	virtual long GenerateAlternatives(unsigned short const *,unsigned int,unsigned int,IQueryWithLinguisticAlternatives * *);
	virtual long HostControlHasFocus(int *);
	virtual long OnActivated(_GUID const &,_GUID const &,int);
	virtual long OnEndEdit(ITfContext *,unsigned long,ITfEditRecord *);
	virtual long SetEditContext(IUnknown *,HWND__ *);
	virtual long UnadviseImeCompatible(unsigned long);
	virtual long UnadviseImeComposition(unsigned long);
	virtual void ResetUsageHistory();
	virtual void SetHostControlHasFocusOverride(int);
	virtual void SetProcessingPossibleFocusLossKey(int);
	virtual ~CLinguisticAlternativeGenerator();
};

struct CLinkedList<CAnyAlias>
{
	void Remove(CLinkedNode<CAnyAlias> const *);
};

struct CLinkedNode<CAnyAlias>
{
	CLinkedNode<CAnyAlias>();
};

struct CLinkedWalk<CAnyAlias>
{
	CLinkedNode<CAnyAlias> * Remove();
	int Step();
	void Delete();
};

struct CLinkedWalk<CIDLData>
{
	int Step();
	void Delete();
};

struct CLinkedWalk<CIDLNode>
{
	CLinkedNode<CIDLNode> * Remove();
	int Step();
	void Delete();
};

struct CLinkedWalk<CRegisteredClient>
{
	int Step();
	void Delete();
};

struct CLinkedWalk<IChangeNotifySource *>
{
	CLinkedNode<IChangeNotifySource *> * Remove();
	int Step();
	void Delete();
};

class CListViewHost
{
	struct CJustInTimeItemSink
	{
		virtual long OnCancelled(IItem *);
		virtual long OnItemChanged(ITEM_CHANGED_TYPE,IItem *,IPropertyKeyStore *);
		virtual long OnItemChanging(ITEM_CHANGED_TYPE,IItem *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	LC_ITEM_FLAGS _CheckStateToItemFlags(unsigned int);
	LC_ITEM_FLAGS _ItemStateToItemFlags(unsigned int);
	PROPDESC_FORMAT_FLAGS _GetFormatDisplayFlagsForKey(_tagpropertykey const &);
	__int64 _GetDisplayInfo(tagLVDISPINFOW *);
	__int64 _OnBeginLabelEdit(tagLVDISPINFOW const *);
	__int64 _OnEndLabelEdit(tagLVDISPINFOW *);
	__int64 _OnHdrNotify(tagNMHEADERW *);
	__int64 _OnIdealImageUnavailable(tagNMLVASYNCDRAWN *);
	__int64 _OnLVNotify(tagNMLISTVIEW *);
	__int64 _ViewSubclassWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _ColumnIndexToOrder(int);
	int _ColumnOrderToIndex(int);
	int _GetColumnIconIndex(_tagpropertykey const &);
	int _GetDrawPropertyControlFlags(_tagpropertykey const &);
	int _GetFocusedGroup();
	int _GetItemCount(tagLC_ITEM_SET_TYPE);
	int _GetVisibleSlotCount(int);
	int _HitTestItem(tagPOINT const *,int);
	int _IndexFromLCITEM(tagLCITEM const &);
	int _IsCollectionGrouped();
	int _IsMultiValueGrouped();
	int _IsPositionedView();
	int _LCItemToItemIndex(tagLCITEM const *);
	long _AddGroupToListView(int);
	long _AddGroupsToListView(unsigned int);
	long _CreateGroupEntry(IItem *,GROUP_ITEM_ENTRY *);
	long _EnsureRealizedBatch(CDPARelease<IItem,CTContainer_PolicyRelease<IItem> > *);
	long _FillColumnsFromPropString(unsigned short const *,unsigned int * const,int * const,unsigned int *);
	long _GetHost(IListControlHost * *);
	long _GetIndexAndVersion(IItem *,unsigned int *,unsigned int *);
	long _GetInfoTipText(IItem *,unsigned short const *,unsigned short * *);
	long _GetItem(unsigned int,IItem * *);
	long _GetKeyForListViewColumn(int,_tagpropertykey *);
	long _GetTilePropsForItem(IItem *,unsigned short * *);
	long _GetVisibleItem(int,IItem * *);
	long _HandleTab(HWND__ *);
	long _InitLVFooter(IListViewFooter *);
	long _InsertGroup(unsigned int,int);
	long _ItemIndexToLCItem(int,tagLCITEM *);
	long _ItemToLVITEMINDEX(int,tagLVITEMINDEX *);
	long _MapSubItemToKey(int,_tagpropertykey *);
	long _OnBeginPropertyEdit(int,_tagpropertykey const &,LV_EDIT_FLAGS,_GUID const &,void * *);
	long _PrimeCollection();
	long _PrimeGroupCollection(unsigned int);
	long _PropVariantToText(_tagpropertykey const &,tagPROPVARIANT const &,unsigned short *,int);
	long _RemoveGroup(int);
	long _ShowTryHarder(IListViewFooter *,IObjectCollection *,unsigned int);
	long _UpdateCachedItems(int,int);
	static __int64 s_HeaderSubclassWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_ListViewSubclassWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_ViewSubclassWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static int _CmpLeftToRightTopToBottom(int const *,int const *,__int64);
	static int s_ClearGroupItemEntry(GROUP_ITEM_ENTRY *,void *);
	static int s_ClearViewItemEntry(VIEW_ITEM_ENTRY *,void *);
	unsigned int _GetListViewColumnCount();
	unsigned int _ItemFlagsToListViewState(LC_ITEM_FLAGS);
	unsigned long _GetInitialListViewStyle();
	unsigned long _GetItemAttributes(IItem *,unsigned long);
	virtual ~CListViewHost();
	void OnDPIChanged();
	void _AddColumnToListView(_tagpropertykey const &,unsigned int,unsigned int);
	void _AdjustColumnHeaderForViewMode(unsigned int,unsigned int);
	void _AutoSizeColumns();
	void _ClearArrangeFeedback();
	void _ClearGroupsFromListView();
	void _ClearItemPositions();
	void _ClearVisibleItemCache();
	void _DisableGroupView();
	void _DoColumnClicked(unsigned int);
	void _DoColumnHeaderMenu(unsigned int,tagPOINT const *);
	void _DoColumnOverflowMenu(unsigned int,tagPOINT const *);
	void _DoColumnsMenu(tagPOINT const *);
	void _EnableGroupView();
	void _EndListViewDoneEvent();
	void _ExpandOrCollapseGroup(int,int);
	void _FocusOnSomething();
	void _HandleKeyDown(tagLVKEYDOWN const *);
	void _OnCheckStateChange(int,tagNMLISTVIEW *);
	void _OnClearSelection();
	void _OnCollectionChanged();
	void _OnColumnOrderChanged();
	void _OnDelayedGroupCollectionChanged();
	void _OnFolderFlagsChanged(FOLDERFLAGS);
	void _OnGetInfoTip(tagNMLVGETINFOTIPW *);
	void _OnInfoTipReady(IItem *,unsigned short const *);
	void _OnPostViewModeSwitch(FOLDERVIEWMODE,FOLDERVIEWMODE);
	void _OnPreViewModeSwitch(FOLDERVIEWMODE,FOLDERVIEWMODE);
	void _OnScrollTimerExpired();
	void _OnSelectionChange(int,unsigned int,unsigned int);
	void _OnViewModeAndImageSizeChanged(FOLDERVIEWMODE,unsigned int);
	void _OnVisibleColumnsChanged();
	void _OnWinIniChange(unsigned __int64,unsigned short const *);
	void _PruneVirtualizedItems();
	void _RedrawItem(IItem *);
	void _ReleaseCurrentCollection();
	void _ReleaseImageServices();
	void _ReloadImageServices();
	void _ResizeListViewImageList();
	void _SetColumnFormats(unsigned long,unsigned long,int);
	void _SetFocus(int);
	void _SetItemPosition(int,int,int);
	void _SetListViewImageList(_IMAGELIST *);
	void _SetRedraw(int);
	void _SetTileViewInfo();
	void _SetViewMode(FOLDERVIEWMODE);
	void _StartListViewDoneEvent();
	void _SwitchToViewModeAndIconSizeWorker(FOLDERVIEWMODE,FOLDERVIEWMODE,unsigned int);
	void _SyncSelectionIndices();
	void _UnregisterViewSettings();
	void _UpdateAllGroupUI(int);
	void _UpdateArrangeFeedback();
	void _UpdateFilterColumnUI();
	void _UpdateGroupUI(int,int);
	void _UpdateImagesPerView();
	void _UpdateListViewItemCount(unsigned int,UPDATEITEMS_FLAGS);
	void _UpdateSelectionMode();
	void _UpdateThumbnailSpacing();
	void _UpdateUnderlines();
public:
	CListViewHost();
	int ItemToListViewIndex(IItem *);
	long Init(IShellFolder2 *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long AutoSizeColumn(_tagpropertykey const &,int);
	virtual long BeginGroupEdit(int,_GUID const &,void * *);
	virtual long BeginSubItemEdit(int,int,LV_EDIT_FLAGS,_GUID const &,void * *);
	virtual long Cancel();
	virtual long CollapseAllGroups();
	virtual long ContextSensitiveHelp(int);
	virtual long CreateControl(HWND__ *,IListControlHost *,IViewSettings *);
	virtual long Destroy();
	virtual long DismissEdit();
	virtual long DragSelectItem(tagLCITEM const *);
	virtual long EditItemLabel(tagLCITEM const *,tagPOINT const *);
	virtual long EnableAlphaShadow(int);
	virtual long EndGroupEdit(int,int,IPropertyControl *);
	virtual long EndSubItemEdit(int,int,int,IPropertyControl *);
	virtual long EnsureVisible(tagLCITEM const &);
	virtual long ExpandAllGroups();
	virtual long FindItem(IItem *,tagLCITEM *);
	virtual long FindItemAndIndex(IItem *,tagLCITEM *);
	virtual long GetClassID(_GUID *);
	virtual long GetColor(VPCOLORFLAGS,unsigned long *);
	virtual long GetFocusedItem(tagLCITEM *);
	virtual long GetFont(tagLOGFONTW *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetInsertMark(tagLCITEM *);
	virtual long GetInsertMarkRect(tagRECT *);
	virtual long GetItem(int,IItem * *);
	virtual long GetItemCount(tagLC_ITEM_SET_TYPE,unsigned int *);
	virtual long GetItemGroup(int,int,int *);
	virtual long GetItemGroupCount(int,int *);
	virtual long GetItemHeight(int *);
	virtual long GetItemInGroup(int,int,int *);
	virtual long GetItemPosition(int,tagPOINT *);
	virtual long GetItemPosition(tagLCITEM const &,tagPOINT *);
	virtual long GetItemRect(int,tagRECT *);
	virtual long GetItemSize(int *,int *);
	virtual long GetItemSpacing(int *,int *);
	virtual long GetItemState(tagLCITEM const &,LC_ITEM_FLAGS *);
	virtual long GetItems(tagLC_ITEM_SET_TYPE,tagLC_ITEM_SET_ORDER,_GUID const &,void * *);
	virtual long GetNextIndex(int,tagLC_NEXT_INDEX_STATE,unsigned long,int *);
	virtual long GetScrollingWindow(_GUID const &,void * *);
	virtual long GetSubItemControl(int,int,_GUID const &,void * *);
	virtual long GetSubItemTitle(int,unsigned short *,int);
	virtual long GetTransparentBackground(int *);
	virtual long GetVisibleItemCount(unsigned int *);
	virtual long GetWindow(HWND__ * *);
	virtual long GhostSelectedItems(int);
	virtual long HasFocusIO();
	virtual long HitTestInsertMark(tagPOINT const *,tagLCITEM *);
	virtual long HitTestItem(tagPOINT const *,int,tagLCITEM *);
	virtual long HitTestItem(tagPOINT,int *);
	virtual long InvalidateEmptyText();
	virtual long InvalidateTryHarder();
	virtual long InvokeSelectionContextMenu(int);
	virtual long IsUserPositioned();
	virtual long MapPoint(tagLC_POINT_TYPE,tagPOINT const *,tagLC_POINT_TYPE,tagPOINT *);
	virtual long MapRect(int,HWND__ *,tagRECT *);
	virtual long MergeSelectionContextMenu(HMENU__ *,int,tagPOINT const *);
	virtual long OnButtonClicked(int,__int64,int *);
	virtual long OnCacheHint(tagLVITEMINDEX,tagLVITEMINDEX);
	virtual long OnCancelled();
	virtual long OnCancelled(IItem *);
	virtual long OnCollectionChanged(unsigned int,tagCOLLECTION_CHANGE_STATE);
	virtual long OnDestroyButton(int,__int64);
	virtual long OnExplorerWindowReady();
	virtual long OnGetCountDone(unsigned int,tagCOUNT_TYPE,long);
	virtual long OnImageListChanged();
	virtual long OnInvokeVerb(int,unsigned short const *);
	virtual long OnItemChanged(ITEM_CHANGED_TYPE,IItem *,IPropertyKeyStore *);
	virtual long OnItemChanging(ITEM_CHANGED_TYPE,IItem *);
	virtual long OnItemMoved(IItem *,IItem *);
	virtual long OnItemTranslated(IItem *,IItem *);
	virtual long OnItemsAdded(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnItemsDeleted(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnPrepareDone(unsigned int,long);
	virtual long OnSettingsChanged(unsigned long);
	virtual long OnSettingsLoad(IPropertyBag *);
	virtual long OnSettingsSave(IPropertyBag *);
	virtual long OnUniqueLeafCountChanged();
	virtual long OnViewChanging(tagLC_VIEW_CHANGING);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long RedrawItem(tagLCITEM const &);
	virtual long RefreshSettings();
	virtual long RequiresGetCountTask();
	virtual long Select(tagLC_SELECTION_MODE);
	virtual long SetColor(VPCOLORFLAGS,unsigned long);
	virtual long SetFont(tagLOGFONTW const *,int);
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetInnerFocus(int);
	virtual long SetInsertMark(tagLCITEM const *);
	virtual long SetItemCollection(IItemCollection *);
	virtual long SetItemHeight(int);
	virtual long SetItemPosition(int,tagPOINT);
	virtual long SetItemPosition(tagLCITEM const &,tagPOINT const *);
	virtual long SetItemState(tagLCITEM const &,LC_ITEM_FLAGS,LC_ITEM_FLAGS);
	virtual long SetTheme(unsigned short const *,unsigned short const *);
	virtual long SetTileWidth(int);
	virtual long SetTransparentBackground(int);
	virtual long SetWatermark(HBITMAP__ *,VPWATERMARKFLAGS);
	virtual long ShowContextMenu(tagPOINT const *);
	virtual long SuspendResumePositionTracking(int);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLocalCopyHelper
{
protected:
	long _DownloadUsingFileOperation(HWND__ *,LCFLAGS,IFileOperationProgressSink *);
	long _DownloadUsingStreams(LCFLAGS,IBindCtx *,IFileOperationProgressSink *);
	long _GetLocalStream(unsigned long,IStream * *,_FILETIME *);
	long _GetRemoteStream(LCFLAGS,unsigned long,IBindCtx *,IStream * *,_FILETIME *);
	long _InitCacheEntry();
	long _SetCacheName();
	long _UpdateLocalCopyIfNeeded(bool);
public:
	virtual long BindToHandlerOverStream(IBindCtx *,_GUID const &,IStream * *,_GUID const &,void * *);
	virtual long BindToStream(LCFLAGS,IBindCtx *,IStream * *);
	virtual long Download(HWND__ *,LCFLAGS,IBindCtx *,unsigned short * *);
	virtual long GetClassID(_GUID *);
	virtual long GetDownloadDestination(LCFLAGS,IShellItem * *,unsigned short * *);
	virtual long Initialize(IShellItem *,unsigned long);
	virtual long NotifyDownloaded(LCFLAGS,IShellItem * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CLocalInterruptSource
{
protected:
	CLocalInterruptSource(int);
	virtual void v_CloseHandle();
	virtual void v_CreateEvent(unsigned short const *);
	virtual void v_ReleaseResources();
	virtual void v_ResetHandle();
public:
	static long CreateInstance(int,_GUID const &,void * *);
	virtual long Flush();
	virtual long Initialize(IChangeNotifySink *,IShellItem *,int);
	virtual long SetClientCount(unsigned long);
};

class CLocalMetadataResultsTask
{
	long _DoWork(unsigned int,unsigned short const * const *,unsigned short const *);
	long _OverrideSortOrder(IObjectCollection *,IObjectCollection * *);
	long _RowsetToObjectCollection(IRowset *,unsigned int,unsigned short const * const *,IObjectCollection *);
protected:
	long _Initialize(unsigned short const *,unsigned short const *,IQueryWithLinguisticAlternatives *,ITypeAheadProviderEventSink *,unsigned int,unsigned short const *);
public:
	CLocalMetadataResultsTask();
	static long CreateInstance(TYPEAHEAD_LOCAL_SETTINGS const *,unsigned short const *,IQueryWithLinguisticAlternatives *,unsigned short const *,unsigned int,ITypeAheadProviderEventSink *,unsigned short const *,_GUID const &,void * *);
	virtual long InternalResumeRT();
};

class CLocalRecycleBinPropDlg
{
	CRecycleBinData * _GetSelectedItem();
	long _EnumerateBitBuckets();
	virtual __int64 OnCommand(unsigned __int64,__int64);
	virtual __int64 OnDestroy(unsigned __int64,__int64);
	virtual __int64 OnInitDialog(unsigned __int64,__int64);
	virtual __int64 OnNotify(unsigned __int64,__int64);
	virtual __int64 WndProc(unsigned int,unsigned __int64,__int64);
	void _InitializeListView();
	void _InsertItemsIntoListView();
	void _OnApply();
	void _SetStateFromSelectedItem();
};

class CLocationContextMenu
{
protected:
	virtual ICIVERBTOIDMAP const * get_MappingArray();
	virtual long _OnInvokeCommand(unsigned int,_CMINVOKECOMMANDINFO *);
	virtual long _OnQueryContextMenu(HMENU__ *,unsigned int);
	virtual unsigned int get_MenuID();
	virtual ~CLocationContextMenu();
public:
	CLocationContextMenu(IShellItem *,IShellItem *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
};

class CLocationFolderUI
{
	long _GetDataObject(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,void * *);
	long _HandleContextMenu(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,void * *);
public:
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
};

struct CLookupTable<CNonFileTable,LOOKUP_ENTRY>
{
	int LookupHashed(unsigned short const *,int,unsigned int,LOOKUP_ENTRY * *);
	long AddHashed(unsigned short const *,int,unsigned int,int);
	long Initialize();
	long Load(IStream *,_HashTable * *);
	long Save(IStream *);
};

struct CLookupTable<CRecoveryTable,RECOVERY_ENTRY>
{
	int LookupHashed(unsigned short const *,int,unsigned int,RECOVERY_ENTRY * *);
	long Load(IStream *,_HashTable * *);
	long Save(IStream *);
};

class CLowDiskSpaceUI
{
	LOWDISK_STATE _GetCurrentState(int);
	LOWDISK_STATE _StateFromFreeSpace(_ULARGE_INTEGER,_ULARGE_INTEGER);
	STATE_DATA const * _StateData(LOWDISK_STATE);
	int _CanShowStorageSenseToast(LOWDISK_STATE);
	int _EnterExclusive();
	long _ConnectToTaskScheduler(ITaskService * *);
	long _DoStorageSenseToast(LOWDISK_STATE);
	static unsigned long s_ThreadProc(void *);
	unsigned __int64 _DurationFromNow(_FILETIME const &);
	void _DoNotificationUI();
	void _DoStateMachine();
	void _RunCleanupMaintenanceTaskAndWait();
public:
	CLowDiskSpaceUI(int);
	virtual long QueryContinue();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void CheckDiskSpace();
};

struct CMBMsgFilter
{
	CMenuBand * _GetBottomMostSelected();
	CMenuBand * _GetTopPtr();
	CMenuBand * _GetWindowOwnerPtr(HWND__ *);
	CMenuBand * _HitTest(tagPOINT,HWND__ * *);
	__int64 _HandleMouseMsgs(tagMSG *,int);
	int Pop(void *);
	long _TopFilterMouseMessage(tagMSG *,int,CMenuBand *);
	static __int64 GetMsgHook(int,unsigned __int64,__int64);
	void Push(void *,CMenuBand *,IUnknown *);
	void RetakeCapture();
	void SetContext(void *,int);
	void SetHook(int,int);
	void _DismissMenu(HWND__ *,int);
};

class CMCEnumJob
{
	long _ExtractCandidates();
	long _GenerateIndex();
	long _RemoveDuplicates();
	static int s_IndexStringSort(CMCIndex const *,CMCIndex const *,__int64);
	static long s_FillTextBuffer(tagTEXT_SOURCE *);
public:
	virtual long EndAltPhrase();
	virtual long PutAltWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long PutBreak(tagWORDREP_BREAK_TYPE);
	virtual long PutWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long StartAltPhrase();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void v_DoWork();
	virtual ~CMCEnumJob();
};

class CMCJob
{
	static unsigned long s_WorkThreadProc(void *);
protected:
	int CanContinue();
	long SendResults(unsigned int,unsigned __int64,__int64);
public:
	long Start();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CMCJob();
};

struct CMCJobManager
{
	int NeedSearch(unsigned short const *);
	long StartEnum(IClassFactory *);
	long StartSearch(IUnknown *,MCENUMRESULTS const *,unsigned short const *);
};

class CMCSearchJob
{
	long _GetMatches();
	long _RemoveDuplicates();
	static int s_DSAMatchPriorityCompare(CMCMatch const *,CMCMatch const *,__int64);
	static int s_IndexStringCompare(CMCIndex const *,CMCIndex const *,__int64);
public:
	virtual void v_DoWork();
	virtual ~CMCSearchJob();
};

struct CMNEnumQueueItem
{
	virtual long Dispatch(IUnknown *);
};

class CMNEnumTask
{
	virtual ~CMNEnumTask();
public:
	virtual long InternalResumeRT();
	virtual long RunInitRT();
};

class CMNLock
{
	virtual bool _PostMessage();
public:
	long Init(CSFToolbar *);
	virtual IUnknown * GetObjectW();
};

struct CMRUEnumHandlers
{
	int Init(unsigned short const *);
	int Next();
};

class CMVPEditControl
{
	IUnknown * _GetUnknownNoAddRef();
	__int64 _EditSubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64);
	__int64 _OnEditExpandKey(int);
	__int64 _OnEditIMEMessage(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _OnEditKeyDown(unsigned int,__int64);
	__int64 _OnOuterCommand(HWND__ *,int,HWND__ *,unsigned int);
	__int64 _OnOuterCreate(HWND__ *,tagCREATESTRUCTW const *);
	__int64 _OnOuterNotify(HWND__ *,int,tagNMHDR *);
	__int64 _OnOuterTTNeedText(tagNMTTDISPINFOW *);
	__int64 _OuterWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _ProtectUndoRedoMessage(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _CursorInFreeText(long);
	int _GetNextSegment(unsigned short const *,_charrange *);
	int _InIMEComposition();
	int _NeedsDelimiter(long,long);
	int _OnEditDoubleClick(int,int,unsigned int);
	int _OnEditMouseButton(unsigned int,unsigned __int64,int,int);
	long _CanShowMCComplete();
	long _CharacterPositionFromPoint(tagPOINT);
	long _CreateEditWindow(HWND__ *,tagRECT *);
	long _DetectUserChanges();
	long _DropTokens(CDSA<MVPTOKENDATA> const *,int);
	long _EnsureMCComplete();
	long _FillDSAFromSelection(_charrange const *,CDSA<MVPTOKENDATA> *);
	long _GetChangeOperation(_GUID const &,void * *);
	long _GetCurrentAMV(_GUID const &,void * *);
	long _GetCurrentSegment(unsigned short * *,_charrange *);
	long _GetCurrentSegmentRange(_charrange *,int);
	long _GetDisplayValueForValue(unsigned short const *,unsigned short,unsigned short * *);
	long _GetEnumFactory(IClassFactory * *);
	long _GetTokenAfter(long);
	long _HideMCComplete();
	long _InsertToken(MVPTOKENDATA const *);
	long _InsertValue(unsigned short const *,unsigned long,unsigned short);
	long _LoadControl(IAggregateMultipleValues *);
	long _LoadControlFromIUnknown(IUnknown *);
	long _OnMCComplete();
	long _RemoveToken(unsigned short const *,int *);
	long _ReplaceSelInSnapshot(unsigned short const *);
	long _TokenIndexToCharacterPosition(long);
	long _TokenizeFreeText(long);
	long _TokenizeSelection(long *,_charrange *);
	long _UpdateCurrentText();
	long _UpdateSnapshots();
	long _UpdateToMCComplete();
	static HINSTANCE__ * s_hRichEditDll;
	static __int64 s_EditSubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_OuterWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual int v_CanExpand();
	virtual int v_IsExpanded();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_DrawContent(HDC__ *,tagRECT *,int,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
	virtual void v_ExpandNow(HWND__ *,int);
	virtual void v_GetInternalPadding(HWND__ *,HDC__ *,int,_MARGINS *);
	void _AdjustPosition(_charrange *,long,long,long);
	void _CorrectPosLanguageOption();
	void _ExpandSelectedTokens();
	void _GetCharacterSelRange(_charrange *);
	void _GetEndOfTokenString(unsigned short const *,long,long,long *,long *,unsigned short *);
	void _GetFreeTextRange(long,_charrange *);
	void _GetPromptCharRange(_charrange *);
	void _GetRestorableSelection(_charrange *);
	void _GetStartOfLastSegment(unsigned short const *,long,long,long *);
	void _GetTokenSelRange(_charrange *);
	void _HidePromptText();
	void _OnDetectedChanges();
	void _OnEditMouseMove(__int64);
	void _OnEditSize(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _OnEditStyleChanged();
	void _OnEditThemeChanged(HWND__ *);
	void _OnOuterDelayedScrollBar(HWND__ *,long,long);
	void _OnOuterDragDropDone();
	void _OnOuterRequestResize(HWND__ *,_reqresize const *);
	void _PlaceCursorInPromptText();
	void _ProtectAndSelectPromptText();
	void _ReplaceSel(unsigned short const *,int);
	void _ReplaceTextAndRestoreSelection(long,long,unsigned short const *);
	void _RespondToDelimiter(unsigned short const *,unsigned short const *);
	void _RespondToNewFreeText();
	void _RespondToTextChange();
	void _SelectPromptText();
	void _SetSelEx(_charrange const *);
	void _ShowPromptText();
	void _UpdateOnSelChange();
	void _UpdatePromptString();
public:
	CMVPEditControl();
	long Init();
	virtual long GetPositioningRect(tagRECT *);
	virtual long Initialize(IUnknown *,tagPROPDESC_CONTROL_TYPE);
	virtual long IsModified(int *);
	virtual long OnDestroy(int);
	virtual long OnItemPreview(unsigned short const *);
	virtual long OnItemSelected(unsigned short const *);
	virtual long OnItemUnSelected(unsigned short const *);
	virtual long PostCreate(long);
	virtual long PreCreate();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetWindowTheme(unsigned short const *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CMVPEditControl();
};

class CMVPRichEditOleCallback
{
	void _EnableMenuItem(HMENU__ *,int,int);
public:
	virtual long ContextSensitiveHelp(int);
	virtual long DeleteObject(IOleObject *);
	virtual long GetClipboardData(_charrange *,unsigned long,IDataObject * *);
	virtual long GetContextMenu(unsigned short,IOleObject *,_charrange *,HMENU__ * *);
	virtual long GetDragDropEffect(int,unsigned long,unsigned long *);
	virtual long GetInPlaceContext(IOleInPlaceFrame * *,IOleInPlaceUIWindow * *,tagOIFI *);
	virtual long GetNewStorage(IStorage * *);
	virtual long QueryAcceptData(IDataObject *,unsigned short *,unsigned long,int,void *);
	virtual long QueryInsertObject(_GUID *,IStorage *,long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowContainerUI(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMVPToken
{
	HFONT__ * _GetFont();
	long _EnsureAdviseHolder();
public:
	virtual long Advise(IAdviseSink *,unsigned long *);
	virtual long Close(unsigned long);
	virtual long DoVerb(long,tagMSG *,IOleClientSite *,long,HWND__ *,tagRECT const *);
	virtual long Draw(unsigned long,long,void *,tagDVTARGETDEVICE *,HDC__ *,HDC__ *,_RECTL const *,_RECTL const *,int (*)(unsigned __int64),unsigned __int64);
	virtual long EnumAdvise(IEnumSTATDATA * *);
	virtual long EnumVerbs(IEnumOLEVERB * *);
	virtual long Freeze(unsigned long,long,void *,unsigned long *);
	virtual long GetAdvise(unsigned long *,unsigned long *,IAdviseSink * *);
	virtual long GetClientSite(IOleClientSite * *);
	virtual long GetClipboardData(unsigned long,IDataObject * *);
	virtual long GetColorSet(unsigned long,long,void *,tagDVTARGETDEVICE *,HDC__ *,tagLOGPALETTE * *);
	virtual long GetExtent(unsigned long,tagSIZE *);
	virtual long GetMiscStatus(unsigned long,unsigned long *);
	virtual long GetMoniker(unsigned long,unsigned long,IMoniker * *);
	virtual long GetUserClassID(_GUID *);
	virtual long GetUserType(unsigned long,unsigned short * *);
	virtual long InitFromData(IDataObject *,int,unsigned long);
	virtual long IsUpToDate();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetAdvise(unsigned long,unsigned long,IAdviseSink *);
	virtual long SetClientSite(IOleClientSite *);
	virtual long SetColorScheme(tagLOGPALETTE *);
	virtual long SetExtent(unsigned long,tagSIZE *);
	virtual long SetHostNames(unsigned short const *,unsigned short const *);
	virtual long SetMoniker(unsigned long,IMoniker *);
	virtual long Unadvise(unsigned long);
	virtual long Unfreeze(unsigned long);
	virtual long Update();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMVPTokenData
{
	long _GetDataAsUnicodeText(tagFORMATETC const *,tagSTGMEDIUM *);
	void _FillUnicodeText(unsigned short *,unsigned long);
public:
	virtual long DAdvise(tagFORMATETC *,unsigned long,IAdviseSink *,unsigned long *);
	virtual long DUnadvise(unsigned long);
	virtual long EnumDAdvise(IEnumSTATDATA * *);
	virtual long EnumFormatEtc(unsigned long,IEnumFORMATETC * *);
	virtual long GetCanonicalFormatEtc(tagFORMATETC *,tagFORMATETC *);
	virtual long GetData(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long GetDataHere(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long QueryGetData(tagFORMATETC *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetData(tagFORMATETC *,tagSTGMEDIUM *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CMVQueryEnumFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long LockServer(int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMVQueryEnumString
{
	long _EnsureEnumerator();
	long _GetValueFromFilterCondition(IFilterCondition *,unsigned short * *);
	virtual int _Next(tagMCSTRING *);
public:
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
};

struct CMakeAvailableOfflineVerb
{
	CMakeAvailableOfflineVerb();
};

struct CMakeAvailableOnlineVerb
{
	CMakeAvailableOnlineVerb();
};

class CManageLibraryDialog
{
	static __int64 s_MessageHookProc(int,unsigned __int64,__int64);
	void _InitializeKeyboardHook();
protected:
	__int64 DialogProc(unsigned int,unsigned __int64,__int64);
	static __int64 s_DialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual HWND__ * v_GetParentWindow();
	virtual LIBRARY_ADD_LOCATION_ENTRY_POINTS v_GetLibraryManagementEntryPoint();
	virtual __int64 OnCommand(unsigned __int64,__int64);
	virtual __int64 OnDestroy(unsigned __int64,__int64);
	virtual __int64 OnHelp();
	virtual __int64 OnInitDialog(unsigned __int64,__int64);
	virtual long v_ApplyViewSettings();
	virtual long v_AsyncUpdateSupportStatuses();
	virtual long v_InitViewPropertiesForItem(IShellItem *);
	virtual unsigned int v_GetEmptyStringResourceID();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnGetDlgCode(tagMSG *,__int64 *);
	virtual void v_EnableAddLocationButton(int);
	virtual void v_EnableDefaultPublicSaveButton(int);
	virtual void v_EnableDefaultSaveButton(int);
	virtual void v_EnableRemoveLocationButton(int);
	virtual void v_OnLibraryChanged();
	virtual void v_SetFocusAddLocationButton();
public:
	CManageLibraryDialog();
	static long Create(IShellItem *,unsigned short const *,unsigned short const *,LIBRARYMANAGEDIALOGOPTIONS,DirectUI::Element * *,HINSTANCE__ *);
	static long ShowDialog(IShellItem *,HWND__ *,unsigned short const *,unsigned short const *,LIBRARYMANAGEDIALOGOPTIONS);
	virtual long v_GetDefaultSaveLocationValue(_ITEMID_CHILD const *,unsigned long *);
	virtual long v_SetDefaultSaveLocationValue(_ITEMID_CHILD const *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *);
	virtual ~CManageLibraryDialog();
};

class CManageLibraryLocationBase
{
protected:
	DEFAULT_SAVE_TYPE _GetDefaultSaveType();
	int _HasDefaultSaveInView(SAVE_LOCATION_TYPE);
	int _IsItemDefaultSave(IShellItem *,SAVE_LOCATION_TYPE);
	long _AddItemToView(IShellItem *);
	long _ChangeDefaultSave(IShellItem *,SAVE_LOCATION_TYPE,int);
	long _GetResultsFolderInfo(int *,int *,IShellItemArray * *);
	long _GetSelectedItem(int *,IShellItem * *);
	long _HandleAddLocationHelper(IShellItem *);
	long _LoadSetSaveLocationErrorMessage(IShellItem *,SAVE_LOCATION_TYPE,long,unsigned short *,unsigned int);
	long _OnOK();
	long _PopulateLocationExplorer();
	long _SetItemDefaultSave(IShellItem *,SAVE_LOCATION_TYPE,int);
	long _SetUpExplorerBrowser();
	virtual ~CManageLibraryLocationBase();
	void _ConnectShellView();
	void _EnsureSaveLocation(SAVE_LOCATION_TYPE);
	void _HandleAddLocation();
	void _HandleRemoveLocation();
	void _HandleSetDefaultSave(SAVE_LOCATION_TYPE);
	void _OnDestroy();
	void _ReportSQMEvents();
public:
	int IsCurrentSaveLocation(IShellItem *,SAVE_LOCATION_TYPE);
	int IsIthItemInView(ITHITEM,IShellItem *);
	long Initialize(IShellItem *);
	long OnRemoveItem(IShellItem *);
	long OnSetDefaultSaveItem(IShellItem *,SAVE_LOCATION_TYPE,int);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long IncludeObject(IShellView *,_ITEMID_CHILD const *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long OnDefaultCommand(IShellView *);
	virtual long OnStateChange(IShellView *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void OnMoveUpDown(int);
};

class CManageLibraryTaskBase
{
protected:
	long _Initialize(HWND__ *,IShellItem *,unsigned int,unsigned int);
	virtual ~CManageLibraryTaskBase();
public:
	long RunTask();
	static unsigned long s_RunTask(void *);
	unsigned long Release();
};

struct CMappedXmlElement
{
	virtual XmlMappingType GetXmlMappingType();
	virtual long Init(IXmlReader *,XmlNodeType);
	virtual long Write(IXmlWriter *);
};

class CMappingData
{
	void _FreeData();
public:
	CMappingData();
	long Initialize(CONFLICT_FILTER,IConflictInterruptFilter *,IConflictDialogData *,CSafeElementProxy *);
	long Map(unsigned long,INDIVIDUAL_CONFLICT_MAPPING_DATA *);
	long UnMap(unsigned long,unsigned long *);
	~CMappingData();
};

struct CMappingDecorator
{
	CMappingDecorator();
	long Initialize(IConflictDialogData *,IConflictDialogCallback *);
	~CMappingDecorator();
};

struct CMarshalByValue
{
	long GetStreamSizeMax(unsigned long *);
	virtual long DisconnectObject(unsigned long);
	virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
	virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual long ReleaseMarshalData(IStream *);
	virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
};

class CMarshaledInterface
{
	struct CMarshalStream
	{
		CMarshalStream();
	};

	long _Unmarshal(_GUID const &,void * *,bool);
public:
	CMarshaledInterface(CMarshaledInterface const &);
	long Marshal(_GUID const &,IUnknown *,MARSHAL_KIND);
	long Unmarshal<IShellItem>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IShellItem> >);
};

class CMemoryCachedImage
{
protected:
	long _Clone();
	long _CreateImageResources(void *);
	long _DecodeImage(unsigned short const *);
	long _GetFileStat(IStream *,bool,_FILETIME *,unsigned int *);
	long _LoadFileIntoMemory(unsigned short const *,void *);
	long _SaveFileToDisk(unsigned short const *);
	long _ValidateImageFile(unsigned short const *);
	void _RestoreFromClone();
public:
	long GetImageColorizationData(CAutoColorImageData * *);
	static bool IsSameFile(unsigned short const *,unsigned short const *);
	virtual long CreateScaledDIB(HDC__ *,unsigned int,unsigned int,WICBitmapInterpolationMode,HBITMAP__ * *,void * *);
	virtual long GetPath(unsigned short *,unsigned int);
	virtual long GetSize(unsigned int *,unsigned int *);
	virtual long Init(unsigned short const *,bool,bool,bool);
	virtual ~CMemoryCachedImage();
	void ReleaseImageResources();
	void Reset();
};

struct CMenuAgent
{
	int _OnKey(unsigned __int64);
	static __int64 MsgHook(int,unsigned __int64,__int64);
	void CancelMenu(void const *);
	void Init(void *,CTrackPopupBar *,IMenuPopup *,HWND__ *,HWND__ *);
	void Reset(void const *);
};

class CMenuBand
{
	int _CanAutoExpand();
	long _AddToolbar(CMenuToolbarBase *,unsigned long);
	long _CallCB(unsigned long,unsigned __int64,__int64);
	long _EnterMenuMode(int);
	long _HandleAccelerators(tagMSG *);
	long _Initialize(unsigned long);
	long _OnSysChar(tagMSG const *,int);
	long _ProcessMenuPaneMessages(tagMSG const *);
	long _SiteSetSubMenu(IMenuPopup *,int);
	long _SubMenuOnSelect(unsigned long);
	long _UIActivateIOAndHandleExpand(int,tagMSG *,int);
	virtual ~CMenuBand();
	void _CancelMode(unsigned long);
	void _ExitMenuMode(int);
	void _GetFontMetrics();
	void _OnActivate(tagMSG *);
	void _OnExpandChange(unsigned long);
	void _OnSelectArrow(int);
	void _SetDefaultAutoExpandState();
	void _UpdateButtons(int);
public:
	CMenuBand();
	__int64 GetMsgFilterCB(tagMSG *,int);
	int SetTracked(CMenuToolbarBase *);
	virtual long ChangeInitFlags(unsigned long,unsigned long);
	virtual long CloseDW(unsigned long);
	virtual long ContextSensitiveHelp(int);
	virtual long DoDefaultAction(tagVARIANT *);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long GetBandInfo(unsigned long,unsigned long,DESKBANDINFO *);
	virtual long GetBottom(CMenuToolbarBase * *);
	virtual long GetClassID(_GUID *);
	virtual long GetClient(IUnknown * *);
	virtual long GetMenu(HMENU__ * *,HWND__ * *,unsigned long *);
	virtual long GetMenuInfo(IShellMenuCallback * *,unsigned int *,unsigned int *,unsigned long *);
	virtual long GetParentSite(_GUID const &,void * *);
	virtual long GetShellFolder(unsigned long *,_ITEMIDLIST_ABSOLUTE * *,_GUID const &,void * *);
	virtual long GetState(int *,int *,int *,int *);
	virtual long GetState(tagSMDATA *);
	virtual long GetSubMenu(tagVARIANT *,_GUID const &,void * *);
	virtual long GetSubMenu(unsigned int,_GUID const &,void * *);
	virtual long GetTop(CMenuToolbarBase * *);
	virtual long GetTracked(CMenuToolbarBase * *);
	virtual long GetWindow(HWND__ * *);
	virtual long HasFocusIO();
	virtual long Initialize(IShellMenuCallback *,unsigned int,unsigned int,unsigned long);
	virtual long InvalidateItem(tagSMDATA *,unsigned long);
	virtual long IsEmpty();
	virtual long IsExpanded();
	virtual long IsMenuMessage(tagMSG *);
	virtual long IsWindowOwner(HWND__ *);
	virtual long Load(IStream *);
	virtual long OnPosRectChangeDB(tagRECT *);
	virtual long OnSelect(unsigned long);
	virtual long OnWinEvent(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Popup(_POINTL *,_RECTL *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long Save(IStream *,int);
	virtual long SetClient(IUnknown *);
	virtual long SetMenu(HMENU__ *,HWND__ *,unsigned long);
	virtual long SetMenuToolbar(IUnknown *,unsigned long);
	virtual long SetMinWidth(int);
	virtual long SetNoBorder(int);
	virtual long SetShellFolder(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,HKEY__ *,unsigned long);
	virtual long SetSite(IUnknown *);
	virtual long SetSubMenu(IMenuPopup *,int);
	virtual long SetTheme(unsigned short const *);
	virtual long SetToolbar(HWND__ *,unsigned long);
	virtual long ShowDW(int);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long TranslateMenuMessage(tagMSG *,__int64 *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void ResizeMenuBar();
	void SetTrackMenuPopup(IUnknown *);
};

struct CMenuBandMetrics
{
	HFONT__ * _CalcFont(HWND__ *,unsigned short const *,unsigned long,unsigned short,int *,int *,int *,int,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void Init(HWND__ *);
	void _SetArrowFont(HWND__ *);
	void _SetChevronFont(HWND__ *);
	void _SetColors();
	void _SetMenuFont();
	void _SetPaintMetrics(HWND__ *);
};

class CMenuBandState
{
protected:
	void _DoToolTip(HWND__ *,int,int,unsigned short const *,unsigned short const *);
public:
	HWND__ * GetWorkerWindow(HWND__ *);
	IShellTaskScheduler * GetScheduler();
	long FadeRect(tagRECT const *);
	virtual ~CMenuBandState();
	void CenterOnButton(HWND__ *,int,int,unsigned short const *,unsigned short const *);
	void HideTooltip(int);
	void PutTipOnTop();
};

struct CMenuData
{
	long GetSubMenu(_GUID const *,_GUID const &,void * *);
	virtual ~CMenuData();
};

class CMenuDeskBar
{
protected:
	IMenuPopup * _GetMenuBarParent(IUnknown *);
	__int64 _DoPaint(HWND__ *,HDC__ *,unsigned long);
	int _IsMyParent(HWND__ *);
	long _PositionWindow(_POINTL *,_RECTL *,unsigned long);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual unsigned long _GetClassStyle();
	virtual unsigned long _GetExStyle();
	virtual void _GetPopupWindowPosition(tagRECT *,tagRECT *,tagRECT *,tagSIZE *,unsigned int);
	virtual void _OnCreate();
	virtual void _OnSize();
	virtual ~CMenuDeskBar();
	void _DoNCPaint(HWND__ *,HDC__ *);
	void _PopDown();
public:
	CMenuDeskBar();
	virtual long ContextSensitiveHelp(int);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long GetBitmap(HBITMAP__ * *);
	virtual long GetClient(IUnknown * *);
	virtual long GetIconSize(unsigned long *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetWindow(HWND__ * *);
	virtual long Initialize();
	virtual long OnFocusChangeIS(IUnknown *,int);
	virtual long OnPosRectChangeDB(tagRECT *);
	virtual long OnSelect(unsigned long);
	virtual long Popup(_POINTL *,_RECTL *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetBitmap(HBITMAP__ *);
	virtual long SetClient(IUnknown *);
	virtual long SetIconSize(unsigned long);
	virtual long SetSite(IUnknown *);
	virtual long SetSubMenu(IMenuPopup *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMenuSFToolbar
{
protected:
	HKEY__ * _GetKey(_ITEMID_CHILD const *);
	int _GetNSSeparatorPlacement();
	int _IsAboveNSSeparator(_ITEMID_CHILD const *);
	int _IsBelowNSSeparator(int);
	long CallCB(_ITEMID_CHILD const *,unsigned long,unsigned __int64,__int64);
	long _GetFolderForCreateViewObject(int,IShellFolder * *);
	long _GetInfo(_ITEMID_CHILD const *,tagSMINFO *);
	static void s_IconCallback(void *,unsigned int,unsigned int);
	virtual HMENU__ * _GetContextMenu(IContextMenu *,int,int *);
	virtual HWND__ * CreateWorkerWindow();
	virtual HWND__ * GetHWNDForUIObject();
	virtual IBDATA * _AddOrderItemTB(ORDERITEM *,int,_TBBUTTON *);
	virtual IBDATA * _CreateItemData(ORDERITEM *);
	virtual __int64 _DefWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual __int64 _OnContextMenu(unsigned __int64,__int64);
	virtual __int64 _OnDropDown(tagNMTOOLBARW *);
	virtual __int64 _OnNotify(tagNMHDR *);
	virtual __int64 _OnTimer(unsigned __int64);
	virtual __int64 v_OnCustomDraw(tagNMCUSTOMDRAWINFO *);
	virtual int _AddPidl(_ITEMID_CHILD *,unsigned long,int);
	virtual int _FilterPidl(_ITEMID_CHILD const *);
	virtual int _GetBitmap(int,IBDATA *,int);
	virtual int v_DPAIndexToTBIndex(int);
	virtual int v_GetDragOverButton();
	virtual int v_TBIndexToDPAIndex(int);
	virtual long _AfterLoad();
	virtual long _DeleteItem(int);
	virtual long _GetIEnumIDList(unsigned long,IEnumIDList * *);
	virtual long _LoadOrderStream();
	virtual long _SaveOrderStream();
	virtual long _TBStyleForPidl(_ITEMID_CHILD const *,unsigned long *,unsigned long *,unsigned long *,int *);
	virtual long v_CallCBItem(int,unsigned int,unsigned __int64,__int64);
	virtual long v_CreateTrackPopup(int,_GUID const &,void * *);
	virtual long v_ExecItem(int);
	virtual long v_GetBKContextMenu(IContextMenu * *);
	virtual long v_GetContextMenuModifier(IContextMenu * *,_ITEMID_CHILD const *);
	virtual long v_GetInfoTip(int,unsigned short *,unsigned int);
	virtual long v_GetState(int,tagSMDATA *);
	virtual long v_GetSubMenu(int,_GUID const *,_GUID const &,void * *);
	virtual long v_OnOpen(int,int);
	virtual unsigned long v_GetFlags(int);
	virtual void EmptyToolbar();
	virtual void _Dropped(int,int);
	virtual void _EnumDone(_DPA *,_DPA *);
	virtual void _FillDPA(unsigned long);
	virtual void _FillToolbar();
	virtual void _NotifyBulkOperation(int);
	virtual void _ObtainPIDLName(_ITEMID_CHILD const *,unsigned short *,int);
	virtual void _OnDefaultContextCommand(int);
	virtual void _OnDragBegin(int,unsigned long);
	virtual void _OnFSNotifyAdd(_ITEMID_CHILD const *,unsigned long,int);
	virtual void _OnFSNotifyRemove(_ITEMID_CHILD const *,unsigned long);
	virtual void _OnFSNotifyRename(_ITEMID_CHILD const *,_ITEMID_CHILD const *);
	virtual void _SetDirty(int);
	virtual void _SetFontMetrics();
	virtual void _SetToolbarState();
	virtual void _ToolbarChanged();
	virtual void v_CalcWidth(int *,int *);
	virtual void v_NewItem(_ITEMID_CHILD const *);
	virtual void v_Refresh();
	virtual ~CMenuSFToolbar();
	void BroadcastIntelliMenuState(_ITEMID_CHILD const *,int);
	void _AddChevron();
	void _AddNSSeparator();
	void _AddOtherItems();
	void _FindMinPromotedItems(int);
	void _MarkItem(int);
	void _MergeSeparator(_DPA *,_DPA *);
	void _OnShowComplete();
	void _ReBindToFolder(_ITEMIDLIST_ABSOLUTE const *);
	void _RefreshInfo();
	void _RefreshToolbar();
	void _RemoveChevron();
	void _RemoveDescriptionFromDataObject();
	void _RemoveNSSeparator();
	void _SetEmptyState(int);
public:
	CMenuSFToolbar(CMenuBand *,IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,HKEY__ *,unsigned long);
	int IsVisible(_ITEMID_CHILD *);
	virtual HWND__ * v_GetHWND();
	virtual int ShowAmpersand();
	virtual int v_TrackingSubContextMenu();
	virtual int v_UpdateIconSize(unsigned int,int);
	virtual long CreateToolbar(HWND__ *);
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long GetObjectDDT(unsigned __int64,_GUID const &,void * *);
	virtual long GetShellFolder(_ITEMIDLIST_ABSOLUTE * *,_GUID const &,void * *);
	virtual long HitTestDDT(unsigned int,tagPOINT *,unsigned __int64 *,unsigned long *);
	virtual long IsWindowOwner(HWND__ *);
	virtual long OnChange(long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long OnDropDDT(IDropTarget *,IDataObject *,unsigned long *,_POINTL,unsigned long *);
	virtual long OnWinEvent(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetShellFolder(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetSite(IUnknown *);
	virtual long v_InvalidateItem(tagSMDATA *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void Expand(int);
	virtual void GetSize(tagSIZE *);
	virtual void NegotiateSize();
	virtual void SetParent(HWND__ *);
	virtual void SetWindowPos(tagSIZE *,tagRECT *,unsigned long);
	virtual void ShowFlyout();
	virtual void v_Close();
	virtual void v_ForwardMouseMessage(unsigned int,unsigned __int64,__int64);
	virtual void v_OnDeleteButton(void *);
	virtual void v_OnEmptyToolbar();
	virtual void v_SendMenuNotification(unsigned int,int);
	virtual void v_Show(int,int);
	virtual void v_UpdateButtons(int);
};

class CMenuSite
{
protected:
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _CacheSubActiveBand(IUnknown *);
	void _CreateSite(HWND__ *);
public:
	virtual long AddBand(IUnknown *);
	virtual long ContextSensitiveHelp(int);
	virtual long EnumBands(unsigned int,unsigned long *);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long GetBandObject(unsigned long,_GUID const &,void * *);
	virtual long GetBandSiteInfo(tagBANDSITEINFO *);
	virtual long GetSize(unsigned long,tagRECT *);
	virtual long GetWindow(HWND__ * *);
	virtual long HasFocusIO();
	virtual long IsWindowOwner(HWND__ *);
	virtual long OnFocusChangeIS(IUnknown *,int);
	virtual long OnWinEvent(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long QueryBand(unsigned long,IDeskBand * *,unsigned long *,unsigned short *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long RemoveBand(unsigned long);
	virtual long SetBandSiteInfo(tagBANDSITEINFO const *);
	virtual long SetBandState(unsigned long,unsigned long,unsigned long);
	virtual long SetDeskBarSite(IUnknown *);
	virtual long SetModeDBC(unsigned long);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateDBC(unsigned long);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMenuStaticToolbar
{
protected:
	CMenuStaticToolbar::CMenuStaticData * _IDToData(int);
	HWND__ * _CreatePager(HWND__ *);
	__int64 _OnAccelerator(tagNMCHAR *);
	__int64 _OnContextMenu(unsigned __int64,__int64);
	long CallCB(unsigned int,unsigned long,unsigned __int64,__int64);
	virtual __int64 _DefWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual __int64 _OnHotItemChange(tagNMTBHOTITEM *);
	virtual __int64 _OnNotify(tagNMHDR *);
	virtual int v_GetDragOverButton();
	virtual long _OnChange(_ITEMIDLIST_ABSOLUTE const *,long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,__int64);
	virtual long v_CallCBItem(int,unsigned int,unsigned __int64,__int64);
	virtual long v_CreateTrackPopup(int,_GUID const &,void * *);
	virtual long v_ExecItem(int);
	virtual long v_GetInfoTip(int,unsigned short *,unsigned int);
	virtual long v_GetState(int,tagSMDATA *);
	virtual long v_GetSubMenu(int,_GUID const *,_GUID const &,void * *);
	virtual unsigned long v_GetFlags(int);
	virtual void v_ForwardMouseMessage(unsigned int,unsigned __int64,__int64);
	virtual void v_Refresh();
	virtual ~CMenuStaticToolbar();
	void _CheckSeparators();
	void _FillToolbar();
	void _Insert(int,tagMENUITEMINFOW *);
	void _OnGetDispInfo(tagNMHDR *,int);
public:
	CMenuStaticToolbar(CMenuBand *,HMENU__ *,HWND__ *,unsigned int,unsigned long,int);
	virtual __int64 v_OnCustomDraw(tagNMCUSTOMDRAWINFO *);
	virtual int ShowAmpersand();
	virtual int v_TrackingSubContextMenu();
	virtual int v_UpdateIconSize(unsigned int,int);
	virtual long CreateToolbar(HWND__ *);
	virtual long GetMenu(HMENU__ * *,HWND__ * *,unsigned long *);
	virtual long GetObjectDDT(unsigned __int64,_GUID const &,void * *);
	virtual long GetWindowsDDT(HWND__ * *,HWND__ * *);
	virtual long HitTestDDT(unsigned int,tagPOINT *,unsigned __int64 *,unsigned long *);
	virtual long IsWindowOwner(HWND__ *);
	virtual long OnDropDDT(IDropTarget *,IDataObject *,unsigned long *,_POINTL,unsigned long *);
	virtual long OnWinEvent(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetMenu(HMENU__ *,HWND__ *,unsigned long);
	virtual long v_InvalidateItem(tagSMDATA *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void GetSize(tagSIZE *);
	virtual void SetParent(HWND__ *);
	virtual void SetWindowPos(tagSIZE *,tagRECT *,unsigned long);
	virtual void v_Close();
	virtual void v_OnDeleteButton(void *);
	virtual void v_OnEmptyToolbar();
	virtual void v_SendMenuNotification(unsigned int,int);
	virtual void v_Show(int,int);
	virtual void v_UpdateButtons(int);
};

class CMenuToolbarBase
{
protected:
	__int64 _DropDownOrExec(unsigned int,int);
	__int64 _OnDupAccelerator(tagNMTBDUPACCELERATOR *);
	__int64 _OnWrapAccelerator(tagNMTBWRAPACCELERATOR *);
	__int64 _OnWrapHotItem(tagNMTBWRAPHOTITEM const *);
	int _HandleObscuredItem(int);
	int _OnKey(int,unsigned int,unsigned int);
	int _SetTimer(int);
	long _SetMenuBand(IShellMenu *);
	virtual __int64 _DefWindowProcMB(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual __int64 _OnDropDown(tagNMTOOLBARW *);
	virtual __int64 _OnHotItemChange(tagNMTBHOTITEM *);
	virtual __int64 _OnNotify(tagNMHDR *);
	virtual __int64 _OnTimer(unsigned __int64);
	virtual __int64 v_OnCustomDraw(tagNMCUSTOMDRAWINFO *);
	virtual long _DeleteItem(int);
	virtual void _FlashChevron();
	virtual void _SetFontMetrics();
	virtual void _SetToolbarState();
	virtual void v_CalcWidth(int *,int *);
	void _DrawChevron(HDC__ *,tagRECT *,int,int);
	void _DrawMenuArrowGlyph(HDC__ *,tagRECT const *,unsigned long);
	void _DrawMenuGlyph(HDC__ *,HFONT__ *,tagRECT const *,char,unsigned long,tagSIZE const *);
	void _FireEvent(unsigned char);
	void _InitParentsTheme();
	void _PaintButton3D(HDC__ *,int,tagRECT const *,unsigned long);
	void _PressBtn(int,int);
	void _RefreshTheme();
	void _ResetTooltipOnMouseMove();
public:
	int GetValidHotItem(int,int,int,unsigned long);
	int SetHotItem(int,int,int,unsigned long);
	long GetSubMenu(int,_GUID const *,_GUID const &,void * *);
	long PopupOpen(int);
	long PositionSubmenu(int);
	long SetTheme(unsigned short const *);
	virtual int ShowAmpersand();
	virtual long CreateToolbar(HWND__ *);
	virtual long GetMenu(HMENU__ * *,HWND__ * *,unsigned long *);
	virtual long GetShellFolder(_ITEMIDLIST_ABSOLUTE * *,_GUID const &,void * *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long OnWinEvent(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetMenu(HMENU__ *,HWND__ *,unsigned long);
	virtual long SetSite(IUnknown *);
	virtual long v_InvalidateItem(tagSMDATA *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void Expand(int);
	virtual void GetSize(tagSIZE *);
	virtual void NegotiateSize();
	virtual void SetParent(HWND__ *);
	virtual void SetWindowPos(tagSIZE *,tagRECT *,unsigned long);
	virtual void ShowFlyout();
	virtual void v_Close();
	virtual void v_ForwardMouseMessage(unsigned int,unsigned __int64,__int64);
	virtual void v_OnDeleteButton(void *);
	virtual void v_OnEmptyToolbar();
	virtual void v_Show(int,int);
	virtual ~CMenuToolbarBase();
	void EmptyToolbar();
	void PopupClose();
	void PopupHelper(int,int);
	void PostPopup(int,int,int);
	void SetKeyboardCue();
	void SetMenuBandMetrics(CMenuBandMetrics *);
};

struct CMergedCategorizer
{
	virtual long CompareCategory(CATSORT_FLAGS,unsigned long,unsigned long);
	virtual long GetCategory(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetCategoryInfo(unsigned long,CATEGORY_INFO *);
	virtual long GetDescription(unsigned short *,unsigned int);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CMergedFldrContextMenu
{
	CMergedFldrContextMenu(HWND__ *,IContextMenu *,IContextMenu *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetSite(_GUID const &,void * *);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMergedFldrDropTarget
{
	int _IsCommonIDList(_ITEMIDLIST_ABSOLUTE const *);
	int _IsCommonWrappedIDList(IDataObject *,IAugmentedShellFolder *);
	long _SetDropEffectFolders();
	void _DestroyDropEffectFolders();
public:
	CMergedFldrDropTarget(CMergedFolder *,HWND__ *);
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CMergedFldrEnum
{
	CMergedFldrEnum(CMergedFolder *,unsigned long,int);
	virtual long Clone(IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CMergedFldrItem
{
	int Init(CMergedFldrItem *);
	int Init(IShellFolder *,_ITEMID_CHILD *,int);
};

class CMergedFldrNamespace
{
protected:
	void _EnsureReadPropertyBag();
	void _ReleaseNamespace();
public:
	int GetNamespaceOverlayIndex(_ITEMID_CHILD const *);
	long GetLocation(unsigned short *,int);
	long SetNamespace(IShellFolder2 *,_GUID const *,IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,unsigned long,unsigned int);
	unsigned short const * GetDropFolder();
};

class CMergedFolder
{
	int _AcquireObjects();
	int _IsChildIDInternal(_ITEMIDLIST_ABSOLUTE const *,int,int *);
	int _ObjectCount();
	int _ShouldMergeNamespaces(int,int);
	long _AbsPidlToAbsWrap(CMergedFldrNamespace *,_ITEMIDLIST_ABSOLUTE const *,int,int,int *,_ITEMIDLIST_ABSOLUTE * *);
	long _ForceParseDisplayName(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,int,int,int *,_ITEMID_CHILD * *);
	long _GetContextMenu(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,void * *);
	long _GetPidl(int *,unsigned long,_ITEMID_CHILD * *);
	long _GetTargetUIObjectOf(IShellFolder *,HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,void * *);
	long _New(_ITEMID_CHILD const *,CMergedFolder * *);
	long _SimpleAddNamespace(CMergedFldrNamespace *);
	long _TransformSingleNotify(CMergedFldrNamespace *,int,int,int,_ITEMIDLIST_ABSOLUTE const *,long *,_ITEMIDLIST_ABSOLUTE * *,_ITEMIDLIST_ABSOLUTE * *);
	static int _Compare(void const *,void const *,__int64);
	static int _DestroyObjectsProc(void *,void *);
	static int _SetOwnerProc(void *,void *);
	static void const * _Merge(unsigned int,void const *,void const *,__int64);
	virtual long _DeleteItemByIDList(_ITEMID_CHILD const *);
	virtual long _StgCreate(_ITEMID_CHILD const *,unsigned long,_GUID const &,void * *);
	void _AddAllOtherNamespaces(_ITEMID_CHILD * *);
	void _FreeObjects();
protected:
	CMergedFldrNamespace * _Namespace(int);
	int _ContainsSrcID(_ITEMID_CHILD const *,unsigned int);
	int _IsFolder(_ITEMID_CHILD const *);
	int _IsOurColumn(unsigned int);
	int _IsSimple(_ITEMIDLIST_RELATIVE const *);
	int _NamespaceCount();
	int _ShouldMergeNamespaces(CMergedFldrNamespace const *,CMergedFldrNamespace const *);
	long _CompareSingleLevelIDs(__int64,_ITEMID_CHILD const *,_ITEMID_CHILD const *);
	long _CreateWrap(_ITEMID_CHILD const *,unsigned int,unsigned short,_ITEMID_CHILD * *);
	long _FindNamespace(unsigned long,unsigned long,unsigned int,CMergedFldrNamespace * *);
	long _FixStrRetOffset(_ITEMID_CHILD const *,_STRRET *);
	long _GetDestinationStorage(unsigned long,IStorage * *);
	long _GetFolder2(_ITEMID_CHILD const *,_ITEMID_CHILD * *,IShellFolder2 * *);
	long _GetSubPidl(_ITEMID_CHILD const *,unsigned int,unsigned int *,unsigned short *,_ITEMID_CHILD * *,CMergedFldrNamespace * *);
	long _GetSubPidlForNamespace(_ITEMID_CHILD const *,unsigned int,_ITEMID_CHILD * *);
	long _GetWhichFolderColumn(_ITEMID_CHILD const *,unsigned short *,int);
	long _Namespace(int,CMergedFldrNamespace * *);
	long _NamespaceForItem(_ITEMID_CHILD const *,unsigned long,unsigned long,IShellFolder * *,_ITEMID_CHILD * *,CMergedFldrNamespace * *,int);
	long _WrapAddIDList(_ITEMID_CHILD const *,unsigned int,unsigned short,_ITEMID_CHILD * *);
	long _WrapRemoveIDList(_ITEMID_CHILD const *,unsigned int,_ITEMID_CHILD * *);
	long _WrapRemoveIDListAbs(_ITEMIDLIST_ABSOLUTE const *,unsigned int,_ITEMIDLIST_ABSOLUTE * *);
	static int _CompareArbitraryPidls(_ITEMID_CHILD const *,_ITEMID_CHILD const *);
	static int _DestroyNamespacesProc(void *,void *);
	static long _GetWrappedPidlAtOffset(_ITEMID_CHILD const *,unsigned int,WRAPPED_IDLIST const * *);
	static long _IsWrap(_ITEMID_CHILD const *);
	static unsigned long _GetSourceCount(_ITEMID_CHILD const *);
	virtual long _Create(CMergedFolder * *);
	virtual long _TryParseNameWithNamespace(CMergedFldrNamespace const *,HWND__ *,IBindCtx *,unsigned short const *,_ITEMID_CHILD * *);
	virtual ~CMergedFolder();
	void _AddAllOtherNameSpacesIfNeeded(_ITEMID_CHILD * *);
	void _CreateFolderBindCtx(IBindCtx *,IBindCtx * *);
	void _SetSimple(_ITEMIDLIST_RELATIVE * *);
public:
	CMergedFolder(CMergedFolder *,_GUID const &,unsigned long);
	virtual long AddNameSpace(_GUID const *,IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,unsigned long,unsigned int);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumNameSpace(unsigned long,unsigned long *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFlagsForChild(_ITEMID_CHILD const *,_GUID const &,unsigned long *);
	virtual long GetFolderType(_GUID *);
	virtual long GetNameSpaceGroupID(_ITEMID_CHILD const *,unsigned int *);
	virtual long GetNameSpaceID(_ITEMID_CHILD const *,_GUID *);
	virtual long GetRealLocations(IShellItemArray * *);
	virtual long GetResourceDisplayName(_ITEMID_CHILD const *,unsigned short *,unsigned int,int *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long IsChildID(_ITEMIDLIST_ABSOLUTE const *,int);
	virtual long IsEqualID(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryNameSpace(unsigned long,_GUID *,IShellFolder * *);
	virtual long QueryNameSpace2(unsigned long,QUERYNAMESPACEINFO *);
	virtual long RemoveBackReferences();
	virtual long RemoveLocalizedDisplayName(_ITEMID_CHILD const *);
	virtual long SetLocalizedDisplayName(_ITEMID_CHILD const *,unsigned short const *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual long SetOwner(IUnknown *);
	virtual long SetResourceDisplayName(_ITEMID_CHILD const *,unsigned short const *,int);
	virtual long TranslateIDs(long *,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *,_ITEMIDLIST_ABSOLUTE * *,long *,_ITEMIDLIST_ABSOLUTE * *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long UnWrapIDList(_ITEMID_CHILD const *,long,IShellFolder * *,_ITEMIDLIST_ABSOLUTE * *,_ITEMID_CHILD * *,long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMergedFolderViewCB
{
protected:
	virtual ~CMergedFolderViewCB();
public:
	CMergedFolderViewCB(CMergedFolder *);
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CMessageDialogHelper
{
	long _CreateButton(unsigned int,unsigned short const *,Windows::UI::Popups::IUICommand * *);
public:
	CMessageDialogHelper();
	long AddButton(unsigned int,unsigned short const *,MessageDialogButtonOptions);
	long RuntimeClassInitialize(HWND__ *,CMessageDialogHelper::ActivationType,bool);
	long SetContent(unsigned short const *);
	long SetTitle(unsigned short const *);
	long ShowMessageDialogAndWait(tagCOWAIT_FLAGS);
};

class CMetadataElement
{
	long _AddActiveControl(HWND__ *);
	long _AddRestingControl();
	long _SwitchToActive(HWND__ *);
	long _SwitchToInteractive();
	long _SwitchToResting();
	static STRUCTIFY_REF<_GUID const &> const * const c_rgclsidSuppressedMultiSelection;
	static UID DelayedMetadataInteraction;
	void _FireDelayedInteractionEvent(MetadataInteractionEvent::REASON);
	void _FireInteractionEvent(MetadataInteractionEvent::REASON,unsigned short *);
	void _SyncEditControlProps();
public:
	long InitializeForDisplay(IPropertyDescription *,CMetadataElement::CONTROLTYPE,_GUID const &,bool);
	long SetCurrentValue(IUnknown *);
	long SwitchToState(CMetadataElement::CONTROLSTATE,HWND__ *);
	static DirectUI::IClassInfo * Class;
	static UID MetadataInteraction;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class CMetadataExtractorWorkItem
{
	void _AddDUIUSBElement(unsigned short const *,DirectUI::DUIXmlParser *);
protected:
	int _ComputeItemReadOnly(IShellItemArray *);
	long _AddFileCount(unsigned long);
	long _AddKeyAndValueToPropArray(_tagpropertykey const &,tagPROPVARIANT const &,PROPDESC_VIEW_FLAGS,int);
	long _AddSaveCancel(DirectUI::DUIXmlParser *);
	long _AddSpacer(DirectUI::DUIXmlParser *);
	long _AddTitleRow(_tagpropertykey const &,tagPROPVARIANT const &,unsigned short const *,unsigned short const *,int,DirectUI::DUIXmlParser *);
	long _AddTitleToPropArray(IShellItem *,IPropertyStore *,IPropertyDescription *);
	long _AddToPropArray(IPropertyStore *,IPropertyDescription *,IPropertyStoreCache *,int *);
	long _GetValue(IPropertyStoreCache *,IPropertyStore *,_tagpropertykey,tagPROPVARIANT *);
	unsigned long _AddTitle(int,unsigned long,unsigned short const *,unsigned short const *,DirectUI::DUIXmlParser *);
	virtual ~CMetadataExtractorWorkItem();
	void _AddListToPropArray(IPropertyStore *,IPropertyDescriptionList *,IPropertyStoreCache *,int *);
	void _ExtractNullSelection(unsigned long);
	void _ExtractSelection(unsigned long,IShellItemArray *);
public:
	long SetInfo(CPreviewMetadataInner *,int,unsigned short const *,unsigned short const *,IPropertyStoreCache *,IShellItemArray *,unsigned long,unsigned long,IUnknown *,int,int);
	virtual long Dispatch();
	virtual long DoWork();
};

struct CMetadataLabel
{
	CMetadataLabel();
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class CMockHistoryProvider
{
	void _ResetResultArray();
public:
	virtual long GetProviderType(_GUID *);
	virtual long GetStoreEntryTask(unsigned short const *,unsigned short const *,_GUID const &,void * *);
	virtual long GetSuggestionsTask(unsigned short const *,IQueryWithLinguisticAlternatives *,unsigned short const *,unsigned int,ITypeAheadProviderEventSink *,_GUID const &,void * *);
	virtual long Initialize(unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDelay(unsigned int);
	virtual long SetLocaleName(unsigned short const *);
	virtual long SetQuery(unsigned short const *);
	virtual long SetResults(unsigned int,unsigned short const * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMockLocalProvider
{
	void _ResetResultArray();
public:
	virtual long GetProviderType(_GUID *);
	virtual long GetSuggestionsTask(unsigned short const *,IQueryWithLinguisticAlternatives *,unsigned short const *,unsigned int,ITypeAheadProviderEventSink *,_GUID const &,void * *);
	virtual long Initialize(unsigned short const *,TYPEAHEAD_LOCAL_SETTINGS const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetDelay(unsigned int);
	virtual long SetLocaleName(unsigned short const *);
	virtual long SetQuery(unsigned short const *);
	virtual long SetResults(unsigned int,unsigned short const * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CMockSuggestionsTask
{
	virtual long InternalResumeRT();
	virtual ~CMockSuggestionsTask();
};

struct CModalDialogBase
{
	static long s_CreateDialogPopup(HWND__ *,POPUP_OPTIONS,IPopupWindow * *);
	static long s_RunDialogSynchronous(long (*)(void *,IPopupWindow * *),long (*)(void *,IPopupWindow *,CModalDialogBase * *,DirectUI::Element * *),void *);
	virtual long TranslateShowDialogError(long);
	virtual void OnDialogShown();
	virtual void SetDialogReturnValue(long);
};

struct CModernErrorDialogCommand
{
	virtual long get_Handler(IPopupCommandHandler * *);
	virtual long get_ID(unsigned int *);
	virtual long get_Label(unsigned short * *);
};

class CModifiedState
{
	int _FindEntryForMonitor(unsigned short const *);
	long _AppendEntryForMonitor(unsigned short const *,unsigned short const *);
public:
	long AddMonitorEntry(unsigned short const *,tagRECT const *);
	long GetWallpaper(unsigned short const *,unsigned short * *,bool *);
	long SetWallpaper(tagRECT const *,unsigned short const *);
	long SetWallpaper(unsigned short const *,unsigned short const *);
	void Reset();
};

class CMountPoint
{
	int _IsDriveDisplayFlagOn(unsigned long);
	static EventHandle * _GetAndRemoveEventHandleByID(unsigned short const *);
	static bool _LocalDriveIsCoveredByNetDrive(unsigned short const *,AddToDriveLetterCache);
	static int _IsNetDriveLazyLoadNetDLLs(int);
	static long _EnumMountPoints(IHardwareDevices *);
	static long _EnumMountPointsNonPrimaryProcess(CCritSecDelayInitBase *);
	static long _EnumVolumes(IHardwareDevices *);
	static long _EnumVolumesNonPrimaryProcess(CCritSecDelayInitBase *);
	static long _GetMountPointForDriveLetter(int,CMountPoint * *);
	static long _GetMountPointForFolder(unsigned short const *,CMtPtLocal * *);
	static long _GetMountPointForFolderFromCache(unsigned short const *,CMtPtLocal * *);
	static long _GetMountPointsForVolume(unsigned short const *,_DPA *);
	static long _InitLocalDrive(int);
	static long _InitLocalDrives();
	static long _InitNetDrives();
	static long _InitNetDrivesHelper(unsigned long);
	static long _InvokeDeviceNotificationCallbacks(tagHWDEVICEINFO const *,unsigned long);
	static long _MediaArrivalRemovalHelper(unsigned short const *,int);
	static long _MountPointAdded(unsigned short const *,unsigned short const *);
	static long _MountPointRemoved(unsigned short const *);
	static long _NotifyBackgroundFormat(unsigned short const *);
	static long _NotifyPreparingEject(unsigned short const *);
	static long _VolumeAddedOrUpdated(int,tagVOLUMEINFO2 *);
	static long _VolumeMountingEvent(unsigned short const *,unsigned long);
	static long _VolumeRemoved(unsigned short const *);
	static unsigned int _SlashToPound(unsigned short const *,unsigned short *,unsigned long);
	static unsigned long _EventProc(void *);
	static unsigned long _InitLocalDriveHelperAsync(void *);
	static unsigned long _RegisterThreadProc(void *);
	static unsigned long _UnregisterThreadProc(void *);
	static unsigned short _ExtractDriveLetter(unsigned short const *);
	static void _CreateEventForVolumeArrival(tagVOLUMEINFO2 *,unsigned short *,unsigned long);
	static void _EventAPCProc(unsigned __int64);
	static void _HandleSubstDrives(CCritSecDelayInitBase *);
protected:
	int _GetLabelFromDesktopINI(unsigned short *,unsigned long);
	int _GetLabelFromReg(unsigned short *,unsigned long);
	int _GetLegacyRegIconLabel(unsigned short *,unsigned long,int);
	long _AddAutoplayVerb();
	static long NotifyDeviceUpdateLocations(long);
	static long _AddMountPointForFolder(CMtPtLocal *);
	static long _RemoveLocalMountPoint(unsigned short const *);
	virtual int _IsLocal();
	virtual int _IsMountedOnDriveLetter();
	virtual int _NeedToRefresh();
	virtual long _GetDriveName(unsigned short *,unsigned long);
	virtual unsigned short const * _GetNameForFctCall();
	void _QualifyCommandToDrive(unsigned short *,unsigned long);
	void _UpdateCommentFromDesktopINI();
public:
	int AppAllowsAutoRun(HWND__ *,unsigned long);
	int IsCompressed();
	int IsCompressible();
	int IsContentIndexed();
	int IsLFN();
	int _IsAutoRunDriveAndEnabledByPolicy();
	int _ProcessAutoRunFile();
	long GetDisplayName(unsigned short *,unsigned long);
	long GetLocalMountPoint(CMtPtLocal * *);
	static SHSTOCKICONID GetSuperPlainDriveIcon(unsigned short const *,unsigned int);
	static int DriveLettersAreSame(unsigned short const *,unsigned short const *);
	static int IsDriveLetter(unsigned short const *);
	static long GetMountPoint(IShellItem *,CMountPoint * *);
	static long GetMountPoint(int,CMountPoint * *);
	static long GetMountPoint(unsigned short const *,AddToDriveLetterCache,CMountPoint * *);
	static long GetSimulatedMountPointFromVolumeGuid(unsigned short const *,CMountPoint * *);
	static long InitNotificationsThreadID();
	static long RegisterForHardwareNotifications(int);
	static long _InitLocalDriveHelper();
	static unsigned long HandleMountPointLocalEventThreadProc(void *);
	static void DoAutorun(unsigned short const *,unsigned long);
	static void HandleMountPointLocalEvent(unsigned short const *,int,int);
	static void HandleWMDeviceChange(unsigned __int64,_DEV_BROADCAST_HDR const *);
	static void OnMediaArrival(unsigned short const *);
	static void OnMediaRemoval(unsigned short const *);
	static void OnMountPointArrival(unsigned short const *);
	static void OnMountPointRemoval(unsigned short const *);
	static void OnNetShareArrival(unsigned short const *);
	static void OnNetShareRemoval(unsigned short const *);
	static void UninitNotificationsThreadID();
	static void WantAutorunUI(unsigned short const *);
	static void WantAutorunUIGetReady(int);
	unsigned __int64 GetMaxVolumeLabelLength();
	unsigned long GetClusterSize();
	unsigned long Release();
	virtual int BitLockerCanChangePassphraseByProxy();
	virtual int BitLockerCanChangePin();
	virtual int BitLockerRequiresAdmin();
	virtual int GetBitLockerState();
	virtual int IsAudioCD();
	virtual int IsBurner();
	virtual int IsCDROM();
	virtual int IsDVD();
	virtual int IsDVDRAMMedia();
	virtual int IsDirty();
	virtual int IsDisconnectedNetDrive();
	virtual int IsEjectable();
	virtual int IsEjecting();
	virtual int IsFixedDisk();
	virtual int IsFloppy();
	virtual int IsFloppy35();
	virtual int IsFloppy525();
	virtual int IsFormattable();
	virtual int IsMediaPresent();
	virtual int IsMediaRemovable();
	virtual int IsMounted();
	virtual int IsMountedByPhoneStorageService();
	virtual int IsPureAudioCD();
	virtual int IsRemote();
	virtual int IsRemovableDevice();
	virtual int IsSDCard();
	virtual int IsSlow();
	virtual int IsUnavailableNetDrive();
	virtual int IsUsbDrive();
	virtual int SupportsMediaPresenceNotifications();
	virtual long Eject(HWND__ *);
	virtual long EjectAsync(HWND__ *);
	virtual long GetCDInfo(unsigned long *,unsigned long *);
	virtual long SetDriveLabel(HWND__ *,unsigned short const *);
	virtual void CloseSession();
	virtual void StoreIconForUpdateImage(int);
};

struct CMountPointRename
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Rename(unsigned short const *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CMountedDriveProps
{
	virtual long GetAttributes(unsigned long *);
};

struct CMountedVolume
{
	virtual long DAdvise(tagFORMATETC *,unsigned long,IAdviseSink *,unsigned long *);
	virtual long DUnadvise(unsigned long);
	virtual long EnumDAdvise(IEnumSTATDATA * *);
	virtual long EnumFormatEtc(unsigned long,IEnumFORMATETC * *);
	virtual long GetCanonicalFormatEtc(tagFORMATETC *,tagFORMATETC *);
	virtual long GetData(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long GetDataHere(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long Initialize(unsigned short const *);
	virtual long QueryGetData(tagFORMATETC *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetData(tagFORMATETC *,tagSTGMEDIUM *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMsgWaitForManyObjects
{
	long _EnsureScheduler();
};

class CMtPtLocal
{
	SHSTOCKICONID _GetCDROMIcon();
	int _ForceCheckMediaPresent();
	int _GetCDROMName(unsigned short *,unsigned long);
	int _GetFixedDriveIcon();
	int _GetMetadataIcon(unsigned short *,unsigned long);
	int _GetRemovableDriveIcon();
	long GetBusType(_STORAGE_BUS_TYPE *);
	long _Init(unsigned short const *);
	long _InitWithVolume(unsigned short const *,CVolume *);
	long _ShowElevationDialog();
	long _TryClassicEject(void *,HWND__ *,unsigned short const *);
	long _TryLowPrivilegeDeviceSafeRemoval(HWND__ *,bool *);
	static CVolume * _GetAndRemoveVolumeByID(unsigned short const *);
	static CVolume * _GetVolumeByID(unsigned short const *);
	static CVolume * _GetVolumeByMtPt(unsigned short const *);
	static long ElevationDialogCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	static long _CreateMtPtLocal(unsigned short const *);
	static long _CreateMtPtLocalFromVolumeGuid(unsigned short const *,CMountPoint * *);
	static long _CreateMtPtLocalWithVolume(unsigned short const *,CVolume *);
	static long _CreateVolume(tagVOLUMEINFO const *,CVolume * *);
	static long _CreateVolumeFromGUIDOnly(unsigned short const *,unsigned short const *,CVolume * *);
	static long _CreateVolumeFromReg(unsigned short const *,CVolume * *);
	static long _CreateVolumeFromRegHelper(unsigned short const *,unsigned short const *,CVolume * *);
	static long _CreateVolumeFromVOLUMEINFO2(tagVOLUMEINFO2 *,CVolume * *);
	static long _GetAndRemoveVolumeAndItsMtPts(unsigned short const *,CVolume * *,_DPA *);
	static long _InsertVolume(CVolume *);
	static long _UpdateVolumeRegInfo(tagVOLUMEINFO const *);
	static long _UpdateVolumeRegInfo2(tagVOLUMEINFO2 const *);
	static unsigned long _EjectThreadProc(void *);
	static void _RemoveVolumeByGUID(unsigned short const *);
	virtual int _GetDriveType();
	virtual int _GetGVIDriveFlags();
	virtual int _GetGVILabel(unsigned short *,unsigned long);
	virtual int _GetGVILabelOrMixedCaseFromReg(unsigned short *,unsigned long);
	virtual int _IsMountedOnDriveLetter();
	virtual int _NeedToRefresh();
	virtual long _GetDriveName(unsigned short *,unsigned long);
	virtual unsigned short const * _GetNameForFctCall();
	void * _GetHandleWithAccessAndShareMode(unsigned long,unsigned long);
protected:
	virtual int _IsLocal();
public:
	CMtPtLocal();
	int CanUseVolume();
	int IsBitLockerDecrypting();
	int IsBitLockerInitialized();
	int IsBitLockerLocked();
	int IsBitLockerPreProvisioned();
	int IsBitLockerPremiumSKU();
	int IsVirtualDevice();
	long GetAutorunCommand(unsigned short *,unsigned long);
	long GetAutorunIcon(unsigned short *,unsigned long);
	long GetAutorunShellExecute(unsigned short *,unsigned long);
	long GetMountPointName(unsigned short *,unsigned long);
	long GetVolumeGUID(_GUID *);
	static int IsVolume(unsigned short const *);
	virtual HKEY__ * GetRegKey();
	virtual int BitLockerCanChangePassphraseByProxy();
	virtual int BitLockerCanChangePin();
	virtual int BitLockerRequiresAdmin();
	virtual int GetBitLockerState();
	virtual int GetDriveFlags();
	virtual int GetFileSystemName(unsigned short *,unsigned long);
	virtual int IsAudioCD();
	virtual int IsAutorunPresent();
	virtual int IsBurner();
	virtual int IsCDROM();
	virtual int IsDVD();
	virtual int IsDVDRAMMedia();
	virtual int IsDirty();
	virtual int IsEjectable();
	virtual int IsEjecting();
	virtual int IsEmulatedPhoneSDCard();
	virtual int IsFixedDisk();
	virtual int IsFloppy();
	virtual int IsFloppy35();
	virtual int IsFloppy525();
	virtual int IsFormattable();
	virtual int IsFormatted();
	virtual int IsMediaPresent();
	virtual int IsMediaRemovable();
	virtual int IsMounted();
	virtual int IsMountedByPhoneStorageService();
	virtual int IsPureAudioCD();
	virtual int IsRemovableDevice();
	virtual int IsSDCard();
	virtual int IsUsbDrive();
	virtual int SupportsMediaPresenceNotifications();
	virtual long Eject(HWND__ *);
	virtual long EjectAsync(HWND__ *);
	virtual long GetAssocSystemElement(IAssociationElement * *);
	virtual long GetCDInfo(unsigned long *,unsigned long *);
	virtual long GetLabel(unsigned short *,unsigned long,int *);
	virtual long GetLabelNoFancy(unsigned short *,unsigned long);
	virtual long GetRemotePath(unsigned short *,unsigned long);
	virtual long GetSerialNumber(unsigned long *);
	virtual long SetDriveLabel(HWND__ *,unsigned short const *);
	virtual long SetLabel(HWND__ *,unsigned short const *);
	virtual unsigned int GetIcon(unsigned short *,unsigned long);
	virtual unsigned long GetAttributes();
	virtual unsigned long GetAutorunContentType();
	virtual unsigned long GetMTPTContentType();
	virtual unsigned long GetMTPTDriveType();
	virtual unsigned long GetShellDescriptionID();
	virtual unsigned long GetVolumeInformationFlags();
	virtual void CloseSession();
	virtual void GetTypeString(unsigned short *,unsigned long);
	virtual void StoreIconForUpdateImage(int);
};

class CMtPtRemote
{
	int _IsConnected();
	int _UpdateGFAAndGVIInfo();
	long _GetDisplayName(unsigned short *,unsigned long);
	long _Init(unsigned short const *,unsigned short const *,int);
	long _InitWithoutShareName(unsigned short const *);
	static CShare * _GetOrCreateShareFromID(unsigned short const *);
	static long _CreateMtPtRemote(unsigned short const *,unsigned short const *,int);
	static long _CreateMtPtRemoteWithoutShareName(unsigned short const *);
	static long _DeleteAllMtPtsAndShares();
	static long _RemoveShareFromHDPA(CShare const *);
	static unsigned long _ReadDesktopIniThreadProc(void *);
	virtual int _GetDriveType();
	virtual int _GetGVIDriveFlags();
	virtual int _GetGVILabel(unsigned short *,unsigned long);
	virtual int _GetGVILabelOrMixedCaseFromReg(unsigned short *,unsigned long);
	void _CalcPathSpeed();
	void _ReadDesktopIni();
	void _UpdateWNetGCStatus();
public:
	CMtPtRemote();
	virtual HKEY__ * GetRegKey();
	virtual int GetDriveFlags();
	virtual int GetFileSystemName(unsigned short *,unsigned long);
	virtual int IsAutorunPresent();
	virtual int IsDisconnectedNetDrive();
	virtual int IsEmulatedPhoneSDCard();
	virtual int IsFormatted();
	virtual int IsRemote();
	virtual int IsSlow();
	virtual int IsUnavailableNetDrive();
	virtual long GetAssocSystemElement(IAssociationElement * *);
	virtual long GetLabel(unsigned short *,unsigned long,int *);
	virtual long GetLabelNoFancy(unsigned short *,unsigned long);
	virtual long GetRemotePath(unsigned short *,unsigned long);
	virtual long GetSerialNumber(unsigned long *);
	virtual long SetLabel(HWND__ *,unsigned short const *);
	virtual unsigned int GetIcon(unsigned short *,unsigned long);
	virtual unsigned long GetAttributes();
	virtual unsigned long GetAutorunContentType();
	virtual unsigned long GetMTPTContentType();
	virtual unsigned long GetMTPTDriveType();
	virtual unsigned long GetShellDescriptionID();
	virtual unsigned long GetVolumeInformationFlags();
	virtual void GetTypeString(unsigned short *,unsigned long);
};

class CMultiComplete
{
	__int64 _EditSubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _NotifyWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _OnEnumComplete(MCENUMRESULTS *,long);
	int _OnSearchComplete(MCSEARCHRESULTS *,long);
	long _AddResultsToPopup();
	long _EnsurePopup();
	long _RepositionPopup(tagRECT const *);
	static __int64 s_EditSubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_NotifyWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _HidePopup();
	~CMultiComplete();
public:
	virtual long ClearAllChecks();
	virtual long Destroy();
	virtual long GetItemState(LVPVIEWID,tagLVITEMW * const,int *);
	virtual long Initialize(HWND__ *,IClassFactory *,IMultiCompleteCallback *);
	virtual long OnCreated();
	virtual long OnDestroy();
	virtual long OnDismiss(int);
	virtual long OnGetSearchText(SEARCHTEXTTYPE,unsigned short *,unsigned int);
	virtual long OnItemChanged(LVPVIEWID,tagNMLISTVIEW const *,int);
	virtual long OnItemFocused(LVPVIEWID,tagLVITEMW * const,tagLVITEMW * const);
	virtual long OnItemInvoke(LVPVIEWID,tagLVITEMW * const);
	virtual long OnItemRemoved(REMOVEITEMTYPE,LVPVIEWID,tagLVITEMW * const);
	virtual long OnMouseLeave();
	virtual long OnPropCtrlInvoke(IFilterCondition *);
	virtual long OnRequestReposition(tagRECT const *);
	virtual long OnSpinnerCancel(LVPVIEWID);
	virtual long OnToolBarItemInvoke(int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetAccessibilityName(unsigned short const *);
	virtual long SetCheck(unsigned short const *,int);
	virtual long Show(int);
	virtual long SpecialCharacter(tagMSG const *,int);
	virtual long StartComplete(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMultiItemsDefaultCommand
{
	long _GetContextMenuToInvoke(IShellItemArray *,unsigned int *,IContextMenu * *);
public:
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CMultiSzBuilderW
{
	long Append(unsigned short const *);
};

class CMultiValueCategorizer
{
protected:
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
};

class CMultimonWallpaperState
{
	struct CMultimonSpanLayout
	{
		double _CalculateVisibleImageSizeAfterClip(tagRECT const *);
		void GetLargestNonclippedRectangle(int,int,tagRECT *);
		void Reset();
		void _ClipRectangle(tagRECT const *);
	};

	struct CMultimonWallpaperEntry
	{
		bool ConsiderEntry(GET_NEXT_MONITOR_MODE,unsigned short const *,int,bool);
		bool IsMonitorPrimary();
		bool IsStarving(int);
		bool NeedsImage(bool);
		static int s_MultimonWallpaperEntrySort(CMultimonWallpaperEntry const *,CMultimonWallpaperEntry const *,__int64);
		void SetMonitor(HMONITOR__ *);
	};

protected:
	CMultimonWallpaperState::CMultimonWallpaperEntry * _GetEntryForMonitor(HMONITOR__ *);
	CMultimonWallpaperState::CMultimonWallpaperEntry * _GetEntryForMonitor(tagRECT const *);
	static int s_ResetImagesCB(CMultimonWallpaperState::CMultimonWallpaperEntry *,void *);
	static int s_ResetLiveDataCB(CMultimonWallpaperState::CMultimonWallpaperEntry *,void *);
public:
	CTranscodedImage * GetImageForPrimaryMonitor();
	CTranscodedImage * GetLastUpdatedImage(bool);
	IMAGE_ORIENTATION GetImageOrientation(tagSIZE const &,bool);
	bool AutospanSupported(bool);
	bool DoesAnyMonitorHaveAnImage();
	bool DoesAnyMonitorNeedAnImage();
	bool GetMonitorRectAt(int,tagRECT *);
	bool HasMonitorAt(int);
	bool IsLastUpdatedMonitorPrimary();
	bool _HasEntries(IMAGE_ORIENTATION,CMultimonWallpaperState::GET_NEXT_MONITOR_MODE,unsigned short const *);
	int GetCount();
	int _GetNextMonitor(int,IMAGE_ORIENTATION,CMultimonWallpaperState::GET_NEXT_MONITOR_MODE,unsigned short const *,bool);
	long Init(bool *);
	long RefreshDisplayConfig(bool *);
	long UpdateNextMonitor(WALLPAPER_SLIDESHOW_IMAGE_ENTRY const *,DESKTOP_WALLPAPER_POSITION,bool);
	static int s_RefreshDisplayMonitorEnumProc(HMONITOR__ *,HDC__ *,tagRECT *,__int64);
	static long _RefreshDisplayConfigForMonitor(CMultimonWallpaperState::REFRESH_DISPLAY_CONFIG_DATA *,HMONITOR__ *,tagRECT,unsigned short const *,unsigned int);
	void IncrementStarvationCounts();
	void Reset();
	void ResetImages();
	void ResetStarvationCounts();
};

class CMultipleValues
{
	long _EnsureIndividualValuesArray();
	static int s_ClearPropVariant(tagPROPVARIANT *,void *);
public:
	virtual long AppendValue(tagPROPVARIANT const &);
	virtual long DeleteValue(tagPROPVARIANT const &);
	virtual long GetCount(int *);
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long GetValue(tagPROPVARIANT *);
	virtual long GetValueAt(int,tagPROPVARIANT *);
	virtual long HasValue(tagPROPVARIANT const &,int *);
	virtual long InitValue(tagPROPVARIANT const &);
	virtual long InsertValue(int,tagPROPVARIANT const &);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPropertyKey(_tagpropertykey const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMyDocsFolder
{
	long _ConfirmMyDocsPath(HWND__ *);
	long _GetFolder();
	long _GetFolder2();
	long _GetFolderOverlayInfo(int *,int);
	long _GetShellIconOverlay();
	unsigned long _GetRealMyDocsAttributes(unsigned long);
	~CMyDocsFolder();
public:
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetOverlayIconIndex(_ITEMID_CHILD const *,int *);
	virtual long GetOverlayIndex(_ITEMID_CHILD const *,int *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CMyDocsFolderLinkResolver
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResolveShellLink(IUnknown *,HWND__ *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CNamespaceWalkFilter
{
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CNavPaneOptionCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

class CNavigateAndSelectAsync
{
	long _InvokeThreadProc();
	long _NavAndSelect(IShellBrowser *,IShellItem *);
	static unsigned long s_InvokeThreadProc(void *);
public:
	long DoNavigateAndSelect(IUnknown *,IShellItem *);
	unsigned long Release();
};

class CNavigateButton
{
	static long GetCplRoot(IShellBrowser *,_ITEMIDLIST * *);
	void _Execute();
	void _Navigate();
public:
	static DirectUI::IClassInfo * Class;
	static void Navigate(unsigned short const *,unsigned short const *,IUnknown *,bool);
	unsigned short const * GetShellExecute(DirectUI::Value * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnEvent(DirectUI::Event *);
};

struct CNavigationSite
{
	CNavigationSite(IUnknown *);
	static long s_CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CNestableFilePlaceholderCallback
{
	long _SetCompletionEvent(long);
public:
	CNestableFilePlaceholderCallback();
	long RuntimeClassInitialize(IUnknown *);
	virtual long BeginOperation();
	virtual long CancelOperation();
	virtual long GetOperationOutput(long *);
	virtual long GetOperationOutputForThumbnail(long *,unsigned int *,unsigned int *);
	virtual long GetOperationOutputWithResult(long *,IUnknown * *);
	virtual long OnComplete(long);
	virtual long OnCompleteForThumbnail(long,unsigned int,unsigned int);
	virtual long OnCompleteWithResult(long,IUnknown *);
	virtual long OnProgress(unsigned __int64,unsigned __int64);
	virtual long ShouldContinue();
	virtual long WaitOnComplete(unsigned long);
};

struct CNetAssocList
{
	CNetAssocList(CNetFolder *,IDNETRESOURCE const *);
	virtual long CreateAssoc(unsigned int,_GUID const &,void * *);
	virtual unsigned int const * GetAssocTable(unsigned long *);
};

class CNetFolder
{
	SHSTOCKICONID _MapItemToStockIcon(_ITEMID_CHILD const *);
	int _IsInnerRequired();
	long _AssocCreate(IDNETRESOURCE const *,_GUID const &,void * *);
	long _ContinueParse(HWND__ *,IBindCtx *,unsigned short const *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	long _GetDisplayName(IDNETRESOURCE const *,unsigned short *,unsigned long);
	long _GetIconOverlayInfo(IDNETRESOURCE const *,int *,unsigned long);
	long _GetNetResource(IDNETRESOURCE const *,_NETRESOURCEW *,unsigned int);
	long _GetNetResourceInfoAndRestOfPath(_NETRESOURCEW *,_NETRESOURCEW * *,unsigned long *,unsigned short * *,int,HWND__ *);
	long _GetPathForItem(IDNETRESOURCE const *,unsigned short *,unsigned long);
	long _GetPathForShare(IDNETRESOURCE const *,unsigned short *,unsigned long);
	long _GetResourceInformationAlloc(_NETRESOURCEW const *,_NETRESOURCEW * *,unsigned long *,unsigned short * *,int);
	long _GetResourceParent(_NETRESOURCEW *,_NETRESOURCEW *,unsigned long *);
	long _GetResourceParentQuick(_NETRESOURCEW *,_NETRESOURCEW *,unsigned long,unsigned short *,unsigned int);
	long _GetSyncProperty(_ITEMID_CHILD const *,_tagpropertykey const &,tagPROPVARIANT *);
	long _MapResourceDisplayTypeToCLSID(unsigned int,_GUID *);
	long _ParseSpecialWithBindCtx(unsigned short const *,IBindCtx *,_ITEMID_CHILD * *);
	long _ParseUNCName(HWND__ *,IBindCtx *,unsigned short const *,unsigned short const *,int,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	long _ParseUrlName(HWND__ *,IBindCtx *,unsigned short const *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	long _ShowNetDiagnostics(HWND__ *,unsigned short const *,long,int *);
	static IDNETRESOURCE const * _IsValidID(_ITEMIDLIST_RELATIVE const *);
	static IDNETRESOURCE const * _ValidateIDNetResource(IDNETRESOURCE const *);
	static bool _IsSyncProperty(_tagpropertykey const &);
	static int _IsPrintShare(IDNETRESOURCE const *);
	static long _CreateItemID(IDNETRESOURCE const *,unsigned short const *,unsigned short const *,unsigned short const *,bool,_ITEMID_CHILD * *);
	static long _ItemDFMCallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	static long _PrinterDFMCallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	static unsigned short * _CopyComment(IDNETRESOURCE const *,unsigned short *,unsigned int);
	static unsigned short * _CopyProviderName(IDNETRESOURCE const *,unsigned short *,unsigned int);
	static unsigned short * _CopyResName(IDNETRESOURCE const *,unsigned short *,unsigned int);
	unsigned short const * _GetNameForParsing(unsigned short const *,unsigned short *,int);
	unsigned short const * _GetProvider(IDNETRESOURCE const *,unsigned short *,unsigned int);
	virtual long v_InternalQueryInterface(_GUID const &,void * *);
public:
	CNetFolder(int,unsigned int);
	long CreateItemIDFromNetRes(_NETRESOURCEW const *,CREATE_NET_ITEMID_FLAGS,_ITEMID_CHILD * *);
	static long s_CreateAndInit(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,int,unsigned int,unsigned short const *,unsigned short const *,_GUID const &,void * *);
	static long s_CreateInstance(int,unsigned int,_GUID const &,void * *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateNewIDList(unsigned short const *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD * *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFolderCapabilities(NSTCFOLDERCAPABILITIES,NSTCFOLDERCAPABILITIES *);
	virtual long GetFolderTargetInfo(_PERSIST_FOLDER_TARGET_INFO *);
	virtual long GetOverlayIconIndex(_ITEMID_CHILD const *,int *);
	virtual long GetOverlayIndex(_ITEMID_CHILD const *,int *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetPreferences(NAMESPACE_FOLDER_PREFERENCES_FLAGS *);
	virtual long GetPropertiesToApply(IPropertyStore *,_GUID const &,void * *);
	virtual long GetScopeAndSubQueries(SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IScope * *,IShellItemArray * *);
	virtual long GetSearchRoot(IShellItem * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,unsigned int,unsigned short const *,unsigned short const *);
	virtual long InitializeEx(IBindCtx *,_ITEMIDLIST_ABSOLUTE const *,_PERSIST_FOLDER_TARGET_INFO const *);
	virtual long IsTypeSupported(unsigned short const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetLocation(IShellItem *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CNetFolderDataObj
{
	long _IsFileSystemDataObject();
public:
	CNetFolderDataObj(CNetFolder *,_ITEMIDLIST_ABSOLUTE const *,unsigned int,_ITEMID_CHILD const * const *);
	virtual long GetData(tagFORMATETC *,tagSTGMEDIUM *);
	virtual long QueryGetData(tagFORMATETC *);
};

class CNetFolderEnum
{
	CNetFolderEnum(CNetFolder *,unsigned long);
	int _HideProvider(unsigned short const *);
	long _Next(_ITEMID_CHILD * *);
	long _OpenEnum(HWND__ *,_NETRESOURCEW const *);
public:
	static long CreateAndInit(CNetFolder *,HWND__ *,unsigned long,_NETRESOURCEW const *,IEnumIDList * *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
};

class CNetFolderViewCB
{
	long _OnGETCOLSAVESTREAM(unsigned long,unsigned __int64,IStream * *);
public:
	CNetFolderViewCB(CNetFolder *);
	static long _CanOpenRemotePrinters(IUnknown *,IShellItemArray *,int,int *);
	static long _CanSearchActiveDirectory(IUnknown *,IShellItemArray *,int,int *);
	static long _OnOpenNetCenter(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnOpenRemotePrinters(IUnknown *,IShellItemArray *,IBindCtx *);
	static long _OnSearchActiveDirectory(IUnknown *,IShellItemArray *,IBindCtx *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CNetParsingCache
{
	long _LookupInCache(unsigned short const *,IBindCtx *,int,_ITEMIDLIST_RELATIVE * *,unsigned short const * *,long *);
	static void s_FreeCacheEntry(CNetParsingCache::PARSECACHEENTRY *);
	void _AddToCache(unsigned short const *,_ITEMIDLIST_RELATIVE *,long,int);
	void _GetCacheKey(unsigned short const *,unsigned short *,int);
public:
	static long LookupInCache(unsigned short const *,IBindCtx *,int,_ITEMIDLIST_RELATIVE * *,unsigned short const * *,long *);
	static void AddToCache(unsigned short const *,_ITEMIDLIST_RELATIVE *,long,int);
};

struct CNewItemCommand
{
	static long s_CreateInstance(_GUID const &,void * *);
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CNewItemSubCommand
{
	long _Initialize(char const *,unsigned short const *,HBITMAP__ *);
public:
	static long s_CreateInstance(char const *,unsigned short const *,HBITMAP__ *,_GUID const &,void * *);
	virtual long CancelPreview(IShellItemArray *);
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetDescription(IShellItemArray *,unsigned short * *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetIconAsBitmap(IShellItemArray *,tagSIZE,HBITMAP__ * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long GetToolTipTitle(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long Preview(IShellItemArray *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CNewMenu
{
	HBITMAP__ * _GetImage(HKEY__ *,NEWOBJECTINFO const *);
	INewItemAdvisor * _GetAdvisor();
	IPropertyChangeArray * _GetPropertiesToApply(_ITEMIDLIST_ABSOLUTE const *,_FILETIME const *);
	NEWOBJECTINFO * _GetItemData(HMENU__ *,int,unsigned int);
	NEWOBJECTINFO * _GetNewInfoOnInvoke(_CMINVOKECOMMANDINFO *,NEWOBJECTINFO *,NEWFILEINFO *);
	int _BeforeSeparator(NEWOBJECTINFO const *);
	int _GetClientFlags();
	int _InitMenuPopup(HMENU__ *);
	int _InsertNewMenuItem(HKEY__ *,HMENU__ *,unsigned int,NEWOBJECTINFO const *);
	int _IsExtensionAllowedForNoAccess(unsigned short const *);
	int _IsLFNDrive();
	int _IsSupported(NEWOBJECTINFO const *,unsigned short const *,int,INewItemAdvisor *);
	long _ConsolidateMenuItems(int);
	long _CopyTemplate(IStream *,NEWFILEINFO const *);
	long _CreateFileOrFolder(HWND__ *,unsigned short const *,NEWFILEINFO *,NEWOBJECTINFO *);
	long _CreateFromStorage(HWND__ *,unsigned short const *,NEWFILEINFO *,NEWOBJECTINFO *);
	long _CreateItem(HWND__ *,unsigned short const *,NEWFILEINFO *,NEWOBJECTINFO *);
	long _DoesUserHaveAccessToFolder(unsigned long);
	long _FullIDListFromRelName(unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
	long _GetPropertiesFromClient(IPropertyChangeArray *);
	long _RunCommand(HWND__ *,unsigned short const *,unsigned short const *);
	long _SelectAndPostProcess(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,int,INewObjectHandler *);
	long _TransferContents(HWND__ *,NEWFILEINFO const *,IStream *,IStorage *,_ITEMIDLIST_ABSOLUTE *);
	static int s_FreeNewMenuItem(NEWOBJECTINFO *,void *);
	unsigned int _GetCmdID(int,NEWOBJECTINFO const *);
	unsigned short * _GetTypeInfoFromAssoc();
	unsigned short * _ProcessArgs(unsigned short const *,...);
	virtual ~CNewMenu();
	void _AddPropertyToArray(IPropertyChangeArray *,_tagpropertykey const &,tagPROPVARIANT const &);
	void _GetIsLFNDrive();
	void _GetNewFileSpec(NEWOBJECTINFO const *,NEWFILEINFO const *,unsigned short *,unsigned int);
	void _ShowError(HWND__ *,unsigned short const *,long,NEWTYPE);
public:
	CNewMenu();
	virtual long FinishOperations(long);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long PauseTimer();
	virtual long PostCopyItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PostDeleteItem(unsigned long,IShellItem *,long,IShellItem *);
	virtual long PostMoveItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PostNewItem(unsigned long,IShellItem *,unsigned short const *,unsigned short const *,unsigned long,long,IShellItem *);
	virtual long PostRenameItem(unsigned long,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PreCopyItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *);
	virtual long PreDeleteItem(unsigned long,IShellItem *);
	virtual long PreMoveItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *);
	virtual long PreNewItem(unsigned long,IShellItem *,unsigned short const *);
	virtual long PreRenameItem(unsigned long,IShellItem *,unsigned short const *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResetTimer();
	virtual long ResumeTimer();
	virtual long StartOperations();
	virtual long UpdateProgress(unsigned int,unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CNewMenuConsolidator
{
	CNewMenuConsolidator();
	static _GUID const _taskid;
	static long CreateInstance(_GUID const &,void * *);
	virtual long InternalResumeRT();
};

class CNonFileTable
{
	void FindNthElement(unsigned int);
	void _PartitionOnValue(LOOKUP_ENTRY *,unsigned int,unsigned int,unsigned int * const);
public:
	void KeepN(_HashTable * *,unsigned int);
	void Prune(_HashTable * *,int);
};

class CNotificationClientData
{
	void _EnsureProxyData();
public:
	virtual long GetClientMessage(unsigned int *);
	virtual long GetItem(_GUID const &,void * *);
	virtual long GetListeningEvents(unsigned long *);
	virtual long GetNotifyFlags(NOTIFICATION_CLIENT_FLAGS *);
	virtual long GetProcID(unsigned long *);
	virtual long GetSources(unsigned long *);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CNotificationDispatcher
{
	static long GetForCurrentThread(INotificationDispatcher * *);
};

class CNotificationDispatcherBase
{
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
protected:
	virtual bool CanProcessWork();
	virtual ~CNotificationDispatcherBase();
public:
	virtual long QueueNotification(IDispatchNotification *);
	virtual long RemoveBackReferences();
	virtual void StartProcessingNotifications();
	virtual void StopProcessingNotifications();
};

struct CNotifyEvent
{
	static CNotifyEvent * s_CreateInstanceWithEvent(long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,unsigned long,unsigned int);
	unsigned long Release();
};

class CNotifySubclassWndProc
{
	static __int64 s_SubclassWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static int s_CompareRegisterData(CNotifySubclassWndProc::NOTIFYREGISTERDATA const *,CNotifySubclassWndProc::NOTIFYREGISTERDATA const *,__int64);
protected:
	int _SubclassWindow(HWND__ *,unsigned int);
	virtual __int64 _DefWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual void _DestroyCustomData(__int64);
	virtual ~CNotifySubclassWndProc();
	void _FlushNotifyMessages(HWND__ *);
	void _RegisterWindow(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,long,int,unsigned int,__int64,unsigned int *);
	void _UnregisterWindow(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,unsigned int);
};

class CNotifyUserPictureChangeTask
{
	void _Notify();
public:
	static unsigned long s_Notify(void *);
};

struct CNullSpaceContextMenu
{
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
};

struct CObjectCLSID
{
	virtual long GetClassID(_GUID *);
};

struct CObjectSafety
{
	virtual long GetInterfaceSafetyOptions(_GUID const &,unsigned long *,unsigned long *);
	virtual long SetInterfaceSafetyOptions(_GUID const &,unsigned long,unsigned long);
};

struct CObjectWindow
{
	virtual long ContextSensitiveHelp(int);
	virtual long GetWindow(HWND__ * *);
};

struct CObjectWithBackReferences
{
	virtual long RemoveBackReferences();
};

struct CObjectWithSite
{
	CObjectWithSite(IUnknown *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
};

class CObservableItem
{
	bool _SupportsPropertyNotifications(IUnknown *);
	long _ConfigureGroupCollectionImageManager(IItemCollection *);
	long _GetImageForItemAsPropertyValue(IMAGE_STREAM_TYPE,int,WTS_FLAGS,bool,int,IInspectable * *);
	long _GetPropertyFromCache(HSTRING__ *,_GUID const &,void * *);
	long _GetRemappedPropertyName(unsigned short const *,HSTRING__ * *);
	long _GetSystemPropertyHelper(HSTRING__ *,IInspectable * *);
	long _GetTooltipImageStreamForItemAsPropertyValue(int,IInspectable * *);
	long _ParseImagePropertyParameters(unsigned short const *,IMAGE_STREAM_TYPE *,unsigned int *,WTS_FLAGS *,bool *,unsigned int *);
	long _ParsePropertyNameAndParameters(unsigned short const *,unsigned short * *,unsigned short * *);
	long _SendItemChangedNotification();
	long _SendPropertyChangedNotification(HSTRING__ *,bool,bool *);
	long _SendPropertyChangedNotification(_tagpropertykey const &,_tagpropertykey const &);
	long _TryGetItemsGroupProperty(IInspectable * *);
	long _TryGetSystemProperty(unsigned short const *,unsigned short const *,IInspectable * *);
	long _TryRealizeItemsGroup();
	virtual ~CObservableItem();
	void _CacheProperty(Windows::UI::Xaml::Data::ICustomProperty *);
	void _DelegateItemChanged(IUnknown *,ITEM_CHANGED_TYPE,IPropertyKeyStore *);
	void _RemoveThumbnailEntriesFromCachedProperties();
public:
	CObservableItem();
	static TrustLevel InternalGetTrustLevel();
	static unsigned short const * InternalGetRuntimeClassName();
	virtual long ExecuteCommand(HSTRING__ *,HSTRING__ *);
	virtual long GetChangeCount(unsigned int *);
	virtual long GetCustomProperty(HSTRING__ *,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetIndexedProperty(HSTRING__ *,Windows::UI::Xaml::Interop::TypeName,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long GetItem(IItem * *);
	virtual long GetPropertyValue(HSTRING__ *,IInspectable * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetStringRepresentation(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetWindow(HWND__ * *);
	virtual long IsImagePresent(IMAGE_STREAM_TYPE);
	virtual long NotifyPropertyChanged(HSTRING__ *);
	virtual long OnCancelled(IItem *);
	virtual long OnItemChanged(ITEM_CHANGED_TYPE,IItem *,IPropertyKeyStore *);
	virtual long OnItemChanging(ITEM_CHANGED_TYPE,IItem *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetCustomPropertyProvider(Windows::Internal::Storage::CustomPropertyProviderType,Windows::UI::Xaml::Data::ICustomPropertyProvider *);
	virtual long SetCustomPropertyProviderFactory(Windows::Internal::Storage::ICustomPropertyProviderFactory *);
	virtual long SetItem(IItem *);
	virtual long SetItemValueProvider(Windows::Internal::Storage::IItemValueProvider *);
	virtual long SetItemValueProviderFactory(Windows::Internal::Storage::IItemValueProviderFactory *);
	virtual long SetWindow(HWND__ *);
	virtual long add_PropertyChanged(Windows::UI::Xaml::Data::IPropertyChangedEventHandler *,EventRegistrationToken *);
	virtual long get_Commands(Windows::Foundation::Collections::IVector<Windows::Internal::Storage::IItemCommand *> * *);
	virtual long get_Phase(Windows::Internal::Storage::BindingPhase *);
	virtual long get_Type(Windows::UI::Xaml::Interop::TypeName *);
	virtual long put_Phase(Windows::Internal::Storage::BindingPhase);
	virtual long remove_PropertyChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CObservableItemCollection
{
	long _CopyCacheEntriesForHandlingReset(IObjectCollection * *);
	long _GetCachedItemAt(unsigned int,IObjectWithItem * *);
	long _GetCurrentSizeAndVersion(unsigned int *,unsigned int *);
	long _GetCurrentVersion(unsigned int *);
	long _GetItem(unsigned int,unsigned int,IInspectable * *);
	long _GetSnapshotSize(unsigned int *);
	long _HandleCollectionResetEvent();
	long _SendPropertyChangedNotification(unsigned short const *);
	virtual ~CObservableItemCollection();
	void _ClearItemCache(long,unsigned int,unsigned int);
	void _SendItemChanged(unsigned int);
	void _SetIsLoadingCountFlag(bool);
	void _SetWindowOnItem(IUnknown *);
public:
	CObservableItemCollection();
	long RuntimeClassInitialize();
	static TrustLevel InternalGetTrustLevel();
	static unsigned short const * InternalGetRuntimeClassName();
	virtual long Append(IInspectable *);
	virtual long Clear();
	virtual long First(Windows::UI::Xaml::Interop::IBindableIterator * *);
	virtual long GetAt(unsigned int,IInspectable * *);
	virtual long GetChangeCount(unsigned int *);
	virtual long GetCustomProperty(HSTRING__ *,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetIndexedProperty(HSTRING__ *,Windows::UI::Xaml::Interop::TypeName,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long GetItemCollection(IItemCollection * *);
	virtual long GetPropertyValue(HSTRING__ *,IInspectable * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetStringRepresentation(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetView(Windows::UI::Xaml::Interop::IBindableVectorView * *);
	virtual long GetWindow(HWND__ * *);
	virtual long IndexOf(IInspectable *,unsigned int *,unsigned char *);
	virtual long InsertAt(unsigned int,IInspectable *);
	virtual long NotifyPropertyChanged(HSTRING__ *);
	virtual long OnAsyncResetTaskComplete(unsigned int,unsigned int,long,CLocalSimpleArray<TranslateResetEvent,4294967294> *);
	virtual long OnCancelled();
	virtual long OnCollectionChanged(unsigned int,tagCOLLECTION_CHANGE_STATE);
	virtual long OnGetCountDone(unsigned int,tagCOUNT_TYPE,long);
	virtual long OnItemMoved(IItem *,IItem *);
	virtual long OnItemTranslated(IItem *,IItem *);
	virtual long OnItemsAdded(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnItemsDeleted(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnPrepareDone(unsigned int,long);
	virtual long OnUniqueLeafCountChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveAt(unsigned int);
	virtual long RemoveAtEnd();
	virtual long SetAt(unsigned int,IInspectable *);
	virtual long SetCustomPropertyProvider(Windows::Internal::Storage::CustomPropertyProviderType,Windows::UI::Xaml::Data::ICustomPropertyProvider *);
	virtual long SetCustomPropertyProviderFactory(Windows::Internal::Storage::ICustomPropertyProviderFactory *);
	virtual long SetItemCollection(ITEM_COLLECTION_FLAGS,IItemCollection *);
	virtual long SetItemValueProvider(Windows::Internal::Storage::IItemValueProvider *);
	virtual long SetItemValueProviderFactory(Windows::Internal::Storage::IItemValueProviderFactory *);
	virtual long SetSite(IUnknown *);
	virtual long SetWindow(HWND__ *);
	virtual long add_PropertyChanged(Windows::UI::Xaml::Data::IPropertyChangedEventHandler *,EventRegistrationToken *);
	virtual long add_VectorChanged(Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler *,EventRegistrationToken *);
	virtual long get_IsSizeRealized(unsigned char *);
	virtual long get_Size(unsigned int *);
	virtual long get_Type(Windows::UI::Xaml::Interop::TypeName *);
	virtual long remove_PropertyChanged(EventRegistrationToken);
	virtual long remove_VectorChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CObservableItemCollectionSink
{
	void _AppendChange(CollectionChangeArgs const &);
	void _OnLiveItemCountChanged();
public:
	CObservableItemCollectionSink();
	MapIndexResult MapIndex(unsigned int,unsigned int,unsigned int *);
	bool ContinueAsyncResetOperation();
	virtual long OnCancelled();
	virtual long OnCollectionChanged(unsigned int,tagCOLLECTION_CHANGE_STATE);
	virtual long OnGetCountDone(unsigned int,tagCOUNT_TYPE,long);
	virtual long OnItemMoved(IItem *,IItem *);
	virtual long OnItemTranslated(IItem *,IItem *);
	virtual long OnItemsAdded(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnItemsDeleted(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnPrepareDone(unsigned int,long);
	virtual long OnUniqueLeafCountChanged();
	void AppendResetChange(int);
	void ProcessChanges();
};

struct CObservableItemCollectionVectorChangedEventArgs
{
	CObservableItemCollectionVectorChangedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_CollectionChange(Windows::Foundation::Collections::CollectionChange *);
	virtual long get_Index(unsigned int *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CObservableItemSink
{
	CObservableItemSink();
	virtual long OnCancelled(IItem *);
	virtual long OnItemChanged(ITEM_CHANGED_TYPE,IItem *,IPropertyKeyStore *);
	virtual long OnItemChanging(ITEM_CHANGED_TYPE,IItem *);
};

struct CObservableObjectFactory
{
	CObservableObjectFactory();
	static TrustLevel InternalGetTrustLevelStatic();
	static unsigned short const * InternalGetRuntimeClassNameStatic();
	virtual long ActivateInstance(IInspectable * *);
	virtual long CreateObservableProperty(HSTRING__ *,IInspectable *,Windows::Internal::Storage::IPropertyValueProvider *,unsigned int,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long CreateVectorChangedEventArgs(Windows::Foundation::Collections::CollectionChange,unsigned int,Windows::Foundation::Collections::IVectorChangedEventArgs * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CObservableProperty
{
	void _SetIsStream();
public:
	CObservableProperty();
	long RuntimeClassInitialize(unsigned short const *,IInspectable *,unsigned int,Windows::Internal::Storage::IPropertyValueProvider *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetIndexedValue(IInspectable *,IInspectable *,IInspectable * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetValue(IInspectable *,IInspectable * *);
	virtual long InvalidateValue();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetIndexedValue(IInspectable *,IInspectable *,IInspectable *);
	virtual long SetValue(IInspectable *,IInspectable *);
	virtual long get_CanRead(unsigned char *);
	virtual long get_CanWrite(unsigned char *);
	virtual long get_Name(HSTRING__ * *);
	virtual long get_Type(Windows::UI::Xaml::Interop::TypeName *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class COfflineMachinePage
{
	static unsigned long _s_CheckWakeStatus(void *);
	static unsigned long _s_RemoveComputer(void *);
	static unsigned long _s_WakeComputer(void *);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _EnableRemoveComputer(bool);
	void _EnableWakeButton(bool);
	void _RemoveComputer();
	void _RemoveComputerFailed();
	void _WakeComputer();
protected:
	virtual int _GetDetailsResourceId();
	virtual int _GetInstructionResourceId();
	virtual void _SetCustomText(unsigned short const *);
public:
	COfflineMachinePage();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long SetSite(IUnknown *);
	virtual void OnEvent(DirectUI::Event *);
};

class COpenCmdPromptAsAdmin
{
	long _GetCmdApplicationAndParams(IShellItem *,unsigned short * *,unsigned short * *);
public:
	COpenCmdPromptAsAdmin();
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Initialize(unsigned short const *,IPropertyBag *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~COpenCmdPromptAsAdmin();
};

class COpenCommand
{
protected:
	bool _IsAutoRunApplicationIcon(IShellItem *,unsigned short const *);
	long _GetLinkTargetFromFirstItem(IShellItemArray *,IShellItem * *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetBackgroundColor(IShellItemArray *,unsigned long *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class COpenControlPanel
{
	bool _FindAppletMatchingId(unsigned short const *,bool,IShellFolder2 *,IEnumIDList *,_ITEMID_CHILD * *);
	bool _GetLegacyCplCommand(unsigned short const *,unsigned short *,unsigned int);
	bool _MapLegacyName(unsigned short const *,unsigned short *,unsigned int,bool *);
	long _AddtoRecentDocs(unsigned short const *,bool);
	long _GetAppletPathAndPrimaryCategory(unsigned short const *,bool,IShellFolder2 *,IEnumIDList *,unsigned short *,unsigned int,unsigned short *,unsigned int,tagCPCAT *,bool *);
	long _GetPath(unsigned short const *,unsigned short *,unsigned int,bool);
	long _GetPathWithLegacyCheck(unsigned short const *,unsigned short *,unsigned int,bool,bool *,bool *);
	virtual ~COpenControlPanel();
public:
	COpenControlPanel();
	virtual long AddEnumFlag(unsigned long);
	virtual long AdjustIDListToAllItemsView(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long Execute();
	virtual long GetCurrentView(CPVIEW *);
	virtual long GetPath(unsigned short const *,unsigned short *,unsigned int);
	virtual long GetWowCplInfo(unsigned short const *,HICON__ * *,int *);
	virtual long Initialize(unsigned short const *,IPropertyBag *);
	virtual long Open(unsigned short const *,unsigned short const *,IUnknown *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long StopLoggingRecentItems();
	virtual long UpdateWowCache(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class COpenDefaultLocationCommand
{
	long _GetNavTarget(IShellItem * *);
public:
	COpenDefaultLocationCommand();
	virtual long Execute();
	virtual long Initialize(unsigned short const *,IPropertyBag *);
};

class COpenFileLocationMenu
{
	int _ShouldShow(unsigned int);
	long _GetLocationItem(bool,IShellItem2 * *,int *);
	long _OpenFileLocation(int);
public:
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct COpenLocationTask
{
	static unsigned long s_OpenLocation(void *);
};

struct COpenPowershellAsAdmin
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Initialize(unsigned short const *,IPropertyBag *);
};

class COpenSearchContextMenu
{
	long _ValidateUrls(unsigned short const *,unsigned short const *);
protected:
	virtual ICIVERBTOIDMAP const * get_MappingArray();
	virtual long _OnInvokeCommand(unsigned int,_CMINVOKECOMMANDINFO *);
	virtual long _OnQueryContextMenu(HMENU__ *,unsigned int);
	virtual unsigned int get_MenuID();
	virtual ~COpenSearchContextMenu();
public:
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
};

class COpenSearchLocationCreator
{
	long _CreateLocationFromStream(IStream *,_GUID const &,void * *);
	long _CreateLocationFromTemplate(unsigned short const *,_GUID const &,void * *);
	long _FinalizeLocation();
	long _GetElementText(IXmlReader *,unsigned short * *);
	long _InitializeLocation();
	long _ParseMSExtensionElement(IXmlReader *);
	long _ParseMSExtensionResultsProcessingElement(IXmlReader *);
	long _ParseOpenSearchElement(IXmlReader *);
	long _ParseTemplate(IXmlReader *,int);
	long _SetPropertyMapValue(unsigned short const *);
	long _ValidateTemplate(unsigned short const *);
	long _WriteFragmentToString(IUnknown *,unsigned short * *);
public:
	virtual long CreateLocationFromURL(HWND__ *,unsigned short const *,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct COpenSearchViewSiteState
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
};

struct COpenSearchXmlFragment
{
	static long s_CreateInstance(_GUID const &,void * *);
	virtual long GetData(_GUID const &,void * *);
	virtual long GetPropertyStore(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetData(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class COpenWithArray
{
	static int _DeleteAppInfo(CAppInfo *,void *);
public:
	long FillArray(unsigned short const *);
};

class COpenWithExplorerCommand
{
	long _GetSelectedItem(IShellItem * *);
public:
	static long CreateInstance(_GUID const &,void * *);
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
};

class COpenWithExplorerCommandEnumerator
{
	void _EnsureInitialized();
public:
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct COpenWithGalleryButton
{
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
};

class COpenWithMenu
{
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetOpenWithTypeOverride(unsigned short * *);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
protected:
	int InitMenuPopup(HMENU__ *);
	long _GetHelpText(unsigned int,unsigned int,char *,unsigned int);
	long _MatchMenuItem(unsigned short,__int64 *);
	virtual ~COpenWithMenu();
};

struct COpenWithTypeOverride
{
	COpenWithTypeOverride();
	virtual long GetOpenWithTypeOverride(unsigned short * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
};

class COperationDataProvider
{
	COperationDataProvider();
public:
	virtual long GetDirtyFlags(OPERATION_STATUS_DATA_DIRTY_FLAGS *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReadCurrentItem(IShellItem * *);
	virtual long ReadDestination(IShellItem * *);
	virtual long ReadLocations(IShellItem * *,IShellItem * *);
	virtual long ReadProgressValues(unsigned __int64 *,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *);
	virtual long WriteCurrentItem(IShellItem *);
	virtual long WriteLocations(IShellItem *,IShellItem *);
	virtual long WriteProgressValues(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct COperationManagerTelemetry
{
	unsigned long _GetDeltaTime();
	void NewStreamRow();
};

class COperationStatusService
{
	COperationStatusService();
	UPDATE_PROGRESS_VALUES _MinProgressRatio(UPDATE_PROGRESS_VALUES const &,UPDATE_PROGRESS_VALUES const &);
	__int64 _OnNCHitTest(__int64);
	bool _IsLastNonAnimatingClosingFrame(IOperationStatusTilePriv *);
	bool _IsLauncherHidden();
	bool _IsOkToCloseMainWindow(IOperationStatusTilePriv *);
	bool _IsSystemInDesktopMode();
	bool _IsTheOnlyVisibleTile(IOperationStatusTilePriv *);
	int _CalculateMinTileAreaHeight();
	long _AddTileForPendingRemoval(IOperationStatusTilePriv *);
	long _CreateAndShowToast(Windows::UI::Notifications::IToastNotificationManagerStatics *,Windows::Data::Xml::Dom::IXmlDocument *);
	long _CreateBezierInterpolator(double,double,Interpolators::CTileAnimationInterpolator * *);
	long _CreateLinearInterpolator(double,double,Interpolators::CTileAnimationInterpolator * *);
	long _EnsureImmersiveServiceProvider();
	long _EnsureStatusView();
	long _EnsureToastContent(Windows::UI::Notifications::IToastNotificationManagerStatics *);
	long _EnsureToastNotificationManager();
	long _EnsureToastNotifierFactory();
	long _FlashWindowNoTeardownMosh();
	long _GetWindowTitle(TBPFLAG,unsigned int,unsigned __int64,unsigned __int64,unsigned short * *);
	long _InitAnimation();
	long _InitAnimationInterpolator(bool,double,double,double,Interpolators::CTileAnimationInterpolator * *);
	long _InitInterpolatorsClosingTileAnimation(CopyTileAnimationUtils::CTileAnimationInterpolatorSet *);
	long _InitInterpolatorsFirstTimeTileAnimation(CopyTileAnimationUtils::CTileAnimationInterpolatorSet *);
	long _InitInterpolatorsSwitchMode(CopyTileAnimationUtils::CTileAnimationInterpolatorSet *);
	long _InitInterpolatorsToOrFromInterrupt(CopyTileAnimationUtils::CTileAnimationInterpolatorSet *);
	long _OnLifetimeGuardedMessage(unsigned int,unsigned __int64,__int64,__int64 *);
	long _RemoveStatusTile(unsigned long);
	long _SetNodeValueString(HSTRING__ *,Windows::Data::Xml::Dom::IXmlNode *,Windows::Data::Xml::Dom::IXmlDocument *);
	long _SetTextNodes(unsigned short const * *,unsigned int,Windows::Data::Xml::Dom::IXmlDocument *);
	long _SetToastCallbacks(Windows::UI::Notifications::IToastNotification *);
	long _UpdateTaskbarProgress(TBPFLAG,unsigned __int64,unsigned __int64);
	static bool s_fIsRTL;
	tagSIZE _CalculateTileToWindowAdjustment();
	unsigned int _GetCountTilesWhichCanSwitchMode();
	unsigned int _GetVisibleTileCount(bool);
	unsigned int _GetWindowHeightRegistrySetting();
	virtual long OnMessage(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual ~COperationStatusService();
	void OnDPIChanged(__int64);
	void _AlertTileTimeRemainingCalculation();
	void _AnimateTiles();
	void _CenterWindowOverTileOwner(IOperationStatusTilePriv *);
	void _CompleteRemoveStatusTiles();
	void _DestroyAnimationTimer();
	void _EnsureConsistentDisplayMode();
	void _EnsureTileDividerVisible();
	void _EnsureTilesAreShown();
	void _FlashOperationManagerWindow(unsigned long);
	void _GetDesiredWindowDimensionsFromTileArea(DirectUI::Element *,int *,int *);
	void _HideMainWindowIfNeeded(IOperationStatusTilePriv *);
	void _InitializeDisplayMode();
	void _OnAnimationTerminatedFocusReceived(IOperationStatusTilePriv *);
	void _OnCancelAll();
	void _OnClose();
	void _OnDestroy();
	void _OnExitSizeMove();
	void _OnGetMinMaxInfo(tagMINMAXINFO *);
	void _OnSizing(tagRECT *);
	void _OnSuspend();
	void _OnTileInterruptCompleted(IOperationStatusTilePriv *);
	void _OnTileInterrupted(IOperationStatusTilePriv *);
	void _OnTileShown(IOperationStatusTilePriv *);
	void _OnTileSizeChange();
	void _RegisterWindowClass();
	void _RemoveTile(IOperationStatusTilePriv *);
	void _ReserveEmptySlotsForPendingTilesRemoval();
	void _ScrollWindowToTile(IOperationStatusTilePriv *);
	void _ScrollWindowToTile(unsigned long);
	void _SetDetailsButtonState();
	void _SetDisplayModeAllTiles();
	void _UpdateSQM();
	void _UpdateTiles();
public:
	static long s_CreateInstance(_GUID const &,void * *);
	virtual bool CanAnimate(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE,IOperationStatusTilePriv *);
	virtual bool IsExpandedDisplayMode();
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long ContextSensitiveHelp(int);
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long EnterTileAnimationDuiBitmapPaintMode(IOperationStatusTilePriv *);
	virtual long ExitTileAnimationDuiBitmapPaintMode(IOperationStatusTilePriv *);
	virtual long FlashOperationManagerWindow(unsigned long,tagOPERATION_STATUS_SERVICE_TOAST_OPTIONS);
	virtual long GetInterpolators(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE,IOperationStatusTilePriv *,CopyTileAnimationUtils::CTileAnimationInterpolatorSet * *);
	virtual long GetStatusTile(unsigned long,_GUID const &,void * *);
	virtual long GetWindow(HWND__ * *);
	virtual long LockServer(int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RegisterOperationTile(HWND__ *,unsigned long,IOperationDataReader *,_GUID const &,void * *);
	virtual long UpdateProgress();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void NotifyAnimationTerminatedFocusReceived(IOperationStatusTilePriv *);
	virtual void NotifyTileCancel();
	virtual void NotifyTileCancelled();
	virtual void NotifyTileDisplayed(IOperationStatusTilePriv *);
	virtual void NotifyTileExecuting();
	virtual void NotifyTileHidden(IOperationStatusTilePriv *);
	virtual void NotifyTileHiding();
	virtual void NotifyTileInterruptCompleted(IOperationStatusTilePriv *);
	virtual void NotifyTileInterrupted(IOperationStatusTilePriv *);
	virtual void NotifyTilePaused();
	virtual void NotifyTileSecondTryCancel(IOperationStatusTilePriv *);
	virtual void NotifyTileSizeChange();
	virtual void NotifyTileUserEvent();
	virtual void OnClosingTile(IOperationStatusTilePriv *,bool *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

class COperationStatusServiceTimer
{
	long _KillTimerIfNeeded();
	long _SetTimerIfNeeded(COperationStatusServiceTimer::SetTimerOptions);
public:
	long Set();
	long SetToHumanMode();
	static long s_CreateInstance(HWND__ *,COperationStatusServiceTimer * *);
};

class COperationStatusTile
{
	struct CAnimationTerminator
	{
		bool ForceCompleteOrAbandonAnimation(bool,CopyTileAnimationUtils::ANIM_PROGRESS_STATUS);
	};

	COperationStatusTile(HWND__ *,unsigned long,IOperationDataReader *,CTileNotificationsBase *,HWND__ *);
	DirectUI::Element * _GetPauseOrCancelButtonAsFocusTarget();
	bool _CheckIfTileShouldUpdate();
	bool _ProcessBubbledOrDirectEvent(DirectUI::Event const *);
	bool _ShouldUpdateTextFields();
	long _CreateElementForInterrupt(IOperationInterrupt *,DirectUI::Element * *);
	long _CreateProgressTimer(OperationTileElement *);
	long _CreateRateChart(unsigned long,OperationTileElement *);
	long _CreateTileElement(unsigned long,unsigned long,DirectUI::Element *);
	long _ExecuteStartAnimation(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE);
	long _HideDetails();
	long _Initialize(unsigned long,unsigned long,DirectUI::Element *,CopyTileAnimationUtils::CAnimationCoordinator *);
	long _InitializeProgressSmoother();
	long _PrepareAnimationChangeMode(CopyTileAnimationUtils::TILE_ANIMATION_DATA *);
	long _PrepareAnimationData(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE,CopyTileAnimationUtils::TILE_ANIMATION_DATA *);
	long _PrepareAnimationNotificationData(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE,CopyTileAnimationUtils::TILE_ANIMATION_DATA *);
	long _PrepareAnimationSwitchFromInterrupt(CopyTileAnimationUtils::TILE_ANIMATION_DATA *);
	long _PrepareAnimationSwitchToInterrupt(CopyTileAnimationUtils::TILE_ANIMATION_DATA *);
	long _PrepareAnimationTileClose(CopyTileAnimationUtils::TILE_ANIMATION_DATA *);
	long _PutStateMachineOnHold(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE);
	long _SetDefaultKeyFocus(bool);
	long _ShowDetails();
	long _StartAnimation(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE);
	long _UpdateHeaderFromCacheIfNeeded(bool);
	long _UpdateRemainingItemsAndSize(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64);
	long _UpdateStatusElements(bool);
	long _UpdateSummary(unsigned short const *);
	long _UpdateSummaryFromCache();
	long _UpdateSummaryFromValues(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64);
	virtual ~COperationStatusTile();
	void _CancelCore(COperationStatusTile::CancelTileOptions);
	void _CompleteSwitchFromInterrupt(CopyTileAnimationUtils::TILE_ANIMATION_NOTIFICATION_DATA *);
	void _CompleteSwitchMode(CopyTileAnimationUtils::TILE_ANIMATION_NOTIFICATION_DATA *);
	void _CompleteSwitchToInterrupt(CopyTileAnimationUtils::TILE_ANIMATION_NOTIFICATION_DATA *);
	void _CompleteTileClose(CopyTileAnimationUtils::TILE_ANIMATION_NOTIFICATION_DATA *);
	void _EvaluateAgregatedResponseForStateMachine();
	void _ExecuteCompleteAnimation(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE,CopyTileAnimationUtils::TILE_ANIMATION_NOTIFICATION_DATA *);
	void _ExecuteOnDisplay();
	void _FindLastLocationTarget(DirectUI::Element *);
	void _FlashOperationManagerWindow();
	void _HandleInterruptComplete();
	void _InitializeProgressAnimationElements(DirectUI::Element * *,DirectUI::Element * *,DirectUI::Element * *,DirectUI::Element * *);
	void _InitializeTileContentAnimationElements(DirectUI::Element * *,DirectUI::Element * *,DirectUI::Element * *,DirectUI::Element * *);
	void _MoveFocusToNextTile(bool);
	void _NotifyUpdateProgress();
	void _RefreshDisplayProgress(unsigned __int64,unsigned __int64);
	void _RefreshRateChartIfNeeded();
	void _RemoveInterruptPane(bool *);
	void _SetCancelButtonEnabled(bool);
	void _SetFocusOnPauseOrCancelButton();
	void _SetIndeterminateMode(bool);
	void _SetPauseButtonEnabled(bool);
	void _SetPauseButtonExecutingOrPausing();
	void _SetPauseButtonPausedOrResuming();
	void _SetProgressToError();
	void _SetProgressToNormal();
	void _SetProgressToPause();
	void _SetStateMachineOperationTileEvent(OPERATION_EVENT);
	void _SetStateMachineUserEvent(USER_CLICK);
public:
	static long s_CreateInstance(DirectUI::Element *,HWND__ *,unsigned long,unsigned long,unsigned long,IOperationDataReader *,CTileNotificationsBase *,CopyTileAnimationUtils::CAnimationCoordinator *,HWND__ *,_GUID const &,void * *);
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long Advise(IOperationStatusSink *,unsigned long *);
	virtual long AlertTimeRemainingCalculation();
	virtual long AutoPauseOperation();
	virtual long BeginUpFrontConfirmation();
	virtual long Cancel();
	virtual long DisplayInterrupt(IOperationInterrupt *);
	virtual long EndUpFrontConfirmation();
	virtual long EnsureConsistentDisplayMode();
	virtual long EnsureElementVisible();
	virtual long EnterTileAnimationDuiBitmapPaintMode();
	virtual long ExitTileAnimationDuiBitmapPaintMode();
	virtual long ForceClosingTileAnimationToComplete();
	virtual long ForceTerminateAnimationSiblingTileReceivedFocus();
	virtual long GetOperationFlags(unsigned long *);
	virtual long GetOperationType(OPERATION_TYPE *);
	virtual long GetOwnerWindow(HWND__ * *);
	virtual long GetSummaryText(unsigned short * *);
	virtual long GetTileID(unsigned long *);
	virtual long GetTileState(UI_VISIBLE_STATE *);
	virtual long GetTimeUsed(unsigned __int64 *,unsigned __int64 *);
	virtual long GetTitleText(unsigned short * *);
	virtual long GetTransitionType(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE *);
	virtual long IsActive(bool *);
	virtual long IsAnimatingNewTile(bool *);
	virtual long IsAnimationInProgress(bool *);
	virtual long IsOkToCloseMainWindow(bool *);
	virtual long IsSmoothingProgress(bool *);
	virtual long IsVisible(bool *);
	virtual long LaunchConflictDialog();
	virtual long OnPausedCallback();
	virtual long OnResumedCallback();
	virtual long OnShown();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long RefreshStatusElements();
	virtual long RemoveOperationTile();
	virtual long SetDefaultKeyFocus();
	virtual long SetMode(OPERATION_MODE);
	virtual long SetOperationType(OPERATION_TYPE);
	virtual long SetShowScrollBarFiller(bool);
	virtual long SetTileDisplayMode(bool);
	virtual long SetTileShowDivider(bool);
	virtual long Unadvise(unsigned long);
	virtual long UpdateAnimationFrame(unsigned __int64);
	virtual long UpdateStatusElements();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnAnimationStarted(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE,CopyTileAnimationUtils::TILE_ANIMATION_NOTIFICATION_DATA *);
	virtual void OnAnimationTerminated(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE,CopyTileAnimationUtils::TILE_ANIMATION_NOTIFICATION_DATA *);
	virtual void OnCancelled();
	virtual void OnCancelling();
	virtual void OnCommandCancelling();
	virtual void OnCommandPausing();
	virtual void OnCommandResuming();
	virtual void OnCompleted();
	virtual void OnDiscovering();
	virtual void OnDisplay();
	virtual void OnDone();
	virtual void OnError();
	virtual void OnExecuting();
	virtual void OnFrameAnimated(CopyTileAnimationUtils::ANIM_TRANSITION_TYPE,CopyTileAnimationUtils::TILE_ANIMATION_NOTIFICATION_DATA *);
	virtual void OnHidden();
	virtual void OnIndeterminate();
	virtual void OnInterrupting();
	virtual void OnInterruptingComplete();
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
	virtual void OnPaused();
	virtual void OnPausing();
	virtual void OnResuming();
	virtual void OnResumingComplete();
	virtual void OnUpFrontConfirming();
};

class COperationStatusTileCache
{
	long _InitializeIfNeeded(OPERATION_STATUS_DATA_DIRTY_FLAGS);
	long _RefreshCachedValues(OPERATION_STATUS_DATA_DIRTY_FLAGS);
public:
	long GetCurrentItem(IShellItem * *);
	long GetLocations(IShellItem * *,IShellItem * *);
	long GetProgressValues(unsigned __int64 *,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *);
};

class COperationStatusTileProgressTimer
{
	COperationStatusTileProgressTimer(DirectUI::Element *);
	long _HideCore();
	long _Initialize();
	long _ResumeCore(COperationStatusTileProgressTimer::ResumeFlags);
	long _SetCalculatingMessage();
	long _SuspendCore(COperationStatusTileProgressTimer::SuspendFlags);
	long _UpdateTimeRemaining();
	static double s_GetGainFactor(double,double,unsigned int,unsigned int *,bool *);
	void _AlertTimer(COperationStatusTileProgressTimer::AlertTimerOptions);
	void _AlertTimerCore(double,double,unsigned int,double,double,unsigned int);
	void _UpdateSustainedState();
	void _UpdateTimerState(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,double);
};

class COperationStatusTileRateCalculator
{
	double _CalculateRate(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,double *);
	long _CalculateCore(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,double *,double *);
public:
	COperationStatusTileRateCalculator();
	long Calculate(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,double *,double *);
};

class COperationStatusTileRateChart
{
	COperationStatusTileRateChart(unsigned long,CChartView *,OPERATION_TYPE);
	HBITMAP__ * CreateMirroredBitmap(HBITMAP__ *);
	bool _CanFitWaterlineCaption();
	bool _CreateOverlay(HWND__ *);
	bool _DrawSnapshotFoundation(tagPAINTSTRUCT const * const,HDC__ *,int,int);
	bool _IsInUpdatingState();
	bool _IsVisible();
	bool _OverlayWindowProcedure(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	bool _TakeChartSnapshot();
	bool _TakeChartSnapshotCore(HDC__ *);
	bool _TryStopRefreshing();
	double _GetRateRescalingFactor();
	double _UpdateWaterlineState(double);
	int _GetPrintOverlayXOffset();
	long BitBltToDCAndSelectPreviousBitmap(HDC__ *,HDC__ *,HBITMAP__ *,HBITMAP__ *,bool,int);
	long GetSystemFont(HFONT__ * *);
	long _CreateRefreshTimer();
	long _GetAlphaCompositeColorFromTheme(void *,int,int,unsigned long,unsigned long *);
	long _GetSystemFontHeight();
	long _GetSystemFontHeight(HDC__ *);
	long _GetTransparencyValueFromTheme(void *,int,int,unsigned char *);
	long _GetWaterlineCaptionHeight();
	long _Initialize(HWND__ *);
	long _InitializeAccessibilityHelper();
	long _InitializeDataSeriesCore(unsigned short,tagVARIANT,_CV_STYLE,unsigned __int64 *);
	long _InitializeProgressSeries();
	long _InitializeRateSeries();
	long _InitializeSmoothers();
	long _InterpolateRateSeries(unsigned __int64,int,int,double,double);
	long _RollbackRateSmoothers(int);
	long _RollbackSeries(int,int);
	long _SetDataAxis();
	long _SetRateType();
	long _StartIndeterminateRefresh();
	long _StartUpdatingRefresh();
	long _UpdateDataSeriesCore(unsigned __int64,tagVARIANT,int,int);
	long _UpdateProgressSeriesIfNeeded(COperationStatusTileRateChart::UpdatingChartStates,COperationStatusTileRateChart::RescalingStates);
	long _UpdateRateSeriesFilteredValue(unsigned __int64,double,int,int);
	long _UpdateRateSeriesIfNeeded(COperationStatusTileRateChart::UpdatingChartStates);
	long _UpdateWaterlineCaptionMessage(double);
	static __int64 s_OverlayWindowProcedure(HWND__ *,unsigned int,unsigned __int64,__int64);
	static double const * const c_rgdbRateSeriesFilterXCoefficients;
	static double const * const c_rgdbRateSeriesFilterYCoefficients;
	unsigned long _GetAlphaCompositeColor(unsigned long,unsigned long,unsigned char);
	unsigned long _GetScannerLightColor();
	void _AdjustIndeterminateRefreshTimeoutIfNeeded();
	void _CalculateRateSeriesFilteredValue(double,tagVARIANT *);
	void _CalculateSmoothedScale(double,double,double *);
	void _DeleteChartSnapshot();
	void _DrawChart(tagPAINTSTRUCT const * const,int,int,int);
	void _DrawIndeterminateOverlay(tagPAINTSTRUCT const * const,int,int,int);
	void _DrawOverlay(tagPAINTSTRUCT const * const,int,COperationStatusTileRateChart::DrawOverlayOptions);
	void _DrawOverlayFrame(tagPAINTSTRUCT const * const,int,int,int);
	void _DrawScannerLight(HDC__ *,int,int);
	void _DrawThemeBorder(tagPAINTSTRUCT const * const,int,int,int);
	void _DrawThemeBorderSegments(tagPAINTSTRUCT const * const,HDC__ *,int,int,int);
	void _DrawWaterline(tagPAINTSTRUCT const * const,int,int,int);
	void _DrawWaterlineAndCaption(tagPAINTSTRUCT const * const,int);
	void _DrawWaterlineCaption(tagPAINTSTRUCT const * const,int,int,int);
	void _EnsureInitializeRateSmoothersIfNeeded(double);
	void _HideSeries();
	void _IncreaseScale(COperationStatusTileRateChart::IncreaseScaleOptions,double);
	void _InitializeColors();
	void _OverlayBufferedPaint(tagPAINTSTRUCT const * const,int);
	void _PaintOverlay(tagPAINTSTRUCT const * const,int);
	void _RaiseProgressStartEventIfNeeded();
	void _RaiseRescaleEvent();
	void _RaiseUpdateEvent();
	void _RefreshCore(COperationStatusTileRateChart::RefreshTypes);
	void _SetFrameColor(int,unsigned long);
	void _SetGridlineColor(int,unsigned long);
	void _SetSeriesColors(int,unsigned long);
	void _SetSmoothersScale(double,double);
	void _SetStyle();
	void _ShowSeries();
	void _Uninitialize();
	void _UpdateChartViewThemeState();
	void _UpdateColors(int,unsigned long);
	void _UpdateDisplayRate(bool *,bool *);
	void _UpdateProgressThemeState();
	void _UpdateRefreshState(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned int,unsigned int,bool *,double *);
	void _UpdateRescalingState(bool *);
	void _UpdatingRefresh(COperationStatusTileRateChart::UpdatingChartStates);
public:
	long EnterIndeterminateMode();
	long EnterInterruptedMode();
	long ExitIndeterminateMode();
	long ExitInterruptedMode();
	static long s_CreateInstance(unsigned long,CChartView *,OPERATION_TYPE,HWND__ *,COperationStatusTileRateChart * *);
	void OnDPIChanged();
	void ThemeChange();
};

class COperationStatusTileRateChartAccessibilityHelper
{
	COperationStatusTileRateChartAccessibilityHelper::RateChartModeFlags _FlagFromMode(COperationStatusTileRateChartAccessibilityHelper::RateChartModes);
	long _EnterModeCore(COperationStatusTileRateChartAccessibilityHelper::RateChartModes);
	long _ExitModeCore(COperationStatusTileRateChartAccessibilityHelper::RateChartModes);
	long _SetModeCaption(COperationStatusTileRateChartAccessibilityHelper::RateChartModes);
	long _SetStateCaption(COperationStatusTileRateChartAccessibilityHelper::RateChartStates);
	long _SetToState(COperationStatusTileRateChartAccessibilityHelper::RateChartStates);
	long _UpdateAccessibilityCaption(unsigned int,double);
	long _UpdateCore(unsigned int,unsigned int,double);
	long _UpdateTargetElement(unsigned short const *);
	long _UpdateTargetElementMarqueedState(COperationStatusTileRateChartAccessibilityHelper::RateChartModes);
public:
	COperationStatusTileRateChartAccessibilityHelper();
	long EnterIndeterminateMode();
};

class COplockPropertyStore
{
	~COplockPropertyStore();
public:
	COplockPropertyStore(IFreeThreadedItemContainer *,HANDLERFLAGS,IPropertyStore *,IOplockProvider *);
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetCount(unsigned long *);
	virtual long GetNameAt(unsigned long,unsigned short * *);
	virtual long GetNameCount(unsigned long *);
	virtual long GetNamedValue(unsigned short const *,tagPROPVARIANT *);
	virtual long GetNamedValueAndPath(unsigned short const *,tagPROPVARIANT *,int,unsigned short * *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long GetValueAndPath(_tagpropertykey const &,tagPROPVARIANT *,int,unsigned short * *);
	virtual long IsPropertyWritable(_tagpropertykey const &);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long SetNamedValue(unsigned short const *,tagPROPVARIANT const &);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class COtherUserEnumerator
{
	long _EnsureDPA();
	static int s_CompareUsers(unsigned short const *,unsigned short const *,__int64);
protected:
	virtual bool _IncludeItem(IObjectWithOwner *);
	virtual long _CreateIDList(IObjectWithOwner *,unsigned long,_ITEMID_CHILD * *);
	virtual ~COtherUserEnumerator();
};

class COtherUsersBarrierPage
{
	void _DoWizard();
public:
	COtherUsersBarrierPage();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OptionallyTakeInitialFocus(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnEvent(DirectUI::Event *);
};

class COtherUsersFolder
{
	FOLDER_ENUM_MODE _GetEnumMode(_ITEMIDLIST_RELATIVE const *);
	long _CreateFolder(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _CreateItemPropertyStore(unsigned short const *,unsigned short const *,IObjectWithOwner *,IBindCtx *,FOLDER_ENUM_MODE,IPropertyStore * *);
	long _GetAbsoluteName(_ITEMID_CHILD const *,unsigned long,unsigned short * *);
	long _GetIconExtractor(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _GetPropertyForItem(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagPROPVARIANT *);
	long _GetString(_ITEMID_CHILD const *,_tagpropertykey const &,unsigned short * *);
	long _GetUsersFilesDescriptionForIDList(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _IsLegacyParsingPath(unsigned short const *,unsigned short * *,unsigned short * *);
	long _SetIconId(unsigned short const *,IBindCtx *,IPropertyStore *);
	long _ValidateItem(_ITEMID_CHILD const *);
	static long s_GetAbsoluteFriendlyName(COtherUsersFolder *,_ITEMID_CHILD const *,unsigned short * *);
	static long s_GetAbsoluteParsingName(COtherUsersFolder *,_ITEMID_CHILD const *,unsigned short * *);
	static long s_GetDisplayName(COtherUsersFolder *,_ITEMID_CHILD const *,unsigned short * *);
	static long s_GetParsingName(COtherUsersFolder *,_ITEMID_CHILD const *,unsigned short * *);
	virtual ~COtherUsersFolder();
public:
	COtherUsersFolder();
	long CreateItemFromData(unsigned short const *,unsigned short const *,IObjectWithOwner *,IBindCtx *,FOLDER_ENUM_MODE,_ITEMID_CHILD * *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFlags(SEARCHBOX_FLAGS *);
	virtual long GetFolderCapabilities(NSTCFOLDERCAPABILITIES,NSTCFOLDERCAPABILITIES *);
	virtual long GetFolderType(_GUID *);
	virtual long GetFrameLayoutDefinition(GETLAYOUTREASON,_GUID const &,void * *);
	virtual long GetMRULocation(_GUID *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetScopeAndSubQueries(SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IScope * *,IShellItemArray * *);
	virtual long GetSearchRoot(IShellItem * *);
	virtual long GetSuggestPopupSetting(SEARCH_BOX_SUGGEST_POPUP_SETTING *);
	virtual long GetThumbnailHandler(_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
	virtual long GetTimerDelay(unsigned int *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct COtherUsersFolderViewCB
{
	COtherUsersFolderViewCB(_ITEMIDLIST_ABSOLUTE const *,int);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetIconSize(unsigned int *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CPCSettingsEnum
{
	bool _IsClassicItemGroupPolicyAllowed(_GUID,IShellItem2 *);
	long _EnsureCollection();
	long _EnsureIndexBase(CPCSettingsEnum::IndexOption,unsigned int);
	long _GetClassicConditionFromItem(IShellItem2 *,ITaskCondition * *);
	long _GetCurrentItem(unsigned int,IItem * *);
	long _GetItemFilterState(IItem *,bool *);
	long _RealizeCollection();
public:
	CPCSettingsEnum();
	long RunQuery(IItemCollectionFactory *);
	virtual long Clone(IEnumIDList * *);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryContinue();
	virtual long Reset();
	virtual long Skip(unsigned long);
};

class CPCSettingsFolder
{
	SCOPE_ITEM_FLAGS _GetCachedScopeItemFlag();
	SCOPE_ITEM_FLAGS _GetScopeItemFlagWithGrepCheck();
	bool _IsPCSettingsEnabled();
	long _CreateFactory(ISearchFolderItemFactory * *);
	long _GetItemIcon(_ITEMID_CHILD const *,_GUID const &,void * *);
	long _LoadIcon(unsigned short const *,int,_GUID const &,void * *);
	long _RunQueryAndGetEnumIDList(SCOPE_ITEM_FLAGS,bool,PCSetting::Type,ISearchFolderItemFactory *,IEnumIDList * *);
	long _SetCondition(ICondition *);
	long _SetSearchCommandOptions(IUnknown *);
public:
	CPCSettingsFolder();
	static long s_CreatePCSettingsPidl(IItem *,_ITEMID_CHILD * *);
	static long s_GetItemRank(IShellItem2 *,int *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetThumbnailHandler(_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long InitNew();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPFDropTarget
{
	int _AllowDrop(IDataObject *);
	long _GetFilteredDataObject(IDataObject *,IDataObject * *);
	virtual ~CPFDropTarget();
	void _SubstituteDescriptionOnDataObject(unsigned long,IDataObject *);
public:
	CPFDropTarget(IShellFolder *,HWND__ *);
	long Initialize();
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPackageInformation
{
	long _CommitApplicationViewNodeInstall();
	virtual ~CPackageInformation();
	void _CommitApplicationViewNodeUninstall();
public:
	CPackageInformation();
	virtual long Commit(int);
	virtual long DeleteApplicationTileInfoAt(unsigned long);
	virtual long GetApplicationTileInfoAt(unsigned long,_GUID const &,void * *);
	virtual long GetApplicationTileInfoCount(unsigned long *);
	virtual long GetLastError(TILE_INSTALLATION_ERROR_INFO *,unsigned short * *,unsigned short * *);
	virtual long GetPackageFamilyName(unsigned short * *);
	virtual long GetPackageFullName(unsigned short * *);
	virtual long LoadFromDisk(unsigned short const *,SECONDARY_TILES_COMMIT_TYPE);
	virtual long LoadFromManifest(IXMLDOMDocument *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int);
	virtual long LoadPreinstallTiles(unsigned short const *,IPropertyStore * *,unsigned int,int);
	virtual long LoadPreinstallTilesFromPackagePath(unsigned short const *,unsigned short const *,unsigned int,unsigned short const * *);
	virtual long Revert();
	virtual long SetKnownByStore(int);
	virtual long SetOldPackageInformation(IPackageInformation *);
	virtual long SetSettingSyncState(int);
	virtual long UpdateCategory(unsigned int);
	virtual long UpdateTemporaryLogos(IPropertyStore * *,unsigned int);
	virtual long VerifyInformation();
};

class CPackageInstallStateStore
{
	long _CreateTemporaryImages(IPropertyStore *,unsigned short const *,__MIDL_IWindowsStoreInstallProgress_0002);
	long _EndUninstallHelper(unsigned short const *,int,bool *);
	long _GetImageExtension(unsigned short *,unsigned short *,unsigned __int64);
	long _GetInstallationError(long);
	long _OnInstallationComplete(unsigned short const *,bool);
	long _OpenUserKey(unsigned short const *,HKEY__ * *);
	long _WriteInstallationState(unsigned short const *,PACKAGE_INSTALLATION_STATE,long,unsigned int,bool,CPackageInstallStateStore::STATE_CHANGE_REASON);
	long _WriteInstallationState(unsigned short const *,unsigned short const *,PACKAGE_INSTALLATION_STATE,long,unsigned int,bool,CPackageInstallStateStore::STATE_CHANGE_REASON);
	long _WriteInstallationStateOnlyIfInstall(__MIDL_IWindowsStoreInstallProgress_0002,unsigned short const *,PACKAGE_INSTALLATION_STATE,unsigned int,bool,CPackageInstallStateStore::STATE_CHANGE_REASON);
	long _WriteUninstallationState(unsigned short const *,bool,bool *);
	static bool s_IsInstallingType(__MIDL_IWindowsStoreInstallProgress_0002);
	static bool s_TilesAlreadyExistForPackage(unsigned short const *);
	unsigned int _ResourceIDForInstallState(PACKAGE_INSTALLATION_STATE,CPackageInstallStateStore::STATE_CHANGE_REASON);
	unsigned long _GetCurrentInstallationState(unsigned short const *,unsigned short const *);
	void _LogUninstallStateChange(unsigned short const *,long,bool);
public:
	CPackageInstallStateStore();
	virtual long Begin(__MIDL_IWindowsStoreInstallProgress_0002,unsigned short const *,IPropertyStore * *,unsigned int);
	virtual long BeginInstall(unsigned short const *,unsigned short const *);
	virtual long BeginUninstall(unsigned short const *);
	virtual long ClearInstallState(unsigned short const *,unsigned short const *);
	virtual long CreatePreviewTilesForPackage(unsigned short const *,unsigned short const *,unsigned int,unsigned short const * *);
	virtual long End(__MIDL_IWindowsStoreInstallProgress_0002,unsigned short const *);
	virtual long EndInstall(unsigned short const *,unsigned short const *,long);
	virtual long EndUninstall(unsigned short const *,int);
	virtual long OnCancel(__MIDL_IWindowsStoreInstallProgress_0002,unsigned short const *);
	virtual long OnError(__MIDL_IWindowsStoreInstallProgress_0002,unsigned short const *,__MIDL_IWindowsStoreInstallProgress_0001,long);
	virtual long OnPause(__MIDL_IWindowsStoreInstallProgress_0002,unsigned short const *,__MIDL_IWindowsStoreInstallProgress_0001);
	virtual long OnPendingQueuedInstall(unsigned short const *);
	virtual long OnProgress(__MIDL_IWindowsStoreInstallProgress_0002,unsigned short const *,__MIDL_IWindowsStoreInstallProgress_0001,unsigned int,unsigned int);
	virtual long OnResume(__MIDL_IWindowsStoreInstallProgress_0002,unsigned short const *,__MIDL_IWindowsStoreInstallProgress_0001);
	virtual long PurgeTemporaryStates();
	virtual long ResetToPreviewTile(unsigned short const *);
	virtual long UpdateCategory(unsigned short const *,unsigned int);
	virtual long UpdateTemporaryLogos(unsigned short const *,IPropertyStore * *,unsigned int);
	virtual unsigned long GetInstallState(unsigned short const *);
};

struct CPackageInstallStateStoreEnum
{
	CPackageInstallStateStoreEnum();
	virtual long GetPackageStateByIndex(unsigned long,unsigned short * *,PACKAGE_INSTALLATION_STATE *);
	virtual long GetPackageStateByName(unsigned short const *,PACKAGE_INSTALLATION_STATE *);
	virtual long GetPackageStateCount(unsigned long *);
	virtual long GetStoreVersion(unsigned long *);
	virtual long Load();
};

struct CPaintWallpaperBitmapTask
{
	virtual long InternalResumeRT();
};

struct CParseAndCreateItem
{
	virtual long GetItem(_GUID const &,void * *);
	virtual long SetItem(IShellItem *);
};

class CPartialPropertyChangeOperation
{
	long _CopyUnmodifiedValues(IMultipleValues *,IMultipleValues * *,int *);
	long _InsertValues(IMultipleValues *,int);
public:
	virtual long ApplyToPropVariant(tagPROPVARIANT const &,tagPROPVARIANT *);
	virtual long GetInfo(PKA_FLAGS *,_tagpropertykey *,tagPROPVARIANT *);
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPropertyKey(_tagpropertykey const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CPathLookupEntry
{
	CPathLookupEntry(unsigned short const *,unsigned short const *,CMountPoint *);
};

class CPathPropertyControl
{
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_DrawContent(HDC__ *,tagRECT *,int,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
public:
	CPathPropertyControl();
	virtual long GetDrawFlags(int *);
};

struct CPauseSyncVerb
{
	CPauseSyncVerb();
};

class CPerUserGlobalMutex
{
	long _GetUserSid(unsigned short * *);
public:
	long Initialize(unsigned short const *,unsigned short const *);
	virtual long InitializeAndLock(unsigned short const *,unsigned short const *);
	virtual long InitializeAndLock(unsigned short const *,unsigned short const *,unsigned long);
};

class CPerceivedTypeCategorizer
{
protected:
	virtual int OnCompareCategory(unsigned long,unsigned long);
	virtual long OnGetCategoryDescription(unsigned long,ICategoryDescription * *);
	virtual long OnGetFilterCondition(unsigned long,IFilterCondition * *);
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
};

class CPercentCategorizer
{
	long _GetFilterName(unsigned long,unsigned short *,unsigned long);
protected:
	virtual long OnGetFilterCondition(unsigned long,IFilterCondition * *);
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
public:
	CPercentCategorizer(_GUID const &,_tagpropertykey const &,_tagpropertykey const &,int,int,int);
};

class CPerfTrackProvider
{
	virtual void _SendPerfInfo();
	virtual ~CPerfTrackProvider();
public:
	CPerfTrackProvider(IBrowserTrackEventsCallback *);
	virtual long OperationEvent(unsigned short const *,TRACKOPERATIONTYPE,TRACKOPERATIONEVENT);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetItemCount(unsigned int);
	virtual long SetProviderAttributes(PROVIDER_ATTRIBUTES);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPhysicsSmoother
{
	double _GetNextCore(double);
public:
	double GetNext(double);
	long SetScale(double,double,unsigned int,unsigned int);
	static long s_CreateInstance(double,double,double,CPhysicsSmoother * *);
};

class CPinList
{
	static int ILWriteCallback(PINENTRY *,CPinList::ILWRITEINFO *);
	void _GetBackupShortcutToDelete(CPinnedList *,_ITEMIDLIST_ABSOLUTE const *,unsigned short *);
public:
	PINENTRY * FindPidl(_ITEMIDLIST_ABSOLUTE const *,int *);
	PINENTRY * FindPidlOrAppID(_ITEMIDLIST_ABSOLUTE const *,int *);
	PINENTRY * FindPinEntryFromAppId(unsigned short const *,int *);
	int AppendPidl(_ITEMIDLIST_ABSOLUTE const *);
	long Load(CPinnedList *);
	long LoadShellLink(PINENTRY *,IShellLinkW * *);
	long ReplacePidl(CPinnedList *,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
	long Save(CPinnedList *);
	long SaveShellLink(PINENTRY *,IStream *);
	~CPinList();
};

class CPinPropertyControl
{
	long EnsureImageList();
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual long OnDPIChanged();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_DrawContent(HDC__ *,tagRECT *,int,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
public:
	CPinPropertyControl();
};

struct CPinUnpinTask
{
	static unsigned long s_SetPinUnpin(void *);
};

class CPinnedList
{
protected:
	int _IsLocalHardDisk(unsigned short const *);
	long _GetPinnableInfoImpl(_ITEMIDLIST_ABSOLUTE const *,IShellLinkW *,PINNABLEFLAG,IShellItem * *,IShellItem * *,unsigned short * *,int *);
	long _IncrementRemovedGlobalChangeCount();
	long _ResolveTargetLink(_ITEMIDLIST_ABSOLUTE const *,int *);
	long _ShouldAddMenu(unsigned int);
	long _TogglePinned();
	static int s_GetDarwinLinkInfo(IShellLinkW *,int *,unsigned short *,unsigned int);
	static long s_RemoveDarwinShortcut(IPinnedList *,unsigned short const *);
	unsigned long _GetRemovedGlobalChangeCount();
	virtual int v_IsAcceptableTarget(_ITEMIDLIST_ABSOLUTE const *,IShellLinkW *,PINNABLEFLAG,IShellItem * *,unsigned short * *,unsigned short * *,IShellItem * *);
	virtual long v_TrackUnpinnedApp(unsigned short const *);
	void _DoNotifyPinListChange(_ITEMIDLIST_ABSOLUTE const *,int);
public:
	static ATL::_ATL_INTMAP_ENTRY const * _GetEntries();
	virtual long ApplyInPlaceTaskbarLayout(TaskbarLayoutType);
	virtual long ApplyReorderTaskbarLayout(TaskbarLayoutType);
	virtual long EnumObjects(IEnumFullIDList * *);
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetAppIDForPinnedItem(_ITEMIDLIST_ABSOLUTE const *,unsigned short * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetChangeCount(unsigned long *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetPinnableInfo(IDataObject *,PINNABLEFLAG,IShellItem * *,IShellItem * *,unsigned short * *,int *);
	virtual long GetPinnedItem(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetPinnedItemForAppID(unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long IsPinnable(IDataObject *,PINNABLEFLAG);
	virtual long IsPinned(_ITEMIDLIST_ABSOLUTE const *);
	virtual long ItemChangeNotify(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long Modify(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long Resolve(HWND__ *,unsigned long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long UpdateForRemovedItemsAsNecessary();
	virtual long v_GetBackupSubDirectoryName(unsigned short *,unsigned int);
	virtual long v_UpgradeItem(unsigned long,_ITEMIDLIST_ABSOLUTE *,_ITEMIDLIST_ABSOLUTE * *);
	virtual unsigned long v_GetCurrentVersion();
	virtual ~CPinnedList();
};

class CPinnedListEnum
{
	long _NextPidlFromStream(_ITEMIDLIST_ABSOLUTE * *);
public:
	virtual long Clone(IEnumFullIDList * *);
	virtual long Next(unsigned long,_ITEMIDLIST_ABSOLUTE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPinnedPeopleList
{
	struct ChangeListener
	{
		ChangeListener(ChangeListener const &);
	};

protected:
	int _IndexOf(unsigned short const *);
	long _ReleaseContact(int);
	long _StoreList();
	void _NotifyListenersOfChange();
	void _ReleaseAllContacts();
public:
	CPinnedPeopleList();
	long RuntimeClassInitialize(IPeopleRegistryAccess *);
	virtual long AddPin(unsigned short const *);
	virtual long GetAt(unsigned int,unsigned short *,unsigned int);
	virtual long GetPinCount(unsigned int *);
	virtual long MovePin(unsigned int,unsigned int);
	virtual long Refresh();
	virtual long RemovePin(unsigned short const *);
	virtual long SubscribeToChangeNotifications(IPinnedPeopleUpdateSink *,unsigned long *);
	virtual long UnsubscribeFromChangeNotifications(unsigned long);
	virtual ~CPinnedPeopleList();
};

struct CPixelBucket
{
	CPixelBucket();
	~CPixelBucket();
};

struct CPlayAll
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CPlayCommandState
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
};

struct CPlayExecute
{
	CPlayExecute();
	virtual long Execute();
	virtual long Initialize(unsigned short const *,IPropertyBag *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPlayMusicCommand
{
	void _EnsurePlayMusicMode(IShellItemArray *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long EnumSubCommands(IEnumUICommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(int *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetKeyAndName(HKEY__ * *,unsigned short * *);
	virtual long GetPosition(CMDPOS *,_GUID *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Initialize(unsigned short const *,IPropertyBag *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long InvokeFromContextMenu(_CMINVOKECOMMANDINFOEX const *,IShellItemArray *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetInternalExtensionClasses(_GUID const *,unsigned long);
	virtual long SetKeyAndName(HKEY__ *,unsigned short const *);
	virtual long get_CanonicalName(_GUID *);
	virtual long get_Icon(IShellItemArray *,unsigned short * *);
	virtual long get_Name(IShellItemArray *,unsigned short * *);
	virtual long get_State(IShellItemArray *,int,int *);
	virtual long get_Tooltip(IShellItemArray *,unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPostBootReminder
{
	long ShowLegacyBalloonReminders();
	long ShowProfsvcReminders();
public:
	CPostBootReminder();
	virtual long Add(_tagSHELLREMINDER const *);
	virtual long Delete(unsigned short const *);
	virtual long Enum(IEnumShellReminder * *);
	virtual long OnHandleSignaled(void *,unsigned int,unsigned int,void * *,unsigned int *);
	virtual long QueryContinue();
	virtual long Start(unsigned int,void * *,unsigned int *);
	virtual long Stop();
};

struct CPremiumBitLockerVisibilityCondition
{
	virtual long Evaluate(INamedPropertyStore *,int *);
};

class CPrepareDiscDialog
{
	int _CCSysLinkNotifyHandler(unsigned int,unsigned __int64,__int64,__int64 *);
	int _IsDiscPopulated();
	int _IsUdfSelected();
	long _OnNextClicked(HWND__ *);
	static int s_CCSysLinkNotifyHandler(unsigned int,unsigned __int64,__int64,__int64 *,void *);
	static long s_PrepareDiscDialogCallbackProc(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
	void _OnDialogCreated(HWND__ *);
	void _OnDialogDestroyed(HWND__ *);
	void _UpdateVolumeLabel();
public:
	int Show(HWND__ *,HWND__ * *);
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

struct CPrepareDoneEvent
{
	virtual void DispatchEvent();
};

class CPreviewBackground
{
	long _GetSelection(IShellItemArray * *);
	void _LaunchContextMenu(DirectUI::MouseEvent const *);
	void _RemoveProperties();
public:
	bool GetSizeMenu();
	static DirectUI::IClassInfo * Class;
	static DirectUI::PropertyInfo const * SizeMenuProp();
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnInput(DirectUI::InputEvent *);
};

class CPreviewHost
{
	CRichPreviewThreadData * _FindInCache(_GUID const &);
	long _CreateAndAddToCache(_GUID const &,EXTCOCREATEFLAGS,CRichPreviewThreadData * *);
	long _CreateMsgWindow();
	static __int64 MsgWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _UnloadCachedResources();
	~CPreviewHost();
public:
	static long CreateInstance(HINSTANCE__ *,HWND__ *,IPreviewHostCallback *,_GUID const &,void * *);
	virtual long DoPreview();
	virtual long Load(IShellItem *);
	virtual long OnFrameActive(int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryWindowFocus(HWND__ * *);
	virtual long SetFocus();
	virtual long Unload();
	virtual long WindowSized();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CPreviewMetadata
{
	bool GetVertical();
	static DirectUI::IClassInfo * Class;
	static DirectUI::PropertyInfo const * NullSelectPropertyStringProp();
	static DirectUI::PropertyInfo const * NullSelectTitlePropertyStringProp();
	static DirectUI::PropertyInfo const * ReadOnlyProp();
	static DirectUI::PropertyInfo const * VerticalProp();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
};

class CPreviewMetadataInner
{
	int _EnsureNullSelectCache(IFrameTaskManager *);
	int _IsDifferentSelection(IShellItemArray *,unsigned long,unsigned long);
	long _FillPreviewPane(IShellItemArray *,unsigned long,unsigned long);
	long _GetSelectedCount(unsigned int *);
	long _QueueUpExtractionWorkItem(IShellItemArray *,unsigned long,unsigned long);
	long _RefreshMetadata();
	static unsigned long s_dwMaxViewableItems;
	static void _ClearPane(GMA_ACTIONINFO *);
	void _ClearPaneAndSetDefaults();
	void _FireDoneWithFocus();
	void _HideSaveCancelButtons();
	void _OnMetadataInteractionEvent(CMetadataElement *,MetadataInteractionEvent::REASON,unsigned short const *,int);
	void _ResetPreviewPane();
	void _SetItemsShowingMode(CPreviewMetadataInner::PREVIEWMETADATA_MODE);
	void _ShowSaveCancelButtons();
	void _StopTimedClearPane();
protected:
	long _ClearPreviewPane();
	long _GetNullSelectPropLists(unsigned short * *,unsigned short * *);
	long _GetNullSelectPropListsFromFolder(unsigned short * *,unsigned short * *);
	long _GetViewItem(_GUID const &,void * *);
	long _PersistCore();
	virtual void _Remember(CMetadataElement *);
	virtual ~CPreviewMetadataInner();
	void _CancelEdits();
	void _Persist();
	void _SetTargetInfo(IShellItemArray *,IPropertyStore *);
public:
	CPreviewMetadataInner();
	static DirectUI::IClassInfo * Class;
	static UID DoneWithFocus;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnContentsChanged();
	virtual long OnFolderChanged();
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
};

class CPreviewThumbnail
{
	long _UpdateLayoutPos();
public:
	CPreviewThumbnail();
	bool GetVertical();
	int GetFixedThumbSize();
	int GetMaxThumbSize();
	static DirectUI::IClassInfo * Class;
	static DirectUI::PropertyInfo const * AlwaysGetIconFromViewProp();
	static DirectUI::PropertyInfo const * FixedThumbSizeProp();
	static DirectUI::PropertyInfo const * ForceUseIconProp();
	static DirectUI::PropertyInfo const * HidePropertyProp();
	static DirectUI::PropertyInfo const * MaxThumbSizeProp();
	static DirectUI::PropertyInfo const * ReadingPaneProp();
	static DirectUI::PropertyInfo const * ThumbnailIdProp();
	static DirectUI::PropertyInfo const * VerticalProp();
	unsigned short const * GetHideProperty(DirectUI::Value * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPreviewThumbnailDevirtualizeSelectionWorkItem
{
	long _GetDevirtualizedSelection(_GUID const &,void * *);
	long _Initialize(SELECTION_DEVIRTUALIZATION_PARAMS const &);
public:
	static long CreateInstance(SELECTION_DEVIRTUALIZATION_PARAMS const &,IFrameWorkItem * *);
	virtual long ClearThreadState();
	virtual long Dispatch();
	virtual long DoWork();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPreviewThumbnailInner
{
	int _GetMaxImageCount();
	int _HasSelection();
	long _ConnectToView(int);
	long _FetchThumbnail(CThumbnailControlHost *,tagSIZE);
	long _GetSelectedCount(unsigned int *);
	long _GetThumbnailControlHost(CThumbnailControlHost * *);
	long _InvokeDefaultVerb();
	long _LaunchContextMenu(DirectUI::MouseEvent const *);
	long _QueueUpFetchWorkItem(SELECTION_DEVIRTUALIZATION_PARAMS const &);
	long _SetAndFetch(IShellItemArray *,int,int,int);
	long _UpdateItems(int,int);
	void ComputeThumbnailSizes();
protected:
	virtual tagSIZE _SelfLayoutUpdateDesiredSize(int,int,DirectUI::Surface *);
	virtual void _SelfLayoutDoLayout(int,int);
	virtual ~CPreviewThumbnailInner();
public:
	CPreviewThumbnailInner();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnContentsChanged();
	virtual long OnFileOk(IFileDialog *);
	virtual long OnFolderChange(IFileDialog *);
	virtual long OnFolderChanged();
	virtual long OnFolderChanging(IFileDialog *,IShellItem *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OnOverwrite(IFileDialog *,IShellItem *,FDE_OVERWRITE_RESPONSE *);
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChange(IFileDialog *);
	virtual long OnSelectionChanged();
	virtual long OnShareViolation(IFileDialog *,IShellItem *,FDE_SHAREVIOLATION_RESPONSE *);
	virtual long OnTypeChange(IFileDialog *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

struct CPreviewTitleArea
{
	static DirectUI::IClassInfo * Class;
	static DirectUI::PropertyInfo const * NullSelectTitlePropertyStringProp();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
};

class CPreviewTitleAreaInner
{
	bool _EnsureNullSelectCache(IFrameTaskManager *);
	bool _IsDifferentSelection(IShellItemArray *,unsigned long,unsigned long);
	long _GetNullSelectTitleString(unsigned short * *);
	long _GetSelectedCount(unsigned int *);
	long _GetViewItem(_GUID const &,void * *);
	long _QueueUpExtractionWorkItem(IShellItemArray *,unsigned long,unsigned long);
	long _RefreshMetadata();
protected:
	virtual ~CPreviewTitleAreaInner();
public:
	CPreviewTitleAreaInner();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnContentsChanged();
	virtual long OnFolderChanged();
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPreviewTitleAreaWorkItem
{
protected:
	long _AddFileCount(unsigned long);
	long _AddKeyAndValueToPropArray(_tagpropertykey const &,tagPROPVARIANT const &,PROPDESC_VIEW_FLAGS);
	long _AddSpacer(DirectUI::Element *,unsigned short const *,DirectUI::DUIXmlParser *);
	long _AddTitleRow(_tagpropertykey const &,tagPROPVARIANT const &,unsigned short const *,unsigned short const *,DirectUI::DUIXmlParser *);
	long _AddTitleToPropArray(IShellItem *,IPropertyStore *,IPropertyDescription *);
	long _AddToPropArray(IPropertyStore *,IPropertyDescription *,IPropertyStoreCache *);
	long _GetValue(IPropertyStoreCache *,IPropertyStore *,_tagpropertykey,tagPROPVARIANT *);
	unsigned long _AddTitle(bool,unsigned long,int,unsigned short const *,unsigned short const *,unsigned short const *,DirectUI::DUIXmlParser *);
	virtual ~CPreviewTitleAreaWorkItem();
	void _AddListToPropArray(IPropertyStore *,IPropertyDescriptionList *,IPropertyStoreCache *);
	void _ExtractNullSelection(unsigned long);
	void _ExtractSelection(unsigned long,IShellItemArray *);
public:
	long SetInfo(CPreviewTitleAreaInner *,unsigned short const *,IPropertyStoreCache *,IShellItemArray *,unsigned long,unsigned long,IUnknown *);
	virtual long Dispatch();
	virtual long DoWork();
};

struct CPreviewWindowCreator
{
	static long CreateInstance(_GUID const &,void * *);
	virtual long ContextSensitiveHelp(int);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CPrintClientStruct
{
	CPrintClientStruct(HWND__ *,unsigned __int64);
	~CPrintClientStruct();
};

struct CPrintersBindInfo
{
	virtual long GetCookie(void * *);
	virtual long GetPIDLType(unsigned long *);
	virtual long IsValidated();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetCookie(void *);
	virtual long SetPIDLType(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CPrivateIconSparseCallback
{
	virtual long Clone(_GUID const &,void * *);
	virtual long ForceImagePresent(IImageList2 *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CProfferService
{
protected:
	~CProfferService();
public:
	long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ProfferService(_GUID const &,IServiceProvider *,unsigned long *);
	virtual long RevokeService(unsigned long);
};

class CProgidArray
{
	void _EnumValues(bool,IQuerySource *);
public:
	long InitFileAssoc(unsigned short const *,IQuerySource *,bool);
	long InitUrlAssoc(unsigned short const *);
	unsigned short const * Find(unsigned short const *);
	unsigned short const * FindOrAdd(unsigned short const *);
	void EnumerateCapableFileHandlers(unsigned short const *);
	void EnumerateCapableUrlHandlers(unsigned short const *);
};

class CProgressDialog
{
	long _BeginAction(unsigned long);
	long _ChangeDlg(unsigned long,unsigned short const *,int);
	long _GetLocationDisplayInfo(IShellItem *,LOCATIONTYPE,LOCATIONDISPLAYINFO * *);
	long _Stop();
	long _UpdateDisplayPathFlag(IShellItem *,LOCATIONTYPE);
	long _UpdateItemName();
	static unsigned long s_SyncThreadProc(void *);
	static unsigned long s_ThreadProc(void *);
	unsigned long _SyncThreadProc();
	unsigned long _ThreadProc();
	virtual ~CProgressDialog();
public:
	CProgressDialog();
	long InitProgressDialog();
	virtual int HasUserCancelled();
	virtual long Begin(_SPACTION,unsigned long);
	virtual long ContextSensitiveHelp(int);
	virtual long End();
	virtual long GetCancelInformation(unsigned long *,unsigned int *);
	virtual long GetDialogDisplayDelayTime(unsigned long *);
	virtual long GetMilliseconds(unsigned __int64 *,unsigned __int64 *);
	virtual long GetOperationStatus(PDOPSTATUS *);
	virtual long GetOriginalEstimate(unsigned __int64 *);
	virtual long GetWindow(HWND__ * *);
	virtual long HideEstimates();
	virtual long Initialize(unsigned long,unsigned short const *,unsigned short const *);
	virtual long PauseTimer();
	virtual long QueryCancel(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResetCancel();
	virtual long ResetTimer();
	virtual long ResumeTimer();
	virtual long SetAnimation(HINSTANCE__ *,unsigned int);
	virtual long SetCancelInformation(unsigned long,unsigned int);
	virtual long SetCancelMsg(unsigned short const *,void const *);
	virtual long SetLine(unsigned long,unsigned short const *,int,void const *);
	virtual long SetMode(unsigned long);
	virtual long SetOperation(_SPACTION);
	virtual long SetProgress(unsigned long,unsigned long);
	virtual long SetProgress64(unsigned __int64,unsigned __int64);
	virtual long SetProgressDataInvalid();
	virtual long SetTitle(unsigned short const *);
	virtual long StartProgressDialog(HWND__ *,IUnknown *,unsigned long,void const *);
	virtual long StartProgressDialog(HWND__ *,unsigned long);
	virtual long Stop();
	virtual long StopProgressDialog();
	virtual long Timer(unsigned long,void const *);
	virtual long UpdateLocations(IShellItem *,IShellItem *,IShellItem *);
	virtual long UpdateProgress(unsigned __int64,unsigned __int64);
	virtual long UpdateProgress(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64);
	virtual long UpdateText(_SPTEXT,unsigned short const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CProgressDialogUI
{
	bool _IsButton(DirectUI::Element *);
	int _DialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _HandleTimerMessage(unsigned int);
	int _IsOneLocationAction(_SPACTION);
	int _OnInitDlg(HWND__ *,unsigned __int64);
	long _CompleteSetExpanded(int);
	long _CreateParser();
	long _EnsureTaskbarProgress();
	long _SetExpandedState(int,int);
	long _SetLineHelper(unsigned long,unsigned short const *,int);
	long _SetProgressState(unsigned long);
	long _Setup(HWND__ *);
	long _ShowShutdownError();
	long _UpdateCalcedStats(unsigned __int64);
	long _UpdatePreflightAndIndeterminateStats();
	long _UpdateProgressBar();
	long _UpdateTimedStats(int);
	long _UpdateTitleBar();
	static __int64 DialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned long s_CancelSyncIoThread(void *);
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnGetDlgCode(tagMSG *,__int64 *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *);
	void _AnimationFromAction(_SPACTION);
	void _ChangeFromToFields();
	void _ChangeHeader();
	void _ConstrainLocations();
	void _DisplayDialog();
	void _FormattedSetContentString(DirectUI::Element *,unsigned short const *,int);
	void _HandleChangeDlg(int,int);
	void _HandleChangeLine(unsigned long,unsigned short const *,int);
	void _HandleUpdateLocations(LOCATIONTYPE,LOCATIONDISPLAYINFO *);
	void _PauseAnimation(int);
	void _ProcessUpdate(PDSIZEUPDATE *);
	void _UserCancelled();
	void _UserPaused();
public:
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element * *,int,CProgressDialog *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual ~CProgressDialogUI();
	void EndDialog();
};

class CProgressTimer
{
	int _ComputeResults(CProgressTimer::PROGRESS_RESULTS *);
	void _AddData(unsigned __int64,unsigned __int64);
	void _AddMeanData(unsigned __int64);
	void _InitData();
public:
	CProgressTimer();
	virtual long GetMillisecondsActualElapsed(unsigned __int64 *);
	virtual long GetMillisecondsProgress(unsigned __int64 *);
	virtual long GetMillisecondsRemaining(unsigned __int64 *);
	virtual long GetOriginalEstimate(unsigned __int64 *);
	virtual long GetProgress(unsigned __int64 *,unsigned __int64 *);
	virtual long GetTimeRemaining(unsigned short *,unsigned int,unsigned __int64 *);
	virtual long PauseTimer();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResetTimer();
	virtual long ResumeTimer();
	virtual long SetProgress(unsigned __int64,unsigned __int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPropVariant
{
	bool _IsExpectedCLSID(_GUID const * const *,unsigned int,_GUID const &);
public:
	bool TryStealString(unsigned short * *);
	bool operator!=(tagPROPVARIANT const &);
	long GetBuffer(void *,unsigned int);
	long GetKnownObjectFromStream(_GUID const * const *,unsigned int,_GUID const &,void * *);
	long GetObjectW(_GUID const &,void * *);
	long SetKnownObjectAsStream(_GUID const * const *,unsigned int,IUnknown *);
	long SetString(unsigned short const *);
};

class CProperTreeHost
{
	struct AppAndEnterpriseIds
	{
		~AppAndEnterpriseIds();
	};

	bool IsValidDropPosition(int,int,int);
	bool _AreItemsEquivalent(IShellItem *,IShellItem *,int);
	bool _GetItemExpandedState(IShellItem *);
	bool _IsAppLocationsExpanded();
	bool _IsInCFD();
	bool _IsRemovableAndNotInCFD(IShellItem *);
	bool _ShouldPersistExpandedState(IShellItem *);
	bool _ShouldShowNavigationRoots();
	long CacheAppEnterpriseIds(IShellItem *);
	long CreateHWNDInternal(HWND__ *);
	long EnsureHomeAndDestList();
	long FindFirstUnpinnedPosition(int *);
	long SetupPinnedImageList(HWND__ *);
	long UpdateShellItemAppContext(IShellItem *);
	long _AppendAppNodes();
	long _AppendHomeRoot();
	long _ConnectToView(int);
	long _EnsureLibraries();
	long _ExpandItemInTree(IShellItem *,unsigned long);
	long _GetSelectedItem(IShellItem * *);
	long _GetViewItem(_GUID const &,void * *);
	long _LoadOrInitExpandedState();
	long _MaybeGetAppLocations();
	long _MaybeGetBrowserNavigationRoot();
	long _NavigateTo(IShellItem *);
	long _SaveExpandedState();
	long _SetPositioningValues();
	unsigned long _GetEnumFlags();
	unsigned long _GetRegColor(unsigned long,unsigned short const *);
	virtual HWND__ * CreateHWND(HWND__ *);
	virtual bool OnMessage(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual ~CProperTreeHost();
	void ClearAppNodesFilter();
	void FilterAppNodes(unsigned short const *);
	void UpdateFadingExpandoStyle();
	void _EnsureRootsInitialized();
	void _GetSetColorProp(DirectUI::PropertyInfo const *,IVisualProperties *,VPCOLORFLAGS);
	void _OnNavigate();
	void _OptionallyExpandParent(IShellItem *);
	void _RefreshCompColorSetting();
	void _SetColors();
	void _SqmDirectParentMoveOperation(IShellItem *);
public:
	CProperTreeHost();
	long TranslateAcceleratorW(tagMSG *);
	long UpdateSettingForMenu(UPDATESETTING);
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long GetAccessibleName(IShellItem *,unsigned short * *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetOrderStream(IShellItem *,unsigned long,IStream * *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long ItemPostPaint(HDC__ *,tagRECT *,NSTCCUSTOMDRAW *);
	virtual long ItemPrePaint(HDC__ *,tagRECT *,NSTCCUSTOMDRAW *,unsigned long *,unsigned long *,__int64 *);
	virtual long OnAfterContextMenu(IShellItem *,IContextMenu *,_GUID const &,void * *);
	virtual long OnAfterExpand(IShellItem *);
	virtual long OnBeforeContextMenu(IShellItem *,_GUID const &,void * *);
	virtual long OnBeforeExpand(IShellItem *);
	virtual long OnBeforeItemDelete(IShellItem *);
	virtual long OnBeforeStateImageChange(IShellItem *);
	virtual long OnBeginLabelEdit(IShellItem *);
	virtual long OnDPIChanged();
	virtual long OnDoDefaultAccessibilityAction(IShellItem *);
	virtual long OnDragEnter(IShellItem *,IShellItemArray *,int,unsigned long,unsigned long *);
	virtual long OnDragLeave(IShellItem *);
	virtual long OnDragOver(IShellItem *,IShellItemArray *,unsigned long,unsigned long *);
	virtual long OnDragPosition(IShellItem *,IShellItemArray *,int,int);
	virtual long OnDrop(IShellItem *,IShellItemArray *,int,unsigned long,unsigned long *);
	virtual long OnDropPosition(IShellItem *,IShellItemArray *,int,int);
	virtual long OnEndLabelEdit(IShellItem *);
	virtual long OnEnumDone(IShellFolder *,int);
	virtual long OnGetAccessibilityRole(IShellItem *,tagVARIANT *);
	virtual long OnGetDefaultAccessibilityAction(IShellItem *,unsigned short * *);
	virtual long OnGetDefaultIconIndex(IShellItem *,int *,int *);
	virtual long OnGetItemCustomState(IShellItem *);
	virtual long OnGetToolTip(IShellItem *,unsigned short *,int);
	virtual long OnItemAdded(IShellItem *,int);
	virtual long OnItemClick(IShellItem *,unsigned long,unsigned long);
	virtual long OnItemDeleted(IShellItem *,int);
	virtual long OnItemStateChanged(IShellItem *,unsigned long,unsigned long);
	virtual long OnItemStateChanging(IShellItem *,unsigned long,unsigned long);
	virtual long OnKeyboardInput(unsigned int,unsigned __int64,__int64);
	virtual long OnPropertyItemCommit(IShellItem *);
	virtual long OnSelectionChanged(IShellItemArray *);
	virtual long OnTabletModeChanged();
	virtual long PersistChildItemsOrder(int,IShellItem *);
	virtual long PostPaint(HDC__ *,tagRECT *);
	virtual long PrePaint(HDC__ *,tagRECT *,__int64 *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long ShouldReorderChildItems(IShellItem *);
	virtual long UpdateSetting(UPDATESETTING);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnDestroy();
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	void SetPropBag(IPropertyBag *);
};

struct CProperTreeModule
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CProperTreeModuleInner
{
	CProperTreeHost * _FindFolderTreeHost();
	int _FolderTreeHasFocus();
	int _OnInputExpando(DirectUI::InputEvent *);
	long _GetExpandoSize(int *);
	long _SaveSettings();
	long _SetExpandoSize(int);
	void _ExpandFolders(int);
	void _SyncExtent();
	void _UpdateButton();
public:
	CProperTreeModuleInner();
	long Load();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long HasFocusIO();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	void SendSQMData(unsigned long);
};

class CPropertyButton
{
	long _SetIcon(IPropertyStoreCache *,IPropertyDescriptionRelatedPropertyInfo *,IPropertyDescription *);
	long _SetText(IPropertyStoreCache *,IPropertyDescriptionRelatedPropertyInfo *,IPropertyDescription *);
	long _SetVerb(IPropertyStoreCache *,IPropertyDescriptionRelatedPropertyInfo *);
public:
	long Init(IPropertyStoreCache *,IPropertyDescription *);
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

struct CPropertyChangedEventArgs
{
	CPropertyChangedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_PropertyName(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPropertyControlBase
{
	HFONT__ * _GetSystemFont();
	__int64 _MouseProc(int,unsigned __int64,tagMOUSEHOOKSTRUCTEX *);
	__int64 _OnBaseKeyDown(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _OnBaseNotify(HWND__ *,int,tagNMHDR *,int *);
	int _HookMouse(HWND__ *,int);
	int _NeedToTrackMouse(HWND__ *);
	int _ShouldDrawBorders(int);
	long _BaseDrawContent(HDC__ *,tagRECT *,int,int);
	long _CreateBaseWindow(HWND__ *,tagRECT const *);
	static CPropertyControlBase * s_pHookedControl;
	static HHOOK__ * s_hControlMouseHook;
	static _RTL_SRWLOCK s_srwMouseHookLock;
	static __int64 s_BaseWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_MouseProc(int,unsigned __int64,__int64);
	unsigned int _GetDelayedExpandMsg();
	void _DelayedExpand(HWND__ *,int);
	void _DrawBorderAndAdjustRect(HDC__ *,tagRECT *,int);
	void _EnableTooltip();
	void _EnsureCheckMouseTrackingTimer(HWND__ *);
	void _GetBorderSize(_MARGINS *,HDC__ *,int);
	void _OnBaseKillFocus(HWND__ *,HWND__ *);
	void _OnBaseLButtonDown(HWND__ *,int,int,int,unsigned int);
	void _OnBaseMouseMove(HWND__ *,int,int,unsigned int);
	void _OnBaseSetFocus(HWND__ *,HWND__ *);
	void _OnBaseSettingChange(HWND__ *,unsigned __int64,__int64);
	void _OnBaseSize(HWND__ *,unsigned int,int,int);
	void _OnBaseThemeChanged(HWND__ *);
	void _OnTimer(HWND__ *,unsigned __int64,__int64);
	void _SetDesiredState(int,int);
protected:
	CPropertyControlBase(int,int);
	HFONT__ * GetFont(HFONT__ *);
	int HandleExpandCollapse(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	int OnActiveKeyDown(HWND__ *,unsigned int,int,unsigned int);
	virtual __int64 v_BaseWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual int v_AllowDrawBorders(int);
	virtual int v_CanExpand();
	virtual int v_HasTooltip();
	virtual int v_IsExpanded();
	virtual int v_IsModified();
	virtual int v_OnBaseSetCursor();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_DrawContent(HDC__ *,tagRECT *,int,int);
	virtual long v_GetTooltipMaxRect(HWND__ *,tagRECT *);
	virtual unsigned int v_GetDrawTextFlags(int,int,HDC__ *);
	virtual void v_DrawBorderAndAdjustRect(HDC__ *,tagRECT *,int);
	virtual void v_ExpandNow(HWND__ *,int);
	virtual void v_GetBorderSize(_MARGINS *,HDC__ *,int);
	virtual void v_GetDrawClientRect(HWND__ *,HDC__ *,tagRECT *);
	virtual void v_GetInternalPadding(HWND__ *,HDC__ *,int,_MARGINS *);
	virtual void v_OnReadOnlyToggle(int);
	virtual ~CPropertyControlBase();
	void SetAccName(HWND__ *);
	void SetProvidedFont(HFONT__ *);
public:
	virtual HWND__ * v_GetWindow();
	virtual long AdjustWindowRectPCB(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long Create(HWND__ *,tagRECT const *,tagRECT const *,int);
	virtual long Destroy();
	virtual long GetDisplayText(unsigned short * *);
	virtual long GetDrawFlags(int *);
	virtual long GetFlags(int *);
	virtual long GetFormatFlags(PROPDESC_FORMAT_FLAGS *);
	virtual long GetSize(PROPCTL_RECT_TYPE,HDC__ *,tagSIZE const *,tagSIZE *);
	virtual long GetState(int *);
	virtual long GetTooltipInfo(HDC__ *,tagSIZE const *,int *);
	virtual long GetValue(_GUID const &,void * *);
	virtual long HasFocusIO();
	virtual long HasVisibleContent();
	virtual long Initialize(IUnknown *,tagPROPDESC_CONTROL_TYPE);
	virtual long InvokeDefaultAction();
	virtual long IsModified(int *);
	virtual long OnDPIChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFlags(int,int);
	virtual long SetFont(HFONT__ *);
	virtual long SetFormatFlags(PROPDESC_FORMAT_FLAGS);
	virtual long SetModified(int);
	virtual long SetPosition(tagRECT const *,tagRECT const *);
	virtual long SetSite(IUnknown *);
	virtual long SetTextColor(unsigned long);
	virtual long SetValue(IUnknown *);
	virtual long SetWindowTheme(unsigned short const *,unsigned short const *);
	virtual long SetWindowlessParentWindow(HWND__ *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual long ValidationFailed(unsigned short const *);
	virtual long WindowlessDraw(HDC__ *,tagRECT const *,int);
	virtual long v_OnGetName(unsigned short * *);
	virtual long v_OnGetRole();
	virtual long v_OnGetValue(unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CPropertyStoreHelper
{
	long CopyPropertiesFrom(IPropertyStore *,_tagpropertykey const * const *,unsigned long,bool);
	long CopyPropertiesFrom(IPropertyStore *,_tagpropertykey const *,unsigned long,bool);
};

struct CPropertyStoreHelperBase<INamedPropertyStore>
{
	long GetAsUInt32WithDefault<unsigned short const *>(unsigned short const *,unsigned long,unsigned long *);
	long GetBoolean<unsigned short const *>(unsigned short const *,bool *);
	long GetBuffer<unsigned short const *>(unsigned short const *,void *,unsigned int);
	long GetFailIfEmpty<unsigned short const *>(unsigned short const *,tagPROPVARIANT *);
	long GetKnownObjectFromStream<unsigned short const *>(unsigned short const *,_GUID const * const *,unsigned int,_GUID const &,void * *);
	long GetString<unsigned short const *>(unsigned short const *,unsigned short * *);
	long GetUInt32<unsigned short const *>(unsigned short const *,unsigned long *);
	long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS);
	void ClearPropertyStore();
};

struct CPropertyStoreHelperBase<IPropertyStore>
{
	long GetAsFileTime<_tagpropertykey>(_tagpropertykey,_FILETIME *);
	long GetAsIDList<_tagpropertykey>(_tagpropertykey,_ITEMIDLIST_ABSOLUTE * *);
	long GetAsInt32<_tagpropertykey>(_tagpropertykey,long *);
	long GetAsShellItem<_tagpropertykey>(_tagpropertykey,_GUID const &,void * *);
	long GetAsUInt32<_tagpropertykey>(_tagpropertykey,unsigned long *);
	long GetAsUInt32WithDefault<_tagpropertykey>(_tagpropertykey,unsigned long,unsigned long *);
	long GetAsUInt64<_tagpropertykey>(_tagpropertykey,unsigned __int64 *);
	long GetBlob<_tagpropertykey>(_tagpropertykey,unsigned char * *,unsigned long *);
	long GetBoolean<_tagpropertykey>(_tagpropertykey,bool *);
	long GetBuffer<_tagpropertykey>(_tagpropertykey,void *,unsigned int);
	long GetFailIfEmpty<_tagpropertykey>(_tagpropertykey,tagPROPVARIANT *);
	long GetFileTime<_tagpropertykey>(_tagpropertykey,_FILETIME *);
	long GetGUID<_tagpropertykey>(_tagpropertykey,_GUID *);
	long GetObjectW<_tagpropertykey>(_tagpropertykey,_GUID const &,void * *);
	long GetString<_tagpropertykey>(_tagpropertykey,unsigned short * *);
	long GetUInt32<_tagpropertykey>(_tagpropertykey,unsigned long *);
	long GetUInt64<_tagpropertykey>(_tagpropertykey,unsigned __int64 *);
	long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS);
	long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const *,unsigned int);
	void ClearPropertyStore();
};

class CPropertyStoreUndoUnit
{
	virtual long _GetPersistedSizeMax(unsigned long *);
protected:
	virtual ~CPropertyStoreUndoUnit();
public:
	long Initialize(int);
	long Load(IStream *);
	long Save(IStream *,int);
	virtual long DisconnectObject(unsigned long);
	virtual long GetClassID(_GUID *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long GetMemoryUsage(unsigned long *);
	virtual long GetUnitType(_GUID *,long *);
	virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
	virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual long OnNextAdd();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReleaseMarshalData(IStream *);
	virtual long SetLongText(unsigned short const *);
	virtual long SetShortText(unsigned short const *);
	virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
	virtual long _GetItemNameForUndo(unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void GetUndoText(unsigned short *,unsigned int,int);
};

class CPropertyThumbnailHandler
{
protected:
	long _GetThumbnailInternal(HBITMAP__ * *,WTS_ALPHATYPE *);
public:
	CPropertyThumbnailHandler();
	virtual long Extract(HBITMAP__ * *);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFile(unsigned short * *);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long GetLocation(unsigned short *,unsigned long,unsigned long *,tagSIZE const *,unsigned long,unsigned long *);
	virtual long GetThumbnail(unsigned int,HBITMAP__ * *,WTS_ALPHATYPE *);
	virtual long InitNew();
	virtual long Initialize(IShellItem *,unsigned long);
	virtual long IsDirty();
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long Load(unsigned short const *,unsigned long);
	virtual long Save(IPropertyBag *,int,int);
	virtual long Save(unsigned short const *,int);
	virtual long SaveCompleted(unsigned short const *);
};

class CPropertyUI
{
	long _NextProp(unsigned short const *,unsigned long *,unsigned short *,unsigned int);
public:
	virtual long FormatForDisplay(_GUID const &,unsigned long,tagPROPVARIANT const *,unsigned long,unsigned short *,unsigned long);
	virtual long GetCannonicalName(_GUID const &,unsigned long,unsigned short *,unsigned long);
	virtual long GetDefaultWidth(_GUID const &,unsigned long,unsigned long *);
	virtual long GetDisplayName(_GUID const &,unsigned long,unsigned long,unsigned short *,unsigned long);
	virtual long GetFlags(_GUID const &,unsigned long,unsigned long *);
	virtual long GetHelpInfo(_GUID const &,unsigned long,unsigned short *,unsigned long,unsigned int *);
	virtual long GetPropertyDescription(_GUID const &,unsigned long,unsigned short *,unsigned long);
	virtual long ParsePropertyName(unsigned short const *,_GUID *,unsigned long *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CPropertyValue
{
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long GetValue(tagPROPVARIANT *);
	virtual long InitValue(tagPROPVARIANT const &);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPropertyKey(_tagpropertykey const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CProviderDelay
{
	virtual long Process();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CProviderTypeAheadResult
{
	static long CreateInstance(unsigned short const *,SEARCH_TYPEAHEAD_SUGGESTION_SOURCE,_GUID const &,void * *);
	virtual long GetText(unsigned short * *);
	virtual long GetTypeAheadSuggestionSource(SEARCH_TYPEAHEAD_SUGGESTION_SOURCE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CProximityParams
{
	long _SniffPath(unsigned short const *);
public:
	long PromptUser(unsigned short const *);
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPublishBase
{
protected:
	long _EnsureMachineName();
	virtual ~CPublishBase();
public:
	static long s_GetPropertyStore(IUnknown *,bool,unsigned int,XP_STORAGE *);
	virtual long GetClassID(_GUID *);
	virtual long GetMachineName(unsigned short * *);
	virtual long GetPropertyStore(GETPROPERTYSTOREFLAGS,IUnknown *,_GUID const &,void * *);
	virtual long GetPropertyStoreForKeys(_tagpropertykey const *,unsigned int,GETPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long Initialize(unsigned short const *);
	virtual long IsDirty();
	virtual long Load(IStream *);
	virtual long Save(IStream *,int);
};

struct CPublishBaseWithOwner
{
	long GetOwner(unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *);
	long SetOwner(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
};

struct CPublishMessageAsyncContext
{
	long Initialize(_GUID const &,IObjectCollection *,unsigned short const *);
};

class CPublishedItem
{
	int _ShouldUseShortcut();
	long _EnsureItem(_GUID const &,void * *);
	long _EnsureLinkDeserialized(_GUID const &,void * *);
	long _SerializeLink(IShellLinkW *);
	long _SetItem(IShellItem *);
	virtual ~CPublishedItem();
protected:
	virtual long _GetXPMap(XMLPROP_ITEM const * *);
public:
	static long s_CreateUser(IUnknown *,bool,unsigned int,IUnknown * *);
	virtual long AddUser(IPropertyStoreFactory *);
	virtual long AddUser(unsigned short const *);
	virtual long GetID(unsigned short * *);
	virtual long GetItem(_GUID const &,void * *);
	virtual long GetUserAt(unsigned long,_GUID const &,void * *);
	virtual long GetUserAt(unsigned long,unsigned short * *);
	virtual long GetUserCount(unsigned long *);
	virtual long Initialize(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveAllUsers();
	virtual long RemoveUser(unsigned short const *);
	virtual long Resolve(HWND__ *,int *);
	virtual long SetID(unsigned short const *);
	virtual long SetItem(IShellItem *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPublishedItemEnumerator
{
	long _EnsureDescription();
	long _GetDiscretionaryShareItemAt(unsigned long,IPublishedItemDescription * *);
	long _GetItemDescAt(unsigned long,int,IPublishedItemDescription * *);
public:
	CPublishedItemEnumerator(HWND__ *,unsigned long,CPublishedItemsFolder *);
	virtual long Clone(IEnumIDList * *);
	virtual long GetEnumFlags(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,HWND__ * *,unsigned long *);
	virtual long Next(unsigned long,_ITEMID_CHILD * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long ShouldShow(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *);
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPublishedItemsFolder
{
	FOLDER_ENUM_MODE _GetEnumModeForItem(_ITEMIDLIST_RELATIVE const *);
	bool _IsCurrentUser();
	bool _IsOnline();
	int _ItemHasNavigationEnum(IPropertyStore *);
	long _CompareFolderness(IShellItem *,IShellItem *);
	long _CreateItemId(IPropertyStore *,FOLDER_ENUM_MODE,_ITEMID_CHILD * *);
	long _CreateItemPropertyStore(IPublishedItemDescription *,IPropertyStore * *);
	long _DisplayWaitFlyout(unsigned short const *);
	long _EnsureMetadataList();
	long _EnsureSelfItem(_GUID const &,void * *);
	long _GetAttributes(_ITEMID_CHILD const *,unsigned long,unsigned long *);
	long _GetItemFromPropStore(INamedPropertyStore *,_GUID const &,void * *);
	long _GetPropVariantForItem(IShellItem *,tagPROPVARIANT *);
	long _GetPropertyForItem(_ITEMID_CHILD const *,_tagpropertykey const &,tagPROPVARIANT *);
	long _GetTargetItemForIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	long _RelocateItem(IUnknown *,_ITEMID_CHILD const *);
	long _Validate();
	long _WakeWithProgress();
	static unsigned long s_DummyThreadProc(void *);
	static unsigned long s_SyncEnumItems(void *);
	unsigned long _GetHomeGroupSharingStatus(IShellItem *);
	virtual _ITEMIDLIST_ABSOLUTE const * v_GetFolderIdList();
	virtual long v_BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long v_CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long v_GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long v_GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long v_GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long v_GetTargetParentAndItem(_ITEMID_CHILD const *,_GUID const &,void * *,_ITEMID_CHILD * *);
	virtual long v_GetTransfer(_ITEMIDLIST_RELATIVE const *,HWND__ *,_GUID const &,void * *);
	virtual long v_GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long v_InternalQueryInterface(_GUID const &,void * *);
	virtual long v_ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long v_QueryInterface(_GUID const &,void * *);
	virtual ~CPublishedItemsFolder();
	void _GetComputerStatus(HOMEGROUP_COMPUTER_STATE *);
public:
	CPublishedItemsFolder();
	long CreateItemFromData(IPublishedItemDescription *,FOLDER_ENUM_MODE,_ITEMID_CHILD * *);
	long GetUserFilesDescription(_GUID const &,void * *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFolderCapabilities(NSTCFOLDERCAPABILITIES,NSTCFOLDERCAPABILITIES *);
	virtual long GetFolderType(_GUID *);
	virtual long GetFrameLayoutDefinition(GETLAYOUTREASON,_GUID const &,void * *);
	virtual long GetIconOf(_ITEMID_CHILD const *,unsigned int,int *);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetParentAndItem(_ITEMIDLIST_ABSOLUTE * *,IShellFolder * *,_ITEMID_CHILD * *);
	virtual long GetRealLocations(IShellItemArray * *);
	virtual long GetScopeAndSubQueries(SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IScope * *,IShellItemArray * *);
	virtual long GetSearchRoot(IShellItem * *);
	virtual long GetThumbnailHandler(_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual long SetParentAndItem(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_ITEMID_CHILD const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPublishedItemsFolderViewCB
{
	long _OnGetWebViewTasks(unsigned long,SFVM_WEBVIEW_TASKSECTION_DATA *);
public:
	CPublishedItemsFolderViewCB(_ITEMIDLIST_ABSOLUTE const *,bool);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CPublishedItemsService
{
	bool _HasPublishedItems();
	bool _ShouldUpdatePublishedItems(long,_ITEMIDLIST_ABSOLUTE const *);
	long _InitWaitOnFolderChanges();
	long _StartService();
	long _StopService();
	static unsigned long s_UpdateLibraries(void *);
	static unsigned long s_UpdatePublishedItems(void *);
	static unsigned long s_UpdatePublishedUserInfo(void *);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _OnChangeNotify(unsigned __int64,__int64);
public:
	virtual long OnHandleSignaled(void *,unsigned int,unsigned int,void * *,unsigned int *);
	virtual long QueryContinue();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Start(unsigned int,void * *,unsigned int *);
	virtual long Stop();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPublishedMessage
{
protected:
	virtual long _GetXPMap(XMLPROP_ITEM const * *);
public:
	static long s_CreateUsersFilesDescription(IUnknown *,bool,unsigned int,IUnknown * *);
	virtual long AddFromArray(IObjectArray *);
	virtual long AddObject(IUnknown *);
	virtual long Clear();
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long Initialize(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveObjectAt(unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPublishedUsersFilesDescription
{
protected:
	int _ResolveArray(HWND__ *,CDPARelease<IPublishedItemDescription,CTContainer_PolicyRelease<IPublishedItemDescription> > *);
	virtual long _GetXPMap(XMLPROP_ITEM const * *);
	void _PruneToUsersProfile(CDPARelease<IPublishedItemDescription,CTContainer_PolicyRelease<IPublishedItemDescription> > *,bool);
public:
	static long s_CreateDiscretionaryShareItem(IUnknown *,bool,unsigned int,IUnknown * *);
	static long s_CreateItem(IUnknown *,bool,unsigned int,IUnknown * *);
	virtual long AddDelegate(IPublishedItemDescription *);
	virtual long AddDiscretionaryShareItem(IPublishedItemDescription *);
	virtual long AddItem(IPublishedItemDescription *);
	virtual long GetDelegateAt(unsigned long,_GUID const &,void * *);
	virtual long GetDelegateCount(unsigned long *);
	virtual long GetDiscretionaryShareItemAt(unsigned long,_GUID const &,void * *);
	virtual long GetDiscretionaryShareItemCount(unsigned long *);
	virtual long GetItemAt(unsigned long,_GUID const &,void * *);
	virtual long GetItemCount(unsigned long *);
	virtual long GetOwner(unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *);
	virtual long Initialize(unsigned short const *);
	virtual long IsDiscretionaryShareItemsAllowed();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveDelegate(IPublishedItemDescription *);
	virtual long RemoveDiscretionaryShareItem(IPublishedItemDescription *);
	virtual long RemoveItem(IPublishedItemDescription *);
	virtual long Resolve(HWND__ *,int *);
	virtual long SetDiscretionaryShareItemsAllowed(int);
	virtual long SetOwner(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CPublishedUsersFilesDescription();
};

class CQosRecorder
{
	virtual ~CQosRecorder();
public:
	CQosRecorder();
	virtual long AddExtraStringData(unsigned short const *);
	virtual long AddExtraUint32Data(unsigned int);
	virtual long RecordApiResult(unsigned int,long,unsigned int,unsigned int);
	virtual long SetScenarioResult(long,unsigned int);
};

class CQueryCscPropertyInfoTask
{
	long _GetConnectionInfo(IOfflineFilesItem *,tagOFFLINEFILES_CONNECT_STATE *,tagOFFLINEFILES_OFFLINE_REASON *);
	long _IsItemAutoCached(IOfflineFilesItem *,int *);
	long _IsItemGhosted(IOfflineFilesItem *,int *);
	long _IsItemPinned(IOfflineFilesItem *,int *,int *);
	long _IsItemSparse(IOfflineFilesItem *,int *);
	long _IsItemTransparentlyCached(IOfflineFilesItem *,int *);
	long _IsSettingEnabled(IOfflineFilesCache *,unsigned short const *,int *);
	virtual long _Exec(CCscComTaskContext *);
	virtual unsigned long _CoInitFlags();
};

struct CQueryFocusParams
{
	static long CreateInstance(CQueryFocusParams * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CQueryWithLinguisticAlternatives
{
	void _EnsureAlternatives();
public:
	CQueryWithLinguisticAlternatives();
	long Initialize(ILinguisticAlternativeGenerator *,unsigned short const *,unsigned int,unsigned int,int);
	virtual long GenerateOrQueryFromAlternatives(unsigned int,unsigned short * *);
	virtual long GetAlternative(unsigned int,unsigned short * *);
	virtual long GetAlternativeCount(unsigned int *);
	virtual long GetQuery(unsigned short * *);
	virtual long GetQueryImeCompositionLength(unsigned int *);
	virtual long GetQueryImeCompositionStart(unsigned int *);
	virtual void DetachAlternatives(unsigned int *,unsigned short * * *);
};

struct CQueueItem
{
	virtual long AppliesTo(IUnknown *);
	virtual long IsDispatchable();
	virtual long QueryContinue();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetUndispatchable();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CQuickLinks
{
	long _CreateQuickLinksFolder(unsigned short *,unsigned long);
	long _InternalInit();
	virtual int _AllowDropOnTitle();
	virtual long _GetIEnumIDList(unsigned long,IEnumIDList * *);
	virtual long _GetTitleW(unsigned short *,unsigned long);
	virtual long _LoadOrderStream();
	virtual long _SaveOrderStream();
	virtual ~CQuickLinks();
	void _GetLocalizedLinksFolder(unsigned short *,unsigned long);
public:
	CQuickLinks();
	virtual long CloseDW(unsigned long);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long GetBandInfo(unsigned long,unsigned long,DESKBANDINFO *);
	virtual long GetClassID(_GUID *);
	virtual long Load(IStream *);
	virtual long OnDropDDT(IDropTarget *,IDataObject *,unsigned long *,_POINTL,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IStream *,int);
	virtual long SetSite(IUnknown *);
	virtual long ShowDW(int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRC64
{
	CRC64(void const *,unsigned int);
};

class CRGTypeSizes
{
	static unsigned short const * const m_ucTypeSizesA;
	static unsigned short const * const m_ucTypeSizesB;
public:
	unsigned short operator[](int);
};

struct CRPCTimeout
{
	CRPCTimeout(unsigned long);
};

class CRTFPreviewHandler
{
	long _CreatePreviewerWindow();
	long _GetNotepadFont(HFONT__ * *);
	long _IsStreamUnicode(IStream *,int *);
	long _RegGetString(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long);
	long _Unload();
	static unsigned long _StreamInCallback(unsigned __int64,unsigned char *,long,long *);
	unsigned long _RegGetInt(HKEY__ *,unsigned short const *,unsigned long);
public:
	static long CreateInstance(int,_GUID const &,void * *);
	virtual long ContextSensitiveHelp(int);
	virtual long DoPreview();
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetWindow(HWND__ * *);
	virtual long Initialize(IStream *,unsigned long);
	virtual long QueryFocus(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFocus();
	virtual long SetRect(tagRECT const *);
	virtual long SetSite(IUnknown *);
	virtual long SetWindow(HWND__ *,tagRECT const *);
	virtual long TranslateAcceleratorW(tagMSG *);
	virtual long Unload();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRatingsCategorizer
{
protected:
	virtual long OnGetCategoryDescription(unsigned long,ICategoryDescription * *);
	virtual long OnGetFilterCondition(unsigned long,IFilterCondition * *);
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
};

class CRatingsControl
{
	__int64 _EditWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _OnEraseBackground(HWND__ *,HDC__ *);
	__int64 _OnKeyDown(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _OnPaint(HWND__ *,unsigned int,unsigned __int64,__int64);
	int ComputeMetricsTableIndex();
	int _GetStarsFromPoint(int,int);
	int _NeedToTrackMouse(HWND__ *);
	int _PointInControl(int,int);
	long _CreateEditWindow(HWND__ *,tagRECT const *);
	long _ReloadImages();
	long _SetStars(RatingValue const &);
	static __int64 s_EditWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CRatingsControl();
	void _Draw(HDC__ *,RatingValue const &,tagRECT const *,int);
	void _DrawEditStars(HDC__ *,RatingValue const &,tagRECT const *,int);
	void _DrawRestStars(HDC__ *,RatingValue const &,tagRECT const *,int);
	void _EnsureCheckMouseTrackingTimer(HWND__ *);
	void _KeyDownSetStars(int);
	void _OnLButtonUp(HWND__ *,int,int,unsigned int);
	void _OnMouseMove(HWND__ *,int,int,unsigned int);
	void _SetDesiredState(int,int);
	void _SetDrawIncr(long *,long *,tagRECT const *,HDC__ *);
	void _SetVisibleStars(RatingValue const &);
public:
	CRatingsControl();
	virtual HWND__ * v_GetWindow();
	virtual long AdjustWindowRectPCB(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long Create(HWND__ *,tagRECT const *,tagRECT const *,int);
	virtual long Destroy();
	virtual long GetDisplayText(unsigned short * *);
	virtual long GetDrawFlags(int *);
	virtual long GetFlags(int *);
	virtual long GetFormatFlags(PROPDESC_FORMAT_FLAGS *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetSize(PROPCTL_RECT_TYPE,HDC__ *,tagSIZE const *,tagSIZE *);
	virtual long GetState(int *);
	virtual long GetTooltipInfo(HDC__ *,tagSIZE const *,int *);
	virtual long GetValue(_GUID const &,void * *);
	virtual long HasFocusIO();
	virtual long HasVisibleContent();
	virtual long Initialize(IUnknown *,tagPROPDESC_CONTROL_TYPE);
	virtual long InvokeDefaultAction();
	virtual long IsModified(int *);
	virtual long OnDPIChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFlags(int,int);
	virtual long SetFont(HFONT__ *);
	virtual long SetFormatFlags(PROPDESC_FORMAT_FLAGS);
	virtual long SetModified(int);
	virtual long SetPosition(tagRECT const *,tagRECT const *);
	virtual long SetSite(IUnknown *);
	virtual long SetTextColor(unsigned long);
	virtual long SetValue(IUnknown *);
	virtual long SetWindowTheme(unsigned short const *,unsigned short const *);
	virtual long SetWindowlessParentWindow(HWND__ *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual long ValidationFailed(unsigned short const *);
	virtual long WindowlessDraw(HDC__ *,tagRECT const *,int);
	virtual long v_OnGetDescription(unsigned short * *);
	virtual long v_OnGetHelp(unsigned short * *);
	virtual long v_OnGetName(unsigned short * *);
	virtual long v_OnGetRole();
	virtual long v_OnGetValue(unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CReadingPaneCallback
{
	static long CreateInstance(HWND__ *,IPreviewHostCallback * *);
	virtual long OnError(NotifyError const *);
	virtual long OnLoad(long);
	virtual long OnShow(long);
	virtual long OnTranslateAccelerator(tagMSG const *,long *);
	virtual long OnUnload(long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CReadingPaneHostUpdateWorkItem
{
	long _Initialize(READINGPANEHOST_UPDATE_PARAMS const &);
public:
	static long CreateInstance(READINGPANEHOST_UPDATE_PARAMS const &,IFrameWorkItem * *);
	virtual long Dispatch();
	virtual long DoWork();
};

struct CReadingPaneModule
{
	CReadingPaneModule();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CReadingPaneModuleHost
{
	long _QueueUpdateWorkItem(READINGPANEHOST_UPDATE_PARAMS const &);
	static __int64 ModuleHostWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CReadingPaneModuleHost();
	void _UnloadCurrentPreviewer(IPropertyBag *);
protected:
	virtual HWND__ * CreateHWND(HWND__ *);
	virtual void OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *);
public:
	CReadingPaneModuleHost();
	HWND__ * QueryWindowFocusFromPreviewer();
	static DirectUI::IClassInfo * Class;
	static UID PreviewError;
	static long Create(unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	void NavigateAway();
	void Update(int);
};

class CReadingPaneModuleInner
{
protected:
	DirectUI::Element * _EnsureCoverPage(unsigned short const *);
	long _QueueUpdateWorkItem(READINGPANE_UPDATE_PARAMS const &);
	long _Update();
	virtual ~CReadingPaneModuleInner();
	void _CollectSqmData(IShellItem *);
	void _SQMReportStatusIfPreviewed();
	void _SetCoverSheetText(unsigned short const *);
	void _SetCurrentCLSID(_GUID const &);
	void _UpdateCoverSheets(CReadingPaneModuleInner::COVER_SHEET_STATE,unsigned short const *,long);
public:
	CReadingPaneModuleInner();
	long Load();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long HasFocusIO();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnActiveStateChanged(IBrowserWithActivationNotification *);
	virtual long OnContentsChanged();
	virtual long OnFolderChanged();
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnEvent(DirectUI::Event *);
};

struct CReadingPaneUpdateWorkItem
{
	static long CreateInstance(READINGPANE_UPDATE_PARAMS const &,IFrameWorkItem * *);
	virtual long Dispatch();
	virtual long DoWork();
};

class CRebuildSessionTask
{
protected:
	virtual ~CRebuildSessionTask();
public:
	virtual long InternalResumeRT();
};

class CRecentDocsContextMenu
{
protected:
	virtual ICIVERBTOIDMAP const * get_MappingArray();
	virtual long _OnInvokeCommand(unsigned int,_CMINVOKECOMMANDINFO *);
	virtual unsigned int get_MenuID();
};

struct CRecoveryTable
{
	static unsigned int ConvertGILtoRE(unsigned int);
	static unsigned int ConvertREtoGIL(unsigned int);
};

class CRecycleBinBase
{
protected:
	bool _ShouldCompact();
	int _CheckAndResetNeedToPurge();
	int _LoadVolumePolicyAndSettings();
	long _AddPurgeItem(unsigned short const *,IFileOperation *);
	long _CountItemsAndSpace(unsigned __int64 *,unsigned __int64 *);
	long _CreateRecycleBin();
	long _CreateRecycleItemPath(unsigned short const *,unsigned short *,unsigned __int64);
	long _Dispose();
	long _EnsureIDList();
	long _GetRecycleDataHandle(unsigned short const *,RecycleDataOpenFlags,void * *);
	long _GetRecycleDataPath(unsigned short const *,unsigned short *,unsigned __int64);
	long _GetShellItem(unsigned short const *,IShellItem * *);
	long _MakeRecycleItem(unsigned short const *,unsigned long,unsigned __int64,bool,IShellItem * *);
	long _PreRecycleItem(unsigned short const *,unsigned long,unsigned __int64,unsigned short *,unsigned __int64);
	long _ReadCompactData(_WIN32_FIND_DATAW const *,CompactData *);
	long _ReadRecycleData(unsigned short const *,RecycleDataV2 *);
	long _RemoveRecycleData(unsigned short const *);
	long _SaveSetting(unsigned long,unsigned short const *);
	long _ValidateRecycleBin();
	long _WillRecycle(unsigned short const *);
	long _WriteRecycleData(unsigned short const *,unsigned long,void const *,unsigned long);
	unsigned __int64 _GetDiskSize();
	unsigned long _LoadSetting(unsigned long,unsigned short const *);
	void _CheckAndRefreshSetting();
public:
	static long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long Compact();
	virtual long EnumItems(unsigned long,IEnumRecycleItems * *);
	virtual long FinishOperations(long);
	virtual long GetFileData(unsigned short const *,tagDELETEDITEM *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetItemCount(unsigned __int64 *);
	virtual long GetLocation(unsigned short *,unsigned long);
	virtual long GetMaxCapacity(unsigned __int64 *);
	virtual long GetMaxCapacityRange(unsigned __int64 *,unsigned __int64 *);
	virtual long GetPurgeOnDelete(int *);
	virtual long GetTypeID(tagRECYCLEBIN_TYPE *,unsigned short * *);
	virtual long GetUsedSpace(unsigned __int64 *);
	virtual long GetUsnSource(unsigned long *);
	virtual long Initialize(tagRECYCLEBIN_TYPE,unsigned short const *);
	virtual long IsEmpty();
	virtual long IsRecycled(unsigned short const *,int *);
	virtual long PauseTimer();
	virtual long PostCopyItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PostDeleteItem(unsigned long,IShellItem *,long,IShellItem *);
	virtual long PostMoveItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PostNewItem(unsigned long,IShellItem *,unsigned short const *,unsigned short const *,unsigned long,long,IShellItem *);
	virtual long PostRenameItem(unsigned long,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PreCopyItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *);
	virtual long PreDeleteItem(unsigned long,IShellItem *);
	virtual long PreMoveItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *);
	virtual long PreNewItem(unsigned long,IShellItem *,unsigned short const *);
	virtual long PreRenameItem(unsigned long,IShellItem *,unsigned short const *);
	virtual long PurgeAll(IFileOperation *);
	virtual long PurgeItems(unsigned short const *,IFileOperation *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RecycleItem(unsigned short const *,unsigned long,unsigned __int64,IShellItem * *);
	virtual long ResetTimer();
	virtual long RestoreItem(IShellItem *,IFileOperation *);
	virtual long RestoreItems(IShellItemArray *,IFileOperation *);
	virtual long ResumeTimer();
	virtual long SetMaxCapacity(unsigned __int64);
	virtual long SetPurgeOnDelete(int);
	virtual long SetUsnSource(unsigned long);
	virtual long StartOperations();
	virtual long SuspendUpdating(int);
	virtual long UpdateProgress(unsigned int,unsigned int);
	virtual long WillRecycle(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRecycleBinBaseEnum
{
	long NextCompactData(CompactData *,_WIN32_FIND_DATAW *);
	long NextItem(bool,_WIN32_FIND_DATAW *);
	long NextRecycleData(RecycleDataV2 *,_WIN32_FIND_DATAW *);
	long NextSizeData(unsigned __int64 *);
	virtual long Clone(IEnumRecycleItems * *);
	virtual long Next(unsigned long,tagDELETEDITEM *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	~CRecycleBinBaseEnum();
};

struct CRecycleBinCleaner
{
	virtual long Deactivate(unsigned long *);
	virtual long GetSpaceUsed(unsigned __int64 *,IEmptyVolumeCacheCallBack *);
	virtual long Initialize(HKEY__ *,unsigned short const *,unsigned short * *,unsigned short * *,unsigned long *);
	virtual long InitializeEx(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned long *);
	virtual long Purge(unsigned __int64,IEmptyVolumeCacheCallBack *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowProperties(HWND__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRecycleBinData
{
	CRecycleBinData(IRecycleBin *);
};

class CRecycleBinEnumMgr
{
	long _NextBin();
public:
	virtual long Clone(IEnumRecycleItems * *);
	virtual long Next(unsigned long,tagDELETEDITEM *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRecycleBinFinishOperation
{
	long AdviseFO(IFileOperation *);
	static long AddFinishOperation(IFileOperation *,IRecycleBinManager *);
	virtual long FinishOperations(long);
	virtual long PauseTimer();
	virtual long PostCopyItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PostDeleteItem(unsigned long,IShellItem *,long,IShellItem *);
	virtual long PostMoveItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PostNewItem(unsigned long,IShellItem *,unsigned short const *,unsigned short const *,unsigned long,long,IShellItem *);
	virtual long PostRenameItem(unsigned long,IShellItem *,unsigned short const *,long,IShellItem *);
	virtual long PreCopyItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *);
	virtual long PreDeleteItem(unsigned long,IShellItem *);
	virtual long PreMoveItem(unsigned long,IShellItem *,IShellItem *,unsigned short const *);
	virtual long PreNewItem(unsigned long,IShellItem *,unsigned short const *);
	virtual long PreRenameItem(unsigned long,IShellItem *,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResetTimer();
	virtual long ResumeTimer();
	virtual long StartOperations();
	virtual long UpdateProgress(unsigned int,unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRecycleBinManager
{
	long _AddRecycleBin(tagRECYCLEBIN_TYPE,unsigned short const *,IRecycleBin * *);
	long _CacheRecentQueryDetails(unsigned short const *,unsigned short const *,tagRECYCLEBIN_TYPE);
	long _CheckRegLastEnum(IRecycleBin *);
	long _CreateRecycleBin(tagRECYCLEBIN_TYPE,unsigned short const *,IRecycleBin * *);
	long _DiscoverRecycleBin(unsigned short const *,IRecycleBin * *);
	long _EnsureKnownFolderRBs();
	long _EnsureVolumeRootRBs();
	long _FindRecycleBin(tagRECYCLEBIN_TYPE,unsigned short const *,IRecycleBin * *,__int64 *);
	long _FindRecycleBinByLocation(unsigned short const *,IRecycleBin * *,__int64 *);
	long _GetRegLastEnum(HKEY__ *,CDSA<RecycleBinEntry> *,unsigned short * *);
	long _Initialize();
	long _InitializeAllBins();
	long _UpdateRecycleBin(int);
	long _UpdateRegLastEnum(HKEY__ *);
	long _ValidateRecycleBin(CDSA<RecycleBinEntry> *,IRecycleBin *);
	long _ValidateRegLastEnum(HKEY__ *,IRecycleBin *);
	static long volatile _compactionState;
	static unsigned long _CompactAndPurgeThread(void *);
	virtual ~CRecycleBinManager();
public:
	virtual long Compact();
	virtual long DelayCompaction(int);
	virtual long EnumItems(unsigned long,IEnumRecycleItems * *);
	virtual long GetFileData(unsigned short const *,tagDELETEDITEM *);
	virtual long GetItemCount(unsigned __int64 *);
	virtual long GetRecycleBin(unsigned short const *,_GUID const &,void * *);
	virtual long GetRecycleBinAt(long,_GUID const &,void * *);
	virtual long GetRecycleBinCount(long *);
	virtual long GetUsedSpace(unsigned __int64 *);
	virtual long GetUsnSource(unsigned long *);
	virtual long IsEmpty();
	virtual long IsRecycled(unsigned short const *,int *);
	virtual long PurgeAll(IFileOperation *);
	virtual long PurgeItems(unsigned short const *,IFileOperation *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RecycleItem(unsigned short const *,unsigned long,unsigned __int64,IShellItem * *);
	virtual long Refresh();
	virtual long RestoreItem(IShellItem *,IFileOperation *);
	virtual long RestoreItems(IShellItemArray *,IFileOperation *);
	virtual long SetUsnSource(unsigned long);
	virtual long SuspendUpdating(int);
	virtual long WillRecycle(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedCriticalSection
{
	virtual long EnterCriticalSection();
	virtual long LeaveCriticalSection();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedDPA<CDPAItemIdList<_ITEMIDLIST_ABSOLUTE> >
{
	static long s_CreateInstance(unsigned long,CRefCountedDPA<CDPAItemIdList<_ITEMIDLIST_ABSOLUTE> > * *);
	unsigned long Release();
};

struct CRefCountedObject<CAutoHandle<void *> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CCoTaskMemPtr<_ITEMIDLIST_ABSOLUTE> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CLocalSimpleArray<TranslateResetEvent,4294967294> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CMarshalInterfaceOnce<IShellItem> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CMarshalInterfaceOnce<IUnknown> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefHandle<HBITMAP__ *,CAutoHandle<HBITMAP__ *> >
{
	static long CreateInstanceWithHandle(HBITMAP__ *,IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefHandle<void *,CTSmartObj<void *,CAutoHandle_HGLOBALPolicy> >
{
	static long CreateInstanceWithHandle(void *,IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CReferenceCounted
{
	void Release();
};

class CRefreshSyncStateVerb
{
protected:
	virtual bool v_EnableCommand(IShellItemArray *,bool);
public:
	virtual long Execute();
};

class CRegSupport
{
protected:
	HKEY__ * _GetSubKey(unsigned short const *,int,unsigned long);
	static HKEY__ * _RegCreateKeyExHelper(HKEY__ *,unsigned short const *,unsigned long,unsigned long);
	static HKEY__ * _RegOpenKeyExHelper(HKEY__ *,unsigned short const *,unsigned long);
	virtual HKEY__ * _GetRootKey(int);
	virtual int _GetGeneric(unsigned short const *,unsigned short const *,unsigned char *,unsigned long *);
	virtual int _InitSetRoot(unsigned short const *,unsigned short const *);
	virtual int _SetGeneric(unsigned short const *,unsigned short const *,unsigned char const *,unsigned long,unsigned long,unsigned long);
	virtual unsigned short const * _GetRoot(unsigned short *,unsigned long);
	virtual void _CloseRegSubKey(HKEY__ *);
public:
	int RSSetTextValue(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long);
	virtual HKEY__ * RSDuplicateRootKey();
	virtual HKEY__ * RSDuplicateSubKey(unsigned short const *,int,int);
	virtual int RSDeleteKey();
	virtual int RSDeleteSubKey(unsigned short const *);
	virtual int RSDeleteValue(unsigned short const *,unsigned short const *);
	virtual int RSSubKeyExist(unsigned short const *);
	virtual int RSValueExist(unsigned short const *,unsigned short const *);
};

class CRegSupportBuf
{
protected:
	virtual int _InitSetRoot(unsigned short const *,unsigned short const *);
	virtual unsigned short const * _GetRoot(unsigned short *,unsigned long);
};

struct CRegTreeItemBase
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRegTreeOptions
{
protected:
	int LoadDefaultIconImage(unsigned short const *);
	int LoadDefaultIconImageFromRegKey(void *);
	int _RegIsRestricted(void *);
	int _WalkTreeRecursive(_TREEITEM *,tagWALK_TREE_CMD);
	long _GetCheckStatus(void *,int *,int);
	long _GetSetByCLSID(_GUID const &,int *,int);
	long _GetSetByRegKey(void *,unsigned long *,unsigned char *,unsigned long *,REG_CMD);
	long _RegGetSetSetting(void *,unsigned long *,unsigned char *,unsigned long *,REG_CMD);
	long _SaveCheckStatus(void *,int);
	static __int64 s_TreeViewSubclassWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	void CreateStandardImageList();
	void OnDPIChanged();
	void _RegEnumTree(void *,_TREEITEM *,_TREEITEM *);
public:
	virtual long InitTree(HWND__ *,HKEY__ *,char const *,char const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetEventListener(IRegTreeOptionsEventListener *);
	virtual long ShowHelp(_TREEITEM *,unsigned long);
	virtual long ToggleItem(_TREEITEM *);
	virtual long WalkTree(tagWALK_TREE_CMD);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRegisteredClient
{
	long _GetDataSnapshot(_GUID const &,void * *);
protected:
	virtual int v_CheckUpdatingSelf();
	virtual int v_ForceWaitForCallbacks();
	virtual int v_IsOutgoingQueueFull();
	virtual int v_WantsEvent(long);
	virtual void v_SendNotification(CNotifyEvent const *,int,void (*)(HWND__ *,unsigned int,unsigned __int64,__int64));
public:
	virtual int Deregister();
	virtual int IsDead();
};

class CRegistryChangeListener
{
	long _RestoreChangeCallback();
	static void s_CleanupCB(_TP_CALLBACK_INSTANCE *,void *,_TP_WORK *);
	static void s_RegistryChangeCB(_TP_CALLBACK_INSTANCE *,void *,_TP_WAIT *,long);
	void _CleanupCB();
public:
	long _Initialize(HKEY__ *,unsigned short const *,REGISTRY_LISTENER_FLAGS,void (*)(void *),void *);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long Shutdown();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRegistryVerbArray
{
	int _AppendItem(HKEY__ *,REGISTRY_VERB_ITEM *);
	static int _ReleaseItem(REGISTRY_VERB_ITEM *,void *);
	void _AddEnumKeys(HKEY__ *,HKEY__ *);
	void _AddOrderedKeys(HKEY__ *,HKEY__ *,unsigned short const *);
public:
	int HasDefault(HKEY__ *);
	long GetRegistryVerbs(unsigned int,IUnknown *,IAssociationElement *,HKEY__ *,unsigned short const *);
	long GetValue(int,unsigned short const *,unsigned short const *,unsigned long *,void *,unsigned long *);
	unsigned int AddKeys(HKEY__ *,unsigned short const *);
	void SetSite(IUnknown *);
	void SetSubMenu(int,unsigned int,IEnumExplorerCommand *,HMENU__ *);
};

class CRegistryVerbsContextMenu
{
	ACTIVATION_MODEL _GetHandlerActivationModel(unsigned int);
	int _AreSelectionCommandsUniform(unsigned int,unsigned long);
	int _GetMenuString(unsigned int,unsigned int,unsigned short *,unsigned int);
	int _IsAsyncStateHandler(unsigned int);
	int _IsDefaultVerb(unsigned int);
	int _IsRestricted(unsigned int);
	int _IsValuePresent(unsigned int,unsigned short const *);
	int _IsVisible(int,unsigned int);
	int _ShouldRemoveVerb(unsigned int);
	int _SupportsSelectionMode(unsigned int);
	int _SupportsType(unsigned int);
	long _AddFirstItemToCommandArray(unsigned int,CMenuMatchCommand *);
	long _CompareItemToCommandArray(unsigned int,unsigned int,CMenuMatchCommand *);
	long _EnsureAssocObject();
	long _EnsureSubMenuHandler(int);
	long _EnsureTaskScheduler();
	long _EnsureVerbs(unsigned int);
	long _Execute(_CMINVOKECOMMANDINFOEX *,unsigned int);
	long _GetAppSource(unsigned short const *,IQuerySource * *);
	long _GetAssocObject(IAssociationElement * *);
	long _GetCommandStringFromSubMenu(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	long _GetHelpText(unsigned int,unsigned int,char *,unsigned int);
	long _GetIcon(unsigned int,unsigned short *,unsigned int);
	long _GetItem(unsigned int,_GUID const &,void * *);
	long _GetShellItemArray(IShellItemArray * *);
	long _GetTypeOfItem(unsigned int,unsigned short *,unsigned int);
	long _InitMenuPopup(HMENU__ *);
	long _InvokeCommandFromSubMenu(_CMINVOKECOMMANDINFOEX *);
	long _MapVerbForInvoke(_CMINVOKECOMMANDINFOEX *,unsigned int *);
	long _StartGetStateTask(HMENU__ *,unsigned int,unsigned int);
	unsigned int _FindIndex(unsigned short const *);
	unsigned int _VerbCount();
	unsigned long _GetItemCount();
	unsigned short const * _GetVerb(unsigned int);
	virtual ~CRegistryVerbsContextMenu();
	void _AddToRecentDocs(unsigned int);
	void _Cleanup();
public:
	CRegistryVerbsContextMenu(long (*)(IDataObject *,int (*)(_PSP *,__int64),__int64));
	long GetVerbAssocObject(unsigned short const *,ASSOCQUERY,_GUID const &,void * *);
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long ContextSensitiveHelp(int);
	virtual long GetAssocElement(_GUID const &,void * *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetWindow(HWND__ * *);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long OnCreating(ICreateProcessInputs *);
	virtual long OnCreatingError(long,ICreateProcessInputs *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual long SetAssocElement(IAssociationElement *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRelatedItem
{
	static long s_CreateInstance(IShellItem *,_GUID const &,void * *);
	virtual long GetItem(IShellItem * *);
	virtual long GetItemIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRemoveLocationTask
{
	static unsigned long s_RemoveLocation(void *);
};

struct CRemoveMediaServerCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Initialize(unsigned short const *,IPropertyBag *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRemovePropertiesDropTarget
{
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRenameDialog
{
	__int64 _DlgProc(unsigned int,unsigned __int64,__int64);
	static __int64 s_DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

struct CResetEASPolicyVisibilityCondition
{
	virtual long Evaluate(INamedPropertyStore *,int *);
};

struct CResolutionSpecificMemoryCachedImage
{
	bool IsCacheValid(int,int,DESKTOP_WALLPAPER_POSITION);
};

struct CRestoreFavoriteLinksExecute
{
	virtual long Execute();
};

class CRestoreLibrariesExecute
{
	static unsigned long s_RestoreLibraries(void *);
	static void s_RestoreKnownLibrary(_GUID const &,IKnownFolder *,unsigned short const *,unsigned short const *);
public:
	virtual long Execute();
};

class CResultsFolder
{
	CResultsFolder(IUnknown *);
	int _MapColIndex(unsigned int *);
	long _AddDataToIDList(_ITEMID_CHILD const *,int,_ITEMID_CHILD * *);
	long _AddFolder(_ITEMIDLIST_ABSOLUTE const *,unsigned long *,IShellFolder *);
	long _GetDetailsFolder();
	long _InterfaceFromRFI(RESULT_FOLDER_ITEM *,_GUID const &,void * *);
	long _UnwrapItemAndAdd(IShellFolder *,_ITEMID_CHILD const *,_ITEMID_CHILD * *);
	static long _FolderIDListFromIDList(_ITEMID_CHILD const *,_ITEMIDLIST_ABSOLUTE const * *);
	static unsigned int _GetFolderIndex(_ITEMID_CHILD const *);
	static unsigned int _GetPidlVersion(_ITEMID_CHILD const *);
	virtual long v_InternalQueryInterface(_GUID const &,void * *);
	virtual ~CResultsFolder();
	void _RemoveFolders();
public:
	static long s_CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long AddFolder(_ITEMIDLIST_ABSOLUTE const *,unsigned long *);
	virtual long AddFolderItem(_ITEMID_CHILD const *,unsigned long,_ITEMID_CHILD * *);
	virtual long AddIDList(_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD * *);
	virtual long AddItem(IShellItem *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateNewIDList(unsigned short const *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD * *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long FindFolder(_ITEMIDLIST_ABSOLUTE const *,unsigned long *);
	virtual long FindItem(_ITEMID_CHILD const *,unsigned long,int *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetFolder(unsigned long,_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetFolderCount(unsigned int *);
	virtual long GetFolderFromItem(_ITEMID_CHILD const *,_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetFolderType(_GUID *);
	virtual long GetIconOf(_ITEMID_CHILD const *,unsigned int,int *);
	virtual long GetItem(int,_ITEMID_CHILD * *,unsigned long *);
	virtual long GetItemCount(unsigned int *);
	virtual long GetOverlayIconIndex(_ITEMID_CHILD const *,int *);
	virtual long GetOverlayIndex(_ITEMID_CHILD const *,int *);
	virtual long GetPropertiesToApply(IPropertyStore *,_GUID const &,void * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long InitNew();
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long IsTypeSupported(unsigned short const *);
	virtual long Load(IPropertyBag *,IErrorLog *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long MoveItem(_ITEMID_CHILD const *,int);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryFolderInterface(unsigned long,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryItemFolderInterface(_ITEMID_CHILD const *,_GUID const &,void * *);
	virtual long RemoveAll();
	virtual long RemoveFolderItem(_ITEMID_CHILD const *,unsigned long);
	virtual long RemoveIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long RemoveItem(IShellItem *);
	virtual long Save(IPropertyBag *,int,int);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual long UpdateFolderItem(_ITEMID_CHILD const *,unsigned long,_ITEMID_CHILD const *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CResultsFolderViewCB
{
	long OnGETWORKINGDIR(unsigned long,unsigned int,unsigned short *);
	long OnMergeMenu(unsigned long,_QCMINFO *);
public:
	CResultsFolderViewCB(CResultsFolder *,_ITEMIDLIST_ABSOLUTE const *);
	long OpenContainingFolder();
	static long OnOpenContainingFolder(IUnknown *,IShellItemArray *,IBindCtx *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

struct CResultsMenuCB
{
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CResultsMenuWrap
{
	CResultsMenuWrap(IDataObject *,IContextMenu *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
};

class CResultsTaskBase
{
protected:
	CResultsTaskBase();
	long _Initialize(unsigned short const *,unsigned short const *,IQueryWithLinguisticAlternatives *,ITypeAheadProviderEventSink *,unsigned int);
	virtual ~CResultsTaskBase();
};

class CRibbonDeleteCommand
{
	long _CanDelete(IShellItemArray *);
	long _CanRecycle(IShellItemArray *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRichPreviewBackgroundThreadData
{
	int _InitializeWithStream(IShellItem *,IInitializeWithStream *,unsigned long);
	long _InitializeMessageWindow();
	long _InitializePreviewer(IShellItem *,unsigned long);
	long _InitializePreviewerWindow();
	long _ResetProcessingEvent(unsigned short const *);
	long _SetProcessingEvent(unsigned short const *);
	long _UnloadNow();
	static __int64 s_BGWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _CleanupTempFile();
	void _DoLoadFile(IStream *,unsigned long);
	void _DoQueryFocus(CQueryFocusParams *);
	void _DoShowFile();
	void _DoWindowResized();
	void _NotifyError(long);
	void _SetupOplock(IShellItem *);
	~CRichPreviewBackgroundThreadData();
public:
	static long CreateInstance(CRichPreviewThreadParams *,CRichPreviewBackgroundThreadData * *);
	static unsigned long s_SyncThreadProc(void *);
	static unsigned long s_ThreadProc(void *);
	virtual long GetBrowseContext(IHlinkBrowseContext * *);
	virtual long GetWindowContext(PREVIEWHANDLERFRAMEINFO *);
	virtual long Navigate(unsigned long,IBindCtx *,IBindStatusCallback *,IHlink *);
	virtual long OnNavigate(unsigned long,IMoniker *,unsigned short const *,unsigned short const *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetBrowseContext(IHlinkBrowseContext *);
	virtual long TranslateAcceleratorW(tagMSG *);
	virtual long UpdateHlink(unsigned long,IMoniker *,unsigned short const *,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRichPreviewThreadData
{
	long _PostMessageToBGThread(unsigned int,unsigned __int64,__int64);
public:
	long PostLoadFileMessageToBGThread(IShellItem *,unsigned long);
	static long CreateInstance(HINSTANCE__ *,HWND__ *,_GUID const &,EXTCOCREATEFLAGS,HWND__ *,CRichPreviewThreadData * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRichPreviewThreadParams
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRichTypeAheadResult
{
	CRichTypeAheadResult();
	long _InitFromItem(SEARCH_TYPEAHEAD_ITEM const *,SEARCH_TYPEAHEAD_SUGGESTION_SOURCE);
public:
	static long s_CreateInstance(ITextTypeAheadResult *,_GUID const &,void * *);
	static long s_CreateInstance(SEARCH_TYPEAHEAD_ITEM const *,SEARCH_TYPEAHEAD_SUGGESTION_SOURCE,_GUID const &,void * *);
	virtual long GetDetailText(unsigned short * *);
	virtual long GetImageAlternateText(unsigned short * *);
	virtual long GetImageSource(_GUID const &,void * *);
	virtual long GetItemImageId(unsigned __int64 *);
	virtual long GetQueryString(unsigned short * *);
	virtual long GetShellItem(_GUID const &,void * *);
	virtual long GetTag(unsigned short * *);
	virtual long GetText(unsigned short * *);
	virtual long GetType(SEARCH_TYPEAHEAD_ITEM_TYPE *);
	virtual long GetTypeAheadSuggestionSource(SEARCH_TYPEAHEAD_SUGGESTION_SOURCE *);
	virtual long IsResultItem(int *);
	virtual long IsSeparator(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRunAsNewUser
{
	static long s_BuildRundll32Commandline(unsigned short const *,unsigned short const *,unsigned short * *);
	static long s_PromptForCreds(long,unsigned short const *,void * *,unsigned long *);
	static long s_ShareMemory(unsigned short const *,void const *,unsigned long,void * *);
	static long s_ShellExecuteWithCreds(void *,unsigned short const *,void *,unsigned long);
	static long s_UnpackCredsFromBuffer(void *,unsigned long,CSizeCountSecureStringResult *,CSizeCountSecureStringResult *,CSizeCountSecureStringResult *);
	static unsigned long s_RunAsThreadProc(void *);
public:
	virtual long Execute();
};

class CRunDlg
{
	int OKPushed();
	void BrowsePushed();
	void DestroyThemeData();
	void DrawBackground(HWND__ *,HDC__ *);
	void ExitRunDlg(int);
	void InitRunDlg(HWND__ *);
	void InitRunDlg2(HWND__ *);
	void InitThemeData(HWND__ *);
public:
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRunnableTask
{
protected:
	virtual ~CRunnableTask();
public:
	long ShouldContinue();
	virtual bool IsKeyboardNeededAndGlobalInputSwitchingOnThread();
	virtual long GetCancelEvent(void * *);
	virtual long InternalResumeRT();
	virtual long Kill(int);
	virtual long KillRT(int);
	virtual long QueryContinue();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long Resume();
	virtual long ResumeRT();
	virtual long Run();
	virtual long RunInitRT();
	virtual long Suspend();
	virtual long SuspendRT();
	virtual long TestTask();
	virtual unsigned long AddRef();
	virtual unsigned long IsRunning();
	virtual unsigned long Release();
	virtual void ActivateOriginalKeyboardLayout(HKL__ * *);
	virtual void ResetKeyboardLayout(HKL__ *);
};

class CRunnableTaskWithActivatableKeyboard
{
protected:
	CRunnableTaskWithActivatableKeyboard(RUN_TASK_FLAGS);
public:
	virtual bool IsKeyboardNeededAndGlobalInputSwitchingOnThread();
	virtual void ActivateOriginalKeyboardLayout(HKL__ * *);
	virtual void ResetKeyboardLayout(HKL__ *);
};

struct CRunningTime
{
	void Stop();
};

struct CSEIThunkA
{
	int Thunk(_SHELLEXECUTEINFOW const *);
};

struct CSEIThunkW
{
	int Thunk(_SHELLEXECUTEINFOA const *);
	~CSEIThunkW();
};

class CSFStorage
{
	long _BindByName(unsigned short const *,IBindCtx *,unsigned long,_GUID const &,void * *);
	long _CreateHelper(unsigned short const *,unsigned long,_GUID const &,void * *);
	long _ParseAndVerify(unsigned short const *,IBindCtx *,_ITEMID_CHILD * *);
public:
	virtual long Commit(unsigned long);
	virtual long CopyTo(unsigned long,_GUID const *,unsigned short * *,IStorage *);
	virtual long CreateStorage(unsigned short const *,unsigned long,unsigned long,unsigned long,IStorage * *);
	virtual long CreateStream(unsigned short const *,unsigned long,unsigned long,unsigned long,IStream * *);
	virtual long DestroyElement(unsigned short const *);
	virtual long EnumElements(unsigned long,void *,unsigned long,IEnumSTATSTG * *);
	virtual long MoveElementTo(unsigned short const *,IStorage *,unsigned short const *,unsigned long);
	virtual long OpenStorage(unsigned short const *,IStorage *,unsigned long,unsigned short * *,unsigned long,IStorage * *);
	virtual long OpenStream(unsigned short const *,void *,unsigned long,unsigned long,IStream * *);
	virtual long RenameElement(unsigned short const *,unsigned short const *);
	virtual long Revert();
	virtual long SetClass(_GUID const &);
	virtual long SetElementTimes(unsigned short const *,_FILETIME const *,_FILETIME const *,_FILETIME const *);
	virtual long SetStateBits(unsigned long,unsigned long);
	virtual long Stat(tagSTATSTG *,unsigned long);
};

class CSFStorageEnum
{
	long _PidlToSTATSTG(_ITEMID_CHILD const *,tagSTATSTG *);
public:
	virtual long Clone(IEnumSTATSTG * *);
	virtual long Next(unsigned long,tagSTATSTG *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSFToolbar
{
protected:
	CSFToolbar();
	IBDATA * _IDToPibData(unsigned int,int *);
	_ITEMID_CHILD * _IDToPidl(unsigned int,int *);
	__int64 InlineDeleteButton(int);
	__int64 _DoContextMenu(IContextMenu *,tagPOINT const *,int,tagRECT const *);
	int _GetCommandID();
	int _IsChildID(_ITEMIDLIST_ABSOLUTE const *,int);
	int _UpdateShowText(int);
	long _GetButtonFromPidl(_ITEMID_CHILD const *,TBBUTTONINFOW *,int *,_ITEMID_CHILD const * *);
	long _GetTopBrowserWindow(HWND__ * *);
	long _HandleSpecialCommand(IContextMenu *,tagPOINT const *,int,int);
	long _OnFSNotify(_ITEMIDLIST_ABSOLUTE const *,long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,__int64);
	long _OnRename(tagPOINT const *,int);
	static void s_NewItem(void *,_ITEMID_CHILD const *);
	unsigned int _IndexToID(int);
	virtual HMENU__ * _GetContextMenu();
	virtual HMENU__ * _GetContextMenu(IContextMenu *,int,int *);
	virtual HWND__ * CreateWorkerWindow();
	virtual HWND__ * GetHWNDForUIObject();
	virtual HWND__ * _CreatePager(HWND__ *);
	virtual IBDATA * _AddOrderItemTB(ORDERITEM *,int,_TBBUTTON *);
	virtual IBDATA * _CreateItemData(ORDERITEM *);
	virtual __int64 _DefWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual __int64 _OnCommand(unsigned __int64,__int64);
	virtual __int64 _OnContextMenu(unsigned __int64,__int64);
	virtual __int64 _OnCustomDraw(tagNMCUSTOMDRAWINFO *);
	virtual __int64 _OnHotItemChange(tagNMTBHOTITEM *);
	virtual __int64 _OnNotify(tagNMHDR *);
	virtual __int64 _OnTimer(unsigned __int64);
	virtual int _AddPidl(_ITEMID_CHILD *,unsigned long,int);
	virtual int _AllowDropOnTitle();
	virtual int _DefaultInsertIndex();
	virtual int _FilterPidl(_ITEMID_CHILD const *);
	virtual int _GetBitmap(int,IBDATA *,int);
	virtual int _IsQuickLaunchBand();
	virtual int _UpdateIconSize(unsigned int,int);
	virtual int v_DPAIndexToTBIndex(int);
	virtual int v_TBIndexToDPAIndex(int);
	virtual long _AfterLoad();
	virtual long _CreateToolbar(HWND__ *);
	virtual long _GetIEnumIDList(unsigned long,IEnumIDList * *);
	virtual long _LoadOrderStream();
	virtual long _OnChange(_ITEMIDLIST_ABSOLUTE const *,long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,__int64);
	virtual long _SaveOrderStream();
	virtual long _TBStyleForPidl(_ITEMID_CHILD const *,unsigned long *,unsigned long *,unsigned long *,int *);
	virtual long v_GetBKContextMenu(IContextMenu * *);
	virtual long v_GetContextMenuModifier(IContextMenu * *,_ITEMID_CHILD const *);
	virtual long v_OnOpen(int,int);
	virtual void _Dropped(int,int);
	virtual void _EnumDone(_DPA *,_DPA *);
	virtual void _FillDPA(unsigned long);
	virtual void _FillToolbar();
	virtual void _NotifyBulkOperation(int);
	virtual void _ObtainPIDLName(_ITEMID_CHILD const *,unsigned short *,int);
	virtual void _OnDefaultContextCommand(int);
	virtual void _OnDragBegin(int,unsigned long);
	virtual void _OnFSNotifyAdd(_ITEMID_CHILD const *,unsigned long,int);
	virtual void _OnFSNotifyRemove(_ITEMID_CHILD const *,unsigned long);
	virtual void _OnFSNotifyRename(_ITEMID_CHILD const *,_ITEMID_CHILD const *);
	virtual void _OnFSNotifyUpdate(_ITEMID_CHILD const *);
	virtual void _OnToolTipsCreated(tagNMTOOLTIPSCREATED *);
	virtual void _SetDirty(int);
	virtual void _SetToolbarState();
	virtual void _ToolbarChanged();
	virtual void v_CalcWidth(int *,int *);
	virtual void v_NewItem(_ITEMID_CHILD const *);
	virtual ~CSFToolbar();
	void _FilterAndMergeDPA(_DPA *,_DPA *);
	void _OnGetDispInfo(tagNMHDR *,int);
	void _Refresh();
	void _RefreshIcons();
	void _RegisterChangeNotify();
	void _RegisterToolbar();
	void _RememberOrder();
	void _SortDPA(_DPA *);
	void _UnregisterToolbar();
	void _UpdateButtons();
public:
	virtual long GetBandInfoSFB(BANDINFOSFB *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetObjectDDT(unsigned __int64,_GUID const &,void * *);
	virtual long GetWindowsDDT(HWND__ * *,HWND__ * *);
	virtual long HitTestDDT(unsigned int,tagPOINT *,unsigned __int64 *,unsigned long *);
	virtual long InitializeSFB(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long IsWindowOwner(HWND__ *);
	virtual long OnChange(long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long OnDropDDT(IDropTarget *,IDataObject *,unsigned long *,_POINTL,unsigned long *);
	virtual long OnQIUpdateEnumDone(MN_BKGDENUMDONEDATA *);
	virtual long OnWinEvent(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetBandInfoSFB(BANDINFOSFB *);
	virtual long SetShellFolder(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *);
	virtual void EmptyToolbar();
};

class CSHAccessibleBase
{
	long _EnsureTypeInfo();
	static long s_accLoadTypeInfo(ITypeInfo * *);
protected:
	long _ValidateAccChild(tagVARIANT *);
	virtual long _GetChildCount();
	virtual long v_OnGetDescription(unsigned short * *);
	virtual long v_OnGetHelp(unsigned short * *);
	virtual long v_OnGetName(unsigned short * *);
	virtual long v_OnGetRole();
	virtual long v_OnGetValue(unsigned short * *);
public:
	virtual long Clone(IEnumVARIANT * *);
	virtual long ContextSensitiveHelp(int);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long GetWindow(HWND__ * *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long Next(unsigned long,tagVARIANT *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual long accDoDefaultAction(tagVARIANT);
	virtual long accHitTest(long,long,tagVARIANT *);
	virtual long accLocation(long *,long *,long *,long *,tagVARIANT);
	virtual long accNavigate(long,tagVARIANT,tagVARIANT *);
	virtual long accSelect(long,tagVARIANT);
	virtual long get_accChild(tagVARIANT,IDispatch * *);
	virtual long get_accChildCount(long *);
	virtual long get_accDefaultAction(tagVARIANT,unsigned short * *);
	virtual long get_accDescription(tagVARIANT,unsigned short * *);
	virtual long get_accFocus(tagVARIANT *);
	virtual long get_accHelp(tagVARIANT,unsigned short * *);
	virtual long get_accHelpTopic(unsigned short * *,tagVARIANT,long *);
	virtual long get_accKeyboardShortcut(tagVARIANT,unsigned short * *);
	virtual long get_accName(tagVARIANT,unsigned short * *);
	virtual long get_accParent(IDispatch * *);
	virtual long get_accRole(tagVARIANT,tagVARIANT *);
	virtual long get_accSelection(tagVARIANT *);
	virtual long get_accState(tagVARIANT,tagVARIANT *);
	virtual long get_accValue(tagVARIANT,unsigned short * *);
	virtual long put_accName(tagVARIANT,unsigned short *);
	virtual long put_accValue(tagVARIANT,unsigned short *);
	virtual ~CSHAccessibleBase();
};

struct CSHAccessibleHWNDBase
{
	virtual long accHitTest(long,long,tagVARIANT *);
	virtual long accLocation(long *,long *,long *,long *,tagVARIANT);
	virtual long accSelect(long,tagVARIANT);
	virtual long get_accFocus(tagVARIANT *);
	virtual long get_accParent(IDispatch * *);
	virtual long get_accSelection(tagVARIANT *);
	virtual long get_accState(tagVARIANT,tagVARIANT *);
	virtual ~CSHAccessibleHWNDBase();
};

class CSHEnumClassesOfCategories
{
protected:
	long Initialize(unsigned long,_GUID const *,unsigned long,_GUID const *);
	virtual ~CSHEnumClassesOfCategories();
public:
	virtual long Clone(IEnumGUID * *);
	virtual long Next(unsigned long,_GUID *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSRWLockResourceGuardBase
{
	long ExecuteReader<<lambda_067e68c1130a10caa8ca52dced96fad9> >(<lambda_067e68c1130a10caa8ca52dced96fad9> const &);
	long ExecuteReader<<lambda_161ab0e9b9551191177b54e8991c7ba4> >(<lambda_161ab0e9b9551191177b54e8991c7ba4> const &);
	long ExecuteReader<<lambda_329ca76b50f5f2fb9f47fa3957cd83f1> >(<lambda_329ca76b50f5f2fb9f47fa3957cd83f1> const &);
	long ExecuteReader<<lambda_492bae7aeca49ee9d75097bb776fbe1a> >(<lambda_492bae7aeca49ee9d75097bb776fbe1a> const &);
	long ExecuteReader<<lambda_4acdba48eb68da5bd9e931d4c6f985f4> >(<lambda_4acdba48eb68da5bd9e931d4c6f985f4> const &);
	long ExecuteReader<<lambda_53de25f24af7d6627a9120613fa6995f> >(<lambda_53de25f24af7d6627a9120613fa6995f> const &);
	long ExecuteReader<<lambda_55dd35247359f778cf6aad0ce20c5cf3> >(<lambda_55dd35247359f778cf6aad0ce20c5cf3> const &);
	long ExecuteReader<<lambda_688b43688df8425839e10b3ee2d21b1a> >(<lambda_688b43688df8425839e10b3ee2d21b1a> const &);
	long ExecuteReader<<lambda_7b3670be84177b2efc7c4c674643e160> >(<lambda_7b3670be84177b2efc7c4c674643e160> const &);
	long ExecuteReader<<lambda_ad9d6f45881b9e547a715b269a86dfe1> >(<lambda_ad9d6f45881b9e547a715b269a86dfe1> const &);
	long ExecuteReader<<lambda_dbd89c04957e137c153eedaddd0723a1> >(<lambda_dbd89c04957e137c153eedaddd0723a1> const &);
	long ExecuteReader<<lambda_e4849b5aaf79f19b3704c3d2f77748ad> >(<lambda_e4849b5aaf79f19b3704c3d2f77748ad> const &);
	long ExecuteReader<<lambda_f00224ef3914b3353172bfaea8d6f963> >(<lambda_f00224ef3914b3353172bfaea8d6f963> const &);
	long ExecuteReader<<lambda_fcdaeafb25618315df29abd738a9aed9> >(<lambda_fcdaeafb25618315df29abd738a9aed9> const &);
};

struct CSafeElementListenerCB
{
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
};

class CSafeElementProxy
{
	struct InvokeHelper<<lambda_42bbaa9e10778c0345acee950b86e7fe> >
	{
		virtual void DoInvoke();
	};

	struct InvokeHelper<<lambda_eeb5d5ca1df2cdf820c0031b23f102e6> >
	{
		virtual void DoInvoke();
	};

	struct InvokeHelper<<lambda_f1683427075adefef509ffef4b7d33cc> >
	{
		InvokeHelper<<lambda_f1683427075adefef509ffef4b7d33cc> >(<lambda_f1683427075adefef509ffef4b7d33cc> const &,CSafeElementProxy *,void *);
		virtual void DoInvoke();
	};

	long _InitDUserContext(HDCONTEXT__ * *);
public:
	long InvokeAsync<<lambda_42bbaa9e10778c0345acee950b86e7fe> >(<lambda_42bbaa9e10778c0345acee950b86e7fe> const &,void *);
	long InvokeAsync<<lambda_eeb5d5ca1df2cdf820c0031b23f102e6> >(<lambda_eeb5d5ca1df2cdf820c0031b23f102e6> const &,void *);
	long InvokeAsync<<lambda_f1683427075adefef509ffef4b7d33cc> >(<lambda_f1683427075adefef509ffef4b7d33cc> const &,void *);
	unsigned long Release();
};

struct CSafeElementPtr<DirectUI::Element>
{
	long Assign(DirectUI::Element *);
	void Unassign();
};

class CSafeElementPtrBase<DirectUI::Element>
{
protected:
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

struct CSafeServiceSite
{
	virtual long ContextSensitiveHelp(int);
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSaveControlsModule
{
	CSaveControlsModule();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long HasFocusIO();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSaveControlsModuleInner
{
	long _CreateControls();
public:
	long SetSite(IUnknown *);
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnDestroy();
};

struct CSaveDialogPreviewMetadata
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSaveDialogPreviewMetadataInner
{
	long _FillSaveDialogPreviewPane();
protected:
	virtual void _Remember(CMetadataElement *);
public:
	CSaveDialogPreviewMetadataInner();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long OnCollectedPropertiesChanged();
	virtual long OnContentsChanged();
	virtual long OnFileOk(IFileDialog *);
	virtual long OnFolderChange(IFileDialog *);
	virtual long OnFolderChanged();
	virtual long OnFolderChanging(IFileDialog *,IShellItem *);
	virtual long OnOverwrite(IFileDialog *,IShellItem *,FDE_OVERWRITE_RESPONSE *);
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChange(IFileDialog *);
	virtual long OnSelectionChanged();
	virtual long OnShareViolation(IFileDialog *,IShellItem *,FDE_SHAREVIOLATION_RESPONSE *);
	virtual long OnTypeChange(IFileDialog *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSaveDiskCacheTask
{
	virtual long InternalResumeRT();
};

class CSaveLocationsTask
{
protected:
	long _ApplyChanges();
	long _UpdateLibraryIcon(IShellLibraryPriv *,unsigned short const *);
	virtual void v_RunTask();
	virtual ~CSaveLocationsTask();
	void _RefreshTopView(IShellItem *,int);
public:
	long SetLibraryIcon(unsigned short const *,long);
	long SetLibraryLocations(IShellItemArray *,int,int);
	static long s_CreateInstance(HWND__ *,IShellItem *,LIBRARY_ADD_LOCATION_ENTRY_POINTS,CSaveLocationsTask * *);
};

struct CScfFileExecute
{
	virtual long Execute();
};

class CScopeDialog
{
	__int64 _EditWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _DlgProc(unsigned int,unsigned __int64,__int64);
	int _IsNetworkFolder(_ITEMIDLIST_ABSOLUTE const *);
	long _AddItemToBasket(IShellItem *);
	long _AddPathToTree();
	long _ApplyCurrentScope();
	long _ClearControls();
	long _CreateVirtualFolderRootItem();
	long _DisplayNewScope();
	long _FindItemInView(IFolderView2 *,IShellItem *,_ITEMID_CHILD * *);
	long _FindTreeItem(IShellItem *,IShellItem * *);
	long _GetPropvarForExclusion(IShellItem *,IShellItem *,tagPROPVARIANT *);
	long _GetSearchIDListPropStore(_GUID const &,void * *);
	long _InitExplorerBrowser();
	long _InitTree();
	long _InitializeSubQueries(IShellItemArray *);
	long _LoadActionStrings();
	long _MakeItemVisible(IShellItem *,IShellItem *);
	long _ModifyExclusion(PKA_FLAGS,IShellItem *,IScopeItem *);
	long _ModifyExclusionOnItem(PKA_FLAGS,IFolderView2 *,_ITEMID_CHILD const *,tagPROPVARIANT);
	long _RemoveAll();
	long _RemoveItemFromDataObjectsAndBasket(IShellItem *,int *);
	long _RemoveSelectedBasketItem();
	long _SetupColumns(IFolderView2 *);
	long _UpdateBasket();
	long _UpdateChildren(IShellItem *,int);
	long _UpdateScopeEnumAndBasket(int);
	long _ValidatePath(unsigned short const *,_GUID const &,void * *);
	static __int64 s_DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_EditWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	unsigned long _GetEnumFlags();
	void _ApplyUIInfo();
	void _OnDestroyDlg();
	void _OnInitDlg();
	~CScopeDialog();
public:
	virtual long Advise(IScopeDialogEvents *);
	virtual long GetRootItems(IShellItemArray * *);
	virtual long GetScope(_GUID const &,void * *);
	virtual long GetSubQueries(_GUID const &,void * *);
	virtual long IncludeObject(IShellView *,_ITEMID_CHILD const *);
	virtual long InsertRoot(IShellItem *,unsigned long,unsigned long,IShellItemFilter *);
	virtual long OnAfterContextMenu(IShellItem *,IContextMenu *,_GUID const &,void * *);
	virtual long OnAfterExpand(IShellItem *);
	virtual long OnBeforeContextMenu(IShellItem *,_GUID const &,void * *);
	virtual long OnBeforeExpand(IShellItem *);
	virtual long OnBeforeItemDelete(IShellItem *);
	virtual long OnBeforeStateImageChange(IShellItem *);
	virtual long OnBeginLabelEdit(IShellItem *);
	virtual long OnDefaultCommand(IShellView *);
	virtual long OnDoDefaultAccessibilityAction(IShellItem *);
	virtual long OnEndLabelEdit(IShellItem *);
	virtual long OnGetAccessibilityRole(IShellItem *,tagVARIANT *);
	virtual long OnGetDefaultAccessibilityAction(IShellItem *,unsigned short * *);
	virtual long OnGetDefaultIconIndex(IShellItem *,int *,int *);
	virtual long OnGetToolTip(IShellItem *,unsigned short *,int);
	virtual long OnItemAdded(IShellItem *,int);
	virtual long OnItemClick(IShellItem *,unsigned long,unsigned long);
	virtual long OnItemDeleted(IShellItem *,int);
	virtual long OnItemStateChanged(IShellItem *,unsigned long,unsigned long);
	virtual long OnItemStateChanging(IShellItem *,unsigned long,unsigned long);
	virtual long OnKeyboardInput(unsigned int,unsigned __int64,__int64);
	virtual long OnPropertyItemCommit(IShellItem *);
	virtual long OnSelectionChanged(IShellItemArray *);
	virtual long OnStateChange(IShellView *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long RemoveAllRoots();
	virtual long RemoveRoot(IShellItem *);
	virtual long SetOptions(SCOPE_DIALOG_OPTIONS);
	virtual long SetScope(IScope *);
	virtual long SetSubQueries(IShellItemArray *);
	virtual long SetTitle(unsigned short const *);
	virtual long SetUIInfo(IScopeDialogUIInfo *);
	virtual long Show(HWND__ *);
	virtual long Unadvise();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CScopeTreeRootFilter
{
	long Initialize();
	virtual long GetEnumFlagsForItem(IShellItem *,unsigned long *);
	virtual long IncludeItem(IShellItem *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CScriptAutoDetection
{
	CScriptAutoDetection();
	long GetNonSpacedOverrideLocaleScripts(unsigned short const *,unsigned long,unsigned long *,AMBIGUOUS_CJK_TEXT *,SPECIAL_SCRIPTS_FOUND_FLAGS *);
	long HasScript(unsigned short const *,unsigned short const *);
	long HasSpecialScript(unsigned short const *,SPECIAL_SCRIPTS_FOUND_FLAGS *,unsigned long *,unsigned long *);
};

struct CScrollBarFlickerRemover
{
	CScrollBarFlickerRemover(DirectUI::ScrollViewer *);
	void UpdateScrollBar();
};

class CScrollingHwnd
{
	int _CanScroll(int,int);
public:
	static long s_CreateInstance(HWND__ *,_GUID const &,void * *);
	virtual long CanScroll(tagPOINT const *,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ScrollLine(int,unsigned short);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSearchConnectorFolder
{
	long _InitializeFromLocation(ILocationDescription *);
protected:
	virtual long v_InternalQueryInterface(_GUID const &,void * *);
public:
	static long s_CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetFlags(SEARCHBOX_FLAGS *);
	virtual long GetFolderTargetInfo(_PERSIST_FOLDER_TARGET_INFO *);
	virtual long GetMRULocation(_GUID *);
	virtual long GetSuggestPopupSetting(SEARCH_BOX_SUGGEST_POPUP_SETTING *);
	virtual long GetTimerDelay(unsigned int *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long InitializeEx(IBindCtx *,_ITEMIDLIST_ABSOLUTE const *,_PERSIST_FOLDER_TARGET_INFO const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSearchEverywhereTask
{
	virtual long v_GetCanonicalName(_GUID *);
	virtual long v_GetCmdFlags(int *);
	virtual long v_GetIconResID(IShellItemArray *,unsigned int *,SHSTOCKICONID *);
	virtual long v_GetState(IUnknown *,IShellItemArray *,int,int *);
	virtual long v_GetTitleResIDs(IShellItemArray *,unsigned int *,unsigned int *,unsigned int *,unsigned int *);
	virtual long v_GetTooltipResID(IShellItemArray *,unsigned int *);
	virtual long v_InvokeCmd(IUnknown *,IShellItemArray *,IBindCtx *);
	virtual unsigned short const * v_ResourceDllName(CUICommandObject::UICORDNTYPE);
};

struct CSearchHistoryStoreEntryTask
{
	static long CreateInstance(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,_GUID const &,void * *);
	virtual long InternalResumeRT();
};

struct CSearchHistoryString
{
	CSearchHistoryString();
	bool IsCompletedBy(CSearchHistoryString const &,bool *);
	bool IsCompletedWithEditDistance(unsigned short const *,CSearchHistoryString const &,int *);
	bool IsExactCompletion(unsigned short const *,CSearchHistoryString const &);
	long FromQueryString(unsigned short const *,unsigned short const *);
	long GenerateStoreEntry(unsigned char * *,unsigned long *);
	~CSearchHistoryString();
};

class CSearchHistorySuggestionsTask
{
	long _GetSearchHistoryStringFromMRU(IMruDataList *,int,CSearchHistoryString &,bool *);
public:
	CSearchHistorySuggestionsTask();
	long _SearchForMruItems(CAutoArrayMemPtr<CSearchHistoryString> const &,CCoSimpleArray<CSearchHistorySuggestionsTask::SearchHistoryResultItem,4294967294,CSimpleArrayStandardCompareHelper<CSearchHistorySuggestionsTask::SearchHistoryResultItem> > &);
	static long CreateInstance(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,IQueryWithLinguisticAlternatives *,unsigned short const *,unsigned int,ITypeAheadProviderEventSink *,_GUID const &,void * *);
	virtual long InternalResumeRT();
};

struct CSearchJobInfo
{
	long CreateJob(IUnknown *,MCENUMRESULTS const *,unsigned short const *,CMCJob * *);
};

class CSearchOnlyLibraryPage
{
protected:
	virtual int _GetInstructionResourceId();
	virtual void _OnNavigate();
public:
	CSearchOnlyLibraryPage();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long OptionallyTakeInitialFocus(int *);
};

class CSearchPageText
{
	long _CheckSingleSubQuery(IScope *,IShellItemArray *,int);
	long _CheckSubQueryStack(IShellItem *);
	long _GenerateScopeList(IShellItem *,int);
	virtual ~CSearchPageText();
public:
	CSearchPageText();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSearchPropSheet
{
	void _InitializeAdvSearchDlg();
	void _RestoreDefaults();
	void _SaveAdvSearchDlg();
	void _SetAdvSearchRegBoolValue(unsigned short const *,unsigned short const *,int,unsigned long);
	void _UpdateAdvSearchDlg(int);
public:
	int DialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

struct CSearchStoreCommand
{
	virtual long CancelPreview(IShellItemArray *);
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetDescription(IShellItemArray *,unsigned short * *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetIconAsBitmap(IShellItemArray *,tagSIZE,HBITMAP__ * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long GetToolTipTitle(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long Preview(IShellItemArray *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSearchStringComparer
{
	static long CreateInstance(unsigned short const *,_GUID const &,void * *);
	virtual long CompareItems(unsigned char const *,int,unsigned char const *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSecondaryTileFile
{
	unsigned long Release();
};

struct CSecurityEditor
{
	virtual long GetSecurity(unsigned short const *,unsigned long,unsigned long,unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSecurity(unsigned short const *,unsigned long,unsigned long,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSecurityOwnerPropertyStore
{
	long Initialize(IFreeThreadedItemContainer *,HANDLERFLAGS,GETPROPERTYSTOREFLAGS,_ITEMID_CHILD const *);
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetClassIdentity(unsigned short * *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
};

class CSecurityZoneChecker
{
	long _CheckSecurityZonesStepOne(unsigned short const *,IShellItem *,unsigned long,unsigned long,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,IInternetHostSecurityManager *,IInternetSecurityManager * *);
	long _CheckSecurityZonesStepTwo(unsigned long,unsigned long,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,HWND__ *,IUnknown *);
	static long _AppendDisplayName(IShellItem *,unsigned short const *,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
	static long _ZoneDialogCallBack(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
public:
	virtual long CheckSecurityZoneUrl(unsigned short const *,unsigned long,unsigned long,HWND__ *,IUnknown *,IInternetSecurityManager * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowSecurityZoneDialog(unsigned long,unsigned long,unsigned short const *,HWND__ *,IUnknown *,int *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSelectArrangeByColumnCommandBase
{
	CSelectArrangeByColumnCommandBase(_tagpropertykey const &,ARRANGEMENT_TYPE);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CSelectColumnCommandBase
{
	CSelectColumnCommandBase(_tagpropertykey const &);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
};

struct CSelectGroupByColumnCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

struct CSelectIconSizeCommand
{
	CSelectIconSizeCommand(ICON_SIZE_PARAM const &);
	virtual long CancelPreview(IShellItemArray *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long Preview(IShellItemArray *);
};

struct CSelectSortByColumnCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

class CSelectionManager
{
	int _FindChecked(IItem *);
	int _FindSelected(IItem *,int);
	int _ValidateGroupIndex(CListViewHost *,int,int);
	long _CreateSelectedItemEntry(IItem *,tagSELECTED_ITEM_ENTRY *);
	static int s_ClearCheckedItemEntry(tagCHECKED_ITEM_ENTRY *,void *);
	static int s_ClearSelectedItemEntry(tagSELECTED_ITEM_ENTRY *,void *);
	void _SyncWorker(CListViewHost *,IListView *,tagSELECTED_ITEM_ENTRY *,unsigned int);
public:
	int IsSelected(IItem *);
	long Init();
	virtual long OnCancelled(IItem *);
	virtual long OnItemChanged(ITEM_CHANGED_TYPE,IItem *,IPropertyKeyStore *);
	virtual long OnItemChanging(ITEM_CHANGED_TYPE,IItem *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void ClearSelection();
	void DeselectItem(IItem *);
	void SelectItem(IItem *);
	void SetCheckState(IItem *,unsigned int);
	void SwapSelectedAndFocusedItem(IItem *,IItem *);
	void SyncToListView(CListViewHost *,IListView *);
};

class CSendToMenu
{
	SENDTOITEM const * _GetItemData(unsigned int);
	int _AllowSendTo(IDataObject *);
	int _IsDropTarget(IShellItem2 *);
	long _ContinueWalk();
	long _DoDragDrop(HWND__ *,IDropTarget *,unsigned long,EXPLORER_COMMAND_SQM_ID,unsigned short const *);
	long _FindVerbOnWrappedMenu(unsigned short const *,IShellItem * *);
	long _InitMenuPopup();
	long _InitializeWrappedMenu(IUnknown *,IDataObject *,DEFAULT_FOLDER_MENU_RESTRICTIONS);
	long _InvokeDropOnShellItem(IShellItem *,HWND__ *,EXPLORER_COMMAND_SQM_ID);
	unsigned long _GetKeyState();
	virtual ~CSendToMenu();
	void _AddSendToItem(IShellItem2 *);
	void _FreeSendToItem(SENDTOITEM *);
public:
	CSendToMenu();
	long InvokeVerbOnWrappedMenu(unsigned short const *);
	static long CreateWrappedMenu(IUnknown *,IDataObject *,DEFAULT_FOLDER_MENU_RESTRICTIONS,CSendToMenu * *);
	virtual long ContextSensitiveHelp(int);
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetWindow(HWND__ * *);
	virtual long HandleMenuMsg(unsigned int,unsigned __int64,__int64);
	virtual long HandleMenuMsg2(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long WalkComplete(long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void ReleaseWrappedMenu();
};

struct CSetShellForeground
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetShellForeground();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSetSlideshowState
{
	bool GetFileSource(CFileSource * *);
	long Init(CFileSource *,unsigned short const *);
};

struct CShallowContainerIterator
{
	bool Next(IShellItem2 * *);
};

struct CShare
{
	unsigned long Release();
};

class CSharePointView
{
	char const * _ReturnResult(char const *,unsigned short *,int);
	int _GetNextToken(char const * *,unsigned long *,unsigned short *,int);
	int _HeaderClicked(IHTMLElement *,int);
	int _OnDocumentComplete();
	int _RowClicked(IHTMLElement *,int);
	long SetFocusOnRow(IHTMLElement *);
	long _BuildNavigateUrl(unsigned short const *,unsigned short *,unsigned long);
	long _CacheItemIDFromSelection();
	long _CreateWebControl(HWND__ *,tagRECT const *);
	long _GetDocument(_GUID const &,void * *);
	long _GetEventObject(IHTMLEventObj * *);
	long _GetListViewCollection(IHTMLElementCollection * *);
	long _GetRowElement(long,IHTMLElement * *);
	long _Navigate();
	long _Navigate(unsigned short const *);
	long _OnClickEvent(int,tagVARIANT *);
	long _OnFocusChange(int);
	long _OnKeyEvent(tagVARIANT *);
	long _ProcessResult(char const *,unsigned short *,int,unsigned short *,int);
	static __int64 s_ViewWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CSharePointView();
	void _DestroyWebControl();
	void _RegisterWindowClasses();
	void _SelectRow(long,int);
	void _ShowProgress(int);
	void _SyncDocEvents(int);
public:
	CSharePointView();
	long Initialize(unsigned short const *);
	virtual long AddPropertySheetPages(unsigned long,int (*)(_PSP *,__int64),__int64);
	virtual long ContextSensitiveHelp(int);
	virtual long CreateViewWindow(IShellView *,FOLDERSETTINGS const *,IShellBrowser *,tagRECT *,HWND__ * *);
	virtual long DestroyViewWindow();
	virtual long EnableModeless(int);
	virtual long FilterDataObject(IDataObject *,IDataObject * *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurrentInfo(FOLDERSETTINGS *);
	virtual long GetDropTarget(IDropTarget *,IDropTarget * *);
	virtual long GetExternal(IDispatch * *);
	virtual long GetHostInfo(_DOCHOSTUIINFO *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetItemObject(unsigned int,_GUID const &,void * *);
	virtual long GetOptionKeyPath(unsigned short * *,unsigned long);
	virtual long GetPaneState(_GUID const &,unsigned long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long GetWindow(HWND__ * *);
	virtual long HasFocusIO();
	virtual long HideUI();
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long IsRestricted();
	virtual long OnDocWindowActivate(int);
	virtual long OnFrameWindowActivate(int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long Refresh();
	virtual long ResizeBorder(tagRECT const *,IOleInPlaceUIWindow *,int);
	virtual long SaveViewState();
	virtual long SelectItem(_ITEMID_CHILD const *,unsigned int);
	virtual long SetAccessibleName(unsigned short const *);
	virtual long ShowContextMenu(unsigned long,tagPOINT *,IUnknown *,IDispatch *);
	virtual long ShowUI(unsigned long,IOleInPlaceActiveObject *,IOleCommandTarget *,IOleInPlaceFrame *,IOleInPlaceUIWindow *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long TranslateAcceleratorW(tagMSG *);
	virtual long TranslateAcceleratorW(tagMSG *,_GUID const *,unsigned long);
	virtual long TranslateUrl(unsigned long,unsigned short *,unsigned short * *);
	virtual long UIActivate(unsigned int);
	virtual long UIActivateIO(int,tagMSG *);
	virtual long UpdateUI();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSharePointViewFVCB
{
	CSharePointViewFVCB(_ITEMIDLIST_ABSOLUTE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSharedLibraryInfo
{
	static SHARED_LIBRARY_INFO const * const s_rgSharedLibraryInfo;
};

struct CSharedWallpaperData
{
	void UpdateStateFromShellTask(HBITMAP__ * *,DESKTOP_WALLPAPER_POSITION,tagRECT *,bool *,bool *);
};

struct CShellCmdFileIcon
{
	virtual long Extract(char const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long Extract(unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFile(unsigned short * *);
	virtual long GetIconLocation(unsigned int,char *,unsigned int,int *,unsigned int *);
	virtual long GetIconLocation(unsigned int,unsigned short *,unsigned int,int *,unsigned int *);
	virtual long IsDirty();
	virtual long Load(unsigned short const *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(unsigned short const *,int);
	virtual long SaveCompleted(unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CShellDispatch
{
protected:
	HWND__ * _GetWindow();
	long ExecuteFolder(tagVARIANT,unsigned short const *);
	long _TrayCommand(unsigned int);
	short _ServiceStartStop(unsigned short *,int,int);
public:
	virtual long AddToRecent(tagVARIANT,unsigned short *);
	virtual long BrowseForFolder(long,unsigned short *,long,tagVARIANT,Folder * *);
	virtual long CanStartStopService(unsigned short *,tagVARIANT *);
	virtual long CascadeWindows();
	virtual long ControlPanelItem(unsigned short *);
	virtual long EjectPC();
	virtual long Explore(tagVARIANT);
	virtual long ExplorerPolicy(unsigned short *,tagVARIANT *);
	virtual long FileRun();
	virtual long FindComputer();
	virtual long FindFiles();
	virtual long FindPrinter(unsigned short *,unsigned short *,unsigned short *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetSetting(long,short *);
	virtual long GetSystemInformation(unsigned short *,tagVARIANT *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Help();
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long IsRestricted(unsigned short *,unsigned short *,long *);
	virtual long IsServiceRunning(unsigned short *,tagVARIANT *);
	virtual long MinimizeAll();
	virtual long NameSpace(tagVARIANT,Folder * *);
	virtual long Open(tagVARIANT);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RefreshMenu();
	virtual long SearchCommand();
	virtual long ServiceStart(unsigned short *,tagVARIANT,tagVARIANT *);
	virtual long ServiceStop(unsigned short *,tagVARIANT,tagVARIANT *);
	virtual long SetTime();
	virtual long ShellExecuteW(unsigned short *,tagVARIANT,tagVARIANT,tagVARIANT,tagVARIANT);
	virtual long ShowBrowserBar(unsigned short *,tagVARIANT,tagVARIANT *);
	virtual long ShutdownWindows();
	virtual long Suspend();
	virtual long TileHorizontally();
	virtual long TileVertically();
	virtual long ToggleDesktop();
	virtual long TrayProperties();
	virtual long UndoMinimizeALL();
	virtual long WindowSwitcher();
	virtual long Windows(IDispatch * *);
	virtual long WindowsSecurity();
	virtual long get_Application(IDispatch * *);
	virtual long get_Parent(IDispatch * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CShellDriveProps
{
	virtual long GetAttributes(unsigned long *);
	virtual long GetCapacity(unsigned __int64 *,unsigned __int64 *);
	virtual long GetDisplayName(unsigned short *,int);
	virtual long GetFileSystem(unsigned short *,int);
	virtual long GetIcon(HICON__ * *);
	virtual long GetPath(unsigned short *,int);
	virtual long GetType(unsigned short *,int);
	virtual long GetVolumeLabel(unsigned short *,int,int *,unsigned int *);
};

class CShellExecute
{
	IBindCtx * _PerformantBindCtx(int);
	TRYRESULT _Init(_SHELLEXECUTEINFOW *);
	TRYRESULT _InitPidl(int);
	TRYRESULT _Resolve();
	TRYRESULT _TryResolve();
	bool _ShouldCreateBackgroundThread();
	int _CheckForRegisteredProgram();
	int _ReportHinst(HINSTANCE__ *);
	int _ReportHresult(long);
	long _CreateAssocForClassOrKey(IAssociationArray * *);
	long _CreateAssocFromItem(IAssociationArray * *);
	long _ExecuteAssoc(IAssociationArray *);
	long _InitCommandExec(IExecuteCommand *,IAssociationArray *);
	long _InitICIX(_CMINVOKECOMMANDINFOEX *,void * *);
	long _InvokeCtxMenu();
	long _InvokeInProcExec(IContextMenu *);
	unsigned long _FinalMapError(HINSTANCE__ * *);
	unsigned long _MapHINSTToWin32Err(HINSTANCE__ *);
	void _DoExecute();
	void _RunThreadMaybeWait(bool);
	void _SetFile(unsigned short const *,int);
	void _SetWorkingDir(unsigned short const *);
	void _TryErrorMsgBox(unsigned long);
	~CShellExecute();
public:
	CShellExecute(IUnknown *,unsigned long (*)(char const *,unsigned short,char const *));
	unsigned long Finalize(_SHELLEXECUTEINFOW *);
	virtual long ContextSensitiveHelp(int);
	virtual long GetOpenWithTypeOverride(unsigned short * *);
	virtual long GetWindow(HWND__ * *);
	virtual long OnConnected();
	virtual long OnCreated(ICreateProcessOutputs *);
	virtual long OnCreating(ICreateProcessInputs *);
	virtual long OnCreatingError(long,ICreateProcessInputs *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long WowCreateProcess(unsigned short const *,int,unsigned short const *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void ExecuteNormal(_SHELLEXECUTEINFOW *);
};

class CShellFolderSet
{
	long _EnsureSchedulerAndDPA();
	long _StartEnumeration(int);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CShellFolderSet();
	void _EnsureNotifications();
public:
	virtual long GetClassID(_GUID *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetItemSet(unsigned int *,IShellItem * * *);
	virtual long HasItems(int *);
	virtual long Initialize(unsigned long,int,IUpdatableItemSetCallback *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *,IViewFilters *,__int64);
	virtual long KillEnumeration();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RefreshSet();
	virtual long SetIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetItemSet(unsigned int,IShellItem * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CShellFolderSetEnumTask
{
	long _Enum(IEnumIDList *,int *);
	long _EnumerateFromItemStore(IShellFolder *,IItemStore *,int *);
	long _TryStealingCollection(IShellFolder *,int *);
	long _TryStealingEnumeration(IShellFolder *,int *);
	static int s_CompareIDs(IChildId *,IChildId *,__int64);
	virtual ~CShellFolderSetEnumTask();
public:
	long Initialize(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *,IViewFilters *,unsigned long,int,int,IUnknown *);
	virtual long InternalResumeRT();
};

class CShellFolderView
{
	long _CheckState();
	long _GetFolder();
	virtual CConnectionPoint * _FindCConnectionPointNoRef(int,_GUID const &);
	virtual ~CShellFolderView();
public:
	CShellFolderView();
	virtual long EnumConnectionPoints(IEnumConnectionPoints * *);
	virtual long FilterView(unsigned short *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long PopupItemMenu(FolderItem *,tagVARIANT,tagVARIANT,unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SelectItem(tagVARIANT *,int);
	virtual long SelectItemRelative(int);
	virtual long SelectedItems(FolderItems * *);
	virtual long SetOwner(IUnknown *);
	virtual long SetSite(IUnknown *);
	virtual long get_Application(IDispatch * *);
	virtual long get_CurrentViewMode(unsigned int *);
	virtual long get_FocusedItem(FolderItem * *);
	virtual long get_Folder(Folder * *);
	virtual long get_FolderFlags(unsigned long *);
	virtual long get_GroupBy(unsigned short * *);
	virtual long get_IconSize(int *);
	virtual long get_Parent(IDispatch * *);
	virtual long get_Script(IDispatch * *);
	virtual long get_SortColumns(unsigned short * *);
	virtual long get_ViewOptions(long *);
	virtual long put_CurrentViewMode(unsigned int);
	virtual long put_FolderFlags(unsigned long);
	virtual long put_GroupBy(unsigned short *);
	virtual long put_IconSize(int);
	virtual long put_SortColumns(unsigned short *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CShellFolderViewOC
{
protected:
	CShellFolderViewOC();
	~CShellFolderViewOC();
public:
	virtual int ProcessWindowMessage(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 &,unsigned long);
	virtual long ContextSensitiveHelp(int);
	virtual long GetWindow(HWND__ * *);
	virtual long InPlaceDeactivate();
	virtual long IncludeObject(IShellView *,_ITEMID_CHILD const *);
	virtual long OnDefaultCommand(IShellView *);
	virtual long OnStateChange(IShellView *,unsigned long);
	virtual long ReactivateAndUndo();
	virtual long SetClientSite(IOleClientSite *);
	virtual long SetFolderView(IDispatch *);
	virtual long SetObjectRects(tagRECT const *,tagRECT const *);
	virtual long UIDeactivate();
};

struct CShellIconGlobalSettings
{
	static long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long DisableIconOverlaysForProcess();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CShellKnownFolderHandler
{
	long _CommonInitUninit(int,_GUID const &,unsigned short const *);
public:
	virtual long CanRedirectFolder(_GUID const &,unsigned short const *);
	virtual long FolderCreated(_GUID const &,unsigned short const *);
	virtual long FolderRemoved(_GUID const &,unsigned short const *);
	virtual long PostRedirectFolder(_GUID const &,long,unsigned short const *);
	virtual long PreRedirectFolder(_GUID const &,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CShellMenuCallbackWrapper
{
	CShellMenuCallbackWrapper(HWND__ *,IShellMenuCallback *);
	virtual long CallbackSM(tagSMDATA *,unsigned int,unsigned __int64,__int64);
	virtual long GetSite(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CShellProtectedRegLock
{
	unsigned long Init(HKEY__ *,unsigned short const *,bool);
	void Lock();
	void Unlock();
	~CShellProtectedRegLock();
};

class CShellSearchExt
{
	long _LaunchDSQuery(HWND__ *,_GUID const &);
protected:
	virtual ~CShellSearchExt();
public:
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long GetSite(_GUID const &,void * *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CShellTreeWalker
{
	long _CallCallBacks(unsigned long,_WIN32_FIND_DATAW *,unsigned __int64);
	long _ProcessAndRecurse(_WIN32_FIND_DATAW *);
	long _WalkCurrentFolder();
public:
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long WalkTree(int,unsigned short const *,unsigned short const *,int,IShellTreeWalkerCallBack *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CShellUrl
{
	int _CanUseAdvParsing();
	int _IsFilePidl(_ITEMIDLIST_ABSOLUTE const *);
	int _IsNetworkServer(_ITEMIDLIST_ABSOLUTE const *);
	long _CanContinue();
	long _CheckItem(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMID_CHILD const *,_ITEMIDLIST_ABSOLUTE * *,unsigned short const *,unsigned short const * *,unsigned long);
	long _GenDispNameFromPidl(unsigned short const *);
	long _GeneratePidl(unsigned short const *,unsigned long);
	long _GenerateUrl(_ITEMIDLIST_ABSOLUTE const *);
	long _GetNextPossibleFullPath(unsigned short const *,unsigned short const * *,unsigned short *,unsigned long,int *);
	long _GetNextPossibleSegment(unsigned short const *,unsigned short const * *,unsigned short *,unsigned long,int);
	long _ParseCurrentDir(unsigned short const *,int *,unsigned long);
	long _ParseCurrentDriveRoot(unsigned short const *,unsigned long);
	long _ParseDesktop(unsigned short const *,unsigned long);
	long _ParseDosAppPath(unsigned short const *,unsigned long);
	long _ParseDrive(unsigned short const *);
	long _ParseNextSegment(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,int *,int);
	long _ParseQuickParse(unsigned short const *,unsigned long);
	long _ParseRelativePidl(unsigned short const *,int *,unsigned long,_ITEMIDLIST_ABSOLUTE const *,int,int);
	long _ParseSeparator(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,int *,int);
	long _ParseShellPath(unsigned short const *,int *,unsigned long);
	long _ParseUNC(unsigned short const *,int *,unsigned long,int);
	long _ParseURLFromOutsideSource(unsigned long,PURLFOSFLAGS,unsigned short const *,unsigned short *,unsigned long *,int *);
	long _ParseVirtualNamespace(unsigned short const *,unsigned long);
	long _PidlShellExec(_ITEMIDLIST_ABSOLUTE const *,unsigned long,IUnknown *);
	long _QualifyFromAppPath(unsigned short const *,unsigned long);
	long _QualifyFromDOSPath(unsigned short const *,unsigned long);
	long _QuickParse(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,unsigned short const *,int *,int);
	long _SetPidl(_ITEMIDLIST_ABSOLUTE const *);
	long _SetUrl(unsigned short const *,unsigned long);
public:
	long Clone(CShellUrl *);
	long Reset();
	static unsigned long _StartAsyncParse(void *);
	virtual long AddPath(_ITEMIDLIST_ABSOLUTE const *);
	virtual long Execute(IShellNavigationTarget *,int *,unsigned long);
	virtual long GetDisplayName(unsigned short *,unsigned long);
	virtual long GetNavFlags(long *);
	virtual long GetParseResult();
	virtual long GetPidl(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetPidlNoGenerate(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetRequestID(int *);
	virtual long GetUrl(unsigned short *,unsigned long);
	virtual long ParseFromOutsideSource(unsigned short const *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetCurrentWorkingDir(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetNavFlags(int,int);
	virtual long SetPidl(_ITEMIDLIST_ABSOLUTE const *);
	virtual long SetPidlAndArgs(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *);
	virtual long SetRequestID(int);
	virtual long SetUrl(unsigned short const *,unsigned long);
	virtual long StartAsyncPathParse(HWND__ *,unsigned short const *,unsigned long,ICancelMethodCalls *);
	virtual unsigned long AddRef();
	virtual unsigned long GetStandardParsingFlags(int);
	virtual unsigned long Release();
	virtual unsigned short * GetArgs();
	virtual void SetCancelObject(ICancelMethodCalls *);
	virtual void SetMessageBoxParent(HWND__ *);
	void AsyncParse(CAsyncParseInitData *);
};

struct CShortcut
{
	long Init(HWND__ *,IShellFolder *,_ITEMID_CHILD *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetIconLocation(unsigned short * *,int *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Resolve(int);
	virtual long Save(tagVARIANT);
	virtual long SetIconLocation(unsigned short *,int);
	virtual long get_Arguments(unsigned short * *);
	virtual long get_Description(unsigned short * *);
	virtual long get_Hotkey(int *);
	virtual long get_Path(unsigned short * *);
	virtual long get_ShowCommand(int *);
	virtual long get_Target(FolderItem * *);
	virtual long get_WorkingDirectory(unsigned short * *);
	virtual long put_Arguments(unsigned short *);
	virtual long put_Description(unsigned short *);
	virtual long put_Hotkey(int);
	virtual long put_Path(unsigned short *);
	virtual long put_ShowCommand(int);
	virtual long put_WorkingDirectory(unsigned short *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CShortcutInfo
{
	CShortcutInfo();
	virtual _GUID GetToastActivatorCLSID();
	virtual _ITEMIDLIST_ABSOLUTE * CreateFullIDList();
	virtual bool IsEligibleForRecentlyAddedList();
	virtual bool IsExcludedFromAppEnumeration();
	virtual bool IsFolder();
	virtual bool IsInLauncher();
	virtual bool IsPinnable();
	virtual bool IsUserPinned();
	virtual long GetDisplayInfo(IDisplayInfo * *);
	virtual long PopulatePropertyStore(IPropertyStore *);
	virtual unsigned __int64 GetThumbnailCacheID();
	virtual unsigned int GetRestrictionIndex();
	virtual unsigned short const * GetAppID();
	virtual unsigned short const * GetAppPath();
	virtual unsigned short const * GetAppPathEncoded();
	virtual unsigned short const * GetArguments();
	virtual unsigned short const * GetDisplayName();
	virtual unsigned short const * GetSuiteName();
};

struct CShortcutInfoEnumerator
{
	CShortcutInfoEnumerator();
	long RuntimeClassInitialize(CCacheInstance *,ShortcutInfoRootType);
	virtual long Next(IShortcutInfo * *);
};

struct CShowDWMTreeItem
{
	virtual long GetCheckState(int *);
	virtual long SetCheckState(int);
};

class CSidResolver
{
	int _IsEveryoneSID(void *);
	int _IsHomeGroupSID(void *);
	long _AddSidElementLength(unsigned short const *,unsigned long *);
	long _CheckAndConvertToStringSid(void *,unsigned long,unsigned short * *);
	long _GetComputerAccountDomainName();
	long _GetUserName(unsigned short *,unsigned short *,void *,unsigned long,unsigned short * *);
	long _GetUserNameFromLsaStructures(_LSA_TRANSLATED_NAME *,_LSA_REFERENCED_DOMAIN_LIST *,void *,unsigned long,unsigned short * *);
	long _IsNameValid(_LSA_TRANSLATED_NAME *,_LSA_REFERENCED_DOMAIN_LIST *,int *,int *);
	long _MakeEveryoneSid();
	long _ResolveSingleSid(unsigned short const *,void *,unsigned long,unsigned short * *);
public:
	virtual long GetSidStringForPermissions(ISharePermissionList *,unsigned long,unsigned short * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResolveSids(unsigned short const *,unsigned long,_SID * *,unsigned long,_RESOLVED_USERNAME_LIST * *);
	virtual long ResolveStringSid(unsigned short const *,unsigned short const *,unsigned long,unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSimpleDialog
{
	long Show(unsigned int *);
};

struct CSimpleEnumString
{
	bool FindString(unsigned short const *);
	long AddString(unsigned short const *);
	virtual long Clone(IEnumString * *);
	virtual long Next(unsigned long,unsigned short * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSimpleHashTable<unsigned long,Microsoft::WRL::ComPtr<ITilePropertyInfo>,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,unsigned long const &,Microsoft::WRL::ComPtr<ITilePropertyInfo> const &,Microsoft::WRL::ComPtr<ITilePropertyInfo> *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned long,Microsoft::WRL::ComPtr<ITilePropertyInfo>,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned long,Microsoft::WRL::ComPtr<ITilePropertyInfo>,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned long const &);
	static int s_EnumAdaptor<<lambda_661bc0f79e8fe0483d0640f4a356b4c8> >(<lambda_661bc0f79e8fe0483d0640f4a356b4c8> const *,unsigned long const &,Microsoft::WRL::ComPtr<ITilePropertyInfo> &);
public:
	void RemoveAll();
};

class CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<IShellItem>,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,unsigned short const * const &,Microsoft::WRL::ComPtr<IShellItem> const &,Microsoft::WRL::ComPtr<IShellItem> *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<IShellItem>,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<IShellItem>,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
	static int s_EnumAdaptor<<lambda_3ff70a12564d8543602a25ec04507de0> >(<lambda_3ff70a12564d8543602a25ec04507de0> const *,unsigned short const * const &,Microsoft::WRL::ComPtr<IShellItem> &);
	static int s_EnumAdaptor<<lambda_5770391dc98f558c4c05e706dfbe7c73> >(<lambda_5770391dc98f558c4c05e706dfbe7c73> const *,unsigned short const * const &,Microsoft::WRL::ComPtr<IShellItem> &);
	static int s_EnumAdaptor<<lambda_c1ac8a6193dfeab40739d59fc8b63cc4> >(<lambda_c1ac8a6193dfeab40739d59fc8b63cc4> const *,unsigned short const * const &,Microsoft::WRL::ComPtr<IShellItem> &);
public:
	void RemoveAll();
};

class CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<IStream>,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,unsigned short const * const &,Microsoft::WRL::ComPtr<IStream> const &,Microsoft::WRL::ComPtr<IStream> *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<IStream>,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<IStream>,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
	static int s_EnumAdaptor<<lambda_56959d091a6fb829d69648cbd55b550b> >(<lambda_56959d091a6fb829d69648cbd55b550b> const *,unsigned short const * const &,Microsoft::WRL::ComPtr<IStream> &);
public:
	int Enum<<lambda_954234f30b113599677294cff02138d7> const *>(int (*)(<lambda_954234f30b113599677294cff02138d7> const *,unsigned short const * const &,Microsoft::WRL::ComPtr<IStream> &),<lambda_954234f30b113599677294cff02138d7> const *);
	void RemoveAll();
};

class CSimpleHashTable<unsigned short const *,Microsoft::Windows::FileExplorer::Banners::BannerData *,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,unsigned short const * const &,Microsoft::Windows::FileExplorer::Banners::BannerData * const &,Microsoft::Windows::FileExplorer::Banners::BannerData * *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned short const *,Microsoft::Windows::FileExplorer::Banners::BannerData *,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,Microsoft::Windows::FileExplorer::Banners::BannerData *,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
public:
	void RemoveAll();
};

class CSimpleHashTable<unsigned short const *,_GUID,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,unsigned short const * const &,_GUID const &,_GUID *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned short const *,_GUID,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,_GUID,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
	static int s_EnumAdaptor<<lambda_929855137f4aad2e4a1623e1fd4f1887> >(<lambda_929855137f4aad2e4a1623e1fd4f1887> const *,unsigned short const * const &,_GUID &);
public:
	long GetItem(unsigned short const * const &,_GUID &);
	void RemoveAll();
};

class CSimpleHashTable<unsigned short const *,bool (**)(SystemSettings::Environment::SettingsEnvironmentImpl *),CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,unsigned short const * const &,bool (** const &)(SystemSettings::Environment::SettingsEnvironmentImpl *),bool (** *)(SystemSettings::Environment::SettingsEnvironmentImpl *));
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned short const *,bool (**)(SystemSettings::Environment::SettingsEnvironmentImpl *),CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,bool (**)(SystemSettings::Environment::SettingsEnvironmentImpl *),CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
public:
	void RemoveAll();
	~CSimpleHashTable<unsigned short const *,bool (**)(SystemSettings::Environment::SettingsEnvironmentImpl *),CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>();
};

class CSimpleHashTable<unsigned short const *,bool,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,unsigned short const * const &,bool const &,bool *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned short const *,bool,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,bool,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
	static int s_EnumAdaptor<<lambda_16e8baa1fcfce8420535795e439c9421> >(<lambda_16e8baa1fcfce8420535795e439c9421> const *,unsigned short const * const &,bool &);
};

class CSimpleHashTable<unsigned short const *,int,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned short const *,int,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,int,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
public:
	void RemoveAll();
	~CSimpleHashTable<unsigned short const *,int,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>();
};

class CSimpleHashTable<unsigned short const *,int,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	static CSimpleHashTable<unsigned short const *,int,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,int,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
	static int s_EnumAdaptor<<lambda_7782e6150f14bbb60990c959cd555e32> >(<lambda_7782e6150f14bbb60990c959cd555e32> const *,unsigned short const * const &,int &);
	static int s_EnumAdaptor<<lambda_dc33fa216019e7d76dd4a79e2da51a29> >(<lambda_dc33fa216019e7d76dd4a79e2da51a29> const *,unsigned short const * const &,int &);
public:
	void RemoveAll();
};

class CSimpleItemResources
{
	struct CSimpleItemResourcesEnum
	{
		CSimpleItemResourcesEnum();
		virtual long Clone(IEnumResources * *);
		virtual long Next(unsigned long,SHELL_ITEM_RESOURCE *,unsigned long *);
		virtual long Reset();
		virtual long Skip(unsigned long);
	};

	long _OpenOrCreateResource(SHELL_ITEM_RESOURCE const *,bool,_GUID const &,void * *);
public:
	CSimpleItemResources();
	long RuntimeClassInitialize(IShellItem *,IBindCtx *,IInternetSecurityManager *);
	virtual long CreateResource(SHELL_ITEM_RESOURCE const *,_GUID const &,void * *);
	virtual long EnumResources(IEnumResources * *);
	virtual long GetAttributes(unsigned long *);
	virtual long GetResourceDescription(SHELL_ITEM_RESOURCE const *,unsigned short * *);
	virtual long GetSize(unsigned __int64 *);
	virtual long GetTimes(_FILETIME *,_FILETIME *,_FILETIME *);
	virtual long MarkForDelete();
	virtual long OpenResource(SHELL_ITEM_RESOURCE const *,_GUID const &,void * *);
	virtual long SetTimes(_FILETIME const *,_FILETIME const *,_FILETIME const *);
	virtual long SupportsResource(SHELL_ITEM_RESOURCE const *);
};

struct CSimplePointerArray<BrowserRegistryCacheEntry,CTPolicyCoTaskMem<BrowserRegistryCacheEntry>,CSimpleArrayStandardCompareHelper<BrowserRegistryCacheEntry *> >
{
	void RemoveAndReleaseAll();
};

struct CSimplePointerArray<CStorageProviderRootsCache,CTPolicyLocalMem<CStorageProviderRootsCache>,CSimpleArrayStandardCompareHelper<CStorageProviderRootsCache *> >
{
	void RemoveAndReleaseAll();
};

struct CSimplePointerArray<IUnknown,CTContainer_PolicyRelease<IUnknown>,CSimpleArrayStandardCompareHelper<IUnknown *> >
{
	void RemoveAndReleaseAll();
};

struct CSimplePointerArray<unsigned short,CTPolicyCoTaskMem<unsigned short>,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	void RemoveAndReleaseAll();
};

struct CSimpleReconcileInitiator
{
	static long CreateInstance(long (*)(__int64,unsigned long,unsigned long),__int64,_GUID const &,void * *);
	virtual long FindVersion(_GUID *,IMoniker * *);
	virtual long FindVersionFromGraph(tagVERGRAPH *,_GUID *,IMoniker * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetAbortCallback(IUnknown *);
	virtual long SetProgressFeedback(unsigned long,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSimpleTaskItem
{
	unsigned long Release();
};

class CSimpleUICommand
{
protected:
	CSimpleUICommand(IUnknown *,CSimpleTaskItem *,int,IEnumUICommand *);
	virtual ~CSimpleUICommand();
public:
	virtual long EnumSubCommands(IEnumUICommand * *);
	virtual long GetFlags(int *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_CanonicalName(_GUID *);
	virtual long get_Icon(IShellItemArray *,unsigned short * *);
	virtual long get_Name(IShellItemArray *,unsigned short * *);
	virtual long get_State(IShellItemArray *,int,int *);
	virtual long get_Tooltip(IShellItemArray *,unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSimpleUICommandWithBackgroundColor
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_BackgroundColor(unsigned long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSingleItemSplitDefaultCommand
{
	virtual long EnumSubCommands(IEnumUICommand * *);
};

struct CSizeAllColumnsCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

class CSizeCategorizer
{
protected:
	virtual long OnGetFilterCondition(unsigned long,IFilterCondition * *);
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
};

class CSizeCountSecureStringResult
{
	void _SecureFree();
public:
	long Allocate(unsigned long);
};

class CSkyDriveNetworkStatesSSO
{
	bool _SetMeteredNetworkSetting(unsigned long);
	long DisableNetworkHandler();
	long EnsureNetworkHandlerIsEnabled();
	long _SetSkyDriveNetworkStatesCacheValue(SKYDRIVE_NETWORK_STATES);
	static void _s_MeteredNetworkSettingChange(void *);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _SendNotifications(SKYDRIVE_NETWORK_STATES);
	void _UpdateNetworkStates(bool);
public:
	CSkyDriveNetworkStatesSSO();
	virtual long Invoke(IInspectable *);
	virtual long OnHandleSignaled(void *,unsigned int,unsigned int,void * *,unsigned int *);
	virtual long Start(unsigned int,void * *,unsigned int *);
	virtual long Stop();
};

class CSlideshow
{
	CSlideshowWorker * _GetWorker();
	long _LightRefresh(unsigned long);
	long _QueueWorkItem(long ( CSlideshowWorker::*)(unsigned long *,bool,__int64),__int64,WORKITEMCALLBACK_FLAGS);
	long _Refresh(CSetSlideshowState *);
	static void s_NotificatonTimerCB(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	void _InstallFileChangeNotification(CFileSource *);
	void _StopWorkerThread();
	void _UninstallFileChangeNotification();
public:
	CSlideshow(HWND__ *,unsigned __int64,unsigned int);
	int IsRunning(CSlideshowWorker * *);
	long EstimatePersistCount();
	long GetSlideshow(IShellItemArray * *);
	long SetSlideshow(CFileSource *,unsigned short *);
	long Tick(__int64);
	static int s_RemoteWallpaperAllowed();
	static long s_GetCurrentWallpaper(unsigned short *,unsigned long);
	unsigned long Release();
	void FileSourceChanged();
	void OnWallpaperChanged(unsigned __int64,__int64);
	void PowerChanged(unsigned __int64,__int64);
	void SessionChanged(unsigned __int64);
};

struct CSlideshowSettings
{
	CFileSource * GetFileSource();
	long Apply(bool);
	long GetInterval(unsigned long *);
	long GetIsEnabled(int,int *);
	long GetLastTickTime(unsigned __int64 *);
	long Load(bool);
	long Save();
	long SetFileSource(CFileSource *);
	long SetInterval(unsigned long);
	long SetLastTickTime(unsigned __int64);
	long SetShuffle(int);
	static long s_PolicyAllowsSlideshow();
	~CSlideshowSettings();
};

class CSlideshowWorker
{
	bool _AddImageEntry(unsigned short const *,WALLPAPER_SLIDESHOW_IMAGE_ENTRY *);
	bool _GetImageDimensions(unsigned short const *,tagSIZE *);
	bool _IsCurrentWallpaperInFileSource();
	bool _SendImages(unsigned short const *,bool);
	long _GetNextWallpaper(unsigned short const *,unsigned short *,unsigned long);
	long _SetSlideshow(CSetSlideshowState *);
	static long s_GetTimeAtMidnight(unsigned __int64 *);
	static unsigned long _GetTransitionAnimationDuration();
	unsigned long _GetNextTimerDuration();
	unsigned long _RoundNextTick(unsigned long);
	void _AdvanceSlideshowToWallpaper(unsigned short const *);
public:
	long BeginWallpaperChangeWorkItem(unsigned long *,bool,__int64);
	long KillDisabledSlideshowWorkItem(unsigned long *,bool,__int64);
	long LightRefreshWorkItem(unsigned long *,bool,__int64);
	long RefreshWorkItem(unsigned long *,bool,__int64);
	long ReloadFileSourceWorkItem(unsigned long *,bool,__int64);
	long StartupWorkItem(unsigned long *,bool,__int64);
	long StopWorkItem(unsigned long *,bool,__int64);
	long TickWorkItem(unsigned long *,bool,__int64);
	long WallpaperChangedWorkItem(unsigned long *,bool,__int64);
	static unsigned long s_WorkItemCallback(void *);
	unsigned long Release();
};

class CSnapRTask
{
protected:
	virtual ~CSnapRTask();
public:
	virtual long InternalResumeRT();
};

struct CSortOrderCommand
{
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

struct CSortTask
{
	long Initialize(SORT_TASK_INIT_DATA const *);
	virtual long InternalResumeRT();
};

struct CSourceViewSizePreference
{
	CSourceViewSizePreference();
	virtual long GetAppUserModelId(unsigned short * *);
	virtual long GetSourceViewSizePreference(APPLICATION_VIEW_SIZE_PREFERENCE *);
	virtual long GetSourceViewToPosition(HWND__ * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
};

class CSparseCallback
{
	long _FillImageListWithIconFromThumbnailCache(IImageList2 *,int);
public:
	long Initialize(CIconCache *,IImageList2 *,unsigned int);
	virtual long Clone(_GUID const &,void * *);
	virtual long ForceImagePresent(IImageList2 *,int);
	virtual long GetClassID(_GUID *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long IsDirty();
	virtual long Load(IStream *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Save(IStream *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSplitButton
{
	void UpdateIcon(int);
	void _DoAction(int);
	void _UpdateDisplay(ExplorerCommandItem const *);
public:
	CSplitButton();
	long SetItem(IShellFolder *,_ITEMID_CHILD const *,ExplorerCommandItem const *,IServiceProvider *);
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *,int);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long DefaultAction();
	virtual long SetSite(IUnknown *);
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	void SetEvaluatingAsyncState(bool);
};

class CSprocketsAdorner
{
protected:
	long _EnsureWorkArea(int,HDC__ *);
	virtual HBITMAP__ * _GetAdornmentBitmap(unsigned long);
	virtual ~CSprocketsAdorner();
public:
	static long CreateInstance(_GUID const &,void * *);
	virtual long ComputeBounds(tagRECT *,tagRECT *);
	virtual long Draw(HDC__ *);
};

class CStackComposer
{
	int _Sort();
public:
	virtual long GetFinalBitmap(HBITMAP__ * *);
	virtual long GetSortedItemBitmap(unsigned long,HBITMAP__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetBackgrounds(unsigned long,unsigned long *,int);
	virtual long SetBorderStyle(unsigned long,unsigned long);
	virtual long SetForeground(unsigned long,int);
	virtual long SetItemBitmap(unsigned long,HBITMAP__ *,int);
	virtual long SetMatrixData(unsigned long,MATRIXDATA const *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CStandardEnum
{
	CStandardEnum(_GUID const &,int,int,int,void *,void (*)(void *,void const *,unsigned long));
	virtual long Clone(IEnumGeneric * *);
	virtual long Next(unsigned long,void *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CStandardEnum();
};

class CStartMenuPin
{
	long _RemoveDarwinShortcutFromTaskbarList(unsigned short const *);
	long _RemoveFromTaskbarList(_ITEMIDLIST_ABSOLUTE *);
protected:
	virtual LauncherTelemetry::Location v_GetPinningDestination();
	virtual int v_IsRestricted();
	virtual int v_ShouldHideMenu(unsigned int);
	virtual long v_GetBackupSubDirectoryName(unsigned short *,unsigned int);
	virtual long v_GetChangeCount(unsigned long *);
	virtual long v_GetHelpText(unsigned __int64,unsigned short *,unsigned int);
	virtual long v_GetMenuStringID(unsigned int *);
	virtual long v_SetRemovedChangeCount(unsigned long);
	virtual unsigned long v_GetRemovedChangeCount();
	virtual unsigned short const * v_GetVerb(unsigned int);
	virtual void v_SendPinRearrangeSQM();
public:
	CStartMenuPin();
	virtual IStream * v_OpenLinksRegStream(unsigned long);
	virtual IStream * v_OpenPinRegStream(unsigned long);
	virtual long RemoveFromList(IShellItem *);
	virtual long v_SetChangeCount(unsigned long);
	virtual long v_SetPinStreamVersion(unsigned long);
	virtual unsigned long v_GetPinStreamVersion();
	virtual void v_NotifyPinListChange(_ITEMIDLIST_ABSOLUTE const *,int);
};

class CStaticPropertyControl
{
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual int v_HasTooltip();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_DrawContent(HDC__ *,tagRECT *,int,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
	virtual void v_GetDrawClientRect(HWND__ *,HDC__ *,tagRECT *);
	virtual ~CStaticPropertyControl();
public:
	CStaticPropertyControl();
	virtual long Initialize(IUnknown *,tagPROPDESC_CONTROL_TYPE);
	virtual long SetFlags(int,int);
	virtual long SetFont(HFONT__ *);
	virtual long SetTextColor(unsigned long);
	virtual long SetWindowTheme(unsigned short const *,unsigned short const *);
};

struct CStaticSource
{
	virtual long EnumSources(IEnumString * *);
	virtual long EnumValues(IEnumString * *);
	virtual long OpenSource(unsigned short const *,IQuerySource * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryValueDirect(unsigned short const *,unsigned short const *,_FLAGGED_BYTE_BLOB * *);
	virtual long QueryValueDword(unsigned short const *,unsigned short const *,unsigned long *);
	virtual long QueryValueExists(unsigned short const *,unsigned short const *);
	virtual long QueryValueGuid(unsigned short const *,unsigned short const *,_GUID *);
	virtual long QueryValueString(unsigned short const *,unsigned short const *,unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CStatusBarModule
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
};

class CStatusBarModuleInner
{
	bool _GetVisibilitySettingFromRegistry();
	int _HasDrawControl(IPropertyDescription *);
	int _IsButtonProperty(IPropertyStoreCache *,IPropertyDescription *);
	long _AppendButtonField(DirectUI::DUIXmlParser *,DirectUI::Element *,IPropertyStoreCache *,IPropertyDescription *);
	long _AppendProperty(DirectUI::DUIXmlParser *,DirectUI::Element *,IPropertyStoreCache *,IPropertyDescription *);
	long _AppendPropertyField(DirectUI::DUIXmlParser *,DirectUI::Element *,IPropertyDescription *,IPropertyValue *);
	long _AppendStaticTextPropertyField(DirectUI::DUIXmlParser *,DirectUI::Element *,IPropertyStoreCache *,IPropertyDescription *);
	long _CreateFieldElement(DirectUI::DUIXmlParser *,unsigned short const *,IPropertyDescription *,DirectUI::Element * *);
	long _GetShellItemArraySelected(IFolderView *,IShellItemArray * *,unsigned int *);
	long _GetShellItemArrayView(IFolderView *,IShellItemArray * *,unsigned int *);
	long _Initialize(DirectUI::Element * *);
	long _SetOverflowLayout(DirectUI::Element *);
	long _SetPropertyLabel(DirectUI::Element *,IPropertyDescription *);
	long _StartGetPropertiesWorkItem(bool);
	static void s_HideLastSyncedProperty(GMA_ACTIONINFO *);
	void _AppendSeparator(DirectUI::DUIXmlParser *,DirectUI::Element *);
	void _CancelOldGetPropertiesWorkItem();
	void _ClearProperties();
	void _FetchProperties(bool);
	void _InvokeVerb(unsigned short const *);
	void _OnMetadataInteractionEvent(CMetadataElement *,MetadataInteractionEvent::REASON,unsigned short const *,int);
	void _PopulateProperties(_tagpropertykey const &,IPropertyStoreCache *);
	void _SetViewMode(FOLDERVIEWMODE,int);
	void _TrackFetchProperties(TRACKOPERATIONEVENT);
	void _UpdateRadioButton(DirectUI::Element *,int);
	void _UpdateViewButtons();
	void _UpdateVisibility(int);
public:
	CStatusBarModuleInner();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnContentsChanged();
	virtual long OnFolderChanged();
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnEvent(DirectUI::Event *);
	virtual ~CStatusBarModuleInner();
	void OnPropertiesFetched(_tagpropertykey const &,IPropertyStoreCache *);
};

class CStatusBarPropertyStore
{
	CStatusBarPropertyStore(IShellItem2 *,IShellItemArray *,unsigned int,IShellItemArray *,unsigned int,_tagpropertykey const &);
	long _FormatStatusBarCountAndSize(unsigned int,unsigned int,tagPROPVARIANT const &,tagPROPVARIANT *);
	long _GetFolderStorageProviderError(tagPROPVARIANT *);
	long _GetSelectedItemCountAndSize(tagPROPVARIANT *);
	long _GetSelectedItemsAvailability(tagPROPVARIANT *);
	long _GetSelectionSize(tagPROPVARIANT *);
	long _GetViewItemCount(tagPROPVARIANT *);
	long _IsPropertyCommonToAllItems(_tagpropertykey const &,bool *);
public:
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
};

struct CStorageProviderInfo
{
	CStorageProviderInfo();
	virtual long GetBannerHandler(_GUID const &,void * *);
	virtual long GetBannerHandlerClsid(_GUID *);
	virtual long GetDisplayName(unsigned short * *);
	virtual long GetDisplayNameResource(unsigned short * *);
	virtual long GetFlags(STORAGE_PROVIDER_INFO_FLAGS *);
	virtual long GetFullProviderAndUserAndAccountIdentifier(unsigned short * *);
	virtual long GetHandler(_GUID const &,void * *);
	virtual long GetHandlerClsid(_GUID *);
	virtual long GetIcon(unsigned short * *,int *);
	virtual long GetIconResource(unsigned short * *);
	virtual long GetProviderIdentifier(unsigned short * *);
	virtual long IsSameIdentifier(IStorageProviderInfo *);
	virtual long SetBannerHandlerClsid(_GUID const &);
	virtual long SetDisplayNameResource(unsigned short const *);
	virtual long SetFlags(STORAGE_PROVIDER_INFO_FLAGS,STORAGE_PROVIDER_INFO_FLAGS);
	virtual long SetFullProviderAndUserAndAccountIdentifier(unsigned short const *);
	virtual long SetHandlerClsid(_GUID const &);
	virtual long SetIconResource(unsigned short const *);
};

class CStorageProviderRootsCache
{
	long _InitializeUserRoots(HKEY__ *);
	static unsigned short const * const * const s_rgUserRootsRegistryKey;
	void _UpdateStorageProviderIdInExtrinsicPropertyStore(unsigned short const *,unsigned short const *);
public:
	bool IsSameIdentifier(unsigned short const *);
	long DoesOverlapWithSyncRoots(unsigned short const *,unsigned short const *);
	long GetStorageProviderInfo(IStorageProviderInfo * *);
	long GetUserSyncRoot(unsigned short const *,bool,unsigned short * *);
	long Initialize(HKEY__ *,unsigned short const *);
	long IsPathUnderUserSyncRoot(unsigned short const *,unsigned short * *,STORAGE_PROVIDER_PATH_COMPARE_FLAGS *);
	long MigrateUserSyncRoot(unsigned short const *,unsigned short const *);
	long RemovePendingRedirectionUserSyncRoot(unsigned short const *);
	long RemoveUserSyncRoot(unsigned short const *);
	long SetPendingRedirectionUserSyncRoot(unsigned short const *,unsigned short const *);
	long SetStorageProviderInfo(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID,_GUID,unsigned long);
	long SetUserSyncRoot(unsigned short const *,unsigned short const *);
};

struct CStorageSystemTypeCategorizer
{
	virtual long CompareCategory(CATSORT_FLAGS,unsigned long,unsigned long);
	virtual long GetCategory(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetCategoryInfo(unsigned long,CATEGORY_INFO *);
	virtual long GetDescription(unsigned short *,unsigned int);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CStreamWithLayoutType
{
	CStreamWithLayoutType(tagLAYOUTTYPE,IStream *);
	virtual long Clone(IStream * *);
	virtual long Commit(unsigned long);
	virtual long CopyTo(IStream *,_ULARGE_INTEGER,_ULARGE_INTEGER *,_ULARGE_INTEGER *);
	virtual long GetLayoutType(tagLAYOUTTYPE *);
	virtual long LockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(void *,unsigned long,unsigned long *);
	virtual long Revert();
	virtual long Seek(_LARGE_INTEGER,unsigned long,_ULARGE_INTEGER *);
	virtual long SetSize(_ULARGE_INTEGER);
	virtual long Stat(tagSTATSTG *,unsigned long);
	virtual long UnlockRegion(_ULARGE_INTEGER,_ULARGE_INTEGER,unsigned long);
	virtual long Write(void const *,unsigned long,unsigned long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CStringCompare
{
	static int CompareKey(unsigned short const * const,unsigned short const * const);
};

struct CStringHashPolicy
{
	static unsigned int CalculateHashKey(unsigned short const *,unsigned int);
};

struct CStringHashTable<Microsoft::WRL::ComPtr<IShellItem>,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare>
{
	long AddItem(unsigned short const * const &,Microsoft::WRL::ComPtr<IShellItem> const &);
};

struct CStringHashTable<Microsoft::WRL::ComPtr<IStream>,CStringHashPolicy,CStringCompare>
{
	long AddItem(unsigned short const * const &,Microsoft::WRL::ComPtr<IStream> const &);
};

struct CStringHashTable<Microsoft::Windows::FileExplorer::Banners::BannerData *,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare>
{
	int Enum<<lambda_4c4318a0ed85952afa74048d9d301482> >(<lambda_4c4318a0ed85952afa74048d9d301482>);
	long AddItem(unsigned short const * const &,Microsoft::Windows::FileExplorer::Banners::BannerData * const &);
	long ContainsKey(unsigned short const * const &);
	long DeleteItem(unsigned short const * const &);
};

struct CStringHashTable<_GUID,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare>
{
	long AddItem(unsigned short const * const &,_GUID const &);
	long DeleteItem(unsigned short const * const &);
	void RemoveAll();
};

struct CStringHashTable<bool (**)(SystemSettings::Environment::SettingsEnvironmentImpl *),CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare>
{
	long AddItem(unsigned short const * const &,bool (** const &)(SystemSettings::Environment::SettingsEnvironmentImpl *));
	~CStringHashTable<bool (**)(SystemSettings::Environment::SettingsEnvironmentImpl *),CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare>();
};

struct CStringHashTable<bool,CStringHashPolicy,CStringCompare>
{
	long AddItem(unsigned short const * const &,bool const &);
};

struct CStringHashTable<int,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare>
{
	~CStringHashTable<int,CCaseInsensitiveStringHashPolicy,CCaseInsensitiveStringCompare>();
};

class CStructArray<CConfirmConflictItem,ISyncMgrConflictItems>
{
	long _Init(unsigned int,CONFIRM_CONFLICT_ITEM *);
public:
	static long CreateInstance(unsigned int,CONFIRM_CONFLICT_ITEM *,ISyncMgrConflictItems * *);
	virtual long GetCount(unsigned int *);
	virtual long GetItem(unsigned int,CONFIRM_CONFLICT_ITEM *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CStructArray<CConfirmConflictResultInfo,ISyncMgrConflictResolutionItems>
{
	long _Init(unsigned int,CONFIRM_CONFLICT_RESULT_INFO *);
public:
	static long CreateInstance(unsigned int,CONFIRM_CONFLICT_RESULT_INFO *,ISyncMgrConflictResolutionItems * *);
	virtual long GetCount(unsigned int *);
	virtual long GetItem(unsigned int,CONFIRM_CONFLICT_RESULT_INFO *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CStructHashTable<_GUID,IFolderTypeDescription *>
{
	static int s_EnumCallback(unsigned char const *,unsigned int,unsigned char const *,unsigned int,void *);
	static void s_DestroyCallback(unsigned char *,unsigned int,void *);
};

class CStructHashTable<unsigned long,unsigned long>
{
	static int s_EnumCallback(unsigned char const *,unsigned int,unsigned char const *,unsigned int,void *);
};

struct CSubQueryRootFilter
{
	virtual long GetEnumFlagsForItem(IShellItem *,unsigned long *);
	virtual long IncludeItem(IShellItem *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSuggestFilterWorker
{
	long _CheckFilters();
	long _DeDupeResults();
	long _GetAppliedFilters(IFilterCondition * *);
	long _GetFilterResults();
	long _GetFilters(IShellFolder3 *,_tagpropertykey);
	long _GetFolder(_GUID const &,void * *);
	long _MakeScopeIncludeSubfolders();
	long _RemoveKeysFromCondition(ICondition *,ICondition * *);
	long _RemoveKeysFromWordwheel(IFilterCondition * *);
	long _ReturnInitialResults();
	virtual ~CSuggestFilterWorker();
public:
	CSuggestFilterWorker();
	static int s_CompareFilter(IFilterWorkerItem *,IFilterWorkerItem *,__int64);
	virtual long Dispatch();
	virtual long DoWork();
	virtual long Init(unsigned long,unsigned int,FILTERWORKERFLAGS,IShellItem *,IPropertyKeyStore *,_tagpropertykey const &,ISuggestFilterCallback *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSummaryPage
{
	__int64 DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	int _EnableCreateCopy();
	int _OnItemChanging(tagNMLISTVIEW *);
	int _OnKeyDown(tagLVKEYDOWN const *);
	int _OnNotify(HWND__ *,int,tagNMHDR *);
	long CheckForWriteAccess();
	long _AddPropertiesFromPropListToUI(IPropertyProvider *);
	long _AddPropertyDescriptionToUI(IPropertyProvider *,IPropertyDescription *);
	long _AddPropertyValue(PROPLISTVIEWDATA *,unsigned short const *,unsigned short const *);
	long _BuildPropertyChangeArray(IPropertyChangeArray * *);
	long _GetItemData(int,PROPLISTVIEWDATA * *);
	long _GetValueAndValueString(IPropertyProvider *,IPropertyDescription *,IPropertyValue * *,unsigned short * *);
	long _OpenFirstItem();
	long _PropertiesToUI();
	long _RemoveProperties();
	long _Save();
	static __int64 s_DialogDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_ListViewSubclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_PropSheetDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned int s_PageCallback(HWND__ *,unsigned int,_PROPSHEETPAGEW *);
	virtual ~CSummaryPage();
	void _AddPropertyGroup(unsigned short const *);
	void _ClearDirtyFlags();
	void _EnableControls(HWND__ *);
	void _OnCommand(HWND__ *,int,HWND__ *,unsigned int);
	void _OnInitDialog(HWND__ *);
	void _OnLVNotifyClick(tagNMITEMACTIVATE const *);
	void _ReleaseListviewData();
	void _ReplaceListViewWithString(int);
	void _SelectAll();
public:
	CSummaryPage();
	long ShowAsRemovePropertiesDialog(HWND__ *,IShellItemArray *,IPropertyStore *,SRPD_FLAGS);
	virtual long AddPages(int (*)(_PSP *,__int64),__int64);
	virtual long BeginGroupEdit(int,_GUID const &,void * *);
	virtual long BeginSubItemEdit(int,int,LV_EDIT_FLAGS,_GUID const &,void * *);
	virtual long EndGroupEdit(int,int,IPropertyControl *);
	virtual long EndSubItemEdit(int,int,int,IPropertyControl *);
	virtual long GetSubItemControl(int,int,_GUID const &,void * *);
	virtual long GetSubItemTitle(int,unsigned short *,int);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long OnInvokeVerb(int,unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReplacePage(unsigned int,int (*)(_PSP *,__int64),__int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSuppressAutoplay
{
	long _RegisterAutoplayCanceller();
	long _UnregisterAutoplayCanceller();
public:
	virtual long AllowAutoPlay(unsigned short const *,unsigned long,unsigned short const *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CSurfaceHubSettingsTelemetry
{
	static void SettingAllowed<unsigned short const * &>(unsigned short const * &);
	static void SettingBlocked<unsigned short const * &>(unsigned short const * &);
};

class CSyncCommandState
{
	long _GetSyncState(IUnknown *,unsigned long *);
	long _GetSyncStateOfMultiLocations(IShellItemArray *,unsigned long,unsigned long *);
public:
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
};

class CSyncIntegrationManager
{
	bool _IsAnyProviderEnabled(_GUID const *,SYNCSTATUS_PROVIDER_STATE *);
	long _CleanupCache();
	long _CommitProviderList(CCoSimpleArray<Microsoft::WRL::ComPtr<ISyncStatusProviderInfo>,4294967294,CISyncStatusProviderInfoComparer> const &);
	long _CreateCacheEntry(_ITEMIDLIST_ABSOLUTE const *);
	long _CreateSyncStatusProvider(CCoSimpleArray<Microsoft::WRL::ComPtr<ISyncStatusProviderInfo>,4294967294,CISyncStatusProviderInfoComparer> *,_GUID const &,ISyncStatusProvider *);
	long _GetCacheEntry(_ITEMIDLIST_ABSOLUTE const *,ISyncStatusCacheEntry * *);
	long _GetProviderArray(CCoSimpleArray<Microsoft::WRL::ComPtr<ISyncStatusProviderInfo>,4294967294,CISyncStatusProviderInfoComparer> *);
	long _GetValueAndStateFromCache(_ITEMIDLIST_ABSOLUTE const *,_tagpropertykey const &,tagPROPVARIANT *,PSC_STATE *,ISyncStatusCacheEntry * *);
	long _LoadProvidersFromRegistry();
	long _QueueBackgroundWork();
	virtual ~CSyncIntegrationManager();
	void _DispatchNotifications();
	void _UpdateItems();
public:
	CSyncIntegrationManager();
	long RuntimeClassInitialize();
	virtual long GetSyncStatusAsync(IShellItem *,_tagpropertykey const &,tagPROPVARIANT *);
	virtual long GetSyncStatusByIdList(_ITEMIDLIST_ABSOLUTE const *,bool,_tagpropertykey const &,tagPROPVARIANT *);
	virtual long OnSyncStatusChange(_GUID const &,IShellItem *,SYNC_PROVIDER_SYNCSTATUS_FLAGS,IPropertyStore *);
	virtual long QueueChangeNotify(ISyncStatusCacheEntry *);
	virtual void PerformBackgroundTasks();
	virtual void Shutdown();
};

class CSyncRootCommandStateBase
{
protected:
	bool _IsItemUnderRedirectedSyncRoot(IShellItemArray *);
	virtual bool v_EnableCommand(IShellItemArray *,bool);
public:
	virtual long GetState(IShellItemArray *,int,unsigned long *);
};

class CSyncRootManager
{
	long _EnsureSyncRootManagerCache();
public:
	CSyncRootManager();
	virtual long DoesOverlapWithOtherSyncRoots(unsigned short const *,unsigned short const *);
	virtual long EnumerateStorageProviders(IObjectArray * *);
	virtual long GetPendingRedirectionUserSyncRoot(unsigned short const *,unsigned short const *,unsigned short * *);
	virtual long GetStorageProviderBannerHandler(unsigned short const *,_GUID const &,void * *);
	virtual long GetStorageProviderBannerHandlerFromPath(unsigned short const *,_GUID const &,void * *);
	virtual long GetStorageProviderHandler(unsigned short const *,_GUID const &,void * *);
	virtual long GetStorageProviderHandlerFromPath(unsigned short const *,_GUID const &,void * *);
	virtual long GetStorageProviderInfo(unsigned short const *,IStorageProviderInfo * *);
	virtual long GetStorageProviderInfoFromPath(unsigned short const *,IStorageProviderInfo * *,unsigned short * *,STORAGE_PROVIDER_PATH_COMPARE_FLAGS *);
	virtual long GetUserSyncRoot(unsigned short const *,unsigned short const *,unsigned short * *);
	virtual long MigrateUserSyncRoots(unsigned short const *,unsigned short const *);
	virtual long RemoveAllUserSyncRoots(unsigned short const *);
	virtual long RemovePendingRedirectionUserSyncRoot(unsigned short const *);
	virtual long RemoveStorageProviderInfo(unsigned short const *);
	virtual long RemoveUserSyncRoot(unsigned short const *);
	virtual long SetPendingRedirectionUserSyncRoot(unsigned short const *,unsigned short const *);
	virtual long SetStorageProviderInfo(IStorageProviderInfo *);
	virtual long SetUserSyncRoot(unsigned short const *,unsigned short const *);
};

class CSyncRootManagerCache
{
	long GetHandlerFromPathHelper(CSyncRootManagerCache::HandlerType,unsigned short const *,_GUID const &,void * *);
	long GetHandlerHelper(CSyncRootManagerCache::HandlerType,unsigned short const *,_GUID const &,void * *);
	long _DoesOverlapWithOtherSyncRootsInner(unsigned short const *,unsigned short const *,unsigned short const *);
	long _EnsureCachedValues();
	long _EnsureCachedValuesReaderModeWrapper();
public:
	long DoesOverlapWithOtherSyncRoots(unsigned short const *,unsigned short const *);
	long EnumerateStorageProviders(IObjectArray * *);
	long GetStorageProviderInfo(unsigned short const *,IStorageProviderInfo * *);
	long GetUserSyncRoot(unsigned short const *,unsigned short const *,bool,unsigned short * *);
	long MigrateUserSyncRoots(unsigned short const *,unsigned short const *);
	long RemoveAllUserSyncRoots(unsigned short const *);
	long RemovePendingRedirectionUserSyncRoot(unsigned short const *);
	long RemoveStorageProviderInfo(unsigned short const *);
	long RemoveUserSyncRoot(unsigned short const *);
	long SetPendingRedirectionUserSyncRoot(unsigned short const *,unsigned short const *);
	long SetStorageProviderInfo(IStorageProviderInfo *);
	long SetUserSyncRoot(unsigned short const *,unsigned short const *);
	unsigned long Release();
};

struct CSyncRootsProfileNotificationHandler
{
	virtual long OnCreate(unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnDelete(unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnLoad(unsigned short const *,unsigned short const *,unsigned long,int);
	virtual long OnMigrate(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnUnload(unsigned short const *,unsigned short const *,unsigned long,int);
	virtual long OnUpgrade(unsigned short const *,unsigned short const *,unsigned long);
};

class CSyncStateTogglePause
{
protected:
	virtual bool v_EnableCommand(IShellItemArray *,bool);
public:
	virtual long Execute();
};

class CSyncStatusHandler
{
	virtual ~CSyncStatusHandler();
public:
	CSyncStatusHandler();
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long Initialize(IShellItem *,unsigned long);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
};

class CSyncStatusProviderInfo
{
	SYNCSTATUS_PROVIDER_STATE GetState();
	long GetProvider(ISyncStatusProvider * *);
	long SetProvider(ISyncStatusProvider *);
	virtual ~CSyncStatusProviderInfo();
public:
	CSyncStatusProviderInfo();
	long RuntimeClassInitialize(_GUID const &,HKEY__ *,ISyncStatusProvider *);
	virtual long Clear();
	virtual long DoesProviderApply(IShellItem *,int *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetName(unsigned short * *);
	virtual long GetState(SYNCSTATUS_PROVIDER_STATE *);
	virtual long GetSyncProviderId(_GUID *);
	virtual long GetSyncStatus(IShellItem *,IPropertyStore *);
	virtual long OnSyncStatusChange(IShellItem *,SYNC_PROVIDER_SYNCSTATUS_FLAGS,IPropertyStore *);
	virtual long OnSyncStatusChangeByParsingName(unsigned short const *,SYNC_PROVIDER_SYNCSTATUS_FLAGS,IPropertyStore *);
	virtual long OnSyncStatusProviderStateChange(SYNCSTATUS_PROVIDER_STATE);
};

struct CSyncingOverlayHandler
{
	CSyncingOverlayHandler();
};

class CTCoAllocPolicy
{
	static unsigned __int64 _CoTaskMemSize(void *);
public:
	static long Alloc(void *,unsigned long,unsigned __int64,void * *);
	static long Realloc(void *,unsigned long,void *,unsigned __int64,void * *);
};

struct CTContainer_PolicyLocalMem
{
	static int DestroyMem(void *);
};

struct CTContainer_PolicyNewMem
{
	static void Destroy<STR_RESULTS_PROCESSING_CONFIG>(STR_RESULTS_PROCESSING_CONFIG *);
};

struct CTContainer_PolicyRelease<IUnknown>
{
	static void Destroy(IUnknown *);
};

struct CTGlobalAllocPolicy
{
	static long Alloc(void *,unsigned long,unsigned __int64,void * *);
};

struct CTLTStore
{
	long GetDecorator(int,_GUID const &,void * *);
	static long s_CreateInstance(ICriticalSection *,CTLTStore * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTLocalAllocPolicy
{
	static long Alloc(void *,unsigned long,unsigned __int64,void * *);
	static long Realloc(void *,unsigned long,void *,unsigned __int64,void * *);
};

struct CTRefBase<CCtrlMouseWheelHandler,IDispatch,CTRefBase_NoModuleLifetimePolicy>
{
	static long CreateInstance(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTRefBase<CFSInterruptSource::CSuspendedChild,IUnknown,CTRefBase_NoModuleLifetimePolicy>
{
	static long Create(CFSInterruptSource::CSuspendedChild * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTRefBase<CLibrarySaveOperation,IUnknown,CTRefBase_NoModuleLifetimePolicy>
{
	static long Create(CLibrarySaveOperation * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTRefBase<CLimitedMalloc,IMalloc,CTRefBase_NoModuleLifetimePolicy>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTRefBase<CParseAndCreateItem,IParseAndCreateItem,CTRefBase_DllModuleLifetimePolicy>
{
	static long CreateInstance(_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTRefBase<CStatusBarPropertyStore,IPropertyStore,CTRefBase_NoModuleLifetimePolicy>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTSimpleArray<ATL::CComPtr<CFSInterruptSource::CSuspendedChild>,4294967294,CTPolicyCoTaskMem<ATL::CComPtr<CFSInterruptSource::CSuspendedChild> >,CSimpleArrayStandardCompareHelper<ATL::CComPtr<CFSInterruptSource::CSuspendedChild> >,CSimpleArrayStandardMergeHelper<ATL::CComPtr<CFSInterruptSource::CSuspendedChild> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ATL::CComPtr<IAssociationElement>,4294967294,CTPolicyLocalMem<ATL::CComPtr<IAssociationElement> >,CSimpleArrayStandardCompareHelper<ATL::CComPtr<IAssociationElement> >,CSimpleArrayStandardMergeHelper<ATL::CComPtr<IAssociationElement> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _InternalSetAtIndex<ATL::CComPtr<IAssociationElement> const &>(unsigned __int64,ATL::CComPtr<IAssociationElement> const &);
};

struct CTSimpleArray<ATL::CComPtr<IOperationStatusTilePriv>,4294967294,CTPolicyCoTaskMem<ATL::CComPtr<IOperationStatusTilePriv> >,CSimpleArrayStandardCompareHelper<ATL::CComPtr<IOperationStatusTilePriv> >,CSimpleArrayStandardMergeHelper<ATL::CComPtr<IOperationStatusTilePriv> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<ATL::CComPtr<ISearchTypeAheadResult>,4294967294,CTPolicyCoTaskMem<ATL::CComPtr<ISearchTypeAheadResult> >,CSimpleArrayStandardCompareHelper<ATL::CComPtr<ISearchTypeAheadResult> >,CSimpleArrayStandardMergeHelper<ATL::CComPtr<ISearchTypeAheadResult> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<ActivityTracker::SortingData,4294967294,CTPolicyCoTaskMem<ActivityTracker::SortingData>,CSimpleArrayStandardCompareHelper<ActivityTracker::SortingData>,CSimpleArrayStandardMergeHelper<ActivityTracker::SortingData> >
{
	long SortEx<ActivityTracker::CSortingDataCompare>(ActivityTracker::CSortingDataCompare const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _MergeSort<ActivityTracker::CSortingDataCompare>(ActivityTracker::CSortingDataCompare const &,unsigned __int64,unsigned __int64);
	void _MergeThem<ActivityTracker::CSortingDataCompare>(ActivityTracker::CSortingDataCompare const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<AssociationElement *,4294967294,CTPolicyCoTaskMem<AssociationElement *>,CSimpleArrayStandardCompareHelper<AssociationElement *>,CSimpleArrayStandardMergeHelper<AssociationElement *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<BrowserRegistryCacheEntry *,4294967294,CTPolicyCoTaskMem<BrowserRegistryCacheEntry *>,CSimpleArrayStandardCompareHelper<BrowserRegistryCacheEntry *>,CSimpleArrayStandardMergeHelper<BrowserRegistryCacheEntry *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CAssocListBase::ASSOC_ELEMENT,4294967294,CTPolicyLocalMem<CAssocListBase::ASSOC_ELEMENT>,CSimpleArrayStandardCompareHelper<CAssocListBase::ASSOC_ELEMENT>,CSimpleArrayStandardMergeHelper<CAssocListBase::ASSOC_ELEMENT> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
	void _InternalSetAtIndex<CAssocListBase::ASSOC_ELEMENT const &>(unsigned __int64,CAssocListBase::ASSOC_ELEMENT const &);
};

struct CTSimpleArray<CCommandFolder::CExplorerCommandInfo,4294967294,CTPolicyCoTaskMem<CCommandFolder::CExplorerCommandInfo>,CSimpleArrayStandardCompareHelper<CCommandFolder::CExplorerCommandInfo>,CSimpleArrayStandardMergeHelper<CCommandFolder::CExplorerCommandInfo> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<CCommandFolder::CExplorerCommandInfo const &>(CCommandFolder::CExplorerCommandInfo const &,unsigned __int64);
	void _InternalSetAtIndex<CCommandFolder::CExplorerCommandInfo const &>(unsigned __int64,CCommandFolder::CExplorerCommandInfo const &);
};

struct CTSimpleArray<CConflictDialogData::DIALOG_DATA_WORK_ITEM,4294967294,CTPolicyCoTaskMem<CConflictDialogData::DIALOG_DATA_WORK_ITEM>,CSimpleArrayStandardCompareHelper<CConflictDialogData::DIALOG_DATA_WORK_ITEM>,CSimpleArrayStandardMergeHelper<CConflictDialogData::DIALOG_DATA_WORK_ITEM> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CEventSinkContainer::EVENT_SINK_ENTRY,4294967294,CTPolicyCoTaskMem<CEventSinkContainer::EVENT_SINK_ENTRY>,CSimpleArrayStandardCompareHelper<CEventSinkContainer::EVENT_SINK_ENTRY>,CSimpleArrayStandardMergeHelper<CEventSinkContainer::EVENT_SINK_ENTRY> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CItemSidMapping *,4294967294,CTPolicyCoTaskMem<CItemSidMapping *>,CSimpleArrayStandardCompareHelper<CItemSidMapping *>,CSimpleArrayStandardMergeHelper<CItemSidMapping *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CPackageInstallStateStoreEnum::PACKAGE_INSTALL_STATE_INFORMATION,4294967294,CTPolicyCoTaskMem<CPackageInstallStateStoreEnum::PACKAGE_INSTALL_STATE_INFORMATION>,CSimpleArrayStandardCompareHelper<CPackageInstallStateStoreEnum::PACKAGE_INSTALL_STATE_INFORMATION>,CSimpleArrayStandardMergeHelper<CPackageInstallStateStoreEnum::PACKAGE_INSTALL_STATE_INFORMATION> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CPinnedPeopleList::ChangeListener,4294967294,CTPolicyCoTaskMem<CPinnedPeopleList::ChangeListener>,CSimpleArrayStandardCompareHelper<CPinnedPeopleList::ChangeListener>,CSimpleArrayStandardMergeHelper<CPinnedPeopleList::ChangeListener> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CPixelBucket *,4294967294,CTPolicyCoTaskMem<CPixelBucket *>,CSimpleArrayStandardCompareHelper<CPixelBucket *>,CSimpleArrayStandardMergeHelper<CPixelBucket *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CProfferService::SERVICE_ITEM,4294967294,CTPolicyCoTaskMem<CProfferService::SERVICE_ITEM>,CSimpleArrayStandardCompareHelper<CProfferService::SERVICE_ITEM>,CSimpleArrayStandardMergeHelper<CProfferService::SERVICE_ITEM> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CPropVariant,4294967294,CTPolicyCoTaskMem<CPropVariant>,CSimpleArrayStandardCompareHelper<CPropVariant>,CSimpleArrayStandardMergeHelper<CPropVariant> >
{
	long _Add<unsigned int>(unsigned int,unsigned __int64 *);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CProperTreeHost::AppAndEnterpriseIds,4294967294,CTPolicyCoTaskMem<CProperTreeHost::AppAndEnterpriseIds>,CSimpleArrayStandardCompareHelper<CProperTreeHost::AppAndEnterpriseIds>,CSimpleArrayStandardMergeHelper<CProperTreeHost::AppAndEnterpriseIds> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CSearchHistorySuggestionsTask::SearchHistoryResultItem,4294967294,CTPolicyCoTaskMem<CSearchHistorySuggestionsTask::SearchHistoryResultItem>,CSimpleArrayStandardCompareHelper<CSearchHistorySuggestionsTask::SearchHistoryResultItem>,CSimpleArrayStandardMergeHelper<CSearchHistorySuggestionsTask::SearchHistoryResultItem> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CStorageProviderRootsCache *,4294967294,CTPolicyCoTaskMem<CStorageProviderRootsCache *>,CSimpleArrayStandardCompareHelper<CStorageProviderRootsCache *>,CSimpleArrayStandardMergeHelper<CStorageProviderRootsCache *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CStorageProviderRootsCache::USER_SYNC_ROOT_INFO *,4294967294,CTPolicyCoTaskMem<CStorageProviderRootsCache::USER_SYNC_ROOT_INFO *>,CSimpleArrayStandardCompareHelper<CStorageProviderRootsCache::USER_SYNC_ROOT_INFO *>,CSimpleArrayStandardMergeHelper<CStorageProviderRootsCache::USER_SYNC_ROOT_INFO *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CVolumeInfoCache::VOLUME_INFO_CACHE_ENTRY,4294967294,CTPolicyCoTaskMem<CVolumeInfoCache::VOLUME_INFO_CACHE_ENTRY>,CSimpleArrayStandardCompareHelper<CVolumeInfoCache::VOLUME_INFO_CACHE_ENTRY>,CSimpleArrayStandardMergeHelper<CVolumeInfoCache::VOLUME_INFO_CACHE_ENTRY> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CollectionChangeArgs,4294967294,CTPolicyLocalMem<CollectionChangeArgs>,CSimpleArrayStandardCompareHelper<CollectionChangeArgs>,CSimpleArrayStandardMergeHelper<CollectionChangeArgs> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CompactItem,4294967294,CTPolicyCoTaskMem<CompactItem>,CSimpleArrayStandardCompareHelper<CompactItem>,CSimpleArrayStandardMergeHelper<CompactItem> >
{
	long SortEx<CCompareCompactItem>(CCompareCompactItem const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _InternalSetAtIndex<CompactItem const &>(unsigned __int64,CompactItem const &);
	void _MergeSort<CCompareCompactItem>(CCompareCompactItem const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CCompareCompactItem>(CCompareCompactItem const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ContextMenuRenderingData *,4294967294,CTPolicyCoTaskMem<ContextMenuRenderingData *>,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *>,CSimpleArrayStandardMergeHelper<ContextMenuRenderingData *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<DISPLAY_OBJECT_CONTAINER_DATA,4294967294,CTPolicyCoTaskMem<DISPLAY_OBJECT_CONTAINER_DATA>,CSimpleArrayStandardCompareHelper<DISPLAY_OBJECT_CONTAINER_DATA>,CSimpleArrayStandardMergeHelper<DISPLAY_OBJECT_CONTAINER_DATA> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _InternalSetAtIndex<DISPLAY_OBJECT_CONTAINER_DATA const &>(unsigned __int64,DISPLAY_OBJECT_CONTAINER_DATA const &);
};

struct CTSimpleArray<DirectUI::Element *,4294967294,CTPolicyCoTaskMem<DirectUI::Element *>,CSimpleArrayStandardCompareHelper<DirectUI::Element *>,CSimpleArrayStandardMergeHelper<DirectUI::Element *> >
{
	long SortEx<ElementWidthComparer>(ElementWidthComparer const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
	void _MergeSort<ElementWidthComparer>(ElementWidthComparer const &,unsigned __int64,unsigned __int64);
	void _MergeThem<ElementWidthComparer>(ElementWidthComparer const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<IAssocHandler *,4294967294,CTPolicyCoTaskMem<IAssocHandler *>,CSimpleArrayStandardCompareHelper<IAssocHandler *>,CSimpleArrayStandardMergeHelper<IAssocHandler *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<ICompositionChangedSink *,4294967294,CTPolicyCoTaskMem<ICompositionChangedSink *>,CSimpleArrayStandardCompareHelper<ICompositionChangedSink *>,CSimpleArrayStandardMergeHelper<ICompositionChangedSink *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<IImeCompatibleChangedSink *,4294967294,CTPolicyCoTaskMem<IImeCompatibleChangedSink *>,CSimpleArrayStandardCompareHelper<IImeCompatibleChangedSink *>,CSimpleArrayStandardMergeHelper<IImeCompatibleChangedSink *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<IOperationStatusSink *,4294967294,CTPolicyCoTaskMem<IOperationStatusSink *>,CSimpleArrayStandardCompareHelper<IOperationStatusSink *>,CSimpleArrayStandardMergeHelper<IOperationStatusSink *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<IPopupCommand *,4294967294,CTPolicyCoTaskMem<IPopupCommand *>,CSimpleArrayStandardCompareHelper<IPopupCommand *>,CSimpleArrayStandardMergeHelper<IPopupCommand *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<ISearchTypeAheadEventsSink *,4294967294,CTPolicyCoTaskMem<ISearchTypeAheadEventsSink *>,CSimpleArrayStandardCompareHelper<ISearchTypeAheadEventsSink *>,CSimpleArrayStandardMergeHelper<ISearchTypeAheadEventsSink *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<IUnknown *,4294967294,CTPolicyCoTaskMem<IUnknown *>,CSimpleArrayStandardCompareHelper<IUnknown *>,CSimpleArrayStandardMergeHelper<IUnknown *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CSecondaryTileFile>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CSecondaryTileFile> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CSecondaryTileFile> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CSecondaryTileFile> > >
{
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IDispatchNotification>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IDispatchNotification> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IDispatchNotification> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IDispatchNotification> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<ISyncStatusCacheEntry>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<ISyncStatusCacheEntry> >,CISyncStatusCacheEntryComparer,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<ISyncStatusCacheEntry> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<ISyncStatusProviderInfo>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<ISyncStatusProviderInfo> >,CISyncStatusProviderInfoComparer,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<ISyncStatusProviderInfo> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<ITileInfo>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<ITileInfo> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITileInfo> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<ITileInfo> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::WeakRef,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::WeakRef>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::WeakRef>,CSimpleArrayStandardMergeHelper<Microsoft::WRL::WeakRef> >
{
	long _Add<Microsoft::WRL::WeakRef const &>(Microsoft::WRL::WeakRef const &,unsigned __int64 *);
	~CTSimpleArray<Microsoft::WRL::WeakRef,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::WeakRef>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::WeakRef>,CSimpleArrayStandardMergeHelper<Microsoft::WRL::WeakRef> >();
};

struct CTSimpleArray<Microsoft::WRL::WeakRef,4294967294,CTPolicyLocalMem<Microsoft::WRL::WeakRef>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::WeakRef>,CSimpleArrayStandardMergeHelper<Microsoft::WRL::WeakRef> >
{
	long RemoveAt(unsigned __int64);
	long Resize(unsigned __int64,Microsoft::WRL::WeakRef const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::Windows::FileExplorer::Banners::BannerSettings::BannerMetaData,4294967294,CTPolicyCoTaskMem<Microsoft::Windows::FileExplorer::Banners::BannerSettings::BannerMetaData>,CSimpleArrayStandardCompareHelper<Microsoft::Windows::FileExplorer::Banners::BannerSettings::BannerMetaData>,CSimpleArrayStandardMergeHelper<Microsoft::Windows::FileExplorer::Banners::BannerSettings::BannerMetaData> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<PlaceholderQosResult,4294967294,CTPolicyCoTaskMem<PlaceholderQosResult>,CSimpleArrayStandardCompareHelper<PlaceholderQosResult>,CSimpleArrayStandardMergeHelper<PlaceholderQosResult> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<PlaceholderQosSizeDuration,4294967294,CTPolicyCoTaskMem<PlaceholderQosSizeDuration>,CSimpleArrayStandardCompareHelper<PlaceholderQosSizeDuration>,CSimpleArrayStandardMergeHelper<PlaceholderQosSizeDuration> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<SHELL_ITEM_RESOURCE,4294967294,CTPolicyCoTaskMem<SHELL_ITEM_RESOURCE>,CSimpleArrayStandardCompareHelper<SHELL_ITEM_RESOURCE>,CSimpleArrayStandardMergeHelper<SHELL_ITEM_RESOURCE> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _InternalSetAtIndex<SHELL_ITEM_RESOURCE const &>(unsigned __int64,SHELL_ITEM_RESOURCE const &);
};

struct CTSimpleArray<SystemSettings::Environment::IEnvironmentChangedEventHandler *,4294967294,CTPolicyCoTaskMem<SystemSettings::Environment::IEnvironmentChangedEventHandler *>,CSimpleArrayStandardCompareHelper<SystemSettings::Environment::IEnvironmentChangedEventHandler *>,CSimpleArrayStandardMergeHelper<SystemSettings::Environment::IEnvironmentChangedEventHandler *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	~CTSimpleArray<SystemSettings::Environment::IEnvironmentChangedEventHandler *,4294967294,CTPolicyCoTaskMem<SystemSettings::Environment::IEnvironmentChangedEventHandler *>,CSimpleArrayStandardCompareHelper<SystemSettings::Environment::IEnvironmentChangedEventHandler *>,CSimpleArrayStandardMergeHelper<SystemSettings::Environment::IEnvironmentChangedEventHandler *> >();
};

struct CTSimpleArray<TranslateResetEvent,4294967294,CTPolicyLocalMem<TranslateResetEvent>,CSimpleArrayStandardCompareHelper<TranslateResetEvent>,CSimpleArrayStandardMergeHelper<TranslateResetEvent> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CTPolicyCoTaskMem<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >,CSimpleArrayStandardMergeHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Windows::Shell::SyncStatus::CIdListPtr,4294967294,CTPolicyCoTaskMem<Windows::Shell::SyncStatus::CIdListPtr>,CSimpleArrayStandardCompareHelper<Windows::Shell::SyncStatus::CIdListPtr>,CSimpleArrayStandardMergeHelper<Windows::Shell::SyncStatus::CIdListPtr> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<_GUID,4294967294,CTPolicyCoTaskMem<_GUID>,CSimpleArrayStandardCompareHelper<_GUID>,CSimpleArrayStandardMergeHelper<_GUID> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<_ITEMIDLIST_ABSOLUTE *,4294967294,CTPolicyCoTaskMem<_ITEMIDLIST_ABSOLUTE *>,CSimpleArrayStandardCompareHelper<_ITEMIDLIST_ABSOLUTE *>,CSimpleArrayStandardMergeHelper<_ITEMIDLIST_ABSOLUTE *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<_tagpropertykey,4294967294,CTPolicyCoTaskMem<_tagpropertykey>,CSimpleArrayStandardCompareHelper<_tagpropertykey>,CSimpleArrayStandardMergeHelper<_tagpropertykey> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<double,4294967294,CTPolicyLocalMem<double>,CSimpleArrayStandardCompareHelper<double>,CSimpleArrayStandardMergeHelper<double> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<unsigned short *,4294967294,CTPolicyCoTaskMem<unsigned short *>,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper,CSimpleArrayStandardMergeHelper<unsigned short *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<unsigned short * const &>(unsigned short * const &,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<unsigned short *,4294967294,CTPolicyCoTaskMem<unsigned short *>,CSimpleArrayStandardCompareHelper<unsigned short *>,CSimpleArrayStandardMergeHelper<unsigned short *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<unsigned short *,4294967294,CTPolicyCoTaskMem<unsigned short *>,NativeStringComparer,CSimpleArrayStandardMergeHelper<unsigned short *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<wistd::unique_ptr<Microsoft::Windows::FileExplorer::Banners::BannerData,wistd::default_delete<Microsoft::Windows::FileExplorer::Banners::BannerData> >,4294967294,CTPolicyCoTaskMem<wistd::unique_ptr<Microsoft::Windows::FileExplorer::Banners::BannerData,wistd::default_delete<Microsoft::Windows::FileExplorer::Banners::BannerData> > >,CSimpleArrayStandardCompareHelper<wistd::unique_ptr<Microsoft::Windows::FileExplorer::Banners::BannerData,wistd::default_delete<Microsoft::Windows::FileExplorer::Banners::BannerData> > >,CSimpleArrayStandardMergeHelper<wistd::unique_ptr<Microsoft::Windows::FileExplorer::Banners::BannerData,wistd::default_delete<Microsoft::Windows::FileExplorer::Banners::BannerData> > > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleFixedArray<ActivityTracker::SortingData,CSimpleArrayStandardCompareHelper<ActivityTracker::SortingData> >
{
	long GetAt(unsigned __int64,ActivityTracker::SortingData &);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<ISyncStatusCacheEntry>,CISyncStatusCacheEntryComparer>
{
	long FindEx<CISyncStatusCacheEntryComparer>(CISyncStatusCacheEntryComparer const &,Microsoft::WRL::ComPtr<ISyncStatusCacheEntry> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<ISyncStatusProviderInfo>,CISyncStatusProviderInfoComparer>
{
	long GetAt(unsigned __int64,Microsoft::WRL::ComPtr<ISyncStatusProviderInfo> &);
};

struct CTSimpleFixedArray<Microsoft::WRL::WeakRef,CSimpleArrayStandardCompareHelper<Microsoft::WRL::WeakRef> >
{
	long GetAt(unsigned __int64,Microsoft::WRL::WeakRef &);
};

struct CTSimpleFixedArray<unsigned short *,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	long BinarySearchEx<CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>(CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper const &,unsigned short * const &,unsigned __int64 *);
};

struct CTSmartObj<CAutoDestItemsList *,CTSmartPtr_PolicyComplete<CTContainer_PolicyNewMem> >
{
	void Release();
};

struct CTSmartObj<CCacheInstance *,CTSmartPtr_PolicyComplete<CTContainer_PolicyRelease<CCacheInstance> > >
{
	void Release();
};

struct CTSmartObj<CConfirmConflictItem *,CTSmartPtr_PolicyComplete<CTContainer_PolicyNewVectorMem> >
{
	void Release();
};

struct CTSmartObj<CConfirmConflictResultInfo *,CTSmartPtr_PolicyComplete<CTContainer_PolicyNewVectorMem> >
{
	void Release();
};

struct CTSmartObj<HBITMAP__ *,CAutoHandle_Policy<HBITMAP__ *> >
{
	void Release();
};

struct CTSmartObj<HMENU__ *,CAutoHandle_Policy<HMENU__ *> >
{
	void Release();
};

struct CTSmartObj<Microsoft::WRL::ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IUnknown> > > *,CTSmartPtr_PolicyComplete<CTContainer_PolicyNewVectorMem> >
{
	void Release();
};

struct CTSmartObj<void *,CAutoHandle_Policy<void *> >
{
	void Release();
};

struct CTSmartStruct<CONFIRM_CONFLICT_ITEM,CConfirmConflictItem>
{
	void Release();
};

struct CTSmartStruct<TYPEAHEAD_LOCAL_SETTINGS,CTypeAheadLocalSettings>
{
	void Release();
};

class CTTFProps
{
	int _IsValidAddress(unsigned char *,unsigned long);
	int _IsValidOffset(unsigned __int64,unsigned long);
	long _CacheNameStrings(unsigned short,unsigned short);
	long _GetNameFromTable(unsigned short,unsigned short * *);
	long _GetNameString(unsigned short,unsigned short,unsigned short,unsigned short * *,int);
	long _GetNameTable(CTTFProps::TTF_PARTIALNAMETABLE const * *,unsigned short *,unsigned short *);
	long _GetSmartNameString(unsigned short,unsigned short,unsigned short * *);
	long _MapFile(unsigned short const *);
	long _ReadOS2Table();
	long _TTCGetUniqueNames(unsigned short * * const,unsigned long,unsigned long *);
	long _TTFGetTableData(unsigned long,unsigned long,unsigned long,void *);
	long _TTFSetTTCIndex(unsigned long);
	unsigned long _TTFGetOffsetToTable(unsigned long,unsigned long *);
	void * _TTFGetSfntFragment(unsigned long,unsigned long);
	void _UnMapFile();
public:
	virtual long GetAuthor(unsigned short * *);
	virtual long GetCopyright(unsigned short * *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetEmbeddability(unsigned short * *);
	virtual long GetLicense(unsigned short * *);
	virtual long GetManufacturer(unsigned short * *);
	virtual long GetTitle(tagPROPVARIANT *);
	virtual long GetTrademark(unsigned short * *);
	virtual long GetVersion(unsigned short * *);
	virtual long Load(unsigned short const *);
	virtual ~CTTFProps();
};

struct CTaskCondition
{
	virtual long Eval(tagCACHEDTASKCONDITION *,int,int *);
	virtual long Init(unsigned short const *,int,INamedPropertyStore *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTaskConditionBase
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTaskConditionCombiner
{
	static int s_DPAEvalConditionCB(ITaskCondition *,TASK_COMBINE_STATE *);
public:
	CTaskConditionCombiner();
	virtual long AddCondition(ITaskCondition *);
	virtual long Eval(tagCACHEDTASKCONDITION *,int,int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void SetInvert(int);
	virtual void SetIsAnd(int);
};

class CTaskEnumHKCR
{
	virtual ~CTaskEnumHKCR();
	void _AddFromHKCR();
public:
	virtual long InternalResumeRT();
};

class CTaskLock
{
protected:
	virtual ~CTaskLock();
public:
	bool DispatchQueueItem();
	long Release();
	virtual long PostItem(IQueueItem2 *);
};

struct CTaskXmlFile
{
	long AppendStrippedId(unsigned short const *);
	static int FindApplet(unsigned short const *,unsigned short const *,__int64);
	~CTaskXmlFile();
};

class CTaskbandPin
{
protected:
	long _GetApplication(IApplicationResolver *,unsigned short const *,IShellItem * *,unsigned short * *,unsigned short * *);
	long _GetShellItem(unsigned short const *,IShellItem * *);
	long _ProcessDestinationFile(IApplicationResolver *,_ITEMIDLIST_ABSOLUTE const *,unsigned long,IShellItem * *,unsigned short * *,unsigned short * *);
	long _ProcessDestinationFolder(IApplicationResolver *,_ITEMIDLIST_ABSOLUTE const *,unsigned long,IShellItem * *,unsigned short * *);
	long _TryDestinationViaAppID(IAssociationArray *,IApplicationResolver *,IShellItem * *,unsigned short * *,unsigned short * *);
	virtual LauncherTelemetry::Location v_GetPinningDestination();
	virtual int v_IsAcceptableTarget(_ITEMIDLIST_ABSOLUTE const *,IShellLinkW *,PINNABLEFLAG,IShellItem * *,unsigned short * *,unsigned short * *,IShellItem * *);
	virtual int v_IsRestricted();
	virtual int v_ShouldHideMenu(unsigned int);
	virtual long v_GetChangeCount(unsigned long *);
	virtual long v_GetHelpText(unsigned __int64,unsigned short *,unsigned int);
	virtual long v_GetMenuStringID(unsigned int *);
	virtual long v_SetRemovedChangeCount(unsigned long);
	virtual long v_TrackUnpinnedApp(unsigned short const *);
	virtual unsigned long v_GetRemovedChangeCount();
	virtual unsigned short const * v_GetVerb(unsigned int);
	virtual void v_SendPinRearrangeSQM();
public:
	CTaskbandPin();
	virtual IStream * v_OpenLinksRegStream(unsigned long);
	virtual IStream * v_OpenPinRegStream(unsigned long);
	virtual long RemoveFromList(IShellItem *);
	virtual long v_SetChangeCount(unsigned long);
	virtual long v_SetPinStreamVersion(unsigned long);
	virtual unsigned long v_GetPinStreamVersion();
	virtual void v_NotifyPinListChange(_ITEMIDLIST_ABSOLUTE const *,int);
};

class CTasksFolder
{
	long _ExecuteApplet(_ITEMID_CHILD const *,HWND__ *);
	long _GetAppPidl(_GUID const &,_ITEMIDLIST_RELATIVE * *);
	long _GetAppletDescriptionFromTaskIDList(_ITEMID_CHILD const *,unsigned short * *);
	long _GetAppletIDListFromTaskIDList(_ITEMID_CHILD const *,_ITEMIDLIST_ABSOLUTE * *);
	long _GetAppletNameFromTaskIDList(_ITEMID_CHILD const *,unsigned short * *);
	long _GetItemIcon(_ITEMID_CHILD const *,HWND__ *,_GUID const &,void * *);
	long _GetItemInfotip(_ITEMID_CHILD const *,unsigned short *,unsigned int);
	long _GetTaskAppName(_ITEMID_CHILD const *,tagVARIANT *);
	virtual ~CTasksFolder();
	void _ControlPanelItemLaunchedSQM(_ITEMID_CHILD const *,bool);
public:
	long Init();
	static long CreateAppletOrTaskPidl(unsigned int,bool,CControlPanelItem const *,CONTROLPANELTASK const *,CControlPanelItem const *,_ITEMID_CHILD * *);
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CallBack(IShellFolder *,HWND__ *,IDataObject *,unsigned int,unsigned __int64,__int64);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetThumbnailHandler(_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual long SetQueryText(unsigned short const *,ICondition *);
	virtual long Update(IBindCtx *,_ITEMID_CHILD const *,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTasksFolderCallback
{
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long GetSortColumns(SORTCOLUMN *,unsigned int,unsigned int *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
};

class CTemplateBackground
{
	long _ConnectToView(int);
	long _SetFolderType();
public:
	CTemplateBackground();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTextPropertyControl
{
	__int64 _subclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	long _ConvertToCRLF(unsigned short const *,unsigned short * *);
	static __int64 s_subclassProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	virtual HWND__ * v_CreateActiveWindow(HWND__ *,tagRECT const *);
	virtual __int64 v_BaseWindowProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual int v_CanExpand();
	virtual int v_IsExpanded();
	virtual long v_AdjustWindowRect(HWND__ *,tagRECT *,tagRECT const *,int);
	virtual long v_GetValue(_GUID const &,void * *);
	virtual long v_SetValue(IUnknown *);
	virtual void v_Cancel();
	virtual void v_Commit();
	virtual void v_DestroyActiveWindow();
	virtual void v_ExpandNow(HWND__ *,int);
	virtual ~CTextPropertyControl();
	void _SetEditText(HWND__ *);
public:
	CTextPropertyControl(int);
	virtual long IsModified(int *);
	virtual long SetModified(int);
	virtual long UIActivateIO(int,tagMSG *);
};

struct CThemesRegTreeItem
{
	virtual long GetCheckState(int *);
	virtual long SetCheckState(int);
};

struct CThreadBindCtx
{
	virtual long EnumObjectParam(IEnumString * *);
	virtual long GetBindOptions(tagBIND_OPTS *);
	virtual long GetObjectParam(unsigned short *,IUnknown * *);
	virtual long GetRunningObjectTable(IRunningObjectTable * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RegisterObjectBound(IUnknown *);
	virtual long RegisterObjectParam(unsigned short *,IUnknown *);
	virtual long ReleaseBoundObjects();
	virtual long RevokeObjectBound(IUnknown *);
	virtual long RevokeObjectParam(unsigned short *);
	virtual long SetBindOptions(tagBIND_OPTS *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CThreadBindCtxLifetime
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CThreadRefHost
{
	void WaitForRefs();
};

struct CThreadRefTaker
{
	virtual ~CThreadRefTaker();
};

class CThumbnail
{
	virtual ~CThumbnail();
public:
	static long s_BitmapFromIDListInternal(IShellItem *,unsigned int,int,IUnknown *,ISharedBitmap * *);
	virtual long GetBitmap(unsigned short const *,unsigned long,long,long);
	virtual long GetBitmapFromIDList(_ITEMIDLIST_ABSOLUTE const *,unsigned long,long,long);
	virtual long GetBitmapFromShellItem(IShellItem *,unsigned long,long,long);
	virtual long Init(HWND__ *,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CThumbnailAdorner
{
protected:
	CThumbnailAdorner(IImageListImageDecorator *,IImageListImageDecorator *,IImageListImageDecorator *);
public:
	static long CreateInstance(IImageListImageDecorator *,IImageListImageDecorator *,IImageListImageDecorator *,_GUID const &,void * *);
	virtual long ComputeBounds(tagRECT *,tagRECT *);
	virtual long Draw(HDC__ *);
};

class CThumbnailAdornerFactory
{
	long _BuildAttributeAdorner(IShellItem2 *,IImageListImageDecorator * *);
	long _BuildGeneralAdorner(IShellItem2 *,unsigned short const *,IImageListImageDecorator * *);
	long _BuildTypeOverlayAdorner(IShellItem2 *,unsigned short const *,IImageListImageDecorator * *);
	virtual ~CThumbnailAdornerFactory();
public:
	static long CreateInstance(_GUID const &,void * *);
	virtual long GetThumbnailAdorner(IShellItem2 *,int,IImageListImageDecorator * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CThumbnailControlCallback
{
	virtual long OnNewImageAvailable();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CThumbnailControlHost
{
protected:
	long _EnsureItemThumbnail();
	virtual void OnDestroy();
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void Paint(HDC__ *,tagRECT const *,tagRECT const *,tagRECT *,tagRECT *);
public:
	long SetItems(IShellItemArray *,ITSIF);
	long SetMaxSize(tagSIZE,IFrameWorkItem * *);
	long Update();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class CThumbnailLookupTable
{
	int _GetNextImageListIndex(_tltnode * *);
	int _GetThumbnailHeight(int);
	long _CreateAggregateImageList(int,IImageList *,IImageList *,_GUID const &,void * *);
	long _CreateAndSetPerfectCallback(IImageList2 *);
	long _CreateFixedImageList(unsigned int,bool,_GUID const &,void * *);
	long _CreateImageList(_GUID const &,int,int,bool,_GUID const &,void * *);
	long _CreateMinimalImageList(_GUID const &,int,_GUID const &,void * *);
	long _CreatePerfectImageList(int,int,_GUID const &,void * *);
	long _RemoveThumbnailCallbackFromAggregateIL(IImageList *);
	long _ReplaceAggregated(unsigned int,int,unsigned int,int);
	long _ResetAggregateImageList(IAggregateImageList *,int);
	long _ResetImage(_tltnode *,int);
	long _SnapOriginalImageList(IImageList *,int,int,IImageList * *,bool *);
	long _UpdatePerfectImageIfNecessary(int,unsigned int,unsigned int,int);
	void _ClearThumbnailExtraction(int,unsigned int);
	void _FreeNode(int,_tltnode *);
	void _ResetOriginalSize();
public:
	bool IsDrawingSystemIcon(int,unsigned int);
	long GetAggregatedImageList(unsigned int,_GUID const &,void * *);
	long GetGangedImageList(_GUID const &,void * *);
	long GetGangedImageListCount(unsigned int *);
	long GetIconImageList(unsigned int,_GUID const &,void * *);
	long GetImageListSize(unsigned int,unsigned int *);
	long GetPerfectImageListPx(unsigned int,_GUID const &,void * *);
	long GetSystemIcon(int,int *);
	long GetTargetImageList(int,bool,unsigned int *);
	long GetThumbnailImageList(unsigned int,_GUID const &,void * *);
	long InitThumbnailLookupTable(unsigned int,unsigned int,int,int,TLT_CONFIGFLAGS,_IMAGELIST * *);
	long Resize(int,int);
	long SetImageToDraw(int,unsigned int,CThumbnailLookupTable::IMAGELIST_TYPE,bool,IImageListImageDecorator *);
	long SetSystemIcon(int,bool,int);
	long _CreateOverlayImageListIfNeeded(unsigned int,bool,_GUID const &,void * *);
	static long s_GetTargetImageList(int,unsigned long,IGangImageList *,int,bool,unsigned int *);
	virtual long DumpContents(int,IDebugOutput *,unsigned __int64 *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void ClearAllNewSystemIconExtractions();
	void FreeImageForItem(unsigned long,int);
};

struct CThumbnailQueueItem
{
	virtual long SetUndispatchable();
};

struct CThumbnailsOrIconRegTreeItem
{
	virtual long GetCheckState(int *);
	virtual long SetCheckState(int);
};

struct CTimeCounter
{
	unsigned __int64 MillisecondsElapsed();
};

class CTimeZoneInformationCache
{
	int _CacheNotExpired();
	int _LookupCachedTZI(unsigned short,_TIME_ZONE_INFORMATION *);
	void _AddTZIToCache(unsigned short,_TIME_ZONE_INFORMATION const &);
public:
	CTimeZoneInformationCache();
	int GetTZIForYear(unsigned short,_TIME_ZONE_INFORMATION *);
};

struct CTimeZoneInformationCache_InitOnDemand
{
	_TIME_ZONE_INFORMATION * GetTZIForYear(unsigned short,_TIME_ZONE_INFORMATION *);
};

struct CToggleRecyclePromptCommand
{
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CToggleShellSettingCommand
{
	int _GetSpecifiedField(SHELLSTATEW const &);
	void _GetAndToggleSpecifiedField(SHELLSTATEW *);
public:
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

class CToolBand
{
protected:
	CToolBand();
	long _BandInfoChanged();
	virtual ~CToolBand();
public:
	virtual long CanRenderComposited(int *);
	virtual long CloseDW(unsigned long);
	virtual long ContextSensitiveHelp(int);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long GetCompositionState(int *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetToolbar(HWND__ * *);
	virtual long GetWindow(HWND__ * *);
	virtual long HasFocusIO();
	virtual long IsDirty();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long ResizeBorderDW(tagRECT const *,IUnknown *,int);
	virtual long SetCompositionState(int);
	virtual long SetSite(IUnknown *);
	virtual long ShowDW(int);
	virtual long TranslateAcceleratorGlobal(tagMSG *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CToolbarBand
{
protected:
	__int64 _OnHotItemChange(tagNMTBHOTITEM *);
	long _PushChevron(int);
	virtual __int64 _OnNotify(tagNMHDR *);
public:
	virtual long IsWindowOwner(HWND__ *);
	virtual long OnWinEvent(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
};

class CToolbarMenu
{
protected:
	virtual long CreateToolbar(HWND__ *);
	virtual void GetSize(tagSIZE *);
	void _CancelMenu();
	void _FillToolbar();
public:
	virtual int v_GetDragOverButton();
	virtual int v_TrackingSubContextMenu();
	virtual int v_UpdateIconSize(unsigned int,int);
	virtual long IsWindowOwner(HWND__ *);
	virtual long OnWinEvent(HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long v_CallCBItem(int,unsigned int,unsigned __int64,__int64);
	virtual long v_CreateTrackPopup(int,_GUID const &,void * *);
	virtual long v_ExecItem(int);
	virtual long v_GetInfoTip(int,unsigned short *,unsigned int);
	virtual long v_GetState(int,tagSMDATA *);
	virtual long v_GetSubMenu(int,_GUID const *,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual unsigned long v_GetFlags(int);
	virtual void v_Close();
	virtual void v_Refresh();
	virtual void v_SendMenuNotification(unsigned int,int);
	virtual void v_Show(int,int);
	virtual void v_UpdateButtons(int);
};

class CTopViewCommand
{
	long _EnsureTopViewInfo();
	virtual ~CTopViewCommand();
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTopViewCommandEnumerator
{
	long _AddCanonicalCommand(unsigned short const *);
	long _EnsureCommandDPA();
public:
	virtual long Clone(IEnumExplorerCommand * *);
	virtual long Next(unsigned long,IExplorerCommand * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTopViewDescription
{
	int _IsOtherTopViewStackedDifferently(_GUID const &);
	long _AtomicEnsureAndClonePropList(unsigned short const *,IEnumUnknown * *,_GUID const &,void * *);
	long _GetPersistenceKey(unsigned short *,unsigned int);
	long _GetPropertyBag(unsigned short const *,unsigned long,_GUID const &,void * *);
	long _InitializeColumnListWithEncryptionOwners(unsigned short const *,IPropertyBag *);
	long _StringFromPropertyDescriptionList(IPropertyDescriptionList *,unsigned short * *);
	long _WriteBack(int);
	void _UpdateRelatedFolderTypes();
public:
	CTopViewDescription(_GUID const &,_GUID const &,_GUID const &);
	long Initialize(unsigned short const *);
	virtual long AddRelatedFolderType(_GUID const &);
	virtual long ClearUserSettings();
	virtual long GetCategorizerData(_GUID const &,void * *);
	virtual long GetChildTopViewID(_GUID *);
	virtual long GetColumnPropertyList(_GUID const &,void * *);
	virtual long GetFilterConditions(_GUID const &,void * *);
	virtual long GetFolderFlags(FOLDERFLAGS *,FOLDERFLAGS *);
	virtual long GetFolderType(_GUID *);
	virtual long GetGroupByProperty(_tagpropertykey *,int *);
	virtual long GetGroupSubsetCount(unsigned int *);
	virtual long GetIconSize(unsigned int *);
	virtual long GetPersistenceBagName(unsigned short * *);
	virtual long GetPrimaryProperty(_tagpropertykey *);
	virtual long GetPrimarySettings(TV_PRIMARYSETTINGS *);
	virtual long GetQueryType(TV_QUERYTYPE *);
	virtual long GetScope(_GUID const &,void * *);
	virtual long GetSortColumns(SORTCOLUMN *,unsigned int,unsigned int *);
	virtual long GetStackByProperty(_tagpropertykey *);
	virtual long GetTopViewID(_GUID *);
	virtual long GetTopViewName(unsigned short * *);
	virtual long GetTopViewState(TV_STATE *);
	virtual long GetTopViewVersion(unsigned int *);
	virtual long GetViewMode(FOLDERLOGICALVIEWMODE *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetColumnPropertyList(IPropertyDescriptionList *);
	virtual long SetFolderFlags(FOLDERFLAGS,FOLDERFLAGS);
	virtual long SetGroupByProperty(_tagpropertykey const &,int);
	virtual long SetGroupSubsetCount(unsigned int);
	virtual long SetIconSize(unsigned int);
	virtual long SetSortColumns(SORTCOLUMN const *,unsigned int);
	virtual long SetStackByProperty(_tagpropertykey const &);
	virtual long SetTopViewVersion(unsigned int);
	virtual long SetViewMode(FOLDERLOGICALVIEWMODE);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTopViewSubCommand
{
	long _GetSpecialByFolderNavigationTarget(IFolderView *,IShellItem * *);
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTrackEvents
{
	static int s_CompareOperationID(TRACKEDOPERATION const *,TRACKEDOPERATION const *,__int64);
public:
	virtual int IsTrackingEvents();
	virtual long OperationEvent(unsigned short const *,TRACKOPERATIONTYPE,TRACKOPERATIONEVENT);
	virtual long ResetReadyEvent();
	virtual long StartTimedOperation();
	virtual long StopTimedOperation(unsigned int *);
	virtual long TrySuspendReadyEvent();
	virtual ~CTrackEvents();
};

struct CTrackPopupBar
{
	CTrackPopupBar(void *,int,HMENU__ *,HWND__ *);
	virtual long ContextSensitiveHelp(int);
	virtual long GetWindow(HWND__ * *);
	virtual long OnSelect(unsigned long);
	virtual long Popup(_POINTL *,_RECTL *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetSubMenu(IMenuPopup *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CTrackPopupBar();
	void SelectFirstItem();
};

class CTrackShellMenu
{
	virtual ~CTrackShellMenu();
public:
	CTrackShellMenu();
	virtual long GetMenu(HMENU__ * *,HWND__ * *,unsigned long *);
	virtual long GetMenuInfo(IShellMenuCallback * *,unsigned int *,unsigned int *,unsigned long *);
	virtual long GetShellFolder(unsigned long *,_ITEMIDLIST_ABSOLUTE * *,_GUID const &,void * *);
	virtual long GetSite(_GUID const &,void * *);
	virtual long GetState(tagSMDATA *);
	virtual long GetSubMenu(unsigned int,_GUID const &,void * *);
	virtual long Initialize(IShellMenuCallback *,unsigned int,unsigned int,unsigned long);
	virtual long InvalidateItem(tagSMDATA *,unsigned long);
	virtual long Popup(HWND__ *,_POINTL *,_RECTL *,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetMenu(HMENU__ *,HWND__ *,unsigned long);
	virtual long SetMenuToolbar(IUnknown *,unsigned long);
	virtual long SetMinWidth(int);
	virtual long SetNoBorder(int);
	virtual long SetObscured(HWND__ *,IUnknown *,unsigned long);
	virtual long SetShellFolder(IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,HKEY__ *,unsigned long);
	virtual long SetSite(IUnknown *);
	virtual long SetTheme(unsigned short const *);
	virtual long SetToolbar(HWND__ *,unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTranscodedImage
{
protected:
	long _CheckForRetranscode(unsigned int,unsigned int);
	long _ClearTranscodedImageData();
	long _GetTranscodedImageData(CTranscodedImage::TRANSCODED_IMAGE_DATA *);
	long _TranscodeFile(unsigned short const *,unsigned short const *);
	static long _GetTranscodedImagePath(int,unsigned short *,unsigned int);
public:
	CTranscodedImage(int);
	long DeleteFileW(bool);
	long _CheckSystemWallpaperForBestMatch(unsigned short const *,unsigned short *,unsigned int);
	static unsigned short * s_GetTranscodedImagePath();
	virtual long CreateScaledDIB(HDC__ *,unsigned int,unsigned int,WICBitmapInterpolationMode,HBITMAP__ * *,void * *);
	virtual long GetPath(unsigned short *,unsigned int);
	virtual long GetSize(unsigned int *,unsigned int *);
	virtual long Init(unsigned short const *,bool,bool,bool);
};

class CTransferConfirmation
{
	__int64 _OnCommand(int,int,HWND__ *);
	__int64 _OnInitDialog(HWND__ *,unsigned __int64,__int64);
	__int64 _OnNotify(tagNMHDR const *);
	__int64 _OnQueryCancelAutoplay(HWND__ *);
	__int64 _OnTimer(HWND__ *,unsigned __int64);
	int _CalculateMetrics(HWND__ *);
	long _AddItems(int,CONFIRM_ITEM_INFO const *);
	long _AddStatus();
	long _DisplayItemVertical(unsigned int,HWND__ *,tagPOINT *,tagSIZE *);
	long _FormatDescriptionText(HWND__ *);
	long _FreeDialogSettings();
	long _GetDialogSettings();
	long _GetElevatedDialogSettings(tagDLGINFO const *);
	long _Init(CONFIRMOP const *);
	long _SetResources(int,int,int,SHSTOCKICONID);
	long _SetupForDeleteMultiple(HWND__ *);
	long _SetupForDiskFull(HWND__ *);
	long _SetupForFileNotFound();
	long _SetupForInUseByApp(HWND__ *,int);
	virtual __int64 _ConfirmDialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _OnLaunchDiskCleanup();
	void _OnSwitch();
	void _SetDialog(int);
public:
	CTransferConfirmation();
	virtual long Confirm(CONFIRMOP const *,CONFIRMATIONRESPONSE *,int *,unsigned int *);
	virtual ~CTransferConfirmation();
};

struct CTransferConfirmationProxy
{
	virtual long Confirm(CONFIRMOP const *,CONFIRMATIONRESPONSE *,int *);
	virtual long ConfirmConflict(CONFIRM_CONFLICT_PARAMS const *,ISyncMgrConflictItems *,CONFIRM_CONFLICT_RESULT *,ISyncMgrConflictResolutionItems * *);
	virtual long GetLastMessageResourceId(unsigned int *);
};

struct CTransferFallback
{
	CTransferFallback();
	virtual long Advise(ITransferAdviseSink *,unsigned long *);
	virtual long ApplyPropertiesToItem(IShellItem *,IShellItem * *);
	virtual long CreateItem(unsigned short const *,unsigned long,unsigned __int64,unsigned long,_GUID const &,void * *,_GUID const &,void * *);
	virtual long EnterFolder(IShellItem *);
	virtual long GetDefaultDestinationName(IShellItem *,IShellItem *,unsigned short * *);
	virtual long LeaveFolder(IShellItem *);
	virtual long LinkItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long MoveItem(IShellItem *,IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long OpenItem(IShellItem *,unsigned long,_GUID const &,void * *);
	virtual long RecycleItem(IShellItem *,IShellItem *,unsigned long,IShellItem * *);
	virtual long RemoveItem(IShellItem *,unsigned long);
	virtual long RenameItem(IShellItem *,unsigned short const *,unsigned long,IShellItem * *);
	virtual long SetProperties(IPropertyChangeArray *);
	virtual long Unadvise(unsigned long);
};

class CTransitionCscScopeOfflineTask
{
	virtual long _Exec(CCscUiComTaskContext *);
	virtual unsigned long _CoInitFlags();
};

class CTransitionCscScopeOnlineTask
{
	virtual long _Exec(CCscUiComTaskContext *);
	virtual unsigned long _CoInitFlags();
};

class CTravelEntry
{
protected:
	long _GetGlobalHandleForStream(IStream *,void * *);
	long _InvokeExternal(IUnknown *);
	long _PersistHistoryToStream(IPersistHistory *,IStream * *,int);
	long _UpdateFromTLClient(IUnknown *,IStream * *,int);
	long _UpdateTravelLog(IUnknown *,int,int);
	static int _IsSearchUrl(unsigned short const *);
	void _Reset();
	~CTravelEntry();
public:
	CTravelEntry(int);
	int CanInvoke(IUnknown *,int);
	long Clone(CTravelEntry * *);
	long GetDisplayName(unsigned short *,unsigned long,unsigned long);
	long GetIndexBrowser(IUnknown *,IUnknown * *);
	long Update(IUnknown *,int,int);
	long UpdateExternal(IUnknown *,IUnknown *);
	unsigned long Size();
	virtual long AddEntryFlags(unsigned long);
	virtual long GetEntryFlags(unsigned long *);
	virtual long GetPidl(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetTitle(unsigned short * *);
	virtual long GetURL(unsigned short * *);
	virtual long Invoke(IUnknown *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Read(unsigned short const *,tagVARIANT *,IErrorLog *);
	virtual long RemoveEntryFlags(unsigned long);
	virtual long Update(IUnknown *,int);
	virtual long Write(unsigned short const *,tagVARIANT *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void RemoveSelf();
	void SetNext(CTravelEntry *);
	void SetPrev(CTravelEntry *);
};

class CTravelLog
{
protected:
	long _FindEntryByOffset(IUnknown *,int,CTravelEntry * *);
	long _FindEntryByPidl(IUnknown *,_ITEMIDLIST_ABSOLUTE const *,CTravelEntry * *);
	long _FindEntryByPunk(IUnknown *,ITravelLogEntry *,CTravelEntry * *);
	long _GetFirstFastBackEntry(CTravelEntry * *);
	long _InsertTravelLogItem(HMENU__ *,IShellTravelLogUI *,int,int,unsigned short const *,unsigned long);
	long _PopulateTravelLogUI(IUnknown *,HMENU__ *,IShellTravelLogUI *,int,int,int,unsigned long);
	long _TravelToEntryInternal(IUnknown *,CTravelEntry *);
	void _DeleteFrameSetEntry(IUnknown *,CTravelEntry *);
public:
	CTravelLog();
	virtual long AddEntry(IUnknown *,int);
	virtual long Clone(ITravelLog * *);
	virtual long CountEntryNodes(IUnknown *,unsigned long,unsigned long *);
	virtual long CreateEnumEntry(IUnknown *,IEnumTravelLogEntry * *,unsigned long);
	virtual long DeleteEntry(IUnknown *,ITravelLogEntry *);
	virtual long DeleteIndexEntry(IUnknown *,int);
	virtual long DeleteUrlEntry(IUnknown *,unsigned int,unsigned short *);
	virtual long FastBack(IUnknown *);
	virtual long FindTravelEntry(IUnknown *,_ITEMIDLIST_ABSOLUTE const *,ITravelEntry * *);
	virtual long FindTravelEntryWithUrl(IUnknown *,unsigned int,unsigned short *,ITravelEntry * *);
	virtual long GetFirstFastBackEntry(ITravelEntry * *);
	virtual long GetJourneyOffset(int *);
	virtual long GetToolTipText(IUnknown *,int,int,unsigned short *,unsigned long);
	virtual long GetTravelEntry(IUnknown *,int,ITravelEntry * *);
	virtual long InsertEntry(IUnknown *,ITravelLogEntry *,int,IUnknown *,ITravelLogEntry * *);
	virtual long InsertMenuEntries(IUnknown *,HMENU__ *,int,int,int,unsigned long);
	virtual long PopulateTravelLogUI(IUnknown *,IUnknown *,int,int,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResetJourneyState();
	virtual long Revert();
	virtual long SetTypedNavigationPending(int);
	virtual long Travel(IUnknown *,int);
	virtual long TravelToEntry(IUnknown *,ITravelLogEntry *);
	virtual long TravelToUrl(IUnknown *,unsigned int,unsigned short *);
	virtual long UpdateEntry(IUnknown *,int);
	virtual long UpdateEntry(IUnknown *,int,int);
	virtual long UpdateExternal(IUnknown *,IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long CountEntries(IUnknown *);
	virtual unsigned long Release();
};

class CTryHarderFactory
{
	long _AddPinnedItemHelper(unsigned short const *,unsigned short const *,IObjectCollection *,int *);
	long _AddTryHarderPinnedLibrary(IObjectCollection *,int,int *);
	long _AddTryHarderPinnedOpenSearch(IObjectCollection *,int,int);
	void _GetLocationName(unsigned short * *);
	void _GetNameFromDBFolder(IShellFolder3 *,unsigned short * *);
public:
	virtual long Init(IShellItem *,unsigned short const *);
	virtual long OnGetTryHarderItems(TRYHARDERFACTORYFLAGS,int,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTryHarderItem
{
protected:
	unsigned long GetBrowserFlags(IUnknown *);
	virtual ~CTryHarderItem();
public:
	long Init(TRYHARDERSCOPES,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,_ITEMIDLIST_ABSOLUTE const *);
	virtual long Cancel();
	virtual long GetDisplayName(unsigned short * *);
	virtual long GetDisplayNameAlt(unsigned short * *);
	virtual long GetIDList(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetIconIndex(unsigned int *);
	virtual long GetScope(TRYHARDERSCOPES *);
	virtual long GetTooltip(unsigned short * *);
	virtual long OnInvoke(IUnknown *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTryHarderItemComputer
{
	long _GetTryHarderKnownFolderIDList(_ITEMIDLIST_ABSOLUTE * *);
public:
	long Init(IShellItem *,unsigned int,unsigned int,int);
	virtual long OnInvoke(IUnknown *);
};

class CTryHarderItemCustom
{
	long _NewScopeFromScopeDialog(IScope * *,IShellItemArray * *);
public:
	long Init(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,unsigned int);
	virtual long OnInvoke(IUnknown *);
};

struct CTryHarderItemFolderID
{
	long Init(_GUID const &,unsigned int,unsigned int,TRYHARDERSCOPES,_ITEMIDLIST_ABSOLUTE const *);
	virtual long GetIconIndex(unsigned int *);
	virtual long OnInvoke(IUnknown *);
};

class CTryHarderItemInternet
{
	long _GetDefaultBrowserTooltipAndIconIndex(unsigned short * *,int *);
	long _GetWordWheelText(unsigned short * *);
public:
	long Init(TRYHARDERSCOPES,unsigned short const *,unsigned short const *);
	virtual long OnInvoke(IUnknown *);
};

class CTryHarderItemPinnedLibrary
{
	long _BuildAutoList(_ITEMIDLIST_ABSOLUTE *,_ITEMIDLIST_ABSOLUTE * *);
public:
	long Init(IShellItem *,int,unsigned short const *,unsigned short const *);
	virtual long OnInvoke(IUnknown *);
};

class CTypeAheadFramework
{
	bool _IsQueryCurrent(unsigned short const *,unsigned short const *);
	int _AllRequestedProvidersReportedResults();
	long _Initialize();
	long _InstantiateProviders();
	long _PrepareHistoryApp(IObjectCollection *);
	long _PrepareHistoryLocal(IObjectCollection *);
	long _PrepareHistoryLocalApp(IObjectCollection *);
	long _PrepareLocalApp(IObjectCollection *);
	long _ProcessNewResults();
	long _RemoveTrailingSeparators(IObjectCollection *);
	long _ShowFirstResultsBatch();
	long _ShowSecondResultsBatch();
	long _StoreProviderResults(unsigned int,CCoSimpleArray<ATL::CComPtr<ISearchTypeAheadResult>,4294967294,CSimpleArrayStandardCompareHelper<ATL::CComPtr<ISearchTypeAheadResult> > > *,IObjectArray *);
	long _StoreQuery(unsigned short const *,unsigned short const *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long s_CopyResultsWODuplicates(IObjectCollection *,int,IObjectCollection *,IObjectCollection *,IObjectCollection *,CCoSimpleArray<ATL::CComPtr<ISearchTypeAheadResult>,4294967294,CSimpleArrayStandardCompareHelper<ATL::CComPtr<ISearchTypeAheadResult> > > *,unsigned int,unsigned int,unsigned int *,unsigned int *);
	static long s_ExistsInCollectionAsNonSeparator(unsigned short const *,IObjectCollection *,bool *);
	static long s_OnTimer(HWND__ *,unsigned __int64);
	unsigned int _GetMaxAllowedResults(unsigned int);
	virtual ~CTypeAheadFramework();
	void _CleanUpRunningQueries();
	void _CleanUpRunningQueriesForNewQuery();
public:
	CTypeAheadFramework();
	virtual long AddToHistory(unsigned short const *,unsigned short const *);
	virtual long Advise(ISearchTypeAheadEventsSink *,unsigned long *);
	virtual long ClearHistory();
	virtual long GetHistoryMockProvider(_GUID const &,void * *);
	virtual long GetLocalMockProvider(_GUID const &,void * *);
	virtual long Initialize(unsigned short const *,unsigned short const *,unsigned int);
	virtual long OnSearchQueryChanged(unsigned short const *,unsigned short const *,IQueryWithLinguisticAlternatives *);
	virtual long ProvideAppSuggestions(unsigned short const *,SEARCH_TYPEAHEAD_ITEM const *,unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResultsReady(unsigned short const *,unsigned short const *,IObjectArray *,_GUID const &);
	virtual long SetAppSearchContext(unsigned short const *);
	virtual long SetLocalTypeAheadSettings(TYPEAHEAD_LOCAL_SETTINGS const *);
	virtual long SetTypeAheadFlags(SEARCH_TYPEAHEAD_FLAGS);
	virtual long TriggerTimer();
	virtual long Unadvise(unsigned long);
	virtual long UseMockProviders();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTypeAheadLocalMetadataProvider
{
	virtual long GetProviderType(_GUID *);
	virtual long GetSuggestionsTask(unsigned short const *,IQueryWithLinguisticAlternatives *,unsigned short const *,unsigned int,ITypeAheadProviderEventSink *,_GUID const &,void * *);
	virtual long Initialize(unsigned short const *,TYPEAHEAD_LOCAL_SETTINGS const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTypeAheadLocalSettings
{
	long Init(TYPEAHEAD_LOCAL_SETTINGS const *);
	long Marshal();
	long UnMarshal();
	static void Destroy(TYPEAHEAD_LOCAL_SETTINGS &);
	~CTypeAheadLocalSettings();
};

struct CTypeAheadSearchHistoryProvider
{
	CTypeAheadSearchHistoryProvider();
	virtual long Clear();
	virtual long GetKey(HKEY__ * *);
	virtual long GetProviderType(_GUID *);
	virtual long GetStoreEntryTask(unsigned short const *,unsigned short const *,_GUID const &,void * *);
	virtual long GetSuggestionsTask(unsigned short const *,IQueryWithLinguisticAlternatives *,unsigned short const *,unsigned int,ITypeAheadProviderEventSink *,_GUID const &,void * *);
	virtual long Initialize(unsigned short const *,unsigned short const *,unsigned short const *);
};

struct CTypeAheadSearchHistorySettings
{
	virtual long ClearSearchHistory(ITypeAheadSearchSettingsCallback *);
	virtual long EnableSearchHistory(int);
	virtual long IsSearchHistoryEnabled();
};

class CTypeListCategorizer
{
	long _EnumTypeList(IPropertyEnumTypeList *,CDSA<tagENUMTYPE_MERGEITEM> *);
	long _MergeDuplicates(CDSA<tagENUMTYPE_MERGEITEM> *,CTypeListCategorizer::DUPLICATE_KEEP_ORDER);
protected:
	virtual long OnCreateStaticCategories();
public:
	CTypeListCategorizer(_tagpropertykey const &,int,IUnknown *);
};

struct CTypedDataThumbnailHandler
{
	CTypedDataThumbnailHandler();
	virtual long GetThumbnail(unsigned int,HBITMAP__ * *,WTS_ALPHATYPE *);
	virtual long Initialize(IShellItem *,unsigned long);
};

class CUACount
{
protected:
	float _CalcWeightedAverage(float);
	float _Calculate_r0();
public:
	float GetRelevance();
	long Initialize(IUASession *);
	long LoadFrom(FNNRW3 const *,NRWINFO *);
	long SaveTo(int,FNNRW3 const *,NRWINFO *);
	unsigned int GetCount(_tagCOUNTTYPE);
	void IncCount(_tagCOUNTTYPE);
	void SetCount(_tagCOUNTTYPE,unsigned int);
	void Snap_r0_Value();
	void UpdateFileTime();
};

class CUADBLog
{
protected:
	CUADBLog();
	int _CheckSessionExpired();
	int _TryLockShort();
	long CacheOp(CUADBLog::e_cacheop,void *,unsigned long,NRWINFO *);
	long _CheckRenameNMaxEntries(unsigned short const *,unsigned short const *);
	long _CheckUpdateNMax(unsigned short const *,CUACount *);
	long _EnumCountObjects(CDPALocalMem<unsigned short> *);
	long _GarbageCollectSlow();
	long _GetCountWithDefault(unsigned short const *,int,CUACount *);
	long _LoadSession();
	long _LockedGetCountWithDefault(unsigned short const *,int,CUACount *);
	long _QueueDeleteOrRename(CUADBLog::UADR,unsigned short const *,unsigned short const *);
	long _RebuildSessionSlow();
	long _SaveSession();
	long _SnapRValuesSlow();
	long _UnlockLong();
	static FNNRW3 s_Nrw3Info;
	static long s_Delete(void *,unsigned long,NRWINFO *);
	static long s_Read(void *,unsigned long,NRWINFO *);
	static long s_Write(void *,unsigned long,NRWINFO *);
	virtual ~CUADBLog();
	void _LockLong();
	void _ScheduleSnapR();
public:
	_FILETIME GetFileTime(unsigned short const *);
	float GetRelevance(unsigned short const *);
	long AddUserTime(unsigned short const *,unsigned long,int *);
	long ChDir(unsigned short const *);
	long CleanUpLog();
	long DeleteEntry2(unsigned short const *,int);
	long IncCount(unsigned short const *,_tagCOUNTTYPE);
	long RenameEntry(unsigned short const *,unsigned short const *);
	long SetCount(unsigned short const *,_tagCOUNTTYPE,unsigned int);
	long SetExcludeNewAppFromMFU(unsigned short const *,int);
	long SetFileTime(unsigned short const *,_FILETIME const *);
	long SetRoot(HKEY__ *,unsigned long);
	long SetUserTime(unsigned short const *,unsigned long,int *);
	long SetValue(unsigned short const *,unsigned long,unsigned char const *,unsigned long);
	unsigned int GetCount(unsigned short const *,_tagCOUNTTYPE);
	unsigned int GetExcludeNewAppFromMFU(unsigned short const *);
	unsigned long GetUserTime(unsigned short const *);
	unsigned long Release();
	virtual long Initialize(HKEY__ *,unsigned long);
	void GarbageCollect(int *);
};

struct CUASession
{
	virtual long GetNMaxCandidate(_tagNMAXCOLS,SNMaxEntry *);
	virtual long SetNMaxCandidate(_tagNMAXCOLS,SNMaxEntry const *);
	virtual unsigned int GetSessionId();
	virtual unsigned int GetTotalLaunches();
	virtual unsigned int GetTotalSwitches();
	virtual unsigned long GetTotalUserTime();
	virtual void AddLaunches(unsigned int);
	virtual void AddSwitches(unsigned int);
	virtual void AddUserTime(unsigned long);
	virtual void RemoveValues(SNMaxEntry const *);
	virtual void SetSession();
};

class CUICommand
{
protected:
	CUICommand(IUnknown *,tagWVTASKITEM const *,IEnumUICommand *);
	virtual ~CUICommand();
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long EnumSubCommands(IEnumUICommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(int *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_CanonicalName(_GUID *);
	virtual long get_Icon(IShellItemArray *,unsigned short * *);
	virtual long get_Name(IShellItemArray *,unsigned short * *);
	virtual long get_State(IShellItemArray *,int,int *);
	virtual long get_Tooltip(IShellItemArray *,unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CUICommandObject
{
	SELECTED_STATE _GetSelectionState(IShellItemArray *);
	long _GetString(unsigned short const *,unsigned long,unsigned short * *,unsigned long,int,SHSTOCKICONID);
	long _GetTitleResIDs(IShellItemArray *);
protected:
	virtual long v_GetSubCommands(IEnumUICommand * *);
	virtual unsigned short const * v_ResourceDllName(CUICommandObject::UICORDNTYPE);
	virtual ~CUICommandObject();
public:
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long EnumSubCommands(IEnumUICommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(int *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_CanonicalName(_GUID *);
	virtual long get_Icon(IShellItemArray *,unsigned short * *);
	virtual long get_Name(IShellItemArray *,unsigned short * *);
	virtual long get_State(IShellItemArray *,int,int *);
	virtual long get_Tooltip(IShellItemArray *,unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CUICommandStateMachine
{
	static bool s_IsActiveState(UI_VISIBLE_STATE);
	void _EvaluateEvent(TILE_EVENT_TYPE);
public:
	void SetOnTimerEvent();
};

class CUIDisplayStateMachine
{
	void _ChangeState(UI_VISIBLE_STATE);
	void _EvaluateEvent();
	void _ExecuteEntryActionsIfNeeded();
	void _ExecuteExitActionsIfNeeded();
public:
	long UnsetDisplayStateOnHoldMode();
};

struct CUIElement
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Icon(IShellItemArray *,unsigned short * *);
	virtual long get_Name(IShellItemArray *,unsigned short * *);
	virtual long get_Tooltip(IShellItemArray *,unsigned short * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CUdfFormatter
{
	CPrepareDiscDialog::DialogResult DoFormat(unsigned short const *,unsigned short);
	long _InitializeInternal(int);
	long _OpenMutexForDrive();
	static HWND__ * * s_rghwndCurrentWindowForDrives;
	static int s_EnumWindowsBringToForeground(HWND__ *,__int64);
	static unsigned char s_FormatCallback(_FMIFS_PACKET_TYPE,unsigned long,void *);
	static unsigned long s_FormatThreadProc(void *);
	unsigned char FormatCallback(_FMIFS_PACKET_TYPE,unsigned long,void *);
	unsigned long FormatThreadProc();
public:
	static CPrepareDiscDialog::DialogResult ShowPrepareDiscDialog(HWND__ *,int,int);
};

class CUnbiasedTimer
{
	bool GetDeltaTime(unsigned __int64 *);
};

class CUndoManager
{
	long _AddRedoStackToParent();
	long _AddUndoStackToParent();
public:
	CUndoManager(IThreadUndoManager *);
	virtual long Add(IOleUndoUnit *);
	virtual long AddRedo(IOleUndoUnit *);
	virtual long AddUndo(IOleUndoUnit *,int);
	virtual long Close(IOleParentUndoUnit *,int);
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long DiscardFrom(IOleUndoUnit *);
	virtual long Enable(int);
	virtual long EnumRedoable(IEnumOleUndoUnits * *);
	virtual long EnumUndoable(IEnumOleUndoUnits * *);
	virtual long GetLastRedoDescription(unsigned short * *);
	virtual long GetLastUndoDescription(unsigned short * *);
	virtual long GetOpenParentState(unsigned long *);
	virtual long GetStackDepths(unsigned long *,unsigned long *);
	virtual long IsUndoRedoInProgress();
	virtual long LockServer(int);
	virtual long Open(IOleParentUndoUnit *);
	virtual long PrepareRedo(IOleUndoUnit * *);
	virtual long PrepareUndo(IOleUndoUnit * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RedoTo(IOleUndoUnit *);
	virtual long UndoRedoCompleted();
	virtual long UndoRedoStarted();
	virtual long UndoTo(IOleUndoUnit *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CUndoRedoCommand
{
	virtual long EnumSubCommands(IEnumExplorerCommand * *);
	virtual long GetCanonicalName(_GUID *);
	virtual long GetFlags(unsigned long *);
	virtual long GetIcon(IShellItemArray *,unsigned short * *);
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long GetTitle(IShellItemArray *,unsigned short * *);
	virtual long GetToolTip(IShellItemArray *,unsigned short * *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Redo();
	virtual long Undo();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CUniversalDelegateFolder
{
protected:
	virtual long GetChildClassID(_GUID *,IPropertyBag *);
public:
	virtual long GetClassID(_GUID *);
};

struct CUnmappedXmlAttrib
{
	virtual XmlMappingType GetXmlMappingType();
	virtual long Init(IXmlReader *,XmlNodeType);
	virtual long Write(IXmlWriter *);
};

struct CUnmappedXmlElement
{
	virtual XmlMappingType GetXmlMappingType();
	virtual long Init(IXmlReader *,XmlNodeType);
	virtual long Write(IXmlWriter *);
};

struct CUnmappedXmlNameText
{
	virtual XmlMappingType GetXmlMappingType();
	virtual long Init(IXmlReader *,XmlNodeType);
	virtual long Write(IXmlWriter *);
};

struct CUnmappedXmlStorage
{
	static long s_CreateInstance(XMLPROP_ITEM const *,CUnmappedXmlStorage * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CUnmappedXmlString
{
	virtual XmlMappingType GetXmlMappingType();
	virtual long Init(IXmlReader *,XmlNodeType);
	virtual long Write(IXmlWriter *);
};

struct CUnpauseSyncVerb
{
	CUnpauseSyncVerb();
};

struct CUrlCapabilityCache
{
	long EnsureEntry(unsigned short const *,CSimpleCaseInsensitiveOrdinalStringArray &,bool);
};

class CUserAssist
{
	long Initialize();
	long _Lock(int);
	virtual ~CUserAssist();
	void _MayAdvanceOtherLogSession(_GUID const *);
public:
	virtual long CleanUpLogger(_GUID const *);
	virtual long DeleteEntry(_GUID const *,unsigned short const *);
	virtual long Enable(int);
	virtual long EnableLogger(_GUID const *,int);
	virtual long FireEvent(_GUID const *,tagUAEVENT,unsigned short const *,unsigned long);
	virtual long IsLoggerEnabled(_GUID const *);
	virtual long QueryEntry(_GUID const *,unsigned short const *,tagUEMINFO *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RegisterNotify(int (*)(void *,_GUID const *,unsigned short const *,tagUAEVENT),void *,int);
	virtual long RenameEntry(_GUID const *,unsigned short const *,unsigned short const *);
	virtual long SetEntry(_GUID const *,unsigned short const *,tagUEMINFO *);
	virtual long UpdateLoggerState(unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CUserChoice
{
	~CUserChoice();
};

struct CUserChoiceForFileAssociation
{
	virtual long Open(unsigned short const *);
};

struct CUserChoiceForUrlAssociation
{
	virtual long Open(unsigned short const *);
};

class CUserContentFilter
{
	static _GUID const * const * const s_rgkfidExcludedFolders;
public:
	int FolderContainsUserContent(unsigned short const *);
};

class CUserEventTimer
{
	int _CreateWindow();
	int _GetTimerDetailsIndex(HWND__ *,unsigned long);
	long _SetUserEventTimer(HWND__ *,unsigned int,unsigned int,IUserEventTimerCallback *,unsigned long *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	unsigned long _GetNextInternalTimerID(HWND__ *);
	virtual ~CUserEventTimer();
	void _KillIntervalTimer();
	void _OnTimer();
public:
	long Init();
	virtual long GetUserEventTimerElapsed(HWND__ *,unsigned long,unsigned int *);
	virtual long InitTimerTickInterval(unsigned int);
	virtual long KillUserEventTimer(HWND__ *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetUserEventTimer(HWND__ *,unsigned int,unsigned int,IUserEventTimerCallback *,unsigned long *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CUserFilesDescriptionEnum
{
	long _Initialize();
	long _InitializeMembers(IHomeGroupStatus *);
public:
	virtual long Clone(IEnumUnknown * *);
	virtual long Next(unsigned long,IUnknown * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CUserNotification
{
	__int64 _WndProc(unsigned int,unsigned __int64,__int64);
	int _SyncIcon();
	int _SyncInfo();
	long _GetWindow();
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _Timeout();
	~CUserNotification();
public:
	virtual long PlaySoundW(unsigned short const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetBalloonInfo(unsigned short const *,unsigned short const *,unsigned long);
	virtual long SetBalloonRetry(unsigned long,unsigned long,unsigned int);
	virtual long SetIconInfo(HICON__ *,unsigned short const *);
	virtual long Show(IQueryContinue *,unsigned long);
	virtual long Show(IQueryContinue *,unsigned long,IUserNotificationCallback *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CUsersLibrariesCommandProvider
{
	static long s_CanCreateNewLibrary(IUnknown *,IShellItemArray *,int,int *);
	static long s_OnNewLibrary(IUnknown *,IShellItemArray *,IBindCtx *);
	virtual long GetCommand(_GUID const &,_GUID const &,void * *);
	virtual long GetCommands(IUnknown *,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CUsersLibrariesDropTarget
{
	int _IsLibraryByPath(IShellItem *);
	long _GetLibraryDataObject(IShellItem *,IDataObject *,IDataObject * *);
	void _Reset();
	void _TransferDescription(IDataObject *,IDataObject *);
public:
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
};

struct CUsersLibrariesFolderUI
{
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
};

struct CValuePtr
{
	void Release();
};

class CVerbStateTask
{
	virtual ~CVerbStateTask();
public:
	virtual long Initialize(IUnknown *,IVerbStateTaskCallBack *,IShellItemArray *,HKEY__ *,unsigned short const *,unsigned int);
	virtual long InternalResumeRT();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CVerbWalkCallback
{
	virtual long EnterFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long FoundItem(IShellFolder *,_ITEMID_CHILD const *);
	virtual long InitializeProgressDialog(unsigned short * *,unsigned short * *);
	virtual long LeaveFolder(IShellFolder *,_ITEMID_CHILD const *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CVersionPropertyStore
{
	int _MapPropName(_tagpropertykey const &,unsigned short *,unsigned int,int *);
	long _VerQueryValue(unsigned short const *,int,void * *,unsigned int *);
public:
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetClassIdentity(unsigned short * *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long Initialize(unsigned short const *,unsigned long);
	virtual long IsPropertyWritable(_tagpropertykey const &);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CViewGroup
{
	long _CreateCollection(IResultShape *,HWND__ *);
	void _UnadviseItem();
public:
	CViewGroup(CListViewHost *,IItem *);
	long GetItem(unsigned int,IItem * *);
	long InitCollection(IResultShape *,HWND__ *);
	virtual long OnCancelled();
	virtual long OnCancelled(IItem *);
	virtual long OnCollectionChanged(unsigned int,tagCOLLECTION_CHANGE_STATE);
	virtual long OnGetCountDone(unsigned int,tagCOUNT_TYPE,long);
	virtual long OnItemChanged(ITEM_CHANGED_TYPE,IItem *,IPropertyKeyStore *);
	virtual long OnItemChanging(ITEM_CHANGED_TYPE,IItem *);
	virtual long OnItemMoved(IItem *,IItem *);
	virtual long OnItemTranslated(IItem *,IItem *);
	virtual long OnItemsAdded(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnItemsDeleted(unsigned int,unsigned int,unsigned int,tagCHANGE_INDEX_TYPE);
	virtual long OnPrepareDone(unsigned int,long);
	virtual long OnUniqueLeafCountChanged();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void DestroyCollection();
};

struct CViewOptionsCommand
{
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

class CViewRemotePrintersCommand
{
	long _GetFolderFromSelection(IShellItemArray *,IShellFolder * *);
public:
	virtual long GetState(IShellItemArray *,int,unsigned long *);
	virtual long Invoke(IShellItemArray *,IBindCtx *);
};

class CViewSlider
{
	__int64 SliderWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	__int64 _OnCommand(unsigned __int64,__int64);
	__int64 _OnCreate(HWND__ *);
	__int64 _OnNotify(tagNMHDR *);
	__int64 _OnPageKey(int);
	__int64 _UpdatePosition(int,int,int *);
	int _OnArrowKeyOrMouseWheel(int);
	static __int64 s_SliderWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,unsigned __int64,unsigned __int64);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void ComputeSnapSpotsAndSizes();
	void _AdjustStartPosition(int);
	void _RegisterViewControlWindow();
public:
	__int64 MakeAccessible();
	unsigned long Release();
	virtual ~CViewSlider();
	void Show(IFolderView2 *,tagRECT const *,HWND__ *);
};

class CViewState
{
	int _SyncOrder(CListViewHost *);
	int _SyncPositions(CListViewHost *);
	long _InsertOrderItem(_ITEMID_CHILD const *,int);
	long _SaveOrderBlob(CListViewHost *,IStream *);
	long _SavePositionBlob(CListViewHost *,IStream *);
	unsigned long _GetStreamSize(IStream *);
	void _LoadOrderBlob(CListViewHost *,unsigned long,IStream *);
	void _LoadPositionBlob(unsigned long,IStream *);
public:
	long LoadFromPropertyBag(CListViewHost *,IPropertyBag *);
	long SaveToPropertyBag(CListViewHost *,IPropertyBag *);
};

struct CVolume
{
	CVolume();
	long GetLabel(unsigned short *,unsigned long);
	unsigned long Release();
	void SetLabel(unsigned short const *);
	~CVolume();
};

struct CVolumeInfoCache
{
	CVolumeInfoCache();
	unsigned long GetMaxComponentLength(unsigned short const *);
	~CVolumeInfoCache();
};

class CWRLExecuteCommandBase
{
protected:
	long _GetSelectedItem(unsigned long,_GUID const &,void * *);
	long _InitDelegate(IExecuteCommand *,IShellItemArray *);
	unsigned long _SelectionCount();
	virtual ~CWRLExecuteCommandBase();
public:
	CWRLExecuteCommandBase();
	virtual long GetAssocElement(_GUID const &,void * *);
	virtual long GetSelection(_GUID const &,void * *);
	virtual long SetAssocElement(IAssociationElement *);
	virtual long SetDirectory(unsigned short const *);
	virtual long SetKeyState(unsigned long);
	virtual long SetNoShowUI(int);
	virtual long SetParameters(unsigned short const *);
	virtual long SetPosition(tagPOINT);
	virtual long SetSelection(IShellItemArray *);
	virtual long SetShowWindow(int);
};

class CWRLObjectWithGITSite
{
protected:
	Microsoft::WRL::ComPtr<IUnknown> _GetGITSitePtr();
	~CWRLObjectWithGITSite();
public:
	CWRLObjectWithGITSite();
	virtual long GetSite(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
};

struct CWRLObjectWithSite
{
	virtual long GetSite(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
};

class CWSDPublisher
{
	bool _ContainsHomegroupSid(_GUID const &,CItemSidMapping *);
	bool _IsParentPublished(IUsersFilesDescription *,IShellItem *);
	long _AddDiscretionaryShareItem(IUsersFilesDescription *,IShellItem *,IPublishedItemDescription * *);
	long _AddItem(IUsersFilesDescription *,IShellItem *);
	long _CreateUsersFilesDescription(unsigned short const *,IObjectCollection *,_GUID const &,void * *);
	long _EnsureKnownFolderPaths();
	long _EnterExclusive();
	long _EnumerateHomegroupSids(IObjectArray *,unsigned int,_GUID const &,void * *);
	long _GetHomegroupID(IObjectArray *,unsigned int,_GUID *);
	long _GetItemToPublish(IShellItem *,bool,IShellItem * *);
	long _GetPublishedItemCollection(_GUID const &,unsigned short const *,bool,IObjectCollection * *);
	long _GetUserFileDescriptionForHomegroup(_GUID const &,bool,IUsersFilesDescription * *,IObjectCollection * *);
	long _LeaveExclusive();
	long _PopulateSids(IObjectArray *,unsigned int,IShellItemArray *,unsigned long,CSimplePointerArrayRelease<CItemSidMapping> *);
	long _PublishDiscretionaryShareItems(CItemSidMapping *,IUsersFilesDescription *);
	long _PublishHomegroupShareItem(_GUID const &,CItemSidMapping *,IUsersFilesDescription *);
	long _PublishMessageAsync(_GUID const &,IObjectCollection *);
	long _PublishMessageToOfflineCache(_GUID const &,unsigned short const *);
	long _PublishToHomegroup(IObjectArray *,unsigned int,CSimplePointerArrayRelease<CItemSidMapping> *);
	long _RemoveMessageFromOfflineCache(_GUID const &);
	long _RemoveUsersFilesDescriptionFromCollection(IObjectCollection *,IUsersFilesDescription *);
	long _UnpublishAll(_GUID const &,unsigned short const *,UNPUBLISH_ALL_FLAGS);
	long _UnpublishDiscretionaryShareItems(IShellItem *,IUsersFilesDescription *);
	long _UnpublishFromHomegroup(IObjectArray *,unsigned int,IShellItemArray *,unsigned long);
	long _UnpublishHomegroupShareItem(IShellItem *,IUsersFilesDescription *);
	long _UpdatePublishedMessage(_GUID const &,IUsersFilesDescription *,IObjectCollection *);
	static unsigned long _s_PublishMessageThreadProc(void *);
	~CWSDPublisher();
public:
	long Initialize();
	virtual long GetLocalPublishedItems(_GUID const &,IObjectCollection * *);
	virtual long GetName(_GUID const &,unsigned short * *);
	virtual long IsPublished(IShellItem *);
	virtual long Publish(IShellItemArray *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long RepublishItems(_GUID const &,IObjectCollection *);
	virtual long RepublishItemsFromOfflineCache(_GUID const &);
	virtual long Resolve(HWND__ *,int *);
	virtual long SetName(_GUID const &,unsigned short const *);
	virtual long Unpublish(IShellItemArray *);
	virtual long UnpublishAll(_GUID const &,UNPUBLISH_ALL_FLAGS);
	virtual long UnpublishAllForUser(_GUID const &,unsigned short const *,UNPUBLISH_ALL_FLAGS);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CWVTASKITEM
{
	long _get_String(tagWVTASKITEM const *,unsigned long,unsigned short * *,unsigned long,int,SHSTOCKICONID);
public:
	long get_State(tagWVTASKITEM const *,IUnknown *,IShellItemArray *,int,int *);
};

struct CWaitCursorManager
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Restore();
	virtual long Start(CURSORID);
	virtual long Stop(CURSORID);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CWaitForNavigateComplete
{
	long Connect(int,IShellBrowser *);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long OnNavigationComplete(_ITEMIDLIST_ABSOLUTE const *);
	virtual long OnNavigationFailed(_ITEMIDLIST_ABSOLUTE const *);
	virtual long OnNavigationPending(_ITEMIDLIST_ABSOLUTE const *);
	virtual long OnViewCreated(IShellView *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CWaitForWindow
{
	long Init(IShellWindows *);
	long WaitForWindowToOpen(unsigned long);
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	void CleanUp();
};

class CWaitTask
{
	long _Init();
	static void s_WaitBeforeCursing(void *,unsigned char);
	virtual ~CWaitTask();
	void _StartWaitCursor();
public:
	long Initialize(void *,unsigned long,void * const *,void * *,unsigned long *);
	long SetCursor(CURSORID);
	static long CreateInstance(CURSORID,CWaitTask * *);
	unsigned long Release();
	virtual long InternalResumeRT();
};

class CWakeFlow
{
	long _SetupWaitWorkerWindow(_ITEMIDLIST_ABSOLUTE const *);
	void _CleanupWaitWorkerWindow();
	void _OnChangeNotify(unsigned __int64,__int64);
protected:
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	CWakeFlow();
	virtual long StartFlow(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,unsigned short const *);
	virtual void OnWakeUIDestroyed();
};

struct CWakeFlyoutController
{
	static long Attach(DirectUI::Element *,IWakeUI *,IWakeUIEvents *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

class CWakeUI
{
	long _CreateAndSetFlyoutContent();
	long _CreateCommand(unsigned int,IPopupCommand * *);
	long _CreateFlyout();
	long _CreateParser();
	long _SetPopupCommand(unsigned int);
public:
	CWakeUI();
	long OnDismissCommand(IPopupWindow *,IPopupCommand *);
	long OnDismissEvent(IPopupWindow *);
	virtual long CreateAndShow(HWND__ *,unsigned short const *,IWakeUIEvents *);
	virtual long GetResult(long *);
	virtual void Cancel();
	virtual void Done();
	virtual void Timeout();
};

struct CWakeUIPopupCommand
{
	virtual long get_Handler(IPopupCommandHandler * *);
	virtual long get_ID(unsigned int *);
	virtual long get_Label(unsigned short * *);
};

struct CWallpaperCollection
{
	long Pop(unsigned short * *);
	long PushUnusedImage(WALLPAPER_SLIDESHOW_IMAGE_ENTRY const *);
	static long s_CreateInstance(CRefCountedDPA<CDPAItemIdList<_ITEMIDLIST_ABSOLUTE> > *,CWallpaperCollection * *);
	unsigned long GetCount();
	unsigned long Release();
	void Shuffle(unsigned short const *);
};

class CWallpaperRenderer
{
	CWallpaperRenderer::OCCLUDEDCONTENT _GetPrimaryMonitorOcclusion(HMONITOR__ *);
	bool _GetWallpaperBitmap(HDC__ *,tagRECT const *,DESKTOP_WALLPAPER_POSITION *,HBITMAP__ * *);
	bool _IsFileMoreRecentlyModifiedThanTranscodedImage(unsigned short const *);
	bool _IsSingleMonitorSystem();
	bool _UseDiskCache();
	long _ApplyStaticImage(CMemoryCachedImage *,unsigned short const *);
	long _CreateBitmapOfDesktopWallpaperFromShellTask(tagRECT const &);
	long _EnsureDiskCacheDirectoryPathInitialized();
	long _GetCurrentColorizationImages(CMemoryCachedImage * * *,unsigned int *);
	long _LoadBitmapFromDiskCache(int,int,DESKTOP_WALLPAPER_POSITION,HBITMAP__ * *);
	static long _s_GetDiskCachedImagePath(unsigned short const *,int,int,DESKTOP_WALLPAPER_POSITION,unsigned short *,unsigned int);
	void _CreateBitmapOfDesktopWallpaper(HDC__ *,tagRECT const &,HBITMAP__ * *);
	void _DeleteDiskCache();
	void _DetermineImageScale(tagRECT const *,DESKTOP_WALLPAPER_POSITION,bool,unsigned int *,unsigned int *);
	void _FlagImagesForRetranscode();
	void _GetOffsetAndTileMode(tagRECT const *,tagBITMAP const *,DESKTOP_WALLPAPER_POSITION,bool,int *,int *);
	void _SaveBitmapToDiskCache(HBITMAP__ * *);
	void _UpdateImageColorizationColorHelper();
public:
	CWallpaperRenderer();
	bool HasStaticMultimonAssignments();
	bool IsWallpaperOccluded(HMONITOR__ *);
	bool SetWallpaperPosition(DESKTOP_WALLPAPER_POSITION,bool,bool *);
	int FindMonitor(unsigned short const *);
	int GetImageCount();
	int GetLastUpdatedIndex();
	long DisplayImage(__int64);
	long ExpireImages(__int64);
	long GetCurrentImages(__int64);
	long GetImageAt(int,unsigned short *,unsigned int);
	long GetImageForMonitor(int,unsigned short *,unsigned int);
	long GetImageRectAt(int,tagRECT *);
	long GetMonitorDevicePathAt(unsigned int,unsigned short *,unsigned int);
	long GetMonitorRECT(unsigned int,tagRECT *);
	long PaintWallpaperThumbnail(HDC__ *,int,int);
	long UpdateImage(int,unsigned short const *);
	static bool s_IsInternalFile(unsigned short const *);
	static bool s_ValidateImageFile(unsigned short const *);
	static long s_DeleteDiskCacheFromShellTask(unsigned short const *);
	static long s_GetCachePath(unsigned short *,unsigned int);
	static long s_GetWallpaperHelper(unsigned short *,unsigned int);
	static long s_SaveBitmapToDiskCacheFromShellTask(unsigned short const *,int,int,DESKTOP_WALLPAPER_POSITION,HBITMAP__ *,bool);
	static long s_SetWallpaperHelper(unsigned short const *,unsigned long);
	static long s_SetWallpaperToInternalFile();
	static void s_BitBltToScreen(HBITMAP__ *,HDC__ *,tagRECT const &,tagRECT const &);
	unsigned int CountActiveMonitors();
	unsigned int GetMonitorDevicePathCount();
	void Initialize(HWND__ *);
	void InitializeImages(bool);
	void Invalidate(bool,bool);
	void OnDisplayChanged();
	void PaintMonitor(unsigned int,HWND__ *,HWND__ *,HMONITOR__ *,HDC__ *,tagRECT const *,tagRECT const *,tagRECT const *);
	void PaintWallpaper(HWND__ *,HWND__ *,HDC__ *,unsigned int,HMONITOR__ * *,tagRECT *);
	void PaintWallpaperBitmapFromShellTask();
	void ReleaseResolutionIndependentImageResources();
	void SetLastUpdatedIndex(int);
	void UpdateImage();
	~CWallpaperRenderer();
};

class CWallpaperWindow
{
	long _CaptureWallpaper(unsigned char);
	long _CaptureWindow(IAnimatedWallpaper *);
	virtual int v_CaptureWallpaper(tagSIZE *,unsigned char);
	void _OnCompositionChanged();
protected:
	CWallpaperWindow(IZOrderManager *,IAnimatedWallpaperHost *);
	long _CreateWorkerWindow(HWND__ *,unsigned long,unsigned long,HMENU__ *);
	long _UpdateWallpaperOrDefer();
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CWallpaperWindow();
public:
	static long s_CreateInstance(HWND__ *,unsigned long,unsigned long,HMENU__ *,IZOrderManager *,IAnimatedWallpaperHost *,IWallpaper * *);
	virtual HWND__ * GetWindow();
	virtual long CaptureWindow(IAnimatedWallpaper *,unsigned char);
	virtual long Destroy();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CWebBrowserUtils
{
	virtual long IsDualModeBrowser(unsigned short const *);
};

class CWeekCategorizer
{
	virtual ~CWeekCategorizer();
protected:
	long _GetFilterName(unsigned long,unsigned short *,unsigned long);
	virtual long OnGetFilterCondition(unsigned long,IFilterCondition * *);
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
};

class CWindowPropStore
{
	HWND__ * _GetTaskBandWindow();
	static int s_PropEnumProcEx(HWND__ *,unsigned short *,void *,unsigned __int64);
public:
	virtual long Commit();
	virtual long GetAt(unsigned long,_tagpropertykey *);
	virtual long GetCount(unsigned long *);
	virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
	virtual long SetWindow(HWND__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CWizardThread
{
	static unsigned long s_WizardThreadProc(void *);
public:
	long DoWizardThread(HWND__ *,HGUI_STATUS_FLAGS,unsigned short const *,unsigned short const *);
};

class CWordMatch
{
	long _PutWordMatch(unsigned long,unsigned short const *,unsigned long,unsigned long);
	static long s_FillTextBuffer(tagTEXT_SOURCE *);
public:
	long Initialize(unsigned short const *,unsigned long,unsigned long);
	long WordMatch(unsigned short const *,int *);
	virtual long EndAltPhrase();
	virtual long PutAltWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long PutBreak(tagWORDREP_BREAK_TYPE);
	virtual long PutWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long StartAltPhrase();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CWordWheel
{
protected:
	virtual int v_IsRootEntryAutoNavigated();
	virtual ~CWordWheel();
public:
	virtual long Enter(IShellSearchScope *);
	virtual long Exit();
	virtual long GetACEnumString(IEnumString * *);
	virtual long GetMenu(HMENU__ * *);
	virtual long GetPromptText(unsigned short *,unsigned int);
	virtual long GetSearchText(unsigned short *,unsigned int);
	virtual long InitMenuPopup(HMENU__ *);
	virtual long OnMenuCommand(unsigned long);
	virtual long OnSearchTextNotify(unsigned short const *,unsigned short const *,SHELLSEARCHNOTIFY);
	virtual long Search(unsigned short const *,unsigned long);
};

class CWorkItemQueue
{
	long _QueuedWorkItemCallback();
	static unsigned long s_QueuedWorkItemCallback(void *);
public:
	unsigned long Release();
	void Queue(_tagWORKITEMCALLBACKPARAM *);
};

struct CWrapOldCallback
{
	CWrapOldCallback(_CSFV *);
	virtual long RealMessage(unsigned int,unsigned __int64,__int64);
	virtual long SetSite(IUnknown *);
};

class CWrappedICategorizer
{
protected:
	virtual int OnCompareCategory(unsigned long,unsigned long);
	virtual long OnGetCategoryDescription(unsigned long,ICategoryDescription * *);
	virtual long OnGetItemCategory(ICategorizableItem *,IShellFolder2 *,tagPROPVARIANT *);
};

class CWrlLightweightHandlerBase
{
protected:
	long _GetStdMarshaler(_GUID const &,void * *);
	virtual long v_GetAdditionalDataSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long v_MarshalAdditionalData(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual void v_OnAggregatedUnknownCreated();
public:
	virtual long DisconnectObject(unsigned long);
	virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
	virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual long ReleaseMarshalData(IStream *);
	virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
};

class CWrlLightweightHandlerServer
{
	virtual unsigned long v_GetHandlerType();
public:
	virtual long GetClassForHandler(unsigned long,void *,_GUID *);
};

struct CXElementModule
{
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long CreateInnerObject(IUnknown * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CXElementModuleInner
{
protected:
	virtual ~CXElementModuleInner();
	void _FailGracefully(DirectUI::Element *);
public:
	CXElementModuleInner();
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long HasFocusIO();
	virtual long LayoutInitialized();
	virtual long Notify(unsigned short const *);
	virtual long OnContentsChanged();
	virtual long OnFolderChanged();
	virtual long OnInnerElementDestroyed();
	virtual long OnNavigateAway();
	virtual long OnSelectedItemChanged();
	virtual long OnSelectionChanged();
	virtual long OptionallyTakeInitialFocus(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CXMLDOMNode
{
protected:
	void Reset();
public:
	CXMLDOMNode selectNode(unsigned short const *,int);
	IXMLDOMDocument * ownerDocument();
	long CreateFromResource(HINSTANCE__ *,unsigned short const *,unsigned short const *,_GUID const &);
	long CreateFromStream(IStream *,_GUID const &);
	long getStringAttribute(unsigned short const *,unsigned short * *);
	~CXMLDOMNode();
};

class CXPContext
{
protected:
	long _CreateUnmappedElement(XMLPROP_ITEM const *,IXmlReader *,unsigned int,int);
	long _EnsureIndex();
	long _SetUnmappedElement(CXmlElement *);
public:
	long GetNextIndex(XMLPROP_ITEM const *,unsigned int *);
	long InitForReading(CXPContext *,XMLPROP_ITEM const *,IXmlReader *,int);
	long InitForWriting(CXPContext *,XMLPROP_ITEM const *,unsigned int,CXmlElement *);
	long SetIndex(XMLPROP_ITEM const *,unsigned int);
	~CXPContext();
};

struct CXmlElement
{
	CMappedXmlElement * FindMappedChild(XMLPROP_ITEM const *,unsigned short const *,int *);
	long AddChild(CXmlEntity *);
	long AddChildMappedElem(XMLPROP_ITEM const *,CXmlElement * *);
	long AddChildUnmappedElem(IXmlReader *,CXmlElement * *);
	long SetComments(CXmlElement *);
	long WriteAttributes(IXmlWriter *);
	long WriteHeaderComments(IXmlWriter *);
	unsigned short const * GetNamespaceUriFromAttribute(unsigned short const *);
	virtual ~CXmlElement();
};

struct CXmlEntity
{
	static long s_CreateUnmappedEntity(IXmlReader *,XmlNodeType,CXmlEntity * *);
	static long s_ReadName(IXmlReader *,unsigned short * *);
	static long s_ReadPrefix(IXmlReader *,unsigned short * *);
	static long s_ReadText(IXmlReader *,unsigned short * *);
};

struct CXmlIndexMap
{
	long GetCurrentIndex(XMLPROP_ITEM const *,unsigned int *);
	long GetNextIndex(XMLPROP_ITEM const *,unsigned int *);
};

struct CXmlPropMapCleaner
{
	CXmlPropMapCleaner();
	void Attach(XMLPROP_ITEM *);
	~CXmlPropMapCleaner();
};

class CZOrderManager
{
	int _FindWindow(HWND__ *);
	long _FixZOrder(bool);
	static CZOrderManager * s_pInstance;
	static HWINEVENTHOOK__ * s_hHook;
	static HWND__ * s_GetWindowAfter(HWND__ *);
	static void s_EventHookCB(HWINEVENTHOOK__ *,unsigned long,HWND__ *,long,long,unsigned long,unsigned long);
public:
	static unsigned int s_uForwardMessage;
	virtual long FixZOrder();
	virtual long ForwardMessage(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual long GetWindowAbove(HWND__ *,HWND__ * *);
	virtual long InsertWindowInZOrder(HWND__ *,HWND__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveWindowFromZOrder(HWND__ *);
	virtual long SetZOrder(HWND__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CZeroInitNew
{
	static void * operator new(unsigned __int64,std::nothrow_t const &);
	static void operator delete(void *);
};

class CachedShellState
{
	int _IsUpToDate();
	int _UpdateSettings();
	static CachedShellState * Create(int *);
	static CachedShellState s_cssDefault;
	static REGSHELLSTATE s_rssDefault;
	void _GetAdvancedSettings();
	void _Restrict();
public:
	static CachedShellState * Get(int *);
	void Destroy();
	void GetSetSettings(SHELLSTATEW *,unsigned long,int,int);
	void SaveAdvancedSettings();
};

namespace CallerIdentity
{
	bool IsShellExperienceAppId(unsigned short const *);
	bool g_fRuntimeBrokerProcessIdInitialize;
	long CheckCallerCapability(unsigned short const *,bool *);
	long CheckCapabilityFromImpersonationToken(void *,unsigned short const *,bool *);
	long CheckCapabilityFromProcessHandle(void *,unsigned short const *,bool *);
	long EnsureCallingProcessIsShellExperience();
	long GetCallerProcessImageName(unsigned short *,unsigned long *);
	long GetCallingProcessAppId(unsigned short * *);
	long GetCallingProcessHandle(unsigned long,RUNTIMEBROKER_CALLERIDENTITY_CHECK,void * *);
	long GetCoreApplicationForCallingProcess(_GUID const &,void * *);
	long GetCoreWindowForCallingThread(_GUID const &,void * *);
	long GetCoreWindowForCurrentThread(_GUID const &,void * *);
	long GetCoreWindowHandleForCurrentThread(HWND__ * *);
	long GetManifestedOrientationPreference(unsigned short const *,ORIENTATION_PREFERENCE *);
	long GetPackageFullNameFromProcess(void *,unsigned short * *);
	long GetPackageInfoFromCurrentProcess(unsigned int,unsigned int *,PACKAGE_INFO * *);
	long GetPackageInfoFromPackageFullName(unsigned short const *,unsigned int,unsigned int *,PACKAGE_INFO * *);
	long GetPackageInfoFromPackageFullNameWithoutInProcessCache(unsigned short const *,unsigned int,unsigned int *,PACKAGE_INFO * *);
	long GetProcessAppId(void *,unsigned short * *);
	long GetSinglePackageFullNameFromPackageFamilyName(unsigned short const *,unsigned short * *);
	long GetStateHandle(unsigned short const *,void * *);
	long GetStateRegKey(void *,unsigned short const *,unsigned long,HKEY__ * *);
	long IsProcessAppContainer(void *,bool *);
	unsigned long g_dwRuntimeBrokerProcessId;
	void _EnsureRuntimeBrokerPID();
};

class CheckAndReNavigateToParentTask
{
	bool _IsLayoutSame(IUnknown *,IShellItem *);
	long _GetIDList(IUnknown *,_ITEMIDLIST_ABSOLUTE * *);
	void _Browse(IUnknown *,IShellItem *);
	void _RenavigateToParent();
public:
	long Initialize(IUnknown *,long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	static unsigned long s_RenavigateToParent(void *);
};

class CheckButton
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	CheckButton();
	long Initialize(DirectUI::Element *,unsigned long *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual tagSIZE _SelfLayoutUpdateDesiredSize(int,int,DirectUI::Surface *);
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void _SelfLayoutDoLayout(int,int);
};

class CheckboxButtonElement
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	long SetCheckboxElementMouseWithin(bool);
	static DirectUI::PropertyInfo const * CheckboxElementMouseWithinProp();
	static DirectUI::PropertyInfo const * GlyphAspectProp();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class CheckboxContentElement
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	long SetShowFocusRectOnKeywithin(bool);
	static DirectUI::PropertyInfo const * ShowFocusRectOnKeywithinProp();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class CheckboxElement
{
	DirectUI::Element * _GetSimulatedFocusElement();
	long _CreateAndAddGlyph();
	long _CreateAndAddLabel();
	long _SetCheckedState(CHECKED_STATE);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	CHECKBOX_ALIGN GetCheckboxInnerAlign();
	bool GetShowMouseFocusedOnMouseWithin();
	long Initialize(DirectUI::Element *,unsigned long *);
	long SetCheckedState(CHECKED_STATE);
	static DirectUI::PropertyInfo const * CheckboxInnerAlignProp();
	static DirectUI::PropertyInfo const * CheckedStateProp();
	static DirectUI::PropertyInfo const * ShowMouseFocusedOnMouseWithinProp();
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool OnPropertyChanging(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long Insert(DirectUI::Element * *,unsigned int,unsigned int);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

struct CollectedConflictTelemetry
{
	void SaveCollectedConflictTelemetry();
	void SetConflictCount(unsigned long);
	void UpdateCombinedResponse(CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	void UpdateDecideForEachDataPoints();
	void UpdateIndividualResponse(unsigned long,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE,int);
};

struct CollectionChangeArgs
{
	CollectionChangeArgs(CollectionChangeArgs const &);
	~CollectionChangeArgs();
};

class ColumnBalancingLayout
{
protected:
	void _CalculateDesiredSizeMetrics(DirectUI::Element *,int,int,DirectUI::Surface *,int *,int *);
public:
	static long Create(DirectUI::Layout * *);
	virtual tagSIZE UpdateDesiredSize(DirectUI::Element *,int,int,DirectUI::Surface *);
	virtual void DoLayout(DirectUI::Element *,int,int);
};

namespace Common
{
	class DirectoryTreeWalker
	{
		bool IsDirAndShouldBeWalked(_WIN32_FIND_DATAW const &);
		long AppendNameToDirPath(unsigned short const *);
		long GetFirstFindHandle(void * *,_WIN32_FIND_DATAW * *);
		long InitializePath(unsigned short const *);
		long Visit(unsigned __int64,unsigned short *,_WIN32_FIND_DATAW const *,long *);
		static long DefaultFindCloseCallback(void *,void *);
		static long DefaultFindFirstCallback(void *,unsigned short *,void * *,_WIN32_FIND_DATAW *);
		static long DefaultFindNextCallback(void *,void *,_WIN32_FIND_DATAW *);
		static long IsRootValidToWalk(unsigned short const *,unsigned __int64 *,bool *,bool *,bool *);
	public:
		long Walk(unsigned short const *,unsigned int);
		~DirectoryTreeWalker();
	};

	bool IsDirectoryReparsePointOpaque(_WIN32_FIND_DATAW const &);
	long WalkDirectoryTree(unsigned short const *,unsigned int,long (*)(void *,unsigned short const *,_WIN32_FIND_DATAW const *),void *,long (*)(void *,unsigned short *,void * *,_WIN32_FIND_DATAW *),long (*)(void *,void *,_WIN32_FIND_DATAW *),long (*)(void *,void *));
};

class CommonPeopleTelemetry
{
protected:
	static CommonPeopleTelemetry * Instance();
	void Create();
public:
	static void PinnedPeopleStorageCapExceeded();
	void ContactPinned_(PeopleTelemetry::PinEventSource,unsigned int);
	void ContactUnpinned_(PeopleTelemetry::PinEventSource,unsigned int);
};

class CommonStartTelemetryLogging
{
protected:
	static CommonStartTelemetryLogging * Instance();
};

namespace ConfirmationDlgUtils
{
	int CenterWindow(HWND__ *,tagRECT const *,tagPOINT *);
	int ShiftLeftCallBack(HWND__ *,__int64);
	long GetDrawTextExtent(HWND__ *,unsigned short const *,unsigned long,tagSIZE *);
	long GetItemAttribs(IShellItem *,unsigned short * *);
	void ShiftWindow(HWND__ *,int,int);
};

class ConfirmationInterruptElement
{
	long _CreateCustomCommandLinks(IConfirmationInterrupt *);
	long _Initialize(CDUIResourceManager const &,IConfirmationInterrupt *);
	long _InitializeDoForAllCheckbox(bool);
	long _SetButtons(CDUIResourceManager const &,IConfirmationInterrupt *);
	long _SetDescription(IConfirmationInterrupt *);
	long _SetItemDetails(IShellItem *);
	long _SetItemImage(IShellItem *);
	long _SetItemName(IShellItem *);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static bool s_GetDoForAllRegistrySettingDefaultFalse();
	static long Register();
	static long s_CreateInstance(CDUIResourceManager const &,IConfirmationInterrupt *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::Element * GetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long);
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

namespace ConfirmationUIUtils
{
	struct CConfirmItemInfo
	{
		CConfirmItemInfo();
		long Load(IShellItem *,int,int);
		void Clear();
		~CConfirmItemInfo();
	};

};

class ConflictInterruptElement
{
	long _Initialize(CDUIResourceManager const &,unsigned __int64,OPERATION_TYPE,IConflictInterrupt *,IOperationDataReader *,OperationTileHeader const *);
	long _InitializeItemTiles(OPERATION_TYPE,IConflictInterrupt *,IOperationDataReader *);
	long _SetDescription(IConflictInterrupt *,unsigned long);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	ConflictInterruptElement();
	static long Register();
	static long s_CreateInstance(CDUIResourceManager const &,unsigned __int64,OPERATION_TYPE,IConflictInterrupt *,IOperationDataReader *,OperationTileHeader const * const,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class ConflictItemElement
{
	HWND__ * _GetTopLevelHWND();
	bool _InvokeDefaultVerb();
	bool _ShowContextMenu();
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnInput(DirectUI::InputEvent *);
	void SetConflictItem(IShellItem *,unsigned short const *);
};

class ConflictItemTile
{
	long _Initialize(IConflictInterrupt *,IOperationDataReader *,OPERATION_TYPE,RESOLUTION_TYPE,CollectedConflictTelemetry *);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	RESOLUTION_TYPE GetTileType();
	long LaunchConflictDialog();
	long SetDescription(unsigned short const *);
	static DirectUI::PropertyInfo const * DescriptionProp();
	static DirectUI::PropertyInfo const * TileTypeProp();
	static OPERATION_INTERRUPT_RESPONSE_AGGREGATED * s_CreateAggregatedInterruptResponseFromSingle(int,OPERATION_INTERRUPT_RESPONSE_SINGLE);
	static UID InterruptClick;
	static UID LaunchDialog;
	static long Register();
	static long s_CreateInstance(CDUIResourceManager const &,IConflictInterrupt *,IOperationDataReader *,OPERATION_TYPE,RESOLUTION_TYPE,CollectedConflictTelemetry *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	void ReleaseConflictInterfaces();
};

struct ContextMenuTelemetry
{
	static void CoCreateInstance<_GUID const &,unsigned __int64 volatile &>(_GUID const &,unsigned __int64 volatile &);
	static void IShellExtInit_Initialize<_GUID const &,unsigned __int64 volatile &>(_GUID const &,unsigned __int64 volatile &);
	static void QueryContextMenu<_GUID const &,unsigned __int64 volatile &>(_GUID const &,unsigned __int64 volatile &);
};

namespace CopyTileAnimationUtils
{
	class CTileAnimationManager
	{
		long _InitProgressAnimationElements(TILE_ANIMATION_DATA *);
		long _PrepareAnimationStartup(ANIM_TRANSITION_TYPE,IOperationStatusTilePriv *);
		long _ShowAnimationElementAndSetFocus(DirectUI::Element *);
		void _Cleanup();
	public:
		ANIM_TRANSITION_TYPE GetTransitionType();
		long StartAnimation(ANIM_TRANSITION_TYPE,TILE_ANIMATION_DATA *,IOperationStatusTilePriv *);
		long UpdateAnimationFrame(unsigned __int64);
		void ForceAbandonAnimation(ANIM_PROGRESS_STATUS);
		void ForceCompleteAnimation(ANIM_PROGRESS_STATUS);
	};

	class CTileAnimator
	{
		long _ValidateAnimationElements(DirectUI::Element *,DirectUI::Element *,DirectUI::Element *,Interpolators::CTileAnimationInterpolator *);
	public:
		long StartAnimation(unsigned __int64);
		long UpdateAnimationFrame(unsigned __int64);
	};

	HBITMAP__ * CreateBitmapFromElement(DirectUI::Element *);
	bool IsKeyWithin(DirectUI::Element *);
	bool IsTileAnimationAllowed();
	long InitializeAnimationElements(DirectUI::Element *,DirectUI::Element *,DirectUI::Element *,tagSIZE *);
	long IsHighContrastOn(bool *);
	long IsWindowsClassicBasicOrHCTheme(bool *);
	long PaintElementTree(HDC__ *,tagPOINT const * const,tagRECT const *,DirectUI::Element *,DirectUI::Element *);
	long PaintHWNDHostElement(DirectUI::Element *,DirectUI::Element *,HDC__ *);
	long PrepareAnimationDestinationElement(DirectUI::Element *);
	long SetElementAlpha(DirectUI::Element *,int);
	long SetElementHeight(DirectUI::Element *,int);
	long SetElementIntValue(DirectUI::Element *,DirectUI::PropertyInfo const * const,int);
	long SetElementSize(DirectUI::Element *,tagSIZE const &);
	long SetWidthChildElements(DirectUI::Element *,int);
	long ShowAnimationElement(bool,DirectUI::Element *);
	void ExecuteSetKeyFocus(bool,DirectUI::Element *);
	void SafeDelete<CTileAnimationInterpolatorSet>(CopyTileAnimationUtils::CTileAnimationInterpolatorSet * *);
	void SafeDelete<CTileAnimator>(CopyTileAnimationUtils::CTileAnimator * *);
	void SafeDelete<DirectUI::SimpleTimer>(DirectUI::SimpleTimer * *);
	void SafeDelete<Interpolators::CTileAnimationInterpolator>(Interpolators::CTileAnimationInterpolator * *);
	void SafeDelete<TILE_ANIMATION_DATA>(CopyTileAnimationUtils::TILE_ANIMATION_DATA * *);
};

namespace CortanaCapabilities
{
	long ConvertCapabilitiesStringToCapabilitiesFlag(unsigned short const *,unsigned __int64,CortanaCapabilities::CapabilityFlags *);
	long GetCortanaCapabilities(unsigned short * *);
};

namespace CortanaRegistrySettings
{
	bool _Boolify(unsigned long);
	long GetCortanaRegistrySetting<bool>(unsigned short const *,bool (*)(unsigned long),bool,bool *,bool *);
};

namespace CreativeFramework
{
	namespace ContentDeliveryManagerDebugSettings
	{
		bool IsContentDeliveryAllowedOverrideInEffect(bool *);
	};

	namespace ContentDeliveryManagerSettings
	{
		namespace Details
		{
			long GetSettingValue<unsigned long,16>(HKEY__ *,unsigned short const *,unsigned short const *,bool,unsigned long *,unsigned long);
		};

		long DoesKeyExist(unsigned short const *,bool *);
		long GetBoolSetting(unsigned short const *,unsigned short const *,bool,bool *);
	};

	namespace Policy
	{
		bool IsContentDeliverySkuPolicyAllowed(bool);
		bool IsMicrosoftDomainAccount();
	};

};

struct DIBSectionUtil
{
	static int HasAlpha(unsigned int,unsigned int,tagRGBQUAD const *);
	static int HasPartialAlpha(unsigned int,unsigned int,tagRGBQUAD const *);
	static void MakeOpaque(unsigned int,unsigned int,tagRGBQUAD *);
};

class DIBVEManifestParser
{
	long _CreateSchemaCollection(IXMLDOMSchemaCollection * *);
	long _TransformDocumentIfNecessary(IXMLDOMDocument *,IXMLDOMDocument * *);
	long _ValidateAllOrNothingAttributes(CXMLDOMNode *);
	long _ValidateDocument(IXMLDOMDocument *);
	static DIBVEManifestParser::MAINFESTPROPERTIES_ALLORNOTHING const * const s_rgAllOrNothingDesktopTiles;
	static DIBVEManifestParser::MANIFESTPROPERTIES const * const s_rgManifestProperties;
	static DIBVEManifestParser::MANIFESTPROPERTIES const * const s_rgManifestPropertiesDesktopTiles;
public:
	long Parse(unsigned short const *,IPropertyStore *);
};

namespace DPIToPPIHelpers
{
	int ScaleByPPI(int,HWND__ *,DPIToPPIHelpers::ScaleModifier);
	int ScaleBySpecificDPI(int,int,DPIToPPIHelpers::ScaleModifier);
	int ScaleByType(DPIToPPIHelpers::ScaleType,int,HWND__ *,int,DPIToPPIHelpers::ScaleModifier);
	long DrawThemeTextExLambda<<lambda_a6e095e96b82d37a4e0810b2bac7ffb3> >(void *,HDC__ *,int,int,unsigned short const *,int,unsigned long,tagRECT *,_DTTOPTS *,<lambda_a6e095e96b82d37a4e0810b2bac7ffb3>);
	long DrawThemeTextExPPI(HWND__ *,DPIToPPIHelpers::ScaleType,unsigned int *,void *,HDC__ *,int,int,unsigned short const *,int,unsigned long,tagRECT *,_DTTOPTS *);
	long GetThemeTextExtentPPI(HWND__ *,DPIToPPIHelpers::ScaleType,unsigned int *,void *,HDC__ *,int,int,unsigned short const *,int,unsigned long,_DTTOPTS *,tagRECT *,tagRECT *);
};

namespace DefaultAssocTelemetry
{
	class ChangeDefaultBrowser
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void LogMSEdgeInfo();
		void SetDefaultBrowser(unsigned long,unsigned short const *,unsigned short const *,unsigned short const *);
		void StartActivity();
	};

	class ResetToRecommendedApp
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ResetToRecommendedApp();
	};

	class SetDefaultProgram
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(unsigned long,unsigned short const *,unsigned short const *);
		~SetDefaultProgram();
	};

	class UserAssocVerifyHash
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,bool,unsigned short const *,unsigned short const *);
	};

};

class DesktopAppRankProvider
{
	void GetUaInfo(unsigned short const *,tagUEMINFO &);
public:
	DesktopAppRankProvider();
	virtual long GetGranularUsageData(unsigned short const *,_FILETIME *,unsigned int *,unsigned int *,unsigned long *);
	virtual long GetRankForApp(unsigned short const *,unsigned int *);
	virtual long SetGranularUsageData(unsigned short const *,unsigned int,unsigned int,unsigned long);
};

class DesktopIconLayoutLogging
{
protected:
	static DesktopIconLayoutLogging * Instance();
};

namespace DesktopIconLayoutTelemetry
{
	class MonitorChangedActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void LayoutAdded<int &>(int &);
		void LayoutRestored<int &>(int &);
		void StartActivity();
		~MonitorChangedActivity();
	};

	class RestoreIconLayoutActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int,int);
		~RestoreIconLayoutActivity();
	};

};

class DesktopPersonalizationTelemetry
{
protected:
	static DesktopPersonalizationTelemetry * Instance();
	void Create();
public:
	static void WallpaperUpdateFailed<unsigned short const (&)[32],unsigned short const * &,long &>(unsigned short const (&)[32],unsigned short const * &,long &);
	static void WallpaperUpdatedViaUpdateImageToSystemSetting();
	void WallpaperUpdatedViaSetWallpaper_(unsigned short const *);
};

namespace DirectUI
{
	struct AccessibleButton
	{
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
	};

	struct AutoDefer
	{
		AutoDefer(Element *);
		void EndDefer();
		~AutoDefer();
	};

	struct Button
	{
		virtual bool OnLostDialogFocus(IDialogElement *);
		virtual bool OnReceivedDialogFocus(IDialogElement *);
		virtual long DefaultAction();
		virtual void OnInput(InputEvent *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
	};

	class ClassInfo<Button3d,Button,StandardCreator<Button3d> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<Button3d,Button,StandardCreator<Button3d> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CAppControlHost,HWNDFloat,StandardCreator<CAppControlHost> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CAppControlHost,HWNDFloat,StandardCreator<CAppControlHost> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CAppControlsModule,CFrameModule,StandardCreator<CAppControlsModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CAppControlsModule,CFrameModule,StandardCreator<CAppControlsModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CAppControlsModuleInner,Element,StandardCreator<CAppControlsModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CAppControlsModuleInner,Element,StandardCreator<CAppControlsModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CCIDGroupControl,Element,StandardCreator<CCIDGroupControl> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CCIDGroupControl,Element,StandardCreator<CCIDGroupControl> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CCIDLabel,Element,StandardCreator<CCIDLabel> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CCIDLabel,Element,StandardCreator<CCIDLabel> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CChartView,HWNDHost,StandardCreator<CChartView> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CChartView,HWNDHost,StandardCreator<CChartView> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CCommandModule,CFrameModule,StandardCreator<CCommandModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CCommandModule,CFrameModule,StandardCreator<CCommandModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CCommandModuleInner,CElementWithSite,StandardCreator<CCommandModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CCommandModuleInner,CElementWithSite,StandardCreator<CCommandModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CConflictResolutionDlg,HWNDElement,StandardCreator<CConflictResolutionDlg> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CConflictResolutionDlg,HWNDElement,StandardCreator<CConflictResolutionDlg> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CControlPanelCategoryModule,CFrameModule,StandardCreator<CControlPanelCategoryModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CControlPanelCategoryModule,CFrameModule,StandardCreator<CControlPanelCategoryModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CControlPanelCategoryModuleInner,CElementWithSite,StandardCreator<CControlPanelCategoryModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CControlPanelCategoryModuleInner,CElementWithSite,StandardCreator<CControlPanelCategoryModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CControlPanelLink,AccessibleButton,StandardCreator<CControlPanelLink> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CControlPanelLink,AccessibleButton,StandardCreator<CControlPanelLink> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CControlPanelNavModule,CFrameModule,StandardCreator<CControlPanelNavModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CControlPanelNavModule,CFrameModule,StandardCreator<CControlPanelNavModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CControlPanelNavModuleInner,CElementWithSite,StandardCreator<CControlPanelNavModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CControlPanelNavModuleInner,CElementWithSite,StandardCreator<CControlPanelNavModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CDUISizerElement,CElementWithSite,StandardCreator<CDUISizerElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CDUISizerElement,CElementWithSite,StandardCreator<CDUISizerElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CDUIView,HWNDHost,StandardCreator<CDUIView> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CDUIView,HWNDHost,StandardCreator<CDUIView> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CDUIViewHost,Element,StandardCreator<CDUIViewHost> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CDUIViewHost,Element,StandardCreator<CDUIViewHost> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CDetailsContainer,CElementWithSite,StandardCreator<CDetailsContainer> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CDetailsContainer,CElementWithSite,StandardCreator<CDetailsContainer> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CDisplayElement,Button,StandardCreator<CDisplayElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CDisplayElement,Button,StandardCreator<CDisplayElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CEditElement,HWNDFloat,StandardCreator<CEditElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CEditElement,HWNDFloat,StandardCreator<CEditElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CElementWithIUnknown,Element,StandardCreator<CElementWithIUnknown> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CElementWithIUnknown,Element,StandardCreator<CElementWithIUnknown> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CElementWithSite,CElementWithIUnknown,StandardCreator<CElementWithSite> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CElementWithSite,CElementWithIUnknown,StandardCreator<CElementWithSite> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CEmptyLibraryPage,CElementWithSite,StandardCreator<CEmptyLibraryPage> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CEmptyLibraryPage,CElementWithSite,StandardCreator<CEmptyLibraryPage> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CExplorerBrowserHost,HWNDHost,StandardCreator<CExplorerBrowserHost> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CExplorerBrowserHost,HWNDHost,StandardCreator<CExplorerBrowserHost> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CFocusIndicator,Element,StandardCreator<CFocusIndicator> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CFocusIndicator,Element,StandardCreator<CFocusIndicator> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CFrameModule,CElementWithSite,StandardCreator<CFrameModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CFrameModule,CElementWithSite,StandardCreator<CFrameModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CHWNDView,HWNDElement,StandardCreator<CHWNDView> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CHWNDView,HWNDElement,StandardCreator<CHWNDView> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CInfoBar,Button,StandardCreator<CInfoBar> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CInfoBar,Button,StandardCreator<CInfoBar> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CInfoBarHostModule,CFrameModule,StandardCreator<CInfoBarHostModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CInfoBarHostModule,CFrameModule,StandardCreator<CInfoBarHostModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CInfoBarHostModuleInner,CElementWithSite,StandardCreator<CInfoBarHostModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CInfoBarHostModuleInner,CElementWithSite,StandardCreator<CInfoBarHostModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CInfoPane,CFrameModule,StandardCreator<CInfoPane> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CInfoPane,CFrameModule,StandardCreator<CInfoPane> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CInfoPaneInner,CElementWithSite,StandardCreator<CInfoPaneInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CInfoPaneInner,CElementWithSite,StandardCreator<CInfoPaneInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CItemTile,Element,StandardCreator<CItemTile> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CItemTile,Element,StandardCreator<CItemTile> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CMetadataElement,CMetadataLabel,StandardCreator<CMetadataElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CMetadataElement,CMetadataLabel,StandardCreator<CMetadataElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CMetadataLabel,Element,StandardCreator<CMetadataLabel> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CMetadataLabel,Element,StandardCreator<CMetadataLabel> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CNavigateButton,CElementWithSite,StandardCreator<CNavigateButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CNavigateButton,CElementWithSite,StandardCreator<CNavigateButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<COfflineMachinePage,CElementWithSite,StandardCreator<COfflineMachinePage> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<COfflineMachinePage,CElementWithSite,StandardCreator<COfflineMachinePage> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<COtherUsersBarrierPage,CElementWithSite,StandardCreator<COtherUsersBarrierPage> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<COtherUsersBarrierPage,CElementWithSite,StandardCreator<COtherUsersBarrierPage> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CPreviewBackground,CElementWithSite,StandardCreator<CPreviewBackground> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CPreviewBackground,CElementWithSite,StandardCreator<CPreviewBackground> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CPreviewMetadata,CFrameModule,StandardCreator<CPreviewMetadata> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CPreviewMetadata,CFrameModule,StandardCreator<CPreviewMetadata> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CPreviewMetadataInner,CElementWithSite,StandardCreator<CPreviewMetadataInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CPreviewMetadataInner,CElementWithSite,StandardCreator<CPreviewMetadataInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CPreviewThumbnail,CFrameModule,StandardCreator<CPreviewThumbnail> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CPreviewThumbnail,CFrameModule,StandardCreator<CPreviewThumbnail> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CPreviewThumbnailInner,CElementWithSite,StandardCreator<CPreviewThumbnailInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CPreviewThumbnailInner,CElementWithSite,StandardCreator<CPreviewThumbnailInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CPreviewTitleArea,CFrameModule,StandardCreator<CPreviewTitleArea> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CPreviewTitleArea,CFrameModule,StandardCreator<CPreviewTitleArea> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CPreviewTitleAreaInner,CElementWithSite,StandardCreator<CPreviewTitleAreaInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CPreviewTitleAreaInner,CElementWithSite,StandardCreator<CPreviewTitleAreaInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CProgressDialogUI,HWNDElement,StandardCreator<CProgressDialogUI> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CProgressDialogUI,HWNDElement,StandardCreator<CProgressDialogUI> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CProperTreeHost,HWNDHost,StandardCreator<CProperTreeHost> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CProperTreeHost,HWNDHost,StandardCreator<CProperTreeHost> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CProperTreeModule,CFrameModule,StandardCreator<CProperTreeModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CProperTreeModule,CFrameModule,StandardCreator<CProperTreeModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CProperTreeModuleInner,CElementWithSite,StandardCreator<CProperTreeModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CProperTreeModuleInner,CElementWithSite,StandardCreator<CProperTreeModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CPropertyButton,Button3d,StandardCreator<CPropertyButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CPropertyButton,Button3d,StandardCreator<CPropertyButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CReadingPaneModule,CFrameModule,StandardCreator<CReadingPaneModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CReadingPaneModule,CFrameModule,StandardCreator<CReadingPaneModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CReadingPaneModuleHost,HWNDHost,StandardCreator<CReadingPaneModuleHost> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CReadingPaneModuleHost,HWNDHost,StandardCreator<CReadingPaneModuleHost> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CReadingPaneModuleInner,CElementWithSite,StandardCreator<CReadingPaneModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CReadingPaneModuleInner,CElementWithSite,StandardCreator<CReadingPaneModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSaveControlsModule,CFrameModule,StandardCreator<CSaveControlsModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSaveControlsModule,CFrameModule,StandardCreator<CSaveControlsModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSaveControlsModuleInner,Element,StandardCreator<CSaveControlsModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSaveControlsModuleInner,Element,StandardCreator<CSaveControlsModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSaveDialogPreviewMetadata,CPreviewMetadata,StandardCreator<CSaveDialogPreviewMetadata> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSaveDialogPreviewMetadata,CPreviewMetadata,StandardCreator<CSaveDialogPreviewMetadata> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSaveDialogPreviewMetadataInner,CPreviewMetadataInner,StandardCreator<CSaveDialogPreviewMetadataInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSaveDialogPreviewMetadataInner,CPreviewMetadataInner,StandardCreator<CSaveDialogPreviewMetadataInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSearchOnlyLibraryPage,CElementWithSite,StandardCreator<CSearchOnlyLibraryPage> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSearchOnlyLibraryPage,CElementWithSite,StandardCreator<CSearchOnlyLibraryPage> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSearchPageText,CElementWithSite,StandardCreator<CSearchPageText> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSearchPageText,CElementWithSite,StandardCreator<CSearchPageText> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSplitButton,CElementWithSite,StandardCreator<CSplitButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSplitButton,CElementWithSite,StandardCreator<CSplitButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CStatusBarModule,CFrameModule,StandardCreator<CStatusBarModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CStatusBarModule,CFrameModule,StandardCreator<CStatusBarModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CStatusBarModuleInner,CElementWithSite,StandardCreator<CStatusBarModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CStatusBarModuleInner,CElementWithSite,StandardCreator<CStatusBarModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CTemplateBackground,CElementWithSite,StandardCreator<CTemplateBackground> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CTemplateBackground,CElementWithSite,StandardCreator<CTemplateBackground> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CThumbnailControlHost,Element,StandardCreator<CThumbnailControlHost> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CThumbnailControlHost,Element,StandardCreator<CThumbnailControlHost> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CXElementModule,CFrameModule,StandardCreator<CXElementModule> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CXElementModule,CFrameModule,StandardCreator<CXElementModule> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CXElementModuleInner,CElementWithSite,StandardCreator<CXElementModuleInner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CXElementModuleInner,CElementWithSite,StandardCreator<CXElementModuleInner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CheckButton,AccessibleButton,StandardCreator<CheckButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CheckButton,AccessibleButton,StandardCreator<CheckButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CheckboxButtonElement,Button,StandardCreator<CheckboxButtonElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CheckboxButtonElement,Button,StandardCreator<CheckboxButtonElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CheckboxContentElement,Element,StandardCreator<CheckboxContentElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CheckboxContentElement,Element,StandardCreator<CheckboxContentElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CheckboxElement,AccessibleButton,StandardCreator<CheckboxElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CheckboxElement,AccessibleButton,StandardCreator<CheckboxElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<ConfirmationInterruptElement,Element,StandardCreator<ConfirmationInterruptElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<ConfirmationInterruptElement,Element,StandardCreator<ConfirmationInterruptElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<ConflictInterruptElement,Element,StandardCreator<ConflictInterruptElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<ConflictInterruptElement,Element,StandardCreator<ConflictInterruptElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<ConflictItemElement,Element,StandardCreator<ConflictItemElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<ConflictItemElement,Element,StandardCreator<ConflictItemElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<ConflictItemTile,InterruptButton,StandardCreator<ConflictItemTile> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<ConflictItemTile,InterruptButton,StandardCreator<ConflictItemTile> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<HWNDFloat,ElementWithHWND,StandardCreator<HWNDFloat> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<HWNDFloat,ElementWithHWND,StandardCreator<HWNDFloat> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<IndividualConflictTileElement,Element,StandardCreator<IndividualConflictTileElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<IndividualConflictTileElement,Element,StandardCreator<IndividualConflictTileElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<IndividualConflictsDialogHWNDElement,HWNDElement,StandardCreator<IndividualConflictsDialogHWNDElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<IndividualConflictsDialogHWNDElement,HWNDElement,StandardCreator<IndividualConflictsDialogHWNDElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<InterruptButton,AccessibleButton,StandardCreator<InterruptButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<InterruptButton,AccessibleButton,StandardCreator<InterruptButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<InterruptResponseButton3d,AccessibleButton,StandardCreator<InterruptResponseButton3d> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<InterruptResponseButton3d,AccessibleButton,StandardCreator<InterruptResponseButton3d> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<Microsoft::Windows::FileExplorer::Banners::Banner,Button,StandardCreator<Microsoft::Windows::FileExplorer::Banners::Banner> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<Microsoft::Windows::FileExplorer::Banners::Banner,Button,StandardCreator<Microsoft::Windows::FileExplorer::Banners::Banner> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<Microsoft::Windows::FileExplorer::Banners::BannerContainer,CFrameModule,StandardCreator<Microsoft::Windows::FileExplorer::Banners::BannerContainer> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<Microsoft::Windows::FileExplorer::Banners::BannerContainer,CFrameModule,StandardCreator<Microsoft::Windows::FileExplorer::Banners::BannerContainer> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<OperationTileArea,Element,StandardCreator<OperationTileArea> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<OperationTileArea,Element,StandardCreator<OperationTileArea> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<OperationTileElement,Element,StandardCreator<OperationTileElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<OperationTileElement,Element,StandardCreator<OperationTileElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<OperationTileHeader,Element,StandardCreator<OperationTileHeader> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<OperationTileHeader,Element,StandardCreator<OperationTileHeader> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<OperationTileHost,HWNDElement,StandardCreator<OperationTileHost> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<OperationTileHost,HWNDElement,StandardCreator<OperationTileHost> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<PauseButton,CheckButton,StandardCreator<PauseButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<PauseButton,CheckButton,StandardCreator<PauseButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<SelectorButton,Button3d,StandardCreator<SelectorButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<SelectorButton,Button3d,StandardCreator<SelectorButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<ShellItemLink,AccessibleButton,StandardCreator<ShellItemLink> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<ShellItemLink,AccessibleButton,StandardCreator<ShellItemLink> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<ShellItemLinkFitter,Element,StandardCreator<ShellItemLinkFitter> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<ShellItemLinkFitter,Element,StandardCreator<ShellItemLinkFitter> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<ViewControl,CElementWithSite,StandardCreator<ViewControl> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<ViewControl,CElementWithSite,StandardCreator<ViewControl> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	struct ClassInfoBase
	{
		virtual HINSTANCE__ * GetModule();
		virtual PropertyInfo const * EnumPropertyInfo(unsigned int);
		virtual PropertyInfo const * GetByClassIndex(unsigned int);
		virtual bool IsGlobal();
		virtual bool IsSubclassOf(IClassInfo *);
		virtual bool IsValidProperty(PropertyInfo const *);
		virtual int GetChildren();
		virtual int Release();
		virtual unsigned int GetGlobalIndex();
		virtual unsigned int GetPICount();
		virtual unsigned short const * GetName();
		virtual void AddChild();
		virtual void AddRef();
		virtual void AssertPIZeroRef();
		virtual void RemoveChild();
	};

	class DynamicArrayBase<Element *,DoubleAllocationPolicy<Element *>,1,0>
	{
		long SwitchToHeap(unsigned int);
		static long CHeapBuffer_Reserve(DynamicArrayBase<Element *,DoubleAllocationPolicy<Element *>,1,0> *,unsigned int);
	public:
		int GetIndexOf(Element *);
		long Insert(unsigned int,Element *);
		long InsertPtr(unsigned int,Element * * *);
	};

	class Element
	{
	protected:
		virtual tagSIZE _SelfLayoutUpdateDesiredSize(int,int,Surface *);
		virtual void ActivateTooltip(Element *,unsigned long);
		virtual void OnHosted(Element *);
		virtual void OnUnHosted(Element *);
		virtual void RemoveTooltip(Element *);
		virtual void UpdateTooltip(Element *);
		virtual void _SelfLayoutDoLayout(int,int);
	public:
		virtual Element * GetAdjacent(Element *,int,NavReference const *,unsigned long);
		virtual Element * GetUiaFocusDelegate();
		virtual bool EnsureVisible(int,int,int,int);
		virtual bool GetKeyFocused();
		virtual bool IsContentProtected();
		virtual bool IsRTLReading();
		virtual bool OnPropertyChanging(PropertyInfo *,int,Value *,Value *);
		virtual bool OnPropertyChanging(PropertyInfo const *,int,Value *,Value *);
		virtual long Add(Element * *,unsigned int);
		virtual long AddBehavior(IDuiBehavior *);
		virtual long DefaultAction();
		virtual long GetAccessibleImpl(IAccessible * *);
		virtual long GetElementProviderImpl(InvokeHelper *,ElementProvider * *);
		virtual long GetUIAElementProvider(_GUID const &,void * *);
		virtual long Insert(Element * *,unsigned int,unsigned int);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual long Remove(Element * *,unsigned int);
		virtual long RemoveBehavior(IDuiBehavior *);
		virtual tagSIZE GetContentSize(int,int,Surface *);
		virtual unsigned int MessageCallback(tagGMSG *);
		virtual unsigned short const * GetContentStringAsDisplayed(Value * *);
		virtual void GetImmersiveFocusRectOffsets(tagRECT *);
		virtual void HandleUiaDestroyListener();
		virtual void HandleUiaEventListener(Event *);
		virtual void HandleUiaPropertyChangingListener(PropertyInfo const *);
		virtual void HandleUiaPropertyListener(PropertyInfo const *,int,Value *,Value *);
		virtual void OnDestroy();
		virtual void OnEvent(Event *);
		virtual void OnGroupChanged(int,bool);
		virtual void OnInput(InputEvent *);
		virtual void OnKeyFocusMoved(Element *,Element *);
		virtual void OnMouseFocusMoved(Element *,Element *);
		virtual void OnPropertyChanged(PropertyInfo *,int,Value *,Value *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
		virtual void Paint(HDC__ *,tagRECT const *,tagRECT const *,tagRECT *,tagRECT *);
		virtual void SetKeyFocus();
	};

	class HWNDElement
	{
	protected:
		virtual void _OnUIStateChanged(unsigned short,unsigned short);
	public:
		virtual HWND__ * GetHWND();
		virtual IClassInfo * GetClassInfoW();
		virtual __int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
		virtual bool CanSetFocus();
		virtual bool IsMSAAEnabled();
		virtual long CreateStyleParser(DUIXmlParser * *);
		virtual long GetAccessibleImpl(IAccessible * *);
		virtual void ActivateTooltip(Element *,unsigned long);
		virtual void GetWindowClassNameAndStyle(unsigned short const * *,unsigned int *);
		virtual void OnCompositionChanged();
		virtual void OnDestroy();
		virtual void OnEvent(Event *);
		virtual void OnGetDlgCode(tagMSG *,__int64 *);
		virtual void OnGroupChanged(int,bool);
		virtual void OnImmersiveColorSchemeChanged();
		virtual void OnInput(InputEvent *);
		virtual void OnNoChildWithShortcutFound(KeyboardEvent *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
		virtual void OnThemeChanged(ThemeChangedEvent *);
		virtual void OnWmSettingChanged(unsigned __int64,__int64);
		virtual void OnWmThemeChanged(unsigned __int64,__int64);
		virtual void RemoveTooltip(Element *);
		virtual void UpdateTooltip(Element *);
	};

	class HWNDHost
	{
	protected:
		virtual bool EraseBkgnd(HDC__ *,__int64 *);
		virtual void OnHosted(Element *);
		virtual void OnUnHosted(Element *);
	public:
		virtual HWND__ * GetHWND();
		virtual bool GetKeyFocused();
		virtual bool OnCtrlThemeChanged(unsigned int,unsigned __int64,__int64,__int64 *);
		virtual bool OnMessage(unsigned int,unsigned __int64,__int64,__int64 *);
		virtual bool OnNotify(unsigned int,unsigned __int64,__int64,__int64 *);
		virtual bool OnSinkThemeChanged(unsigned int,unsigned __int64,__int64,__int64 *);
		virtual bool OnSysChar(unsigned short);
		virtual int OnAdjustWindowSize(int,int,unsigned int);
		virtual long GetAccessibleImpl(IAccessible * *);
		virtual unsigned int MessageCallback(tagGMSG *);
		virtual void OnDestroy();
		virtual void OnEvent(Event *);
		virtual void OnInput(InputEvent *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
		virtual void OnWindowStyleChanged(unsigned __int64,tagSTYLESTRUCT const *);
		virtual void Paint(HDC__ *,tagRECT const *,tagRECT const *,tagRECT *,tagRECT *);
		virtual void SetKeyFocus();
		virtual void SetWindowDirection(HWND__ *);
	};

	struct Layout
	{
		virtual Element * GetAdjacent(Element *,Element *,int,NavReference const *,unsigned long);
		virtual void Attach(Element *);
		virtual void Detach(Element *);
		virtual void OnAdd(Element *,Element * *,unsigned int);
		virtual void OnLayoutPosChanged(Element *,Element *,int,int);
		virtual void OnRemove(Element *,Element * *,unsigned int);
	};

	struct NativeHWNDHost
	{
		virtual HWND__ * CreateHostWindow(unsigned long,unsigned short const *,unsigned short const *,unsigned long,int,int,int,int,HWND__ *,HMENU__ *,HINSTANCE__ *,void *);
	};

	class OverflowLayout
	{
		bool _PlaceInLayout(Element *,tagSIZE,Element *,MARGINFLAGS *,tagRECT *,tagRECT *,tagSIZE *,tagRECT const *);
	public:
		static long Create(Layout * *);
		virtual Element * GetAdjacent(Element *,Element *,int,NavReference const *,unsigned long);
		virtual tagSIZE UpdateDesiredSize(Element *,int,int,Surface *);
		virtual void DoLayout(Element *,int,int);
		virtual void OnAdd(Element *,Element * *,unsigned int);
		virtual void OnLayoutPosChanged(Element *,Element *,int,int);
		virtual void OnRemove(Element *,Element * *,unsigned int);
	};

	struct PropNotify
	{
		static bool IsEqual(PropertyInfo const *,int,PropertyInfo const * (*)());
	};

	class SimpleTimer
	{
		struct InvokeHelper<<lambda_03262fe02013deb0564f9b3aac4cdff5> >
		{
			virtual void DoInvoke();
		};

		struct InvokeHelper<<lambda_eb73e6eef2d65f464d4ec17450dc76de> >
		{
			virtual void DoInvoke();
		};

		struct InvokeHelper<<lambda_f408353da89df9fae38b94cd649aa00f> >
		{
			virtual void DoInvoke();
		};

		static void s_ActionCallback(GMA_ACTIONINFO *);
	public:
		bool Stop();
		long SetHandler<<lambda_03262fe02013deb0564f9b3aac4cdff5> >(<lambda_03262fe02013deb0564f9b3aac4cdff5> const &);
		long SetHandler<<lambda_eb73e6eef2d65f464d4ec17450dc76de> >(<lambda_eb73e6eef2d65f464d4ec17450dc76de> const &);
		long SetHandler<<lambda_f408353da89df9fae38b94cd649aa00f> >(<lambda_f408353da89df9fae38b94cd649aa00f> const &);
		void DelayedStart(float);
	};

	struct Value
	{
		static Value * GetAtomZero();
		static Value * GetBoolFalse();
		static Value * GetBoolTrue();
		static Value * GetIntZero();
		static Value * GetStringNull();
	};

	int RelPixToPixel(int);
	long CreateAndInit<CCIDGroupControl,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CEditElement,int,int>(int,int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CInfoBar,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CNavigateButton,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CPropertyButton,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CheckboxButtonElement,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CheckboxContentElement,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CheckboxElement>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<ConfirmationInterruptElement,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<ConflictItemElement,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<ConflictItemTile>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<HWNDFloat,unsigned int,unsigned int>(unsigned int,unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<InterruptResponseButton3d>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<OperationTileHeader,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<SelectorButton,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<ShellItemLink>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<ShellItemLinkFitter,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	void * HAlloc(unsigned __int64);
	void * HAllocAndZero(unsigned __int64);
	void HDelete<ClassInfo<Button3d,Button,StandardCreator<Button3d> > >(DirectUI::ClassInfo<Button3d,DirectUI::Button,DirectUI::StandardCreator<Button3d> > *);
	void HDelete<ClassInfo<CAppControlHost,HWNDFloat,StandardCreator<CAppControlHost> > >(DirectUI::ClassInfo<CAppControlHost,HWNDFloat,DirectUI::StandardCreator<CAppControlHost> > *);
	void HDelete<ClassInfo<CAppControlsModule,CFrameModule,StandardCreator<CAppControlsModule> > >(DirectUI::ClassInfo<CAppControlsModule,CFrameModule,DirectUI::StandardCreator<CAppControlsModule> > *);
	void HDelete<ClassInfo<CAppControlsModuleInner,Element,StandardCreator<CAppControlsModuleInner> > >(DirectUI::ClassInfo<CAppControlsModuleInner,DirectUI::Element,DirectUI::StandardCreator<CAppControlsModuleInner> > *);
	void HDelete<ClassInfo<CCIDGroupControl,Element,StandardCreator<CCIDGroupControl> > >(DirectUI::ClassInfo<CCIDGroupControl,DirectUI::Element,DirectUI::StandardCreator<CCIDGroupControl> > *);
	void HDelete<ClassInfo<CCIDLabel,Element,StandardCreator<CCIDLabel> > >(DirectUI::ClassInfo<CCIDLabel,DirectUI::Element,DirectUI::StandardCreator<CCIDLabel> > *);
	void HDelete<ClassInfo<CChartView,HWNDHost,StandardCreator<CChartView> > >(DirectUI::ClassInfo<CChartView,DirectUI::HWNDHost,DirectUI::StandardCreator<CChartView> > *);
	void HDelete<ClassInfo<CCommandModule,CFrameModule,StandardCreator<CCommandModule> > >(DirectUI::ClassInfo<CCommandModule,CFrameModule,DirectUI::StandardCreator<CCommandModule> > *);
	void HDelete<ClassInfo<CCommandModuleInner,CElementWithSite,StandardCreator<CCommandModuleInner> > >(DirectUI::ClassInfo<CCommandModuleInner,CElementWithSite,DirectUI::StandardCreator<CCommandModuleInner> > *);
	void HDelete<ClassInfo<CConflictResolutionDlg,HWNDElement,StandardCreator<CConflictResolutionDlg> > >(DirectUI::ClassInfo<CConflictResolutionDlg,DirectUI::HWNDElement,DirectUI::StandardCreator<CConflictResolutionDlg> > *);
	void HDelete<ClassInfo<CControlPanelCategoryModule,CFrameModule,StandardCreator<CControlPanelCategoryModule> > >(DirectUI::ClassInfo<CControlPanelCategoryModule,CFrameModule,DirectUI::StandardCreator<CControlPanelCategoryModule> > *);
	void HDelete<ClassInfo<CControlPanelCategoryModuleInner,CElementWithSite,StandardCreator<CControlPanelCategoryModuleInner> > >(DirectUI::ClassInfo<CControlPanelCategoryModuleInner,CElementWithSite,DirectUI::StandardCreator<CControlPanelCategoryModuleInner> > *);
	void HDelete<ClassInfo<CControlPanelLink,AccessibleButton,StandardCreator<CControlPanelLink> > >(DirectUI::ClassInfo<CControlPanelLink,DirectUI::AccessibleButton,DirectUI::StandardCreator<CControlPanelLink> > *);
	void HDelete<ClassInfo<CControlPanelNavModule,CFrameModule,StandardCreator<CControlPanelNavModule> > >(DirectUI::ClassInfo<CControlPanelNavModule,CFrameModule,DirectUI::StandardCreator<CControlPanelNavModule> > *);
	void HDelete<ClassInfo<CControlPanelNavModuleInner,CElementWithSite,StandardCreator<CControlPanelNavModuleInner> > >(DirectUI::ClassInfo<CControlPanelNavModuleInner,CElementWithSite,DirectUI::StandardCreator<CControlPanelNavModuleInner> > *);
	void HDelete<ClassInfo<CDUISizerElement,CElementWithSite,StandardCreator<CDUISizerElement> > >(DirectUI::ClassInfo<CDUISizerElement,CElementWithSite,DirectUI::StandardCreator<CDUISizerElement> > *);
	void HDelete<ClassInfo<CDUIView,HWNDHost,StandardCreator<CDUIView> > >(DirectUI::ClassInfo<CDUIView,DirectUI::HWNDHost,DirectUI::StandardCreator<CDUIView> > *);
	void HDelete<ClassInfo<CDUIViewHost,Element,StandardCreator<CDUIViewHost> > >(DirectUI::ClassInfo<CDUIViewHost,DirectUI::Element,DirectUI::StandardCreator<CDUIViewHost> > *);
	void HDelete<ClassInfo<CDetailsContainer,CElementWithSite,StandardCreator<CDetailsContainer> > >(DirectUI::ClassInfo<CDetailsContainer,CElementWithSite,DirectUI::StandardCreator<CDetailsContainer> > *);
	void HDelete<ClassInfo<CDisplayElement,Button,StandardCreator<CDisplayElement> > >(DirectUI::ClassInfo<CDisplayElement,DirectUI::Button,DirectUI::StandardCreator<CDisplayElement> > *);
	void HDelete<ClassInfo<CEditElement,HWNDFloat,StandardCreator<CEditElement> > >(DirectUI::ClassInfo<CEditElement,HWNDFloat,DirectUI::StandardCreator<CEditElement> > *);
	void HDelete<ClassInfo<CElementWithIUnknown,Element,StandardCreator<CElementWithIUnknown> > >(DirectUI::ClassInfo<CElementWithIUnknown,DirectUI::Element,DirectUI::StandardCreator<CElementWithIUnknown> > *);
	void HDelete<ClassInfo<CElementWithSite,CElementWithIUnknown,StandardCreator<CElementWithSite> > >(DirectUI::ClassInfo<CElementWithSite,CElementWithIUnknown,DirectUI::StandardCreator<CElementWithSite> > *);
	void HDelete<ClassInfo<CEmptyLibraryPage,CElementWithSite,StandardCreator<CEmptyLibraryPage> > >(DirectUI::ClassInfo<CEmptyLibraryPage,CElementWithSite,DirectUI::StandardCreator<CEmptyLibraryPage> > *);
	void HDelete<ClassInfo<CExplorerBrowserHost,HWNDHost,StandardCreator<CExplorerBrowserHost> > >(DirectUI::ClassInfo<CExplorerBrowserHost,DirectUI::HWNDHost,DirectUI::StandardCreator<CExplorerBrowserHost> > *);
	void HDelete<ClassInfo<CFocusIndicator,Element,StandardCreator<CFocusIndicator> > >(DirectUI::ClassInfo<CFocusIndicator,DirectUI::Element,DirectUI::StandardCreator<CFocusIndicator> > *);
	void HDelete<ClassInfo<CFrameModule,CElementWithSite,StandardCreator<CFrameModule> > >(DirectUI::ClassInfo<CFrameModule,CElementWithSite,DirectUI::StandardCreator<CFrameModule> > *);
	void HDelete<ClassInfo<CHWNDView,HWNDElement,StandardCreator<CHWNDView> > >(DirectUI::ClassInfo<CHWNDView,DirectUI::HWNDElement,DirectUI::StandardCreator<CHWNDView> > *);
	void HDelete<ClassInfo<CInfoBar,Button,StandardCreator<CInfoBar> > >(DirectUI::ClassInfo<CInfoBar,DirectUI::Button,DirectUI::StandardCreator<CInfoBar> > *);
	void HDelete<ClassInfo<CInfoBarHostModule,CFrameModule,StandardCreator<CInfoBarHostModule> > >(DirectUI::ClassInfo<CInfoBarHostModule,CFrameModule,DirectUI::StandardCreator<CInfoBarHostModule> > *);
	void HDelete<ClassInfo<CInfoBarHostModuleInner,CElementWithSite,StandardCreator<CInfoBarHostModuleInner> > >(DirectUI::ClassInfo<CInfoBarHostModuleInner,CElementWithSite,DirectUI::StandardCreator<CInfoBarHostModuleInner> > *);
	void HDelete<ClassInfo<CInfoPane,CFrameModule,StandardCreator<CInfoPane> > >(DirectUI::ClassInfo<CInfoPane,CFrameModule,DirectUI::StandardCreator<CInfoPane> > *);
	void HDelete<ClassInfo<CInfoPaneInner,CElementWithSite,StandardCreator<CInfoPaneInner> > >(DirectUI::ClassInfo<CInfoPaneInner,CElementWithSite,DirectUI::StandardCreator<CInfoPaneInner> > *);
	void HDelete<ClassInfo<CItemTile,Element,StandardCreator<CItemTile> > >(DirectUI::ClassInfo<CItemTile,DirectUI::Element,DirectUI::StandardCreator<CItemTile> > *);
	void HDelete<ClassInfo<CMetadataElement,CMetadataLabel,StandardCreator<CMetadataElement> > >(DirectUI::ClassInfo<CMetadataElement,CMetadataLabel,DirectUI::StandardCreator<CMetadataElement> > *);
	void HDelete<ClassInfo<CMetadataLabel,Element,StandardCreator<CMetadataLabel> > >(DirectUI::ClassInfo<CMetadataLabel,DirectUI::Element,DirectUI::StandardCreator<CMetadataLabel> > *);
	void HDelete<ClassInfo<CNavigateButton,CElementWithSite,StandardCreator<CNavigateButton> > >(DirectUI::ClassInfo<CNavigateButton,CElementWithSite,DirectUI::StandardCreator<CNavigateButton> > *);
	void HDelete<ClassInfo<COfflineMachinePage,CElementWithSite,StandardCreator<COfflineMachinePage> > >(DirectUI::ClassInfo<COfflineMachinePage,CElementWithSite,DirectUI::StandardCreator<COfflineMachinePage> > *);
	void HDelete<ClassInfo<COtherUsersBarrierPage,CElementWithSite,StandardCreator<COtherUsersBarrierPage> > >(DirectUI::ClassInfo<COtherUsersBarrierPage,CElementWithSite,DirectUI::StandardCreator<COtherUsersBarrierPage> > *);
	void HDelete<ClassInfo<CPreviewBackground,CElementWithSite,StandardCreator<CPreviewBackground> > >(DirectUI::ClassInfo<CPreviewBackground,CElementWithSite,DirectUI::StandardCreator<CPreviewBackground> > *);
	void HDelete<ClassInfo<CPreviewMetadata,CFrameModule,StandardCreator<CPreviewMetadata> > >(DirectUI::ClassInfo<CPreviewMetadata,CFrameModule,DirectUI::StandardCreator<CPreviewMetadata> > *);
	void HDelete<ClassInfo<CPreviewMetadataInner,CElementWithSite,StandardCreator<CPreviewMetadataInner> > >(DirectUI::ClassInfo<CPreviewMetadataInner,CElementWithSite,DirectUI::StandardCreator<CPreviewMetadataInner> > *);
	void HDelete<ClassInfo<CPreviewThumbnail,CFrameModule,StandardCreator<CPreviewThumbnail> > >(DirectUI::ClassInfo<CPreviewThumbnail,CFrameModule,DirectUI::StandardCreator<CPreviewThumbnail> > *);
	void HDelete<ClassInfo<CPreviewThumbnailInner,CElementWithSite,StandardCreator<CPreviewThumbnailInner> > >(DirectUI::ClassInfo<CPreviewThumbnailInner,CElementWithSite,DirectUI::StandardCreator<CPreviewThumbnailInner> > *);
	void HDelete<ClassInfo<CPreviewTitleArea,CFrameModule,StandardCreator<CPreviewTitleArea> > >(DirectUI::ClassInfo<CPreviewTitleArea,CFrameModule,DirectUI::StandardCreator<CPreviewTitleArea> > *);
	void HDelete<ClassInfo<CPreviewTitleAreaInner,CElementWithSite,StandardCreator<CPreviewTitleAreaInner> > >(DirectUI::ClassInfo<CPreviewTitleAreaInner,CElementWithSite,DirectUI::StandardCreator<CPreviewTitleAreaInner> > *);
	void HDelete<ClassInfo<CProgressDialogUI,HWNDElement,StandardCreator<CProgressDialogUI> > >(DirectUI::ClassInfo<CProgressDialogUI,DirectUI::HWNDElement,DirectUI::StandardCreator<CProgressDialogUI> > *);
	void HDelete<ClassInfo<CProperTreeHost,HWNDHost,StandardCreator<CProperTreeHost> > >(DirectUI::ClassInfo<CProperTreeHost,DirectUI::HWNDHost,DirectUI::StandardCreator<CProperTreeHost> > *);
	void HDelete<ClassInfo<CProperTreeModule,CFrameModule,StandardCreator<CProperTreeModule> > >(DirectUI::ClassInfo<CProperTreeModule,CFrameModule,DirectUI::StandardCreator<CProperTreeModule> > *);
	void HDelete<ClassInfo<CProperTreeModuleInner,CElementWithSite,StandardCreator<CProperTreeModuleInner> > >(DirectUI::ClassInfo<CProperTreeModuleInner,CElementWithSite,DirectUI::StandardCreator<CProperTreeModuleInner> > *);
	void HDelete<ClassInfo<CPropertyButton,Button3d,StandardCreator<CPropertyButton> > >(DirectUI::ClassInfo<CPropertyButton,Button3d,DirectUI::StandardCreator<CPropertyButton> > *);
	void HDelete<ClassInfo<CReadingPaneModule,CFrameModule,StandardCreator<CReadingPaneModule> > >(DirectUI::ClassInfo<CReadingPaneModule,CFrameModule,DirectUI::StandardCreator<CReadingPaneModule> > *);
	void HDelete<ClassInfo<CReadingPaneModuleHost,HWNDHost,StandardCreator<CReadingPaneModuleHost> > >(DirectUI::ClassInfo<CReadingPaneModuleHost,DirectUI::HWNDHost,DirectUI::StandardCreator<CReadingPaneModuleHost> > *);
	void HDelete<ClassInfo<CReadingPaneModuleInner,CElementWithSite,StandardCreator<CReadingPaneModuleInner> > >(DirectUI::ClassInfo<CReadingPaneModuleInner,CElementWithSite,DirectUI::StandardCreator<CReadingPaneModuleInner> > *);
	void HDelete<ClassInfo<CSaveControlsModule,CFrameModule,StandardCreator<CSaveControlsModule> > >(DirectUI::ClassInfo<CSaveControlsModule,CFrameModule,DirectUI::StandardCreator<CSaveControlsModule> > *);
	void HDelete<ClassInfo<CSaveControlsModuleInner,Element,StandardCreator<CSaveControlsModuleInner> > >(DirectUI::ClassInfo<CSaveControlsModuleInner,DirectUI::Element,DirectUI::StandardCreator<CSaveControlsModuleInner> > *);
	void HDelete<ClassInfo<CSaveDialogPreviewMetadata,CPreviewMetadata,StandardCreator<CSaveDialogPreviewMetadata> > >(DirectUI::ClassInfo<CSaveDialogPreviewMetadata,CPreviewMetadata,DirectUI::StandardCreator<CSaveDialogPreviewMetadata> > *);
	void HDelete<ClassInfo<CSaveDialogPreviewMetadataInner,CPreviewMetadataInner,StandardCreator<CSaveDialogPreviewMetadataInner> > >(DirectUI::ClassInfo<CSaveDialogPreviewMetadataInner,CPreviewMetadataInner,DirectUI::StandardCreator<CSaveDialogPreviewMetadataInner> > *);
	void HDelete<ClassInfo<CSearchOnlyLibraryPage,CElementWithSite,StandardCreator<CSearchOnlyLibraryPage> > >(DirectUI::ClassInfo<CSearchOnlyLibraryPage,CElementWithSite,DirectUI::StandardCreator<CSearchOnlyLibraryPage> > *);
	void HDelete<ClassInfo<CSearchPageText,CElementWithSite,StandardCreator<CSearchPageText> > >(DirectUI::ClassInfo<CSearchPageText,CElementWithSite,DirectUI::StandardCreator<CSearchPageText> > *);
	void HDelete<ClassInfo<CSplitButton,CElementWithSite,StandardCreator<CSplitButton> > >(DirectUI::ClassInfo<CSplitButton,CElementWithSite,DirectUI::StandardCreator<CSplitButton> > *);
	void HDelete<ClassInfo<CStatusBarModule,CFrameModule,StandardCreator<CStatusBarModule> > >(DirectUI::ClassInfo<CStatusBarModule,CFrameModule,DirectUI::StandardCreator<CStatusBarModule> > *);
	void HDelete<ClassInfo<CStatusBarModuleInner,CElementWithSite,StandardCreator<CStatusBarModuleInner> > >(DirectUI::ClassInfo<CStatusBarModuleInner,CElementWithSite,DirectUI::StandardCreator<CStatusBarModuleInner> > *);
	void HDelete<ClassInfo<CTemplateBackground,CElementWithSite,StandardCreator<CTemplateBackground> > >(DirectUI::ClassInfo<CTemplateBackground,CElementWithSite,DirectUI::StandardCreator<CTemplateBackground> > *);
	void HDelete<ClassInfo<CThumbnailControlHost,Element,StandardCreator<CThumbnailControlHost> > >(DirectUI::ClassInfo<CThumbnailControlHost,DirectUI::Element,DirectUI::StandardCreator<CThumbnailControlHost> > *);
	void HDelete<ClassInfo<CXElementModule,CFrameModule,StandardCreator<CXElementModule> > >(DirectUI::ClassInfo<CXElementModule,CFrameModule,DirectUI::StandardCreator<CXElementModule> > *);
	void HDelete<ClassInfo<CXElementModuleInner,CElementWithSite,StandardCreator<CXElementModuleInner> > >(DirectUI::ClassInfo<CXElementModuleInner,CElementWithSite,DirectUI::StandardCreator<CXElementModuleInner> > *);
	void HDelete<ClassInfo<CheckButton,AccessibleButton,StandardCreator<CheckButton> > >(DirectUI::ClassInfo<CheckButton,DirectUI::AccessibleButton,DirectUI::StandardCreator<CheckButton> > *);
	void HDelete<ClassInfo<CheckboxButtonElement,Button,StandardCreator<CheckboxButtonElement> > >(DirectUI::ClassInfo<CheckboxButtonElement,DirectUI::Button,DirectUI::StandardCreator<CheckboxButtonElement> > *);
	void HDelete<ClassInfo<CheckboxContentElement,Element,StandardCreator<CheckboxContentElement> > >(DirectUI::ClassInfo<CheckboxContentElement,DirectUI::Element,DirectUI::StandardCreator<CheckboxContentElement> > *);
	void HDelete<ClassInfo<CheckboxElement,AccessibleButton,StandardCreator<CheckboxElement> > >(DirectUI::ClassInfo<CheckboxElement,DirectUI::AccessibleButton,DirectUI::StandardCreator<CheckboxElement> > *);
	void HDelete<ClassInfo<ConfirmationInterruptElement,Element,StandardCreator<ConfirmationInterruptElement> > >(DirectUI::ClassInfo<ConfirmationInterruptElement,DirectUI::Element,DirectUI::StandardCreator<ConfirmationInterruptElement> > *);
	void HDelete<ClassInfo<ConflictInterruptElement,Element,StandardCreator<ConflictInterruptElement> > >(DirectUI::ClassInfo<ConflictInterruptElement,DirectUI::Element,DirectUI::StandardCreator<ConflictInterruptElement> > *);
	void HDelete<ClassInfo<ConflictItemElement,Element,StandardCreator<ConflictItemElement> > >(DirectUI::ClassInfo<ConflictItemElement,DirectUI::Element,DirectUI::StandardCreator<ConflictItemElement> > *);
	void HDelete<ClassInfo<ConflictItemTile,InterruptButton,StandardCreator<ConflictItemTile> > >(DirectUI::ClassInfo<ConflictItemTile,InterruptButton,DirectUI::StandardCreator<ConflictItemTile> > *);
	void HDelete<ClassInfo<HWNDFloat,ElementWithHWND,StandardCreator<HWNDFloat> > >(DirectUI::ClassInfo<HWNDFloat,DirectUI::ElementWithHWND,DirectUI::StandardCreator<HWNDFloat> > *);
	void HDelete<ClassInfo<IndividualConflictTileElement,Element,StandardCreator<IndividualConflictTileElement> > >(DirectUI::ClassInfo<IndividualConflictTileElement,DirectUI::Element,DirectUI::StandardCreator<IndividualConflictTileElement> > *);
	void HDelete<ClassInfo<IndividualConflictsDialogHWNDElement,HWNDElement,StandardCreator<IndividualConflictsDialogHWNDElement> > >(DirectUI::ClassInfo<IndividualConflictsDialogHWNDElement,DirectUI::HWNDElement,DirectUI::StandardCreator<IndividualConflictsDialogHWNDElement> > *);
	void HDelete<ClassInfo<InterruptButton,AccessibleButton,StandardCreator<InterruptButton> > >(DirectUI::ClassInfo<InterruptButton,DirectUI::AccessibleButton,DirectUI::StandardCreator<InterruptButton> > *);
	void HDelete<ClassInfo<InterruptResponseButton3d,AccessibleButton,StandardCreator<InterruptResponseButton3d> > >(DirectUI::ClassInfo<InterruptResponseButton3d,DirectUI::AccessibleButton,DirectUI::StandardCreator<InterruptResponseButton3d> > *);
	void HDelete<ClassInfo<Microsoft::Windows::FileExplorer::Banners::Banner,Button,StandardCreator<Microsoft::Windows::FileExplorer::Banners::Banner> > >(DirectUI::ClassInfo<Microsoft::Windows::FileExplorer::Banners::Banner,DirectUI::Button,DirectUI::StandardCreator<Microsoft::Windows::FileExplorer::Banners::Banner> > *);
	void HDelete<ClassInfo<Microsoft::Windows::FileExplorer::Banners::BannerContainer,CFrameModule,StandardCreator<Microsoft::Windows::FileExplorer::Banners::BannerContainer> > >(DirectUI::ClassInfo<Microsoft::Windows::FileExplorer::Banners::BannerContainer,CFrameModule,DirectUI::StandardCreator<Microsoft::Windows::FileExplorer::Banners::BannerContainer> > *);
	void HDelete<ClassInfo<OperationTileArea,Element,StandardCreator<OperationTileArea> > >(DirectUI::ClassInfo<OperationTileArea,DirectUI::Element,DirectUI::StandardCreator<OperationTileArea> > *);
	void HDelete<ClassInfo<OperationTileElement,Element,StandardCreator<OperationTileElement> > >(DirectUI::ClassInfo<OperationTileElement,DirectUI::Element,DirectUI::StandardCreator<OperationTileElement> > *);
	void HDelete<ClassInfo<OperationTileHeader,Element,StandardCreator<OperationTileHeader> > >(DirectUI::ClassInfo<OperationTileHeader,DirectUI::Element,DirectUI::StandardCreator<OperationTileHeader> > *);
	void HDelete<ClassInfo<OperationTileHost,HWNDElement,StandardCreator<OperationTileHost> > >(DirectUI::ClassInfo<OperationTileHost,DirectUI::HWNDElement,DirectUI::StandardCreator<OperationTileHost> > *);
	void HDelete<ClassInfo<PauseButton,CheckButton,StandardCreator<PauseButton> > >(DirectUI::ClassInfo<PauseButton,CheckButton,DirectUI::StandardCreator<PauseButton> > *);
	void HDelete<ClassInfo<SelectorButton,Button3d,StandardCreator<SelectorButton> > >(DirectUI::ClassInfo<SelectorButton,Button3d,DirectUI::StandardCreator<SelectorButton> > *);
	void HDelete<ClassInfo<ShellItemLink,AccessibleButton,StandardCreator<ShellItemLink> > >(DirectUI::ClassInfo<ShellItemLink,DirectUI::AccessibleButton,DirectUI::StandardCreator<ShellItemLink> > *);
	void HDelete<ClassInfo<ShellItemLinkFitter,Element,StandardCreator<ShellItemLinkFitter> > >(DirectUI::ClassInfo<ShellItemLinkFitter,DirectUI::Element,DirectUI::StandardCreator<ShellItemLinkFitter> > *);
	void HDelete<ClassInfo<ViewControl,CElementWithSite,StandardCreator<ViewControl> > >(DirectUI::ClassInfo<ViewControl,CElementWithSite,DirectUI::StandardCreator<ViewControl> > *);
	void HFree(void *);
	void UpdateLayoutRectAndSetVisible(DirectUI::Element *,int,int,DirectUI::Element *,int,int,int,int);
};

namespace EdpHelpers
{
	bool IsEdpProtected(IShellItem2 *);
	bool IsEnterpriseIdAllowed(unsigned short const *,wil::PropVariant const &);
	long CanCallerAccessFileContents(IShellItem *);
	long EvaluateEdpPolicyOnBehalfOfDropTargetIfNeeded(HWND__ *,IDropTarget *,IDataObject *,unsigned short const *);
	long GetAllEnrolledEnterpriseIdentities(tagPROPVARIANT *);
	long GetEncryptionIdentitiesForNetworkPath(unsigned short const *,tagPROPVARIANT *);
	long GetEncryptionIdentitiesForPath(unsigned short const *,tagPROPVARIANT *);
	long GetEncryptionIdentitiesForUnencrypted(tagPROPVARIANT *);
	long InheritCallerEnterpriseContextWithNetworkOverride(void *,void * *);
	long SetEnterpriseIdFromDataObjectOrClipboard(IDataObject *,IDropTarget *);
	long ShowEdpPrompt(HWND__ *,IDataObject *,unsigned short const *,unsigned short const *,EDP_REQUEST_ACCESS_OPTIONS *,EDP_POLICY_RESULT *);
	void RestoreEnterpriseContext(void *);
};

struct ElementWidthComparer
{
	int Compare(DirectUI::Element * const &,DirectUI::Element * const &);
};

struct ElementWrapper
{
	virtual long GetElement(void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct ExplorerCommandItem
{
	long Init(IExplorerCommand *,IUnknown *,IShellItemArray *,int);
	~ExplorerCommandItem();
};

struct FILECLASSENTRY
{
	FILECLASSENTRY();
};

class FavoritesTelemetry
{
	class Shell_Favorites_QueryLinksActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~Shell_Favorites_QueryLinksActivity();
	};

	class Shell_Favorites_RibbonActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~Shell_Favorites_RibbonActivity();
	};

	void _GetHashedIdListFromDataObject(IDataObject *,unsigned short *,unsigned __int64);
protected:
	static FavoritesTelemetry * Instance();
	virtual void Initialize();
public:
	static wil::ActivityThreadWatcher WatchCurrentThread(char const *);
	void Shell_Favorites_AddItem_(IShellItem *);
	void Shell_Favorites_DragInto_(IShellItem *,long);
	void Shell_Favorites_HomeFolder_DragInto_(IDataObject *);
	void Shell_Favorites_RibbonVerb_(IShellItem *,bool,int);
};

class FileExplorerLogging
{
protected:
	static FileExplorerLogging * Instance();
};

namespace FileExplorerPerf
{
	class ActionSourcePerf
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class CommandHandlerInvokePerf
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CommandHandlerInvokePerf();
	};

};

class FileExplorerTelemetry
{
	class ActionDetails
	{
		void EnsureDataReadyForTelemetry();
	protected:
		virtual void ComputeTelemetryData();
	public:
		virtual ActionProperties GetActionProperties();
		virtual UI_EXECUTIONVERB GetRibbonUIExecutionVerb();
		virtual unsigned int GetRibbonCommandId();
		virtual unsigned short const * GetCommandString();
	};

	class ClearQuickAccess
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class ContextMenuActionDetails
	{
	protected:
		virtual void ComputeTelemetryData();
	};

	class DefViewInvoke
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivityWithCorrelationVector(char const *);
		~DefViewInvoke();
	};

	struct DefViewInvokeActionDetails
	{
		DefViewInvokeActionDetails(ActionProperties,unsigned short const *);
	};

	class DefViewSearchNavigate
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivityWithCorrelationVector(char const *);
	};

	class DefView_Enumeration
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(_GUID);
		void Stop(unsigned int,long);
	};

	class DefView_Filter
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class DefView_Sort
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IUnknown *,unsigned int);
		void Stop(bool);
	};

	class DragDrop
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool,long);
	};

	class PersistFrequentOrdering
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~PersistFrequentOrdering();
	};

	class ProperTreeHostNavigate
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivityWithCorrelationVector(char const *);
	};

	class RenavigateTask
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
	};

	class SendTo
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void SendToTarget(IShellItem *,EXPLORER_COMMAND_SQM_ID);
		void StartActivity();
	};

	class SetShowFrequent
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool);
	};

	class SetShowRecent
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool);
	};

	class UpdateDestListsPostFileOperation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	static long GetHomeGroupingFromShellItem(IShellItem *,FileExplorerTelemetry::HomeGrouping *);
protected:
	static FileExplorerTelemetry * Instance();
	virtual void Initialize();
public:
	static void ChangeExplorerLaunch<unsigned long &>(unsigned long &);
	static void ShowBanners<bool &>(bool &);
	void ActionSourceWithDataObjectAndDetails_(FileExplorerTelemetryBase::NavigationSource,IUnknown *,IDataObject *,FileExplorerTelemetry::ActionDetails &);
	void ActionSourceWithIDList_(FileExplorerTelemetryBase::NavigationSource,IUnknown *,_ITEMIDLIST_ABSOLUTE const *);
	void ActionSourceWithShellItemAndDetails_(FileExplorerTelemetryBase::NavigationSource,IUnknown *,IShellItem *,FileExplorerTelemetry::ActionDetails &);
	void ActionSourceWithShellItemArrayAndDetails_(FileExplorerTelemetryBase::NavigationSource,IUnknown *,IShellItemArray *,FileExplorerTelemetry::ActionDetails &);
	void ActionSourceWithShellItem_(FileExplorerTelemetryBase::NavigationSource,IUnknown *,IShellItem *);
	void CommandHandlerInvoke_(EXPLORER_COMMAND_SQM_ID,EXPLORER_COMMAND_SQM_INVOCATION_LOCATION,unsigned long,int,IShellItem *,IUnknown *,unsigned long);
	void NavPaneResult_(FileExplorerTelemetry::FavoritesState,FileExplorerTelemetry::ShowAllFoldersState,FileExplorerTelemetry::ShowLibrariesState,FileExplorerTelemetry::ExpandToOpenFolderState,bool,long,_ITEMIDLIST_ABSOLUTE const *);
	void Search_(IShellItem *,char const *);
};

class FileExplorerTelemetryBase
{
protected:
	static void HashPath(unsigned short const *,unsigned char,unsigned short *,unsigned __int64);
};

class FileExplorerTelemetryDesktop
{
protected:
	long GetBrowserSessionId(IUnknown *,_GUID *);
	long GetHashFromShellItem(IShellItem *,unsigned short *,unsigned __int64);
	long GetItemAndFolderInViewName(IUnknown *,_SIGDN,unsigned short * *,IShellItem * *);
	long GetParsingName(_ITEMIDLIST_ABSOLUTE const *,unsigned short * *);
	long HashPidl(_ITEMIDLIST_ABSOLUTE const *,unsigned short *,unsigned __int64);
	virtual void Initialize();
};

struct FindDataStack
{
	long Push(void *,_WIN32_FIND_DATAW *);
	void Pop(void * *,_WIN32_FIND_DATAW * *);
};

namespace GDIHelpers
{
	long AddBackgroundForIcon(HBITMAP__ *,unsigned long const &,tagSIZE const &,tagSIZE const &,tagSIZE const &,HBITMAP__ * *);
	void FillRectARGB(HDC__ *,tagRECT const *,unsigned char,unsigned long,bool);
	void InitRGB(tagRGBQUAD *,unsigned char,unsigned long);
};

struct GFAGVICALL
{
	int Init(unsigned short const *,CShare *);
	void Release();
};

namespace Gdiplus
{
	struct Bitmap
	{
		Bitmap(int,int,int);
		Bitmap(int,int,int,int,unsigned char *);
		virtual ~Bitmap();
	};

	struct Brush
	{
		virtual Brush * Clone();
	};

	struct Graphics
	{
		Graphics(HDC__ *);
		Graphics(Image *);
		Status DrawImage(Image *,Rect const &,int,int,int,int,Unit,ImageAttributes const *,int (*)(void *),void *);
		Status DrawImage(Image *,int,int,int,int,int,int,Unit);
		Status DrawRectangle(Pen const *,int,int,int,int);
		Status FillEllipse(Brush const *,int,int,int,int);
		Status FillPie(Brush const *,int,int,int,int,float,float);
		Status FillRectangle(Brush const *,int,int,int,int);
		Status SetClip(Rect const &,CombineMode);
		Status SetCompositingMode(CompositingMode);
		Status SetInterpolationMode(InterpolationMode);
		Status SetSmoothingMode(SmoothingMode);
	};

	struct Image
	{
		Image * GetThumbnailImage(unsigned int,unsigned int,int (*)(void *),void *);
		Status SelectActiveFrame(_GUID const *,unsigned int);
		float GetHorizontalResolution();
		float GetVerticalResolution();
		int GetPixelFormat();
		unsigned int GetFlags();
		unsigned int GetFrameCount(_GUID const *);
		unsigned int GetHeight();
		unsigned int GetPropertyItemSize(unsigned long);
		unsigned int GetWidth();
		virtual Image * Clone();
	};

	struct LinearGradientBrush
	{
		LinearGradientBrush(Rect const &,Color const &,Color const &,LinearGradientMode);
		Status SetWrapMode(WrapMode);
		virtual ~LinearGradientBrush();
	};

	struct Matrix
	{
		Matrix();
	};

	struct Pen
	{
		Pen(Color const &,float);
	};

	struct SolidBrush
	{
		SolidBrush(Color const &);
		Status SetColor(Color const &);
		virtual ~SolidBrush();
	};

};

namespace Geometry
{
	struct CRect
	{
		static CRect MulDiv(tagRECT const &,int,int);
	};

};

class GlobalInterfaceTable
{
	static IGlobalInterfaceTable * s_pGlobalInterfaceTable;
	static long s_Retrieve();
public:
	static void Revoke(unsigned long);
};

struct HIDDENRECYCLEBINDATAV2
{
	long Serialize(unsigned char * *,unsigned short *);
	static long Deserialize(unsigned char const *,unsigned short,HIDDENRECYCLEBINDATAV2 * *);
	static long Initialize(HIDDENRECYCLEBINDATAV1 const *,HIDDENRECYCLEBINDATAV2 * *);
};

class HWNDFloat
{
	long GetAccessibleImpl(IAccessible * *,bool);
	static int _CtrlWndProc(void *,HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	static int _SinkWndProc(void *,HWND__ *,unsigned int,unsigned __int64,__int64,__int64 *);
	static unsigned int const (* g_rgMouseMap)[3];
protected:
	HFONT__ * EnsureFont();
	bool EraseBkgnd(unsigned __int64,__int64 *);
	bool GetStaticColor(unsigned __int64,__int64 *);
	virtual HWND__ * CreateHWND(HWND__ *);
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnUnHosted(DirectUI::Element *);
	void ColorAndBrushFromValue(DirectUI::Value *,unsigned long *,HBRUSH__ * *);
	void ResetFont();
	void SyncBackground();
	void SyncFont();
	void SyncRect(unsigned int,int,int);
	void SyncText();
	void SyncVisible(int);
public:
	HWNDFloat();
	long Initialize(unsigned int,unsigned int,DirectUI::Element *,unsigned long *);
	static DirectUI::IClassInfo * Class;
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual HWND__ * GetHWND();
	virtual bool OnMessage(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual bool OnNotify(unsigned int,unsigned __int64,__int64,__int64 *);
	virtual long GetAccessibleImpl(IAccessible * *);
	virtual unsigned int MessageCallback(tagGMSG *);
	virtual void AdjustWindowRectHF(tagRECT *);
	virtual void OnDestroy();
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void Paint(HDC__ *,tagRECT const *,tagRECT const *,tagRECT *,tagRECT *);
	virtual ~HWNDFloat();
};

namespace HashAlgorithms
{
	class PatentHash
	{
		bool CS64_Reversible(unsigned int const *,unsigned int,unsigned int const *,unsigned int *);
		bool CS64_WordSwap(unsigned int const *,unsigned int,unsigned int const *,unsigned int *);
		virtual long BuildPatentHash(void const *,unsigned int,unsigned int const *,HASH_BUFFER *);
	};

	class PatentHashBase
	{
	protected:
		long EncodeBase64(void const *,unsigned long,unsigned short *,unsigned long,unsigned long *);
	public:
		long BuildHashStrings(void const *,unsigned int,HASH_RESULT *,HASH_RESULT *);
	};

	long HashUserChoice(unsigned short const *,unsigned int,unsigned short const *,unsigned int,unsigned short const *,unsigned int,unsigned short const *,unsigned int,HashAlgorithms::HASH_RESULT *);
};

struct HomeFolderSettings
{
	static bool ShouldShowFrequent();
	static bool ShouldShowRecent();
	static long Clear();
	static long ClearList(HomeFolderSettings::HomeFolderItemType);
	static void SetShowFrequent(bool);
	static void SetShowRecent(bool);
};

struct IBDATA
{
	unsigned long Release();
};

struct ITEM_ENTRY
{
	static int DestroyCB(ITEM_ENTRY *,void *);
};

struct ITEM_IMAGE_RESULT
{
	static int DestroyCB(ITEM_IMAGE_RESULT *,void *);
	static long s_CloneFromItemEntryDSA(CDSA<ITEM_IMAGE_RESULT> *,CDSA<ITEM_ENTRY> const *,CThumbnailLookupTable *);
};

class IconCacheLogging
{
protected:
	static IconCacheLogging * Instance();
};

namespace IconCacheTelemetry
{
	class ExtractIconW
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class HandleAssociationChange
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	};

	class InitializeCache
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~InitializeCache();
	};

	class LoadCache
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class SaveCache
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	};

};

class IconLayout
{
	long AddMonitorW(tagRECT const *);
public:
	long DetermineMonitorSetup();
	long Initialize();
	long RemoveAllIcons();
	static long Create(IconLayout * *);
	static void Destroy(IconLayout * *);
};

class IconLayoutStore
{
	static int s_DSASearch_CompareMonitorSetup(IconLayout const *,IconLayout const *,__int64);
public:
	long ClearLayoutStore();
	static long MonitorSetupsEqual(IconLayout const *,IconLayout const *);
};

struct IdElement
{
	static long Create(_ITEMID_CHILD const *,_GUID const &,DirectUI::Element *,IdElement * *);
};

namespace ImmersiveContextMenuHelper
{
	CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > * _RetrieveParentArrayFromWindow(HWND__ *);
	ContextMenuRenderingData * GetContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int);
	bool CanApplyOwnerDrawToMenu(HMENU__ *,HWND__ *);
	long ApplyOwnerDrawToMenu(HMENU__ *,HWND__ *,tagPOINT *,ImmersiveContextMenuOptions,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > &);
	long OverrideBackgroundColor(HMENU__ *,HWND__ *,ImmersiveContextMenuOptions);
	long StoreContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int,ContextMenuRenderingData *);
	long _GetRenderingDataForMenuItem(DPIToPPIHelpers::ScaleType,tagMENUITEMINFOW,unsigned short const *,tagPOINT *,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > &,ContextMenuRenderingData *,ImmersiveContextMenuOptions,ContextMenuRenderingData * *);
	long _StoreParentArrayOnWindow(HWND__ *,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > *);
	unsigned int _GetDpiForMonitorFromPoint(tagPOINT *);
	void HandleMergedMenus(HMENU__ *,HWND__ *);
	void RemoveContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int);
	void RemoveOwnerDrawFromMenu(HMENU__ *,HWND__ *);
	void _RemoveOwnerDrawFromMenuWorker(HMENU__ *,HWND__ *);
};

struct ImmersivePlacesReader
{
	ImmersivePlacesReader();
	long RuntimeClassInitialize();
	virtual long GetNext(unsigned short * *);
};

struct IndividualConflictTelemetry
{
	IndividualConflictTelemetry();
};

class IndividualConflictTileElement
{
	long _Initialize(DirectUI::DUIXmlParser *,unsigned long,unsigned long,bool,IndividualConflictsDialogHWNDElement *,DirectUI::Element *,unsigned long *);
	long _SelectTileCheckbox(DirectUI::Element *,bool);
	long _SelectTileCheckboxAndUpdateSiblingIfNeeded(DirectUI::Element *,bool);
	long _UpdateElements(DirectUI::Element *,DirectUI::Element *,int,unsigned short const *,unsigned short const *);
	static long s_SetItemIconIfEmpty(DirectUI::Element *,unsigned short const *,DirectUI::Value *);
public:
	long ResetTileContentToDiscovering(unsigned long,unsigned long,bool);
	long SetConflictItemState(CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	long SetConflictItemThumbnail(CONFLICT_ITEM_DATA_FLAGS,DirectUI::Value *);
	long SetTileContent(INDIVIDUAL_CONFLICT_FAST_DATA const *,IShellItem *,IShellItem *,DirectUI::Value *);
	static DirectUI::IClassInfo * Class;
	static long CreateInstance(DirectUI::DUIXmlParser *,DirectUI::Element *,unsigned long,unsigned long,bool,IndividualConflictsDialogHWNDElement *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool EnsureVisible(int,int,int,int);
	virtual void OnEvent(DirectUI::Event *);
	void SetTileAspect(bool);
};

class IndividualConflictsDialogHWNDElement
{
	IndividualConflictTileElement * _GetConflictTileElement(unsigned long);
	__int64 _OnCommand(unsigned __int64,__int64);
	__int64 _OnInitDialog(unsigned __int64,__int64);
	long _CleanupCurrentDataMode();
	long _ComputeRealizedTileRangeComplement(unsigned long,unsigned long,unsigned long *,unsigned long *);
	long _CreateAndAddTile(unsigned long,CONFLICT_FILTER,IndividualConflictTileElement * *);
	long _Initialize(OPERATION_TYPE,IShellItem *,IShellItem *,IConflictDialogData *,IConflictInterruptFilter *,CollectedConflictTelemetry *);
	long _InitializeLocation(IShellItem *,bool,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,DirectUI::Element *);
	long _InitializeLocationElements();
	long _InitializeMasterCheckboxes(CONFLICT_FILTER);
	long _InitializeModeData(CONFLICT_FILTER,IConflictInterruptFilter *,IConflictDialogData *,CSafeElementProxy *);
	long _InitializeRealizedTiles(CONFLICT_FILTER);
	long _OnGlobalCheckboxClicked(CheckboxElement *);
	long _PreserveKeyFocusTile(IndividualConflictTileElement *,unsigned long,IndividualConflictTileElement * *);
	long _RequestConflictData(unsigned long,unsigned long);
	long _ResetAndRequestTileContentByTileRange(unsigned long,unsigned long);
	long _RestoreKeyFocusTile(IndividualConflictTileElement *,IndividualConflictTileElement * *);
	long _RotateAndReuseRealizedTilesByConflictRange(unsigned long,unsigned long);
	long _SetConflictTileVisibility(DirectUI::Element *,bool);
	long _SetCurrentDataMode(CONFLICT_FILTER);
	long _SwapConflictTilesAndSetVisibility(DirectUI::Element *,bool,DirectUI::Element *,bool);
	long _UpdateRealizedTileRange(unsigned long);
	static __int64 s_DialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static bool s_GetIsSkipModeRegistrySettingDefaultFalse();
	static bool s_IndexInRange(unsigned long,unsigned long,unsigned long);
	void _DiscardKeyFocusTile();
	void _EnsureConflictItemIsRealizedForKeyFocus(unsigned long,bool,DirectUI::Element * *);
	void _EnsureKeyFocusTileIsAtCorrectEdge();
	void _OnKeyboardInput(DirectUI::KeyboardEvent *);
	void _OnKeyboardNavigate(DirectUI::KeyboardNavigateEvent *);
	void _OnPageDown();
	void _OnPageUp();
	void _SetScrollAreaContentsVisibility();
	void _UpdateSpacerHeights();
protected:
	virtual void OnGetDlgCode(tagMSG *,__int64 *);
public:
	IndividualConflictsDialogHWNDElement();
	long GetPropertySystem(IPropertySystem * *);
	long OnChildTileUpdatedCheckbox(unsigned long,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE,int);
	long SetConflictData(CONFLICT_FILTER,unsigned long,INDIVIDUAL_CONFLICT_FAST_DATA const *,IShellItem *,IShellItem *);
	long SetConflictItemState(CONFLICT_FILTER,unsigned long,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	long SetConflictItemThumbnail(CONFLICT_FILTER,unsigned long,CONFLICT_ITEM_DATA_FLAGS,DirectUI::Value *);
	long SetGlobalItemState(CONFLICT_FILTER,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE);
	static DirectUI::IClassInfo * Class;
	static INDIVIDUAL_CONFLICT_DIALOG_RESULT ShowDialog(HWND__ *,OPERATION_TYPE,IShellItem *,IShellItem *,IConflictDialogData *,IConflictInterruptFilter *,CollectedConflictTelemetry *);
	static long CreateInstance(OPERATION_TYPE,IShellItem *,IShellItem *,IConflictDialogData *,IConflictInterruptFilter *,CollectedConflictTelemetry *,DirectUI::Element * *);
	unsigned short const * GetDiscoveringString();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual __int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *);
	virtual void OnThemeChanged(DirectUI::ThemeChangedEvent *);
	virtual ~IndividualConflictsDialogHWNDElement();
};

namespace InputDial
{
	class InputDialTraceProvider
	{
	protected:
		static InputDialTraceProvider * Instance();
	public:
		static void Info(char const *,char const *,unsigned int,char const *,...);
		virtual void OnErrorReported(bool,wil::FailureInfo const &);
		void InfoV_(char const *,char const *,unsigned int,char const *,char *);
	};

};

namespace InputDialCommon
{
	class InputDialDeviceObserver
	{
		static void s_DevQueryCallback(HDEVQUERY__ *,void *,_DEV_QUERY_RESULT_ACTION_DATA const *);
	public:
		long Setup();
	};

};

namespace Interpolators
{
	class CCubicBezierLinearInterpolator
	{
		long _SolveTForOffsetFraction(double,double *);
		virtual long _CalculateInterpolationValue(double,double *);
	public:
		CCubicBezierLinearInterpolator(double,double,double,double,double,double,double,double);
	};

	struct CIncreasingCubicPolynomialSegment
	{
		double SolveRootUsingBisection(double,double,double);
		void Compute(double,double *,double *);
	};

	class CLinearInterpolator
	{
		virtual long _CalculateInterpolationValue(double,double *);
	};

	struct CTileAnimationInterpolator
	{
		long InterpolateValue(double,double *);
		virtual long GetTotalDuration(double *);
		virtual long Initialize(double,double);
		virtual long InitializeDuration(double,double);
	};

};

class InterruptButton
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	InterruptButton();
	OPERATION_INTERRUPT_RESPONSE_SINGLE GetResponse();
	long SetResponse(OPERATION_INTERRUPT_RESPONSE_SINGLE);
	static DirectUI::PropertyInfo const * ResponseProp();
	static UID InterruptClick;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
};

class InterruptResponseButton3d
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	OPERATION_INTERRUPT_RESPONSE_SINGLE GetButtonResponse();
	static DirectUI::PropertyInfo const * ButtonResponseProp();
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
};

struct JumpListProvider
{
	virtual long HasJumpList(unsigned short const *,bool *,bool *);
};

struct LOOKUP_ENTRY
{
	bool IsMatch(unsigned short const *,int,unsigned int);
};

class LaunchSettingsPageHandler
{
	virtual ~LaunchSettingsPageHandler();
public:
	LaunchSettingsPageHandler();
	virtual long Execute();
	virtual long Initialize(unsigned short const *,IPropertyBag *);
};

namespace LauncherNotifyHelper
{
	long NotifyAppResolverOfDestListChange(unsigned short const *);
};

namespace LauncherPolicy
{
	bool IsLauncherCustomizationDisabled();
	bool IsLauncherCustomizationDisabledPolicySet();
	bool IsLayoutOverrideGroupCustomizationDisabledPropertySet();
};

namespace LibraryTelemetry
{
	class AddLibraryLocation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(LocationChangeEntryPoint);
		~AddLibraryLocation();
	};

	class RemoveLibraryLocation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(LocationChangeEntryPoint);
		~RemoveLibraryLocation();
	};

};

struct LowDiskNotificationActivationCallback
{
	virtual long Activate(unsigned short const *,unsigned short const *,NOTIFICATION_USER_INPUT_DATA const *,unsigned long);
};

struct MCENUMRESULTS
{
	void Destroy();
};

struct MVPTOKENDATA
{
	long CopyFrom(MVPTOKENDATA const *);
	static int s_DestroyCallback(MVPTOKENDATA *,void *);
	void Destroy();
};

class MetadataLayout
{
	DirectUI::DynamicArray<DirectUI::Element *,0> * _GetLayoutList(DirectUI::Element *);
	void _AddSaveCancelButtons(DirectUI::Element *,DirectUI::DynamicArray<DirectUI::Element *,0> *,unsigned int);
	void _AddSpacerIfNeeded(DirectUI::Element *,DirectUI::DynamicArray<DirectUI::Element *,0> *);
	void _FreeLayoutObjects();
	void _HideElements(DirectUI::Element *,DirectUI::DynamicArray<DirectUI::Element *,0> *,int,int);
	void _InitializeVerticalFlag(DirectUI::Element *);
	void _ResetWidth(DirectUI::DynamicArray<DirectUI::Element *,0> *);
public:
	static long Create(DirectUI::Layout * *);
	virtual tagSIZE UpdateDesiredSize(DirectUI::Element *,int,int,DirectUI::Surface *);
	virtual void DoLayout(DirectUI::Element *,int,int);
	virtual ~MetadataLayout();
};

namespace Microsoft
{
	namespace WRL
	{
		struct ActivationFactory<Details::Nil,Details::Nil,Details::Nil,0>
		{
			ActivationFactory<Details::Nil,Details::Nil,Details::Nil,0>();
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<RuntimeClassFlags<1>,Windows::Internal::ApplicationDefaults::IApplicationUsageStatics,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<RuntimeClassFlags<1>,Windows::Internal::ApplicationDefaults::IEnlightenmentPromptStatics,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Windows::Internal::Storage::IObservableObjectFactoryStatics,FtmBase,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct AgileRef
		{
			AgileRef(AgileRef const &);
			long As<IDataObject>(Details::ComPtrRef<ComPtr<IDataObject> >);
		};

		struct ClassFactory<Details::Nil,Details::Nil,Details::Nil,0>
		{
			virtual long LockServer(int);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		class ComPtr<ActivityTracker>
		{
		protected:
			void InternalAddRef();
		};

		struct ComPtr<CAppInfo>
		{
			~ComPtr<CAppInfo>();
		};

		struct ComPtr<CAppResolverDataLayer>
		{
			~ComPtr<CAppResolverDataLayer>();
		};

		struct ComPtr<CApplicationTileInformation>
		{
			void Attach(CApplicationTileInformation *);
		};

		struct ComPtr<CApplicationUsage>
		{
			long CopyTo<Windows::Internal::ApplicationDefaults::IApplicationUsage>(Windows::Internal::ApplicationDefaults::IApplicationUsage * *);
		};

		struct ComPtr<CApplicationUsageProvider>
		{
			~ComPtr<CApplicationUsageProvider>();
		};

		class ComPtr<CAssocHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CByValueConfirmationInterrupt>
		{
			void Attach(CByValueConfirmationInterrupt *);
		};

		struct ComPtr<CByValueSingleConflictInterrupt>
		{
			void Attach(CByValueSingleConflictInterrupt *);
		};

		struct ComPtr<CDeferredCollectionNotifier>
		{
			void Attach(CDeferredCollectionNotifier *);
		};

		class ComPtr<CDeferredCollectionSink>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		struct ComPtr<CEnlightenmentPromptHelpers>
		{
			~ComPtr<CEnlightenmentPromptHelpers>();
		};

		struct ComPtr<CExtrinsicPropertyStore>
		{
			void Attach(CExtrinsicPropertyStore *);
		};

		class ComPtr<CFileChunkMap>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CFilePlaceholder>
		{
		protected:
			void InternalAddRef();
		public:
			void Attach(CFilePlaceholder *);
		};

		class ComPtr<CFilePlaceholderCallbackCrashDetector>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CFilePlaceholderCallbackCrashDetector *);
		};

		class ComPtr<CFilePlaceholderDownloadCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CFilePlaceholderRemoteStream>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CFilePlaceholderRemoteStream *);
		};

		class ComPtr<CFilePlaceholderThumbnailCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CItemCollectionSink>
		{
			void Attach(CItemCollectionSink *);
		};

		struct ComPtr<CLambdaCommandHandler>
		{
			void Attach(CLambdaCommandHandler *);
		};

		class ComPtr<CLaunchActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CLaunchToMonitor>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CLauncherUIMode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CLauncherUIMode *);
		};

		class ComPtr<CLauncherUIModeWithDesktopSwitch>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CMarshaledInterface::CMarshalStream>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			void Attach(CMarshaledInterface::CMarshalStream *);
		};

		class ComPtr<CMessageDialogHelper>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CMountPoint>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CMtPtLocal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CMtPtLocal *);
		};

		class ComPtr<CNestableFilePlaceholderCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CObservableItem>
		{
			~ComPtr<CObservableItem>();
		};

		struct ComPtr<CObservableItemCollection>
		{
			void Attach(CObservableItemCollection *);
		};

		class ComPtr<CObservableItemCollectionSink>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			void Attach(CObservableItemCollectionSink *);
		};

		class ComPtr<CObservableItemCollectionVectorChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CObservableItemCollectionVectorChangedEventArgs *);
		};

		class ComPtr<CObservableItemSink>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			void Attach(CObservableItemSink *);
		};

		struct ComPtr<CObservableProperty>
		{
			void Attach(CObservableProperty *);
		};

		class ComPtr<CPCSettingsEnum>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPinnedPeopleList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CPinnedPeopleList *);
		};

		class ComPtr<CPropertyChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CPropertyChangedEventArgs *);
		};

		class ComPtr<CQueryWithLinguisticAlternatives>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CQueryWithLinguisticAlternatives *);
		};

		class ComPtr<CRefCountedObject<CAutoHandle<void *> > >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CCoTaskMemPtr<_ITEMIDLIST_ABSOLUTE> > >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CLocalSimpleArray<TranslateResetEvent,4294967294> > >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IShellItem> > >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IUnknown> > >
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IUnknown> > >();
			~ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IUnknown> > >();
		};

		class ComPtr<CRefCountedObject<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >
		{
		protected:
			void InternalAddRef();
		};

		struct ComPtr<CShortcutInfo>
		{
			void Attach(CShortcutInfo *);
			~ComPtr<CShortcutInfo>();
		};

		class ComPtr<CSourceViewSizePreference>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CStorageProviderInfo>
		{
			void Attach(CStorageProviderInfo *);
		};

		struct ComPtr<CSyncRootManager>
		{
			void Attach(CSyncRootManager *);
			~ComPtr<CSyncRootManager>();
		};

		class ComPtr<CSyncRootManagerCache>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CUsersLibrariesFolderUI>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ContentManagement::TargetedContent::ITargetedContentCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ContentManagement::TargetedContent::ITargetedContentImage>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ContentManagement::TargetedContent::ITargetedContentItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ContentManagement::TargetedContent::ITargetedContentSubscriptionStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ContentManagement::TargetedContent::ITargetedContentValue>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Details::EventTargetArray>
		{
			ComPtr<Details::EventTargetArray> & operator=(ComPtr<Details::EventTargetArray> const &);
			ComPtr<Details::EventTargetArray> & operator=(Details::EventTargetArray *);
			void Attach(Details::EventTargetArray *);
		};

		class ComPtr<IActivationErrorPopup>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IActivationErrorPopupFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IActivationFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IActivationFactory>();
		};

		class ComPtr<IAgileObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAgileReference>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAliasedNamespace>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppControl>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppDefaultOverride>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppRankProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IAppRankProvider> & operator=(IAppRankProvider *);
		};

		class ComPtr<IAppResolverDataLayer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppResolverEnumFilter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppResolverPromotion>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppResolverRankEventSink>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IAppResolverRankEventSink><TileDataLayerAppResolverReconciler>(TileDataLayerAppResolverReconciler *);
		};

		class ComPtr<IApplicationActivationManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationAssociationRegistrationInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationDesignModeSettingsPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationIdentifier>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IApplicationIdentifier> & operator=(ComPtr<IApplicationIdentifier> const &);
		};

		class ComPtr<IApplicationLifecycleEvent>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationResolver2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationResolver>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationTileInformationPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationViewCompatibilityManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationViewManifestInformation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppsFolderManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssocHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssocHandlerInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssocHandlerMakeDefault>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssociationArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssociationElement>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IAssociationElement> & operator=(IAssociationElement *);
			long As<IObjectWithStorageProviderInfo>(Details::ComPtrRef<ComPtr<IObjectWithStorageProviderInfo> >);
		};

		class ComPtr<IAssociationList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAsyncInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAsyncResetTaskCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAuthUISystemSettings>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAuthUISystemSettings>();
		};

		class ComPtr<IAutomaticDestinationList2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAutomaticDestinationList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IAutomaticDestinationList2>(Details::ComPtrRef<ComPtr<IAutomaticDestinationList2> >);
			long As<IAutomaticDestinationListPrivate>(Details::ComPtrRef<ComPtr<IAutomaticDestinationListPrivate> >);
		};

		class ComPtr<IAutomaticDestinationListPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBannerNotificationHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBannerNotificationHandler>();
		};

		class ComPtr<IBannerUI>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBindCtx>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IBindCtx> & operator=(IBindCtx *);
		};

		class ComPtr<ICallingProcessInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IChildId>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICollectionCountEvents>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICommDlgBrowser2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICommandProperties>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICommandText>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICondition>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConditionAttribute>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConditionAttributeContainer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConditionFactory2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConfigureExtrinsicPropertyStore>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConfirmationInterrupt>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConflictInterrupt>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConnectedAccountServices>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConnectedAccountServicesFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConnectionPoint>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IContextMenu>
		{
			ComPtr<IContextMenu> & operator=(IContextMenu *);
		};

		class ComPtr<IContextMenuForProgInvoke>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICoreWindowInterop>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICreateObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDBCreateSession>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDBInitialize>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDataObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDataObjectAsyncCapability>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDefGroup>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDefItemCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDefaultExtractIconInit>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDefaultStartViewInitializerFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDelegateItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDesktopLayoutManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDetachableAlternatives>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDispatch>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IHTMLElement>(Details::ComPtrRef<ComPtr<IHTMLElement> >);
			long As<IHTMLElementCollection>(Details::ComPtrRef<ComPtr<IHTMLElementCollection> >);
		};

		class ComPtr<IDispatchNotification>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IDisplayInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDrawPropertyControl>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(IDrawPropertyControl *);
		};

		class ComPtr<IElevatableDiscImageMount>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IElevationBrokerManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnterpriseDropTarget>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumAssocHandlers>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumFullIDList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumGUID>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumIDList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumITfCompositionView>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumRecycleItems>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumResources>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumShellItems>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumString>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumTfRanges>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumUnknown>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IExecuteCommand>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IExplorerRibbon>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFSFolderPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileChunkMap>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileDialogEvents>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileDialogPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileHandle>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileOperationPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileOperationProgressSink>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileOperationRecorder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFilePlaceholder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFilePlaceholderCallback>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IFilePlaceholderCallback> & operator=(IFilePlaceholderCallback *);
		};

		class ComPtr<IFilePlaceholderOperationOutput>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFilePlaceholderStateInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFilePlaceholderStreamResolver>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IFilePlaceholderStreamResolver> & operator=(IFilePlaceholderStreamResolver *);
		};

		class ComPtr<IFileSyncMergeHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileSystemBindData2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFilterCondition>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFolderFilter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFolderFilterSite>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFolderView2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFolderView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFolderView>();
		};

		class ComPtr<IFolderViewCapabilities>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFolderWithNavigationOptions>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGangImageList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGetImageStream>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGetRow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGetSearchLaunchModeForWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGlobalInterfaceTable>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHTMLDocument2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHTMLElement2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHTMLElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHTMLElementCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHWShellChangeNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImageList2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImageList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImageManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImageServices>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveLauncher>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveMonitor>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersivePlacesReader>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeAssociations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeCommand>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeResultShape>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IResultShape>(Details::ComPtrRef<ComPtr<IResultShape> >);
		};

		class ComPtr<IInitializeSortColumnArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeWithFileAndFindData>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IFilePlaceholder>(Details::ComPtrRef<ComPtr<IFilePlaceholder> >);
		};

		class ComPtr<IInitializeWithItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeWithPopupPersonality>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeWithPropertyStore>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeWithWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInspectable>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IObjectWithItem>(Details::ComPtrRef<ComPtr<IObjectWithItem> >);
			long As<IUnknown>(Details::ComPtrRef<ComPtr<IUnknown> >);
			long As<Windows::Foundation::IReference<Windows::Foundation::Point> >(Details::ComPtrRef<ComPtr<Windows::Foundation::IReference<Windows::Foundation::Point> > >);
			long As<Windows::Storage::Streams::IRandomAccessStream>(Details::ComPtrRef<ComPtr<Windows::Storage::Streams::IRandomAccessStream> >);
		};

		class ComPtr<IInternalCustomDestinationList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInvocationLocation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IItem> & operator=(ComPtr<IItem> const &);
		};

		class ComPtr<IItemCollection>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IItemCollection> & operator=(IItemCollection *);
		};

		class ComPtr<IItemCollectionFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IItemEventSink>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IItemImageHelper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IItemImageStreamProvider>(Details::ComPtrRef<ComPtr<IItemImageStreamProvider> >);
		};

		class ComPtr<IItemImageStreamProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IJumpListProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IKnownFolder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IKnownFolderProperties>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILinkTarget>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILoadFilter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILocalCopy>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILocationDescription>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMarshal>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IMiracastReceiverAppInformation>
		{
			~ComPtr<IMiracastReceiverAppInformation>();
		};

		class ComPtr<IMrtResourceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultipleValues>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INameSpaceTreeControlFlagsPrivate2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INameSpaceTreeControlFlagsPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INameSpaceTreeControlValuesPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INamedPropertyStore>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INotifiableProperty>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INotificationDispatcher>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INotifyLocalSettingChange>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectCollection>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IPersistStream>(Details::ComPtrRef<ComPtr<IPersistStream> >);
		};

		class ComPtr<IObjectProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithAppUserModelID>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithAssociationElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithAssociationList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithFileHandle>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IItemEventSink>(Details::ComPtrRef<ComPtr<IItemEventSink> >);
		};

		class ComPtr<IObjectWithItemCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithProgID>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithQuerySource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithRegistryKey>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithSite>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithTopMargin>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPackageInformation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPackageInstallStateStoreEnum>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersist>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersistFile>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersistSerializedPropStorage>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersistSerializedPropStoragePriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersistStream>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersistString2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IAssociationElement>(Details::ComPtrRef<ComPtr<IAssociationElement> >);
		};

		class ComPtr<IPinToStartService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPinnedList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPinnedPeopleUpdateSink>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IPopupCommand>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPopupCommandHandler>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IPopupWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPopupWindowFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IProcessLifetimeManagerControl>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IProfileNotify>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IProgramTrackingProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPropertyBag2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPropertyBag>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPropertyChange>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPropertyChangeArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPropertyDescriptionListInit>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPropertyKeyStore>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IPropertySheetHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPropertyStore>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IPropertyStore> & operator=(ComPtr<IPropertyStore> const &);
			long As<INamedPropertyStore>(Details::ComPtrRef<ComPtr<INamedPropertyStore> >);
			long As<IPersistStream>(Details::ComPtrRef<ComPtr<IPersistStream> >);
		};

		class ComPtr<IQosRecorder>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IQueryAssociations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IQueryFormulationView>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IQueryInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IQuerySource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IQueryWithLinguisticAlternatives>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRandomAccessStreamModeWithOpenOptions>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRecycleBinManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRegDataDrivenCommand>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRegItemFolder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRegisteredTask>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRegistryChangeListener>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRequestTrustedComponentForegroundControlInitialization>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRestrictedErrorInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IResultShape>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRowsetEvents>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRowsetLocate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRowsetPrioritization>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRunningTask>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IScope>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IScopeFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IScopeItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchFolderItemFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchFolderItemFactoryPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchQuery>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchServices>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISecurityZoneChecker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IServiceHostBrokerProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISetFileChangeSourceInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISetPropertyDescriptionList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISetThumbnailStreamInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShareManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISharedHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellExecuteFlags>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellFolder2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellFolder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IShellFolder> & operator=(IShellFolder *);
		};

		class ComPtr<IShellFolderView>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellItem2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IShellItem> & operator=(ComPtr<IShellItem> const &);
			ComPtr<IShellItem> & operator=(IShellItem *);
		};

		class ComPtr<IShellItemArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellItemBrowser>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellItemImageFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellItemResources>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellLinkW>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IPersistStream>(Details::ComPtrRef<ComPtr<IPersistStream> >);
		};

		class ComPtr<IShellOverrideActivatorProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellQosRecorder2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellUserAssist>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IShellView>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShortcutInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShortcutInfoEnumerator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISortColumnArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISplashScreen>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IStartViewInitializer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStorage>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStorageProviderHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStorageProviderHandlerPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStorageProviderInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStorageProviderPropertyHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStorageProviderUriResolver>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStream>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IStream> & operator=(ComPtr<IStream> const &);
			ComPtr<IStream> & operator=(IStream *);
		};

		class ComPtr<IStreamEmulationMode>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStreamReferencePrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStructuredQueryHelper>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISwitchController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISyncIntegrationManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISyncIntegrationManagerPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISyncRootManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ISyncRootManager>();
		};

		class ComPtr<ISyncRootManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISyncStatusCacheEntry>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISyncStatusCacheEntry> & operator=(ComPtr<ISyncStatusCacheEntry> const &);
			long As<IUnknown>(Details::ComPtrRef<ComPtr<IUnknown> >);
		};

		class ComPtr<ISyncStatusProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISyncStatusProviderInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISyncTransferStatus2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISyncTransferStatus>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaskCondition>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaskConditionInit>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaskHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaskService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaskbarLayoutItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaskbarLayoutPolicyManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaskbarPinListManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITelemetryCorrelationVector>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITextTypeAheadResult>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfCandidateList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfCandidateString>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfCategoryMgr>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfCompositionView>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfContext>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<ITfSource>(Details::ComPtrRef<ComPtr<ITfSource> >);
		};

		class ComPtr<ITfDisplayAttributeInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfDisplayAttributeMgr>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfFnSearchCandidateProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfFunctionProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfInputProcessorProfileMgr>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfInputProcessorProfiles>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfProperty>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfRange>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfRangeACP>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfSource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITfThreadMgr>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<ITfSource>(Details::ComPtrRef<ComPtr<ITfSource> >);
		};

		class ComPtr<IThumbnailCache>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IThumbnailProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITileDataLayerAppResolverReconciler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IAppResolverRankEventSink>(Details::ComPtrRef<ComPtr<IAppResolverRankEventSink> >);
		};

		class ComPtr<ITileDataLayerListener>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ITileDataLayerListener><TileDataLayerListener>(TileDataLayerListener *);
		};

		class ComPtr<ITileDataLayerListenerEventSink>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<ITileDataLayerLookup>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITileDataLayerProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ITileDataLayerProvider> & operator=(ITileDataLayerProvider *);
		};

		class ComPtr<ITileInViewChangeEvent>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITileInfo2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITileInfo>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<ITileInfoCache>(Details::ComPtrRef<ComPtr<ITileInfoCache> >);
		};

		class ComPtr<ITileInfoCache>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITileInfoEnumerator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITileManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ITileManager> & operator=(ComPtr<ITileManager> const &);
		};

		class ComPtr<ITilePropertyInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ITilePropertyInfo> & operator=(ComPtr<ITilePropertyInfo> const &);
		};

		class ComPtr<ITileViewInfoEnumerator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITileViewInformation>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<ITransferAdviseSink>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITransferDestination>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITransferSource2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITransferSource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUnknown>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IUnknown> & operator=(IUnknown *);
			ComPtr<IUnknown>();
			long As<IShellItem2>(Details::ComPtrRef<ComPtr<IShellItem2> >);
			long As<IShellLinkW>(Details::ComPtrRef<ComPtr<IShellLinkW> >);
			void Attach(IUnknown *);
			~ComPtr<IUnknown>();
		};

		class ComPtr<IUri>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUserNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUserOOBEController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUserPinnedTileManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVEInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IViewDefinition>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IViewPinUnpinController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVisualElementEnumerator>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IVisualElementEnumerator> & operator=(ComPtr<IVisualElementEnumerator> const &);
		};

		class ComPtr<IVisualElementEventDispatcher>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IVisualElementEventDispatcher> & operator=(ComPtr<IVisualElementEventDispatcher> const &);
		};

		class ComPtr<IVisualProperties>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICBitmapClipper>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICBitmapDecoder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICBitmapEncoder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICBitmapFrameDecode>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICBitmapFrameEncode>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICBitmapScaler>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IWICBitmapSource>
		{
			ComPtr<IWICBitmapSource> & operator=(IWICBitmapSource *);
		};

		class ComPtr<IWICColorContext>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICColorTransform>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICFormatConverter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICImagingFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWaitCursorManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWebBrowserApp>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWin32TileDataLayerTranslator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWin32TileDataLayerTranslatorProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWindowsPushNotificationManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWpnPlatform>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWsPlatform>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IXMLDOMDocument2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IXMLDOMDocument>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IXMLDOMNodeList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IXMLDOMParseError>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IXMLDOMSchemaCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IXmlReader>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IXmlWriter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IZoneIdentifier2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IZoneIdentifier>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ProgramTrackingProviderWindowsPushNotificationManagerWrapper>
		{
			~ComPtr<ProgramTrackingProviderWindowsPushNotificationManagerWrapper>();
		};

		struct ComPtr<SimpleClassFactory<CSyncRootManager,0> >
		{
			~ComPtr<SimpleClassFactory<CSyncRootManager,0> >();
		};

		struct ComPtr<SimpleSealedActivationFactory<CObservableItem,0> >
		{
			~ComPtr<SimpleSealedActivationFactory<CObservableItem,0> >();
		};

		struct ComPtr<SimpleSealedActivationFactory<CObservableItemCollection,0> >
		{
			~ComPtr<SimpleSealedActivationFactory<CObservableItemCollection,0> >();
		};

		class ComPtr<StartPinUnpinContextMenu>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(StartPinUnpinContextMenu *);
		};

		class ComPtr<SystemSettings::Environment::IEnvironmentChangedEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<SystemSettings::Environment::IEnvironmentChangedEventHandler>();
		};

		class ComPtr<SystemSettings::Environment::INetworkUXManagerClient>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<SystemSettings::Environment::INetworkUXManagerClient>();
		};

		struct ComPtr<SystemSettings::Environment::NetworkUXManagerClient>
		{
			~ComPtr<SystemSettings::Environment::NetworkUXManagerClient>();
		};

		class ComPtr<SystemSettings::Environment::SettingsEnvironment>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<SystemSettings::Environment::SettingsEnvironment>();
		};

		struct ComPtr<SystemSettings::Environment::SettingsEnvironmentImpl>
		{
			~ComPtr<SystemSettings::Environment::SettingsEnvironmentImpl>();
		};

		class ComPtr<Windows::ApplicationModel::Actions::IActionExecutionBroker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Core::ICoreApplicationPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlDocument>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlElement>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Data::Xml::Dom::IXmlNode>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlNode> >);
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlNode>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlNodeList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlNodeSelector>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlText>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Data::Xml::Dom::IXmlNode>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlNode> >);
		};

		class ComPtr<Windows::Devices::Geolocation::IGeocoordinate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Devices::Geolocation::IGeocoordinateWithPoint>(Details::ComPtrRef<ComPtr<Windows::Devices::Geolocation::IGeocoordinateWithPoint> >);
		};

		class ComPtr<Windows::Devices::Geolocation::IGeocoordinateWithPoint>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Devices::Geolocation::IGeopoint>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Devices::Geolocation::IGeoposition>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Devices::Sensors::ILightSensor>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Devices::Sensors::ILightSensor>();
		};

		class ComPtr<Windows::Devices::Sensors::ILightSensorStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Devices::Sensors::ILightSensorStatics>();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<HSTRING__ *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::IItemCommand *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::Foundation::IExtensionRegistration *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IMapView<HSTRING__ *,ContentManagement::TargetedContent::TargetedContentValue *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::Networking::UX::IUXCategory *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVector<Windows::Networking::UX::IUXCategory *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<ContentManagement::TargetedContent::TargetedContentItem *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<HSTRING__ *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::ApplicationExtension *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::ApplicationExtension *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> > >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IActivatableClassRegistration>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncAction>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<ContentManagement::TargetedContent::TargetedContentCollection *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount *> *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IExtensionCatalog>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IExtensionRegistration>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IPropertyValue>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IPropertyValueStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IReference<Windows::Foundation::Point> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::IReference<Windows::Foundation::Rect> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::IUriRuntimeClass>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Internal::ApplicationDefaults::IApplicationUsage>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::BackupRestore::SettingsProviders::IOneBackupHandlerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::BackupRestore::SettingsProviders::IOneBackupHandlerStatics>();
		};

		class ComPtr<Windows::Internal::ComTaskPool::CDelayedTask>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Internal::ComTaskPool::CRemoteReleaseStub>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ComTaskPool::CRemoteTask>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ComTaskPool::CThread>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::IComPoolTask>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Security::Authentication::Web::ITokenBrokerInternalStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::StateRepository::IApplicationExtensionStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IApplicationExtensionStatics>();
		};

		class ComPtr<Windows::Internal::StateRepository::IPackageFamilyStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IPackageFamilyStatics>();
		};

		class ComPtr<Windows::Internal::Storage::IBindingPhaseHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Internal::Storage::ICustomPropertyProviderFactory>
		{
			ComPtr<Windows::Internal::Storage::ICustomPropertyProviderFactory> & operator=(Windows::Internal::Storage::ICustomPropertyProviderFactory *);
		};

		class ComPtr<Windows::Internal::Storage::IItemCommand>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Storage::IItemValueProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::Internal::Storage::IItemValueProvider> & operator=(Windows::Internal::Storage::IItemValueProvider *);
		};

		class ComPtr<Windows::Internal::Storage::IObservableObjectFactoryStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Storage::IPropertyChangeNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Storage::IPropertyValueProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Storage::ISetCustomPropertyProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Storage::ISetItemValueProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Networking::Connectivity::IConnectionCost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Networking::Connectivity::IConnectionProfile>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Networking::Connectivity::INetworkInformationStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Networking::UX::INetworkUXManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Networking::UX::INetworkUXManager>();
		};

		class ComPtr<Windows::Networking::UX::IUXCategory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Networking::UX::IUXCategory>();
		};

		class ComPtr<Windows::Networking::UX::IUXManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Networking::UX::IUXManager>();
		};

		class ComPtr<Windows::Security::Credentials::IWebAccount>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::IStorageItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Search::IStorageFileQueryResult>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStream>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStreamWithContentType>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::System::ILauncherOptions>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::System::Internal::ISignInStateManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::System::Internal::IUserManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::System::Internal::Launch::IQueryAssociationBrokerStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Core::ICoreWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Core::ICoreWindowStatic>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotification2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotificationFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotificationManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotifier>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Popups::IMessageDialog>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Popups::IMessageDialogFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Popups::IUICommand>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::ViewManagement::IActivationViewSwitcher>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::UI::Xaml::Data::ICustomProperty>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Xaml::Data::ICustomPropertyProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::UI::Xaml::Data::ICustomPropertyProvider> & operator=(Windows::UI::Xaml::Data::ICustomPropertyProvider *);
		};

		class ComPtr<Windows::UI::Xaml::Media::Imaging::IBitmapImage>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Xaml::Media::Imaging::IBitmapSource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<wil::details::DummyUnknown>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct DelegateTraits<-1>
		{
			static void EnsureStackSnapshot(long);
		};

		namespace Details
		{
			struct ComPtrRef<AgileRef>
			{
				operator AgileRef *();
			};

			struct ComPtrRef<WeakRef>
			{
				operator WeakRef *();
			};

			struct DefaultModule<5>
			{
				virtual ~DefaultModule<5>();
			};

			struct EventTargetArray
			{
				EventTargetArray();
				long RuntimeClassInitialize(unsigned __int64);
				void AddTail(IUnknown *,void *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,InterfaceList<IActivationFactory,InterfaceList<Implements<RuntimeClassFlags<1>,Windows::Internal::ApplicationDefaults::IApplicationUsageStatics,FtmBase,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,Nil> >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,InterfaceList<IActivationFactory,InterfaceList<Implements<RuntimeClassFlags<1>,Windows::Internal::ApplicationDefaults::IEnlightenmentPromptStatics,FtmBase,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,Nil> >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,InterfaceList<IActivationFactory,InterfaceList<Windows::Internal::Storage::IObservableObjectFactoryStatics,InterfaceList<FtmBase,Nil> > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,InterfaceList<IActivationFactory,Nil>,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<CActivatedEventArgsWithPrelaunchAndViewIdBase,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,Nil> > > >,0,1>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<CActivatedEventArgsWithViewIdBase,InterfaceList<Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs,InterfaceList<CloakedIid<Windows::ApplicationModel::Activation::IInitializePrelaunchActivatedEventArgs>,Nil> > >,1,1>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<CloakedIid<Windows::ApplicationModel::Activation::IInitializeActivatedEventArgs>,InterfaceList<CloakedIid<Windows::ApplicationModel::Activation::IForegroundActivationMode>,InterfaceList<CloakedIid<Windows::ApplicationModel::Activation::INavigationActivatedEventArgs>,InterfaceList<FtmBase,Nil> > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<IWeakReferenceSource,InterfaceList<FtmBase,Nil> >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<IWeakReferenceSource,InterfaceList<FtmBase,Nil> >,1,0>();
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::Foundation::Collections::IIterable<HSTRING__ *>,InterfaceList<FtmBase,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::Foundation::Collections::IIterable<HSTRING__ *>,InterfaceList<FtmBase,Nil> > >,1,0>();
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::IItemCommand *>,Nil> >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<IWeakReferenceSource,Nil>,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,InterfaceList<Windows::ApplicationModel::Activation::IViewSwitcherProvider,InterfaceList<CloakedIid<Windows::ApplicationModel::Activation::IInitializeApplicationViewActivatedEventArgs>,InterfaceList<CloakedIid<Windows::ApplicationModel::Activation::IMultiviewActivationProperties>,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<CByValueOperationInterrupt,InterfaceList<IConfirmationInterrupt,Nil> >,0,1>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<CByValueOperationInterrupt,InterfaceList<IConflictInterrupt,Nil> >,0,1>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<CWRLExecuteCommandBase,InterfaceList<IExecuteCommandApplicationHostEnvironment,Nil> >,0,1>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<CWRLObjectWithSite,InterfaceList<IServiceProvider,InterfaceList<IOpenWithTypeOverride,Nil> > >,0,1>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IApplicationViewManifestInformation,InterfaceList<IPersist,InterfaceList<IPersistStream,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IConfigureExtrinsicPropertyStore,InterfaceList<IInitializeWithFileAndFindData,InterfaceList<ISetFileChangeSourceInfo,InterfaceList<IObjectProvider,InterfaceList<FtmBase,Nil> > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IContextMenu,InterfaceList<IShellExtInit,InterfaceList<CWRLObjectWithSite,Nil> > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IExtractIconW,Nil>,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IExtractImage,InterfaceList<IThumbnailProvider,InterfaceList<IInitializeWithItem,InterfaceList<IPersist,InterfaceList<IPersistFile,InterfaceList<IPersistPropertyBag,InterfaceList<IExtractIconW,Nil> > > > > > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IFileIsInUse,InterfaceList<IPersist,InterfaceList<IPersistFile,Nil> > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IFilePlaceholderCallback,InterfaceList<IManageFilePlaceholderCallback,InterfaceList<IFilePlaceholderOperationOutput,InterfaceList<FtmBase,Nil> > > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IInitializeWithItem,Nil>,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<ILinguisticAlternativeGenerator,InterfaceList<ITfTextEditSink,InterfaceList<ITfActiveLanguageProfileNotifySink,Nil> > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<ILocalCopyDownloadSettings,InterfaceList<IWakeOnRPCCalls,InterfaceList<ILaunchTargetMonitor,InterfaceList<FtmBase,Nil> > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IObjectWithAssociationElement,InterfaceList<IObjectWithSelection,InterfaceList<CWRLObjectWithSite,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IOperationInterrupt,InterfaceList<ChainInterfaces<MixIn<CByValueOperationInterrupt,CMarshalByValue,0>,IMarshal,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,Nil> >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IPersist,InterfaceList<IPersistFile,InterfaceList<IPersistPropertyBag,InterfaceList<IExtractIconW,Nil> > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IPersistPropertyBag,InterfaceList<IContextMenuCB,InterfaceList<ChainInterfaces<IPersistPropertyBag,IPersist,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,InterfaceList<ChainInterfaces<IPersistFolder2,IPersistFolder,IPersist,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,InterfaceList<IThumbnailHandlerFactory,InterfaceList<CWRLObjectWithSite,Nil> > > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IQueryContinue,InterfaceList<IObjectArray,InterfaceList<CWRLObjectWithSite,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IServiceProvider,InterfaceList<ILaunchSourceViewSizePreference,InterfaceList<ILaunchSourceAppUserModelId,InterfaceList<FtmBase,Nil> > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IShouldSwitchToDesktop,InterfaceList<ILayoutPreferencesOnAppLaunch,InterfaceList<IExecuteCommandHost,InterfaceList<ILocalCopyDownloadSettings,InterfaceList<IWakeOnRPCCalls,InterfaceList<ILaunchTargetMonitor,InterfaceList<FtmBase,Nil> > > > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<IStreamWithReadAtPosition,InterfaceList<IFilePlaceholderCallback,InterfaceList<IManageFilePlaceholderCallback,InterfaceList<FtmBase,Nil> > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<ITileDataLayerAppResolverReconciler,InterfaceList<ITileDataLayerFindTile,InterfaceList<IWin32TileDataLayerTranslator,InterfaceList<IAppResolverRankEventSink,InterfaceList<ITileDataLayerListenerEventSink,InterfaceList<IAppResolverPromotion,InterfaceList<IDisableConcurrencyForTest,Nil> > > > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,InterfaceList<ITileDataLayerListenerEventSink,InterfaceList<IAppResolverPromotion,InterfaceList<IDisableConcurrencyForTest,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<CWRLObjectWithSite,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::Internal::Storage::IItemCommand,InterfaceList<Windows::UI::Xaml::Input::ICommand,InterfaceList<Windows::UI::Popups::IUICommandInvokedHandler,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<ICommandInvokeContext,InterfaceList<ICurrentItem,Nil> > > > > > > > >,1,1>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<ChainInterfaces<ITransferSource2,ITransferSource,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,InterfaceList<IWeakReferenceSource,InterfaceList<IFileOperationContextConsumer,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<CloakedIid<CWrlLightweightHandlerServer>,InterfaceList<CloakedIid<IConfigureWindowFactory>,InterfaceList<CloakedIid<ICoreWindowFactoryPriv>,Nil> > >,1,1>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<IFileChunkMap,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::Foundation::IClosable,InterfaceList<FtmBase,Nil> > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<IInspectable,InterfaceList<IObjectWithItem,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<IItemEventSink,InterfaceList<Windows::Internal::Storage::IItemCommandServices,InterfaceList<Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Nil,Nil,Nil,Nil,Nil>,InterfaceList<CWRLObjectWithSite,Nil> > > > > > > > > > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<IWeakReferenceSource,InterfaceList<Windows::System::ILauncherOptions2,InterfaceList<Windows::System::ILauncherOptions3,InterfaceList<Windows::System::ILauncherViewOptions,InterfaceList<CWRLObjectWithGITSite,InterfaceList<CloakedIid<IServiceProvider>,InterfaceList<FtmBase,Nil> > > > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<IWeakReferenceSource,Nil>,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Nil,Nil,Nil,Nil,Nil>,InterfaceList<CWRLObjectWithSite,Nil> >,1,1>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::Internal::Storage::IBindingPhaseHandler,InterfaceList<IItemImageInfo,InterfaceList<IObjectWithWindow,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<ICommandInvokeContext,InterfaceList<ICurrentItem,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<IItemEventSink,InterfaceList<Windows::Internal::Storage::IItemCommandServices,InterfaceList<Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Nil,Nil,Nil,Nil,Nil>,InterfaceList<CWRLObjectWithSite,Nil> > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<IItemEventSink,InterfaceList<Windows::Internal::Storage::IItemCommandServices,InterfaceList<Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Nil,Nil,Nil,Nil,Nil>,InterfaceList<CWRLObjectWithSite,Nil> > > > > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::Internal::Storage::IVirtualizedVector,InterfaceList<IObjectWithWindow,InterfaceList<CWRLObjectWithSite,Nil> > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::System::ILauncherUIOptions,InterfaceList<IWeakReferenceSource,InterfaceList<CloakedIid<IObjectWithWindowRect>,InterfaceList<FtmBase,Nil> > > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::System::ILauncherViewOptions,InterfaceList<CWRLObjectWithGITSite,InterfaceList<CloakedIid<IServiceProvider>,InterfaceList<FtmBase,Nil> > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::UI::Xaml::Data::ICustomProperty,InterfaceList<IWeakReferenceSource,InterfaceList<INotifiableProperty,Nil> > >,0,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::UI::Xaml::Input::ICommand,InterfaceList<Windows::UI::Popups::IUICommandInvokedHandler,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<ICommandInvokeContext,InterfaceList<ICurrentItem,Nil> > > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,InterfaceList<Windows::UI::Xaml::Interop::IBindableObservableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableIterable,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> > > > > > > >,1,0>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct InvokeHelper<IPopupCommandHandler,<lambda_49c7f639766ab656496bc5e729e619cf>,2>
			{
				virtual long Invoke(IPopupWindow *,IPopupCommand *);
			};

			struct InvokeHelper<IPopupCommandHandler,<lambda_b9b45446d5f48a282e42d612aaa7f862>,2>
			{
				virtual long Invoke(IPopupWindow *,IPopupCommand *);
			};

			struct InvokeHelper<IPopupCommandHandler,<lambda_bb81e7d87a56f633b918a54073d82a03>,2>
			{
				virtual long Invoke(IPopupWindow *,IPopupCommand *);
			};

			struct InvokeHelper<IPopupCommandHandler,<lambda_c79e6e0b4a227b8baeade6c57fcf2c18>,2>
			{
				virtual long Invoke(IPopupWindow *,IPopupCommand *);
			};

			struct InvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,<lambda_4c9baaaa6f1a348a94e30f38972bbb8c>,2>
			{
				InvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,<lambda_4c9baaaa6f1a348a94e30f38972bbb8c>,2>(<lambda_4c9baaaa6f1a348a94e30f38972bbb8c>);
				virtual long Invoke(Windows::UI::Notifications::IToastNotification *,IInspectable *);
			};

			struct InvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,<lambda_ba2b01bd2281a90ee6a2f8ccf5318865>,2>
			{
				InvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,<lambda_ba2b01bd2281a90ee6a2f8ccf5318865>,2>(<lambda_ba2b01bd2281a90ee6a2f8ccf5318865>);
				virtual long Invoke(Windows::UI::Notifications::IToastNotification *,Windows::UI::Notifications::IToastDismissedEventArgs *);
			};

			struct InvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *>,<lambda_066c5a5fea02f2df6a12f0e4902f619d>,2>
			{
				InvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *>,<lambda_066c5a5fea02f2df6a12f0e4902f619d>,2>(<lambda_066c5a5fea02f2df6a12f0e4902f619d>);
				virtual long Invoke(Windows::UI::Notifications::IToastNotification *,Windows::UI::Notifications::IToastFailedEventArgs *);
			};

			struct InvokeHelper<Windows::UI::Popups::IUICommandInvokedHandler,<lambda_db1e469db7901375c42936813cdbb77a>,1>
			{
				InvokeHelper<Windows::UI::Popups::IUICommandInvokedHandler,<lambda_db1e469db7901375c42936813cdbb77a>,1>(<lambda_db1e469db7901375c42936813cdbb77a>);
				virtual long Invoke(Windows::UI::Popups::IUICommand *);
			};

			struct MakeAllocator<CApplicationTileInformation>
			{
				~MakeAllocator<CApplicationTileInformation>();
			};

			struct MakeAllocator<CByValueConfirmationInterrupt>
			{
				~MakeAllocator<CByValueConfirmationInterrupt>();
			};

			struct MakeAllocator<CByValueSingleConflictInterrupt>
			{
				~MakeAllocator<CByValueSingleConflictInterrupt>();
			};

			struct MakeAllocator<CDeferredCollectionNotifier>
			{
				~MakeAllocator<CDeferredCollectionNotifier>();
			};

			struct MakeAllocator<CExtrinsicPropertyStore>
			{
				~MakeAllocator<CExtrinsicPropertyStore>();
			};

			struct MakeAllocator<CFilePlaceholder>
			{
				~MakeAllocator<CFilePlaceholder>();
			};

			struct MakeAllocator<CFilePlaceholderCallbackCrashDetector>
			{
				~MakeAllocator<CFilePlaceholderCallbackCrashDetector>();
			};

			struct MakeAllocator<CFilePlaceholderRemoteStream>
			{
				~MakeAllocator<CFilePlaceholderRemoteStream>();
			};

			struct MakeAllocator<CItemCollectionSink>
			{
				~MakeAllocator<CItemCollectionSink>();
			};

			struct MakeAllocator<CLambdaCommandHandler>
			{
				~MakeAllocator<CLambdaCommandHandler>();
			};

			struct MakeAllocator<CObservableItemCollection>
			{
				~MakeAllocator<CObservableItemCollection>();
			};

			struct MakeAllocator<CObservableItemCollectionVectorChangedEventArgs>
			{
				~MakeAllocator<CObservableItemCollectionVectorChangedEventArgs>();
			};

			struct MakeAllocator<CObservableProperty>
			{
				~MakeAllocator<CObservableProperty>();
			};

			struct MakeAllocator<CPinnedPeopleList>
			{
				~MakeAllocator<CPinnedPeopleList>();
			};

			struct MakeAllocator<CPropertyChangedEventArgs>
			{
				~MakeAllocator<CPropertyChangedEventArgs>();
			};

			struct MakeAllocator<CQueryWithLinguisticAlternatives>
			{
				~MakeAllocator<CQueryWithLinguisticAlternatives>();
			};

			struct MakeAllocator<EventTargetArray>
			{
				~MakeAllocator<EventTargetArray>();
			};

			struct MakeAllocator<SystemSettings::Environment::NetworkUXManagerClient>
			{
				~MakeAllocator<SystemSettings::Environment::NetworkUXManagerClient>();
			};

			struct MakeAllocator<SystemSettings::Environment::SettingsEnvironmentImpl>
			{
				~MakeAllocator<SystemSettings::Environment::SettingsEnvironmentImpl>();
			};

			class ModuleBase
			{
				static void * moduleLock_;
			protected:
				static unsigned long volatile objectCount_;
			public:
				static ModuleBase * module_;
				virtual CreatorMap const * * GetFirstEntryPointer();
				virtual CreatorMap const * * GetLastEntryPointer();
				virtual CreatorMap const * * GetMidEntryPointer();
				virtual _RTL_SRWLOCK * GetLock();
				virtual unsigned long GetObjectCount();
			};

			struct RuntimeClass<InterfaceList<CActivatedEventArgsWithPrelaunchAndViewIdBase,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,Nil> > >,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<CActivatedEventArgsWithPrelaunchAndViewIdBase,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,Nil> > >,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<CAvailabilityVerbBase,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CBaseOverlayHandler,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CByValueOperationInterrupt,InterfaceList<IConfirmationInterrupt,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CByValueOperationInterrupt,InterfaceList<IConflictInterrupt,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CImmersiveWindowFactoryBase,Nil>,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<CImmersiveWindowFactoryBase,Nil>,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<CNotificationDispatcherBase,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CSyncRootCommandStateBase,InterfaceList<CWRLExecuteCommandBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CSyncStateTogglePause,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CWRLExecuteCommandBase,InterfaceList<IExecuteCommandApplicationHostEnvironment,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CWRLExecuteCommandBase,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CWRLObjectWithGITSite,InterfaceList<IServiceProvider,InterfaceList<ILaunchSourceViewSizePreference,InterfaceList<ILaunchSourceAppUserModelId,InterfaceList<FtmBase,Nil> > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CWRLObjectWithGITSite,InterfaceList<IServiceProvider,InterfaceList<IShouldSwitchToDesktop,InterfaceList<ILayoutPreferencesOnAppLaunch,InterfaceList<IExecuteCommandHost,InterfaceList<ILocalCopyDownloadSettings,InterfaceList<IWakeOnRPCCalls,InterfaceList<ILaunchTargetMonitor,InterfaceList<FtmBase,Nil> > > > > > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CWRLObjectWithGITSite,InterfaceList<IServiceProvider,InterfaceList<ITelemetryCorrelationVector,InterfaceList<FtmBase,Nil> > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CWRLObjectWithSite,InterfaceList<IServiceProvider,InterfaceList<IOpenWithTypeOverride,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<CWRLObjectWithSite,InterfaceList<Windows::Internal::Storage::IItemCommand,InterfaceList<Windows::UI::Xaml::Input::ICommand,InterfaceList<Windows::UI::Popups::IUICommandInvokedHandler,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<ICommandInvokeContext,InterfaceList<ICurrentItem,Nil> > > > > > > >,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<CWRLObjectWithSite,InterfaceList<Windows::Internal::Storage::IItemCommand,InterfaceList<Windows::UI::Xaml::Input::ICommand,InterfaceList<Windows::UI::Popups::IUICommandInvokedHandler,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<ICommandInvokeContext,InterfaceList<ICurrentItem,Nil> > > > > > > >,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<ChainInterfaces<IShellFolder2,IShellFolder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,InterfaceList<IPersistPropertyBag,InterfaceList<IContextMenuCB,InterfaceList<ChainInterfaces<IPersistPropertyBag,IPersist,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,InterfaceList<ChainInterfaces<IPersistFolder2,IPersistFolder,IPersist,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,InterfaceList<IThumbnailHandlerFactory,InterfaceList<CWRLObjectWithSite,Nil> > > > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ChainInterfaces<ITransferSource2,ITransferSource,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,InterfaceList<IFileOperationContextConsumer,Nil> >,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<ChainInterfaces<ITransferSource2,ITransferSource,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,InterfaceList<IFileOperationContextConsumer,Nil> >,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<CloakedIid<IAgileObject>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<FtmBase,InterfaceList<ITileDataLayerAppResolverReconciler,InterfaceList<ITileDataLayerFindTile,InterfaceList<IWin32TileDataLayerTranslator,InterfaceList<IAppResolverRankEventSink,InterfaceList<ITileDataLayerListenerEventSink,InterfaceList<IAppResolverPromotion,InterfaceList<IDisableConcurrencyForTest,Nil> > > > > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<FtmBase,InterfaceList<ITileDataLayerLookup,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<FtmBase,InterfaceList<IVisualElementEventSink,InterfaceList<ITileDataLayerListener,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<FtmBase,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IActivityTracker,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAppInfo,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAppInfoEnumerator,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAppRankProvider,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAppResolverDataLayer,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAppResolverDataLayerManager,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAppResolverEnumFilter,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAppResolverExclusionFilter,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IApplicationTileInformation,InterfaceList<IApplicationTileInformationPriv,InterfaceList<IApplicationViewManifestInformation,InterfaceList<IPersist,InterfaceList<IPersistStream,Nil> > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAppsFolderManager,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IAutoPlayDeviceDataManager,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ICachedFolderPath,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ICollectionEventSink,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ICollectionEventSink,InterfaceList<ICollectionExternalEventSink,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IContextMenu,InterfaceList<IShellExtInit,InterfaceList<CWRLObjectWithSite,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IContextMenu,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IControlPanelVisibilityCondition,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ICreateObject,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IDispatchNotification,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IDisplayInfo,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IEnumIDList,InterfaceList<IQueryContinue,InterfaceList<IObjectArray,InterfaceList<CWRLObjectWithSite,Nil> > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IEnumResources,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IExtractImage,InterfaceList<IExtractIconW,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IExtractImage,InterfaceList<IThumbnailProvider,InterfaceList<IInitializeWithItem,InterfaceList<IPersist,InterfaceList<IPersistFile,InterfaceList<IPersistPropertyBag,InterfaceList<IExtractIconW,Nil> > > > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IExtractImage,InterfaceList<IThumbnailProvider,InterfaceList<IInitializeWithItem,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IFileChunkMap,InterfaceList<Windows::Foundation::IClosable,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<IFileChunkMap,InterfaceList<Windows::Foundation::IClosable,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<IFileIsInUse,InterfaceList<IPersist,InterfaceList<IPersistFile,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IFileOperationProgressSink,InterfaceList<IFileOperationProgressSinkPriv,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IFilePlaceholderCallback,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IFilePlaceholderCallback,InterfaceList<IManageFilePlaceholderCallback,InterfaceList<IFilePlaceholderOperationOutput,InterfaceList<FtmBase,Nil> > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IFileSystemBindData,InterfaceList<IFileSystemBindData2,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IHomeGroupMachineWakeFlow,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IImmersiveContextMenuOwnerDrawHelper,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IImmersivePlacesReader,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IInitializeCommand,InterfaceList<CWRLExecuteCommandBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IInitializeWithFile,InterfaceList<IInitializeWithFileAndFindData,InterfaceList<IFilePlaceholder,InterfaceList<IFilePlaceholderStateInternal,InterfaceList<ISetFileChangeSourceInfo,InterfaceList<FtmBase,Nil> > > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IItemEventSink,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IJumpListProvider,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ILinguisticAlternativeGenerator,InterfaceList<ITfTextEditSink,InterfaceList<ITfActiveLanguageProfileNotifySink,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<INotificationActivationCallback,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IObjectWithItem,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<IItemEventSink,InterfaceList<Windows::Internal::Storage::IItemCommandServices,InterfaceList<Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Nil,Nil,Nil,Nil,Nil>,InterfaceList<CWRLObjectWithSite,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<IObjectWithItem,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<IItemEventSink,InterfaceList<Windows::Internal::Storage::IItemCommandServices,InterfaceList<Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Nil,Nil,Nil,Nil,Nil>,InterfaceList<CWRLObjectWithSite,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<IPackageInformation,InterfaceList<IPackageInformationPriv,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPackageInstallStateStore,InterfaceList<IWindowsStoreInstallProgress,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPackageInstallStateStoreEnum,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPeopleRegistryAccess,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPersist,InterfaceList<IOleWindow,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPinnedPeopleList,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPopupCommand,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPopupCommandHandler,InterfaceList<IPopupCommand,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPopupCommandHandler,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPopupEventHandler,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IProfileNotify,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IProgramTrackingProvider,InterfaceList<IWindowsPushNotificationManager,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPropertySheetHandler,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPropertyStore,InterfaceList<IInitializeWithItem,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IPropertyStore,InterfaceList<INamedPropertyStore,InterfaceList<IConfigureExtrinsicPropertyStore,InterfaceList<IInitializeWithFileAndFindData,InterfaceList<ISetFileChangeSourceInfo,InterfaceList<IObjectProvider,InterfaceList<FtmBase,Nil> > > > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IQosRecorder,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IQueryWithLinguisticAlternatives,InterfaceList<IDetachableAlternatives,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IRowsetEvents,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ISequentialStream,InterfaceList<IStream,InterfaceList<IStreamWithReadAtPosition,InterfaceList<IFilePlaceholderCallback,InterfaceList<IManageFilePlaceholderCallback,InterfaceList<FtmBase,Nil> > > > > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IServiceProvider,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IShellFolder,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IShellItemFilter,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IShellItemResources,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IShellReminderManager,InterfaceList<IShellServiceObject,InterfaceList<IQueryContinue,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IShellServiceObject,InterfaceList<Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IShortcutInfo,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IShortcutInfoEnumerator,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IStorageProviderInfo,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IStream,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ISyncIntegrationManager,InterfaceList<ISyncIntegrationManagerPrivate,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ISyncRootManager,InterfaceList<ISyncRootManagerPriv,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ISyncStatusCacheEntry,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ISyncStatusProviderInfo,InterfaceList<ISyncProviderChangeNotify,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ITaskHandler,InterfaceList<IClassFactory,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ITaskHandler,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ITaskbarPinListManager,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IThumbnailProvider,InterfaceList<IInitializeWithItem,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ITileDataLayerProvider,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ITransferSource,InterfaceList<ITransferDestination,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ITypeAheadSearchHistoryProvider,InterfaceList<ITypeAheadSearchHistoryProviderTest,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<ITypeAheadSearchHistorySettings,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IUnknown,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IUserPinnedTileManager,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IWakeUI,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IWeakReference,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IWebBrowserUtils,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<IWordSink,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Implements<RuntimeClassFlags<2>,IDesktopGadget,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<SystemSettings::Environment::INetworkUXManagerClient,InterfaceList<Windows::Networking::UX::IUXCategoryEventHandler,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<SystemSettings::Environment::SettingsEnvironment,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<SystemSettings::Environment::SettingsEnvironment,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::Collections::IIterator<HSTRING__ *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::Foundation::Collections::IIterator<HSTRING__ *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::Collections::IIterator<Windows::Internal::Storage::IItemCommand *>,Nil>,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::Foundation::Collections::IIterator<Windows::Internal::Storage::IItemCommand *>,Nil>,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVector<HSTRING__ *>,InterfaceList<Windows::Foundation::Collections::IIterable<HSTRING__ *>,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVector<HSTRING__ *>,InterfaceList<Windows::Foundation::Collections::IIterable<HSTRING__ *>,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::IItemCommand *>,InterfaceList<Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::IItemCommand *>,Nil> >,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::IItemCommand *>,InterfaceList<Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::IItemCommand *>,Nil> >,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVectorChangedEventArgs,Nil>,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVectorChangedEventArgs,Nil>,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,InterfaceList<Windows::Foundation::Collections::IIterable<HSTRING__ *>,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,InterfaceList<Windows::Foundation::Collections::IIterable<HSTRING__ *>,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVectorView<Windows::Internal::Storage::IItemCommand *>,InterfaceList<Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::IItemCommand *>,Nil> >,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::Foundation::Collections::IVectorView<Windows::Internal::Storage::IItemCommand *>,InterfaceList<Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::IItemCommand *>,Nil> >,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::IAsyncOperationCompletedHandler<ContentManagement::TargetedContent::TargetedContentCollection *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Devices::Geolocation::Geoposition *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount *> *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStreamWithContentType *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::UI::Popups::IUICommand *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *>,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::Internal::ApplicationDefaults::IApplicationUsage,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::Internal::ApplicationDefaults::IApplicationUsage,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::Internal::IComPoolTask,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::System::ILauncherOptions,InterfaceList<Windows::System::ILauncherOptions2,InterfaceList<Windows::System::ILauncherOptions3,InterfaceList<Windows::System::ILauncherViewOptions,InterfaceList<CWRLObjectWithGITSite,InterfaceList<CloakedIid<IServiceProvider>,InterfaceList<FtmBase,Nil> > > > > > >,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::System::ILauncherOptions,InterfaceList<Windows::System::ILauncherOptions2,InterfaceList<Windows::System::ILauncherOptions3,InterfaceList<Windows::System::ILauncherViewOptions,InterfaceList<CWRLObjectWithGITSite,InterfaceList<CloakedIid<IServiceProvider>,InterfaceList<FtmBase,Nil> > > > > > >,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::System::ILauncherUIOptions,InterfaceList<CloakedIid<IObjectWithWindowRect>,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::System::ILauncherUIOptions,InterfaceList<CloakedIid<IObjectWithWindowRect>,InterfaceList<FtmBase,Nil> > >,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::UI::Popups::IUICommandInvokedHandler,Nil>,RuntimeClassFlags<2>,1,0,0>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClass<InterfaceList<Windows::UI::Xaml::Data::ICustomProperty,InterfaceList<INotifiableProperty,Nil> >,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::UI::Xaml::Data::ICustomProperty,InterfaceList<INotifiableProperty,Nil> >,RuntimeClassFlags<3>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::UI::Xaml::Data::IPropertyChangedEventArgs,Nil>,RuntimeClassFlags<1>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::UI::Xaml::Data::IPropertyChangedEventArgs,Nil>,RuntimeClassFlags<1>,1,1,0>();
			};

			struct RuntimeClass<InterfaceList<Windows::UI::Xaml::Interop::IBindableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableObservableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableIterable,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClass<InterfaceList<Windows::UI::Xaml::Interop::IBindableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableObservableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableIterable,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0>();
			};

			class RuntimeClassBaseT<1>
			{
			protected:
				static long AsIID<RuntimeClass<InterfaceList<CActivatedEventArgsWithPrelaunchAndViewIdBase,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,Nil> > >,RuntimeClassFlags<1>,1,1,0> >(RuntimeClass<InterfaceList<CActivatedEventArgsWithPrelaunchAndViewIdBase,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,InterfaceList<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,Nil> > >,RuntimeClassFlags<1>,1,1,0> *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<2>
			{
			protected:
				static long AsIID<RuntimeClass<InterfaceList<CNotificationDispatcherBase,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0> >(RuntimeClass<InterfaceList<CNotificationDispatcherBase,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0> *,_GUID const &,void * *);
				static long AsIID<RuntimeClass<InterfaceList<CWRLObjectWithGITSite,InterfaceList<IServiceProvider,InterfaceList<IShouldSwitchToDesktop,InterfaceList<ILayoutPreferencesOnAppLaunch,InterfaceList<IExecuteCommandHost,InterfaceList<ILocalCopyDownloadSettings,InterfaceList<IWakeOnRPCCalls,InterfaceList<ILaunchTargetMonitor,InterfaceList<FtmBase,Nil> > > > > > > > >,RuntimeClassFlags<2>,1,0,0> >(RuntimeClass<InterfaceList<CWRLObjectWithGITSite,InterfaceList<IServiceProvider,InterfaceList<IShouldSwitchToDesktop,InterfaceList<ILayoutPreferencesOnAppLaunch,InterfaceList<IExecuteCommandHost,InterfaceList<ILocalCopyDownloadSettings,InterfaceList<IWakeOnRPCCalls,InterfaceList<ILaunchTargetMonitor,InterfaceList<FtmBase,Nil> > > > > > > > >,RuntimeClassFlags<2>,1,0,0> *,_GUID const &,void * *);
				static long AsIID<RuntimeClass<InterfaceList<CWRLObjectWithGITSite,InterfaceList<IServiceProvider,InterfaceList<ITelemetryCorrelationVector,InterfaceList<FtmBase,Nil> > > >,RuntimeClassFlags<2>,1,0,0> >(RuntimeClass<InterfaceList<CWRLObjectWithGITSite,InterfaceList<IServiceProvider,InterfaceList<ITelemetryCorrelationVector,InterfaceList<FtmBase,Nil> > > >,RuntimeClassFlags<2>,1,0,0> *,_GUID const &,void * *);
				static long AsIID<RuntimeClass<InterfaceList<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount *> *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0> >(RuntimeClass<InterfaceList<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount *> *>,InterfaceList<FtmBase,Nil> >,RuntimeClassFlags<2>,1,0,0> *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<3>
			{
			protected:
				static long AsIID<RuntimeClass<InterfaceList<CImmersiveWindowFactoryBase,Nil>,RuntimeClassFlags<3>,1,1,0> >(RuntimeClass<InterfaceList<CImmersiveWindowFactoryBase,Nil>,RuntimeClassFlags<3>,1,1,0> *,_GUID const &,void * *);
				static long AsIID<RuntimeClass<InterfaceList<Windows::System::ILauncherOptions,InterfaceList<Windows::System::ILauncherOptions2,InterfaceList<Windows::System::ILauncherOptions3,InterfaceList<Windows::System::ILauncherViewOptions,InterfaceList<CWRLObjectWithGITSite,InterfaceList<CloakedIid<IServiceProvider>,InterfaceList<FtmBase,Nil> > > > > > >,RuntimeClassFlags<3>,1,1,0> >(RuntimeClass<InterfaceList<Windows::System::ILauncherOptions,InterfaceList<Windows::System::ILauncherOptions2,InterfaceList<Windows::System::ILauncherOptions3,InterfaceList<Windows::System::ILauncherViewOptions,InterfaceList<CWRLObjectWithGITSite,InterfaceList<CloakedIid<IServiceProvider>,InterfaceList<FtmBase,Nil> > > > > > >,RuntimeClassFlags<3>,1,1,0> *,_GUID const &,void * *);
				static long AsIID<RuntimeClass<InterfaceList<Windows::UI::Xaml::Interop::IBindableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableObservableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableIterable,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0> >(RuntimeClass<InterfaceList<Windows::UI::Xaml::Interop::IBindableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableObservableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableIterable,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0> *,_GUID const &,void * *);
				static long GetImplementedIIDS<RuntimeClass<InterfaceList<CWRLObjectWithSite,InterfaceList<Windows::Internal::Storage::IItemCommand,InterfaceList<Windows::UI::Xaml::Input::ICommand,InterfaceList<Windows::UI::Popups::IUICommandInvokedHandler,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<ICommandInvokeContext,InterfaceList<ICurrentItem,Nil> > > > > > > >,RuntimeClassFlags<3>,1,1,0> >(RuntimeClass<InterfaceList<CWRLObjectWithSite,InterfaceList<Windows::Internal::Storage::IItemCommand,InterfaceList<Windows::UI::Xaml::Input::ICommand,InterfaceList<Windows::UI::Popups::IUICommandInvokedHandler,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<ICommandInvokeContext,InterfaceList<ICurrentItem,Nil> > > > > > > >,RuntimeClassFlags<3>,1,1,0> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClass<InterfaceList<IObjectWithItem,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<IItemEventSink,InterfaceList<Windows::Internal::Storage::IItemCommandServices,InterfaceList<Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Nil,Nil,Nil,Nil,Nil>,InterfaceList<CWRLObjectWithSite,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0> >(RuntimeClass<InterfaceList<IObjectWithItem,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<IItemEventSink,InterfaceList<Windows::Internal::Storage::IItemCommandServices,InterfaceList<Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Nil,Nil,Nil,Nil,Nil>,InterfaceList<CWRLObjectWithSite,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClass<InterfaceList<Windows::UI::Xaml::Interop::IBindableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableObservableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableIterable,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0> >(RuntimeClass<InterfaceList<Windows::UI::Xaml::Interop::IBindableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableObservableVector,InterfaceList<Windows::UI::Xaml::Interop::IBindableIterable,InterfaceList<Windows::UI::Xaml::Data::ICustomPropertyProvider,InterfaceList<Windows::Internal::Storage::IPropertyValueProvider,InterfaceList<Windows::Internal::Storage::ISetCustomPropertyProvider,InterfaceList<Windows::UI::Xaml::Data::INotifyPropertyChanged,InterfaceList<IObjectWithItemCollection,InterfaceList<Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Nil,Nil,Nil>,Nil> > > > > > > > >,RuntimeClassFlags<3>,1,1,0> *,unsigned long *,_GUID * *);
			};

			struct WeakReferenceImpl
			{
				WeakReferenceImpl(IUnknown *);
				virtual long Resolve(_GUID const &,IInspectable * *);
			};

			ComPtr<CCachedFolderPath> Make<CCachedFolderPath>();
			ComPtr<CCreateObjectHandler> Make<CCreateObjectHandler>();
			ComPtr<CDefaultRegistry> Make<CDefaultRegistry>();
			ComPtr<CDesktopGadget> Make<CDesktopGadget>();
			ComPtr<CDispatchNotification<<lambda_6d63b24307e8dbf56959c6fde0623a82> > > Make<CDispatchNotification<<lambda_6d63b24307e8dbf56959c6fde0623a82> >,<lambda_6d63b24307e8dbf56959c6fde0623a82> const &>(<lambda_6d63b24307e8dbf56959c6fde0623a82> const &);
			ComPtr<CFakeStreamForReadProbe> Make<CFakeStreamForReadProbe>();
			ComPtr<CImmersiveContextMenuOwnerDrawHelper> Make<CImmersiveContextMenuOwnerDrawHelper>();
			ComPtr<CImmersiveWindowFactory> Make<CImmersiveWindowFactory>();
			ComPtr<CPostBootReminder> Make<CPostBootReminder>();
			ComPtr<CQueryWithLinguisticAlternatives> Make<CQueryWithLinguisticAlternatives>();
			ComPtr<CTypeAheadSearchHistorySettings> Make<CTypeAheadSearchHistorySettings>();
			ComPtr<CWakeUI> Make<CWakeUI>();
			ComPtr<Details::InvokeHelper<IPopupCommandHandler,<lambda_49c7f639766ab656496bc5e729e619cf>,2> > Make<InvokeHelper<IPopupCommandHandler,<lambda_49c7f639766ab656496bc5e729e619cf>,2>,<lambda_49c7f639766ab656496bc5e729e619cf> &>(<lambda_49c7f639766ab656496bc5e729e619cf> &);
			ComPtr<Details::InvokeHelper<IPopupCommandHandler,<lambda_bb81e7d87a56f633b918a54073d82a03>,2> > Make<InvokeHelper<IPopupCommandHandler,<lambda_bb81e7d87a56f633b918a54073d82a03>,2>,<lambda_bb81e7d87a56f633b918a54073d82a03> &>(<lambda_bb81e7d87a56f633b918a54073d82a03> &);
			ComPtr<Details::InvokeHelper<IPopupCommandHandler,<lambda_c79e6e0b4a227b8baeade6c57fcf2c18>,2> > Make<InvokeHelper<IPopupCommandHandler,<lambda_c79e6e0b4a227b8baeade6c57fcf2c18>,2>,<lambda_c79e6e0b4a227b8baeade6c57fcf2c18> &>(<lambda_c79e6e0b4a227b8baeade6c57fcf2c18> &);
			ComPtr<SystemSettings::Environment::NetworkUXManagerClient> Make<SystemSettings::Environment::NetworkUXManagerClient>();
			ComPtr<SystemSettings::Environment::SettingsEnvironmentImpl> Make<SystemSettings::Environment::SettingsEnvironmentImpl>();
			ComPtr<Windows::Internal::ComTaskPool::CDelayedTaskLifetime> Make<Windows::Internal::ComTaskPool::CDelayedTaskLifetime>();
			ComPtr<Windows::Internal::ComTaskPool::CTaskWrapper<<lambda_43d501189a5ee336f4416eeede688869> &> > Make<Windows::Internal::ComTaskPool::CTaskWrapper<<lambda_43d501189a5ee336f4416eeede688869> &>,<lambda_43d501189a5ee336f4416eeede688869> &>(<lambda_43d501189a5ee336f4416eeede688869> &);
			Details::WeakReferenceImpl * CreateWeakReference(IUnknown *);
			bool TerminateMap(Details::ModuleBase *,unsigned short const *,bool);
			long CreateActivationFactory<CApplicationUsageProvider>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<CEnlightenmentPromptHelpers>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<CObservableObjectFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<SimpleSealedActivationFactory<CObservableItem,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<SimpleSealedActivationFactory<CObservableItemCollection,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CApplicationTileInformation,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CByValueConfirmationInterrupt,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CByValueSingleConflictInterrupt,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CCreateObjectTaskDelegate,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CCreateObjectTaskServer,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CDefaultAssociationsProfileHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CErrorOverlayHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CErrorResolutionVerb,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CExecuteAppIDAndActivationContext,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CExecuteTypeDelegator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CExecuteVerbOnProperty,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CExtrinsicPropertyStore,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CFileInUsePLMResolver,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CFilePlaceholder,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CFilePlaceholderThumbnailHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CLinguisticAlternativeGenerator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CMakeAvailableOfflineVerb,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CMakeAvailableOnlineVerb,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<COpenDefaultLocationCommand,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPackageInformation,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPackageInstallStateStore,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPackageInstallStateStoreEnum,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPauseSyncVerb,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPinnedPeopleList,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPremiumBitLockerVisibilityCondition,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPropertyThumbnailHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CQueryWithLinguisticAlternatives,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CRefreshSyncStateVerb,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CResetEASPolicyVisibilityCondition,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSkyDriveNetworkStatesSSO,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CStorageProviderInfo,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSyncRootManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSyncRootsProfileNotificationHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSyncingOverlayHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CTypedDataThumbnailHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CUnpauseSyncVerb,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CWebBrowserUtils,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<LaunchSettingsPageHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<LowDiskNotificationActivationCallback,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PropertySheetHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<StartPinUnpinContextMenu,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<UserPinnedTileManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long GetActivationFactory<5>(Details::ModuleBase *,unsigned short const *,HSTRING__ *,IActivationFactory * *);
			long MakeAndInitialize<ActivityTracker,IActivityTracker,IAppRankProvider * &>(IActivityTracker * *,IAppRankProvider * &);
			long MakeAndInitialize<AppsFolderManager,IAppsFolderManager>(IAppsFolderManager * *);
			long MakeAndInitialize<CAppEnumFilter,IAppResolverEnumFilter>(IAppResolverEnumFilter * *);
			long MakeAndInitialize<CAppInfoEnumerator,IAppInfoEnumerator,CCacheInstance * const &>(IAppInfoEnumerator * *,CCacheInstance * const &);
			long MakeAndInitialize<CAppResolverExclusionFilter,IAppResolverExclusionFilter>(IAppResolverExclusionFilter * *);
			long MakeAndInitialize<CApplicationTileInformation,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CApplicationUsage,Windows::Internal::ApplicationDefaults::IApplicationUsage,HSTRING__ * &>(Windows::Internal::ApplicationDefaults::IApplicationUsage * *,HSTRING__ * &);
			long MakeAndInitialize<CByValueConfirmationInterrupt,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CByValueSingleConflictInterrupt,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CCreateObjectTaskDelegate,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CCreateObjectTaskServer,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CDefaultAssociationsProfileHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CDeferredCollectionSink,CDeferredCollectionSink,IItemCollection * &,IUnknown * &>(CDeferredCollectionSink * *,IItemCollection * &,IUnknown * &);
			long MakeAndInitialize<CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CDisplayInfo,IDisplayInfo,void const * &,CCacheTile const * &>(IDisplayInfo * *,void const * &,CCacheTile const * &);
			long MakeAndInitialize<CDummyRowsetListener,IRowsetEvents>(IRowsetEvents * *);
			long MakeAndInitialize<CErrorOverlayHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CErrorResolutionVerb,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CExecuteAppIDAndActivationContext,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CExecuteTypeDelegator,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CExecuteVerbOnProperty,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CExtrinsicPropertyStore,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CFileInUsePLMResolver,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CFilePlaceholder,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CFilePlaceholderCallbackCrashDetector,CFilePlaceholderCallbackCrashDetector,IFilePlaceholderCallback * &>(CFilePlaceholderCallbackCrashDetector * *,IFilePlaceholderCallback * &);
			long MakeAndInitialize<CFilePlaceholderRemoteStream,CFilePlaceholderRemoteStream,IFilePlaceholderStreamResolver * &,IFilePlaceholderCallback * &,unsigned __int64 &>(CFilePlaceholderRemoteStream * *,IFilePlaceholderStreamResolver * &,IFilePlaceholderCallback * &,unsigned __int64 &);
			long MakeAndInitialize<CFilePlaceholderThumbnailCallback,CFilePlaceholderThumbnailCallback>(CFilePlaceholderThumbnailCallback * *);
			long MakeAndInitialize<CFilePlaceholderThumbnailHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CItemCollectionSink,CItemCollectionSink,void * const &>(CItemCollectionSink * *,void * const &);
			long MakeAndInitialize<CItemCommand,Windows::Internal::Storage::IItemCommand,bool &,IShellItem * &,IContextMenu * &,unsigned int const &,unsigned short (&)[80],unsigned short (&)[260],Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,unsigned int &>(Windows::Internal::Storage::IItemCommand * *,bool &,IShellItem * &,IContextMenu * &,unsigned int const &,unsigned short (&)[80],unsigned short (&)[260],Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,unsigned int &);
			long MakeAndInitialize<CLaunchActivatedEventArgs,CLaunchActivatedEventArgs,HSTRING__ * &,HSTRING__ * &>(CLaunchActivatedEventArgs * *,HSTRING__ * &,HSTRING__ * &);
			long MakeAndInitialize<CLauncherOptions,Windows::System::ILauncherOptions,Windows::Foundation::Point &,tagRECT &>(Details::ComPtrRef<ComPtr<Windows::System::ILauncherOptions> >,Windows::Foundation::Point &,tagRECT &);
			long MakeAndInitialize<CLauncherOptions,Windows::System::ILauncherOptions,Windows::Foundation::Point &,tagRECT &>(Windows::System::ILauncherOptions * *,Windows::Foundation::Point &,tagRECT &);
			long MakeAndInitialize<CLinguisticAlternativeGenerator,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CLocationFolderUI,IShellFolder,_ITEMIDLIST_ABSOLUTE const * &,IShellItem * &>(IShellFolder * *,_ITEMIDLIST_ABSOLUTE const * &,IShellItem * &);
			long MakeAndInitialize<CMakeAvailableOfflineVerb,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CMakeAvailableOnlineVerb,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CMarshaledInterface::CMarshalStream,CMarshaledInterface::CMarshalStream,IStream * &>(CMarshaledInterface::CMarshalStream * *,IStream * &);
			long MakeAndInitialize<CNestableFilePlaceholderCallback,CNestableFilePlaceholderCallback,IFilePlaceholderCallback * &>(CNestableFilePlaceholderCallback * *,IFilePlaceholderCallback * &);
			long MakeAndInitialize<CNestableFilePlaceholderCallback,CNestableFilePlaceholderCallback,IFilePlaceholderCallback * &>(Details::ComPtrRef<ComPtr<CNestableFilePlaceholderCallback> >,IFilePlaceholderCallback * &);
			long MakeAndInitialize<CNotificationDispatcher,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CObservableItemCollection,IInspectable>(IInspectable * *);
			long MakeAndInitialize<CObservableItemCollection,IObjectWithItemCollection>(IObjectWithItemCollection * *);
			long MakeAndInitialize<CObservableObjectFactory,CObservableObjectFactory>(CObservableObjectFactory * *);
			long MakeAndInitialize<COpenDefaultLocationCommand,IUnknown>(IUnknown * *);
			long MakeAndInitialize<COpenWithTypeOverride,IServiceProvider,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,IUnknown * &>(IServiceProvider * *,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,IUnknown * &);
			long MakeAndInitialize<CPCSettingsFolder,IShellFolder>(IShellFolder * *);
			long MakeAndInitialize<CPackageInformation,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CPackageInstallStateStore,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CPackageInstallStateStoreEnum,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CPauseSyncVerb,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CPinnedPeopleList,CPinnedPeopleList>(CPinnedPeopleList * *);
			long MakeAndInitialize<CPinnedPeopleList,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CPremiumBitLockerVisibilityCondition,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CPropertyChangedEventArgs,CPropertyChangedEventArgs,unsigned short const (&)[1]>(CPropertyChangedEventArgs * *,unsigned short const (&)[1]);
			long MakeAndInitialize<CPropertyChangedEventArgs,CPropertyChangedEventArgs,unsigned short const * &>(CPropertyChangedEventArgs * *,unsigned short const * &);
			long MakeAndInitialize<CPropertyThumbnailHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CQueryWithLinguisticAlternatives,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CRefreshSyncStateVerb,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CResetEASPolicyVisibilityCondition,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CShortcutInfo,IShortcutInfo,void const * &,CCacheShortcut * &>(IShortcutInfo * *,void const * &,CCacheShortcut * &);
			long MakeAndInitialize<CShortcutInfo,IShortcutInfo,void const * &,CCacheShortcut const * &>(IShortcutInfo * *,void const * &,CCacheShortcut const * &);
			long MakeAndInitialize<CSimpleItemResources,IShellItemResources,IShellItem * &,IBindCtx * &,IInternetSecurityManager * &>(IShellItemResources * *,IShellItem * &,IBindCtx * &,IInternetSecurityManager * &);
			long MakeAndInitialize<CSkyDriveNetworkStatesSSO,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CStorageProviderInfo,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CSyncIntegrationManager,CSyncIntegrationManager>(CSyncIntegrationManager * *);
			long MakeAndInitialize<CSyncRootsProfileNotificationHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CSyncStatusProviderInfo,ISyncStatusProviderInfo,_GUID const &,HKEY__ * &,ISyncStatusProvider * &>(ISyncStatusProviderInfo * *,_GUID const &,HKEY__ * &,ISyncStatusProvider * &);
			long MakeAndInitialize<CSyncingOverlayHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CTransferFallback,ITransferDestination,IShellItem * &>(ITransferDestination * *,IShellItem * &);
			long MakeAndInitialize<CTypedDataThumbnailHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CUnpauseSyncVerb,IUnknown>(IUnknown * *);
			long MakeAndInitialize<CUsersLibrariesFolderUI,CUsersLibrariesFolderUI,IShellFolder * &,_ITEMIDLIST_ABSOLUTE const * &>(CUsersLibrariesFolderUI * *,IShellFolder * &,_ITEMIDLIST_ABSOLUTE const * &);
			long MakeAndInitialize<CWebBrowserUtils,IUnknown>(IUnknown * *);
			long MakeAndInitialize<DesktopAppRankProvider,IAppRankProvider>(IAppRankProvider * *);
			long MakeAndInitialize<EventTargetArray,EventTargetArray,unsigned __int64 &>(Details::EventTargetArray * *,unsigned __int64 &);
			long MakeAndInitialize<ImmersivePlacesReader,IImmersivePlacesReader>(IImmersivePlacesReader * *);
			long MakeAndInitialize<JumpListProvider,IJumpListProvider>(IJumpListProvider * *);
			long MakeAndInitialize<LaunchSettingsPageHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<LowDiskNotificationActivationCallback,IUnknown>(IUnknown * *);
			long MakeAndInitialize<PropertySheetHandler,IUnknown>(IUnknown * *);
			long MakeAndInitialize<SimpleClassFactory<CApplicationTileInformation,0>,SimpleClassFactory<CApplicationTileInformation,0> >(SimpleClassFactory<CApplicationTileInformation,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CByValueConfirmationInterrupt,0>,SimpleClassFactory<CByValueConfirmationInterrupt,0> >(SimpleClassFactory<CByValueConfirmationInterrupt,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CByValueSingleConflictInterrupt,0>,SimpleClassFactory<CByValueSingleConflictInterrupt,0> >(SimpleClassFactory<CByValueSingleConflictInterrupt,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CCreateObjectTaskDelegate,0>,SimpleClassFactory<CCreateObjectTaskDelegate,0> >(SimpleClassFactory<CCreateObjectTaskDelegate,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CCreateObjectTaskServer,0>,SimpleClassFactory<CCreateObjectTaskServer,0> >(SimpleClassFactory<CCreateObjectTaskServer,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CDefaultAssociationsProfileHandler,0>,SimpleClassFactory<CDefaultAssociationsProfileHandler,0> >(SimpleClassFactory<CDefaultAssociationsProfileHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition,0>,SimpleClassFactory<CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition,0> >(SimpleClassFactory<CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition,0>,SimpleClassFactory<CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition,0> >(SimpleClassFactory<CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CErrorOverlayHandler,0>,SimpleClassFactory<CErrorOverlayHandler,0> >(SimpleClassFactory<CErrorOverlayHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CErrorResolutionVerb,0>,SimpleClassFactory<CErrorResolutionVerb,0> >(SimpleClassFactory<CErrorResolutionVerb,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CExecuteAppIDAndActivationContext,0>,SimpleClassFactory<CExecuteAppIDAndActivationContext,0> >(SimpleClassFactory<CExecuteAppIDAndActivationContext,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CExecuteTypeDelegator,0>,SimpleClassFactory<CExecuteTypeDelegator,0> >(SimpleClassFactory<CExecuteTypeDelegator,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CExecuteVerbOnProperty,0>,SimpleClassFactory<CExecuteVerbOnProperty,0> >(SimpleClassFactory<CExecuteVerbOnProperty,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CExtrinsicPropertyStore,0>,SimpleClassFactory<CExtrinsicPropertyStore,0> >(SimpleClassFactory<CExtrinsicPropertyStore,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CFileInUsePLMResolver,0>,SimpleClassFactory<CFileInUsePLMResolver,0> >(SimpleClassFactory<CFileInUsePLMResolver,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CFilePlaceholder,0>,SimpleClassFactory<CFilePlaceholder,0> >(SimpleClassFactory<CFilePlaceholder,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CFilePlaceholderThumbnailHandler,0>,SimpleClassFactory<CFilePlaceholderThumbnailHandler,0> >(SimpleClassFactory<CFilePlaceholderThumbnailHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CLinguisticAlternativeGenerator,0>,SimpleClassFactory<CLinguisticAlternativeGenerator,0> >(SimpleClassFactory<CLinguisticAlternativeGenerator,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CMakeAvailableOfflineVerb,0>,SimpleClassFactory<CMakeAvailableOfflineVerb,0> >(SimpleClassFactory<CMakeAvailableOfflineVerb,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CMakeAvailableOnlineVerb,0>,SimpleClassFactory<CMakeAvailableOnlineVerb,0> >(SimpleClassFactory<CMakeAvailableOnlineVerb,0> * *);
			long MakeAndInitialize<SimpleClassFactory<COpenDefaultLocationCommand,0>,SimpleClassFactory<COpenDefaultLocationCommand,0> >(SimpleClassFactory<COpenDefaultLocationCommand,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CPackageInformation,0>,SimpleClassFactory<CPackageInformation,0> >(SimpleClassFactory<CPackageInformation,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CPackageInstallStateStore,0>,SimpleClassFactory<CPackageInstallStateStore,0> >(SimpleClassFactory<CPackageInstallStateStore,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CPackageInstallStateStoreEnum,0>,SimpleClassFactory<CPackageInstallStateStoreEnum,0> >(SimpleClassFactory<CPackageInstallStateStoreEnum,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CPauseSyncVerb,0>,SimpleClassFactory<CPauseSyncVerb,0> >(SimpleClassFactory<CPauseSyncVerb,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CPinnedPeopleList,0>,SimpleClassFactory<CPinnedPeopleList,0> >(SimpleClassFactory<CPinnedPeopleList,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CPremiumBitLockerVisibilityCondition,0>,SimpleClassFactory<CPremiumBitLockerVisibilityCondition,0> >(SimpleClassFactory<CPremiumBitLockerVisibilityCondition,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CPropertyThumbnailHandler,0>,SimpleClassFactory<CPropertyThumbnailHandler,0> >(SimpleClassFactory<CPropertyThumbnailHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CQueryWithLinguisticAlternatives,0>,SimpleClassFactory<CQueryWithLinguisticAlternatives,0> >(SimpleClassFactory<CQueryWithLinguisticAlternatives,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CRefreshSyncStateVerb,0>,SimpleClassFactory<CRefreshSyncStateVerb,0> >(SimpleClassFactory<CRefreshSyncStateVerb,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CResetEASPolicyVisibilityCondition,0>,SimpleClassFactory<CResetEASPolicyVisibilityCondition,0> >(SimpleClassFactory<CResetEASPolicyVisibilityCondition,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CSkyDriveNetworkStatesSSO,0>,SimpleClassFactory<CSkyDriveNetworkStatesSSO,0> >(SimpleClassFactory<CSkyDriveNetworkStatesSSO,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CStorageProviderInfo,0>,SimpleClassFactory<CStorageProviderInfo,0> >(SimpleClassFactory<CStorageProviderInfo,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CSyncRootsProfileNotificationHandler,0>,SimpleClassFactory<CSyncRootsProfileNotificationHandler,0> >(SimpleClassFactory<CSyncRootsProfileNotificationHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CSyncingOverlayHandler,0>,SimpleClassFactory<CSyncingOverlayHandler,0> >(SimpleClassFactory<CSyncingOverlayHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CTypedDataThumbnailHandler,0>,SimpleClassFactory<CTypedDataThumbnailHandler,0> >(SimpleClassFactory<CTypedDataThumbnailHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CUnpauseSyncVerb,0>,SimpleClassFactory<CUnpauseSyncVerb,0> >(SimpleClassFactory<CUnpauseSyncVerb,0> * *);
			long MakeAndInitialize<SimpleClassFactory<CWebBrowserUtils,0>,SimpleClassFactory<CWebBrowserUtils,0> >(SimpleClassFactory<CWebBrowserUtils,0> * *);
			long MakeAndInitialize<SimpleClassFactory<LaunchSettingsPageHandler,0>,SimpleClassFactory<LaunchSettingsPageHandler,0> >(SimpleClassFactory<LaunchSettingsPageHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<LowDiskNotificationActivationCallback,0>,SimpleClassFactory<LowDiskNotificationActivationCallback,0> >(SimpleClassFactory<LowDiskNotificationActivationCallback,0> * *);
			long MakeAndInitialize<SimpleClassFactory<PropertySheetHandler,0>,SimpleClassFactory<PropertySheetHandler,0> >(SimpleClassFactory<PropertySheetHandler,0> * *);
			long MakeAndInitialize<SimpleClassFactory<StartPinUnpinContextMenu,0>,SimpleClassFactory<StartPinUnpinContextMenu,0> >(SimpleClassFactory<StartPinUnpinContextMenu,0> * *);
			long MakeAndInitialize<SimpleClassFactory<UserPinnedTileManager,0>,SimpleClassFactory<UserPinnedTileManager,0> >(SimpleClassFactory<UserPinnedTileManager,0> * *);
			long MakeAndInitialize<StartPinUnpinContextMenu,IUnknown>(IUnknown * *);
			long MakeAndInitialize<StartPinUnpinContextMenu,StartPinUnpinContextMenu>(StartPinUnpinContextMenu * *);
			long MakeAndInitialize<TaskbarPinListManager,ITaskbarPinListManager>(ITaskbarPinListManager * *);
			long MakeAndInitialize<TileDataLayerAppResolverReconciler,ITileDataLayerAppResolverReconciler,ITileDataLayerProvider * &,IImmersivePlacesReader * &,IAppRankProvider * &,ITileDataLayerListener * &,ITaskbarPinListManager * &,IAppsFolderManager * &,IJumpListProvider * &,IProgramTrackingProvider * &,IViewPinUnpinController * &>(ITileDataLayerAppResolverReconciler * *,ITileDataLayerProvider * &,IImmersivePlacesReader * &,IAppRankProvider * &,ITileDataLayerListener * &,ITaskbarPinListManager * &,IAppsFolderManager * &,IJumpListProvider * &,IProgramTrackingProvider * &,IViewPinUnpinController * &);
			long MakeAndInitialize<TileDataLayerListener,ITileDataLayerListener,ITileDataLayerProvider * &>(ITileDataLayerListener * *,ITileDataLayerProvider * &);
			long MakeAndInitialize<TileDataLayerLookup,ITileDataLayerLookup,ITileDataLayerProvider * &,_GUID &>(ITileDataLayerLookup * *,ITileDataLayerProvider * &,_GUID &);
			long MakeAndInitialize<UserPinnedTileManager,IUnknown>(IUnknown * *);
			long MakeAndInitialize<Windows::Internal::ComTaskPool::CRemoteTask,Windows::Internal::ComTaskPool::CRemoteTask,Windows::Internal::IComPoolTask * &>(Windows::Internal::ComTaskPool::CRemoteTask * *,Windows::Internal::IComPoolTask * &);
			long MakeAndInitialize<Windows::Shell::SyncStatus::CCacheEntry,ISyncStatusCacheEntry,IShellItem * &,IPropertyStore * &>(ISyncStatusCacheEntry * *,IShellItem * &,IPropertyStore * &);
			long MakeAndInitialize<wil::FileSystemBindData,IFileSystemBindData2,_WIN32_FIND_DATAW const &>(IFileSystemBindData2 * *,_WIN32_FIND_DATAW const &);
		};

		class EventSource<Windows::Foundation::IEventHandler<IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::IEventHandler<IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::UI::Xaml::Data::IPropertyChangedEventHandler,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::UI::Xaml::Data::IPropertyChangedEventHandler *,void *,EventRegistrationToken *);
		public:
			EventSource<Windows::UI::Xaml::Data::IPropertyChangedEventHandler,InvokeModeOptions<-2> >();
			long InvokeAll<Windows::UI::Xaml::Data::ICustomPropertyProvider *,CPropertyChangedEventArgs *>(Windows::UI::Xaml::Data::ICustomPropertyProvider *,CPropertyChangedEventArgs *);
			long InvokeAll<Windows::UI::Xaml::Data::INotifyPropertyChanged *,CPropertyChangedEventArgs *>(Windows::UI::Xaml::Data::INotifyPropertyChanged *,CPropertyChangedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<CObservableItemCollection *,CObservableItemCollectionVectorChangedEventArgs *>(CObservableItemCollection *,CObservableItemCollectionVectorChangedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class FtmBase
		{
		protected:
			long CanCastTo(_GUID const &,void * *);
		public:
			FtmBase();
			virtual long DisconnectObject(unsigned long);
			virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
			virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
			virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
			virtual long ReleaseMarshalData(IStream *);
			virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
		};

		struct InvokeTraits<-2>
		{
			static long InvokeDelegates<<lambda_9a4a0b3d9ecee864fe9d375582018be0>,Windows::UI::Xaml::Data::IPropertyChangedEventHandler>(<lambda_9a4a0b3d9ecee864fe9d375582018be0>,Details::EventTargetArray *,EventSource<Windows::UI::Xaml::Data::IPropertyChangedEventHandler,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_fdf3a51bcd1d388b2fb684eb4d78836c>,Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler>(<lambda_fdf3a51bcd1d388b2fb684eb4d78836c>,Details::EventTargetArray *,EventSource<Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_ff07f874c66ed46ef0ded51938113a31>,Windows::UI::Xaml::Data::IPropertyChangedEventHandler>(<lambda_ff07f874c66ed46ef0ded51938113a31>,Details::EventTargetArray *,EventSource<Windows::UI::Xaml::Data::IPropertyChangedEventHandler,InvokeModeOptions<-2> > *);
		};

		class Module<1,Details::DefaultModule<5> >
		{
			static bool StaticInitialize();
			static bool isInitialized;
		public:
			static Details::DefaultModule<5> & Create();
			virtual long RegisterCOMObject(unsigned short const *,_GUID *,IClassFactory * *,unsigned long *,unsigned int);
			virtual long RegisterWinRTObject(unsigned short const *,unsigned short const * *,<unnamed-type-RO_REGISTRATION_COOKIE> * *,unsigned int);
			virtual long UnregisterCOMObject(unsigned short const *,unsigned long *,unsigned int);
			virtual long UnregisterWinRTObject(unsigned short const *,<unnamed-type-RO_REGISTRATION_COOKIE> *);
			virtual unsigned long DecrementObjectCount();
			virtual unsigned long IncrementObjectCount();
			virtual ~Module<1,Details::DefaultModule<5> >();
		};

		struct RuntimeClass<CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CAvailabilityVerbBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,CAvailabilityVerbBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CBaseOverlayHandler,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,CBaseOverlayHandler,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CByValueOperationInterrupt,IConfirmationInterrupt,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,CByValueOperationInterrupt,IConfirmationInterrupt,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CByValueOperationInterrupt,IConflictInterrupt,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,CByValueOperationInterrupt,IConflictInterrupt,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CNotificationDispatcherBase,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,CNotificationDispatcherBase,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CSyncRootCommandStateBase,CWRLExecuteCommandBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,CSyncRootCommandStateBase,CWRLExecuteCommandBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CSyncStateTogglePause,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,CSyncStateTogglePause,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,IShouldSwitchToDesktop,ILayoutPreferencesOnAppLaunch,IExecuteCommandHost,ILocalCopyDownloadSettings,IWakeOnRPCCalls,ILaunchTargetMonitor,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,IShouldSwitchToDesktop,ILayoutPreferencesOnAppLaunch,IExecuteCommandHost,ILocalCopyDownloadSettings,IWakeOnRPCCalls,ILaunchTargetMonitor,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ChainInterfaces<IShellFolder2,IShellFolder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IPersistPropertyBag,IContextMenuCB,ChainInterfaces<IPersistPropertyBag,IPersist,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IPersistFolder2,IPersistFolder,IPersist,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IThumbnailHandlerFactory,CWRLObjectWithSite,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,ChainInterfaces<IShellFolder2,IShellFolder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IPersistPropertyBag,IContextMenuCB,ChainInterfaces<IPersistPropertyBag,IPersist,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IPersistFolder2,IPersistFolder,IPersist,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IThumbnailHandlerFactory,CWRLObjectWithSite,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,ITileDataLayerAppResolverReconciler,ITileDataLayerFindTile,IWin32TileDataLayerTranslator,IAppResolverRankEventSink,ITileDataLayerListenerEventSink,IAppResolverPromotion,IDisableConcurrencyForTest,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,ITileDataLayerAppResolverReconciler,ITileDataLayerFindTile,IWin32TileDataLayerTranslator,IAppResolverRankEventSink,ITileDataLayerListenerEventSink,IAppResolverPromotion,IDisableConcurrencyForTest,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ICollectionEventSink,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,ICollectionEventSink,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IControlPanelVisibilityCondition,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IControlPanelVisibilityCondition,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IDispatchNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IDispatchNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IFilePlaceholderCallback,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IFilePlaceholderCallback,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IInitializeCommand,CWRLExecuteCommandBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IInitializeCommand,CWRLExecuteCommandBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IPopupCommand,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IPopupCommand,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IPopupCommandHandler,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IPopupCommandHandler,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IProfileNotify,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IProfileNotify,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IShellFolder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IShellFolder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IUnknown,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,IUnknown,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,SystemSettings::Environment::INetworkUXManagerClient,Windows::Networking::UX::IUXCategoryEventHandler,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,SystemSettings::Environment::INetworkUXManagerClient,Windows::Networking::UX::IUXCategoryEventHandler,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CWRLObjectWithSite,Windows::Internal::Storage::IItemCommand,Windows::UI::Xaml::Input::ICommand,Windows::UI::Popups::IUICommandInvokedHandler,Windows::UI::Xaml::Data::ICustomPropertyProvider,Windows::Internal::Storage::IPropertyValueProvider,ICommandInvokeContext,ICurrentItem,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<3>,CWRLObjectWithSite,Windows::Internal::Storage::IItemCommand,Windows::UI::Xaml::Input::ICommand,Windows::UI::Popups::IUICommandInvokedHandler,Windows::UI::Xaml::Data::ICustomPropertyProvider,Windows::Internal::Storage::IPropertyValueProvider,ICommandInvokeContext,ICurrentItem,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IObjectWithItem,Windows::Internal::Storage::ISetCustomPropertyProvider,Windows::UI::Xaml::Data::ICustomPropertyProvider,Windows::UI::Xaml::Data::INotifyPropertyChanged,Windows::Internal::Storage::IPropertyValueProvider,IItemEventSink,Windows::Internal::Storage::IItemCommandServices,Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,CWRLObjectWithSite>
		{
			RuntimeClass<RuntimeClassFlags<3>,IObjectWithItem,Windows::Internal::Storage::ISetCustomPropertyProvider,Windows::UI::Xaml::Data::ICustomPropertyProvider,Windows::UI::Xaml::Data::INotifyPropertyChanged,Windows::Internal::Storage::IPropertyValueProvider,IItemEventSink,Windows::Internal::Storage::IItemCommandServices,Implements<RuntimeClassFlags<3>,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IBindingPhaseHandler,IItemImageInfo,IObjectWithWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,CWRLObjectWithSite>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::System::ILauncherOptions,Windows::System::ILauncherOptions2,Windows::System::ILauncherOptions3,Windows::System::ILauncherViewOptions,CWRLObjectWithGITSite,CloakedIid<IServiceProvider>,FtmBase,Details::Nil,Details::Nil>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::System::ILauncherOptions,Windows::System::ILauncherOptions2,Windows::System::ILauncherOptions3,Windows::System::ILauncherViewOptions,CWRLObjectWithGITSite,CloakedIid<IServiceProvider>,FtmBase,Details::Nil,Details::Nil>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::UI::Xaml::Interop::IBindableVector,Windows::UI::Xaml::Interop::IBindableObservableVector,Windows::UI::Xaml::Interop::IBindableIterable,Windows::UI::Xaml::Data::ICustomPropertyProvider,Windows::Internal::Storage::IPropertyValueProvider,Windows::Internal::Storage::ISetCustomPropertyProvider,Windows::UI::Xaml::Data::INotifyPropertyChanged,IObjectWithItemCollection,Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::UI::Xaml::Interop::IBindableVector,Windows::UI::Xaml::Interop::IBindableObservableVector,Windows::UI::Xaml::Interop::IBindableIterable,Windows::UI::Xaml::Data::ICustomPropertyProvider,Windows::Internal::Storage::IPropertyValueProvider,Windows::Internal::Storage::ISetCustomPropertyProvider,Windows::UI::Xaml::Data::INotifyPropertyChanged,IObjectWithItemCollection,Implements<RuntimeClassFlags<3>,IAsyncResetTaskCallback,ICollectionEventSink,Windows::Internal::Storage::ISetItemValueProvider,Windows::Internal::Storage::IVirtualizedVector,IObjectWithWindow,CWRLObjectWithSite,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<SystemSettings::Environment::SettingsEnvironment,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			virtual ~RuntimeClass<SystemSettings::Environment::SettingsEnvironment,FtmBase,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct SimpleActivationFactory<CObservableItem,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleActivationFactory<CObservableItemCollection,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleClassFactory<CApplicationTileInformation,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CByValueConfirmationInterrupt,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CByValueSingleConflictInterrupt,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CCreateObjectTaskDelegate,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CCreateObjectTaskServer,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CDefaultAssociationsProfileHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CErrorOverlayHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CErrorResolutionVerb,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CExecuteAppIDAndActivationContext,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CExecuteTypeDelegator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CExecuteVerbOnProperty,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CExtrinsicPropertyStore,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CFileInUsePLMResolver,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CFilePlaceholder,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CFilePlaceholderThumbnailHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CLinguisticAlternativeGenerator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CMakeAvailableOfflineVerb,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CMakeAvailableOnlineVerb,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<COpenDefaultLocationCommand,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPackageInformation,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPackageInstallStateStore,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPackageInstallStateStoreEnum,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPauseSyncVerb,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPinnedPeopleList,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPremiumBitLockerVisibilityCondition,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPropertyThumbnailHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CQueryWithLinguisticAlternatives,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CRefreshSyncStateVerb,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CResetEASPolicyVisibilityCondition,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSkyDriveNetworkStatesSSO,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CStorageProviderInfo,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSyncRootManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSyncRootsProfileNotificationHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSyncingOverlayHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CTypedDataThumbnailHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CUnpauseSyncVerb,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CWebBrowserUtils,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<LaunchSettingsPageHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<LowDiskNotificationActivationCallback,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PropertySheetHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<StartPinUnpinContextMenu,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<UserPinnedTileManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		class WeakRef
		{
		protected:
			long InternalResolve(_GUID const &,IInspectable * *);
		public:
			WeakRef(ComPtr<IWeakReference> const &);
			WeakRef(WeakRef const &);
			long As<IInspectable>(Details::ComPtrRef<ComPtr<IInspectable> >);
			~WeakRef();
		};

		namespace Wrappers
		{
			class ClientDC
			{
			protected:
				virtual bool InternalClose();
			public:
				ClientDC(HWND__ *);
				~ClientDC();
			};

			class CompatibleDC
			{
			protected:
				virtual bool InternalClose();
			public:
				CompatibleDC(HDC__ *);
				~CompatibleDC();
			};

			struct CriticalSection
			{
				Details::SyncLockCriticalSection Lock();
				~CriticalSection();
			};

			namespace Details
			{
				class SyncLockCriticalSection
				{
					void InternalUnlock();
				public:
					~SyncLockCriticalSection();
				};

				struct SyncLockWithStatusT<HandleTraits::MutexTraits>
				{
					bool IsLocked();
				};

			};

			struct HString
			{
				long Set(unsigned short const *,unsigned int);
				long Set<unsigned short const *>(unsigned short const * const &,Details::Dummy);
				~HString();
			};

			class HStringReference
			{
				void CreateReference(unsigned short const *,unsigned int,unsigned int);
			public:
				HStringReference<unsigned short const *>(unsigned short const * const &,Details::Dummy);
				~HStringReference();
			};

			class HandleT<HandleTraits::ClientDCTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::CompatibleDCTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::HANDLENullTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::HBITMAPTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::MutexTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::RegistryKeyTraits>
			{
			protected:
				virtual bool InternalClose();
			public:
				~HandleT<HandleTraits::RegistryKeyTraits>();
			};

			struct Mutex
			{
				Details::SyncLockWithStatusT<HandleTraits::MutexTraits> Lock(unsigned long);
			};

			struct SRWLock
			{
				Details::SyncLockExclusive LockExclusive();
				Details::SyncLockShared LockShared();
				static Details::SyncLockExclusive LockExclusive(_RTL_SRWLOCK *);
				static Details::SyncLockShared LockShared(_RTL_SRWLOCK *);
			};

		};

		WRL::ComPtr<IPopupEventHandler> Callback<IPopupEventHandler,CWakeUI,IPopupWindow *>(CWakeUI *,long ( CWakeUI::*)(IPopupWindow *));
		WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *> > Callback<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,<lambda_ba2b01bd2281a90ee6a2f8ccf5318865> >(<lambda_ba2b01bd2281a90ee6a2f8ccf5318865>);
		WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *> > Callback<Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *>,<lambda_066c5a5fea02f2df6a12f0e4902f619d> >(<lambda_066c5a5fea02f2df6a12f0e4902f619d>);
		long AsAgile<IDataObject>(IDataObject *,WRL::AgileRef *);
		long AsAgile<IShellItem>(IShellItem *,WRL::AgileRef *);
		long AsWeak<CObservableItemCollection>(CObservableItemCollection *,WRL::WeakRef *);
		long AsWeak<IObjectWithItem>(IObjectWithItem *,WRL::WeakRef *);
		long AsWeak<SystemSettings::Environment::IEnvironmentChangedEventHandler>(SystemSettings::Environment::IEnvironmentChangedEventHandler *,WRL::WeakRef *);
		long AsWeak<SystemSettings::Environment::SettingsEnvironment>(SystemSettings::Environment::SettingsEnvironment *,WRL::WeakRef *);
		long AsWeak<Windows::UI::Xaml::Data::ICustomProperty>(Windows::UI::Xaml::Data::ICustomProperty *,WRL::WeakRef *);
	};

	namespace Windows
	{
		namespace FileExplorer
		{
			namespace Banners
			{
				class Banner
				{
					long SetBodyTextHeight(DirectUI::Element *);
					static bool s_isEnabled;
					static wil::srwlock s_srwLockShowBannersEnabled;
					void NotifyAndToggleContainerVisibility(BANNER_NOTIFICATION_EVENT,BannerVisibility);
					void UpdateImages();
				public:
					Banner();
					long UpdateLocation(IShellFolder *);
					static DirectUI::IClassInfo * Class;
					static bool CanShowBanners();
					static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
					tagSIZE GetPhysicalMinSize();
					virtual DirectUI::IClassInfo * GetClassInfoW();
					virtual void OnDestroy();
					virtual void OnEvent(DirectUI::Event *);
					virtual void OnInput(DirectUI::InputEvent *);
					virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
					void ClosePreviousBanner(BannerVisibility);
					void EnsureMinimumSpace(tagSIZE const *);
				};

				struct BannerContainer
				{
					BannerContainer();
					long SetVisible(bool);
					static DirectUI::IClassInfo * Class;
					static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
					virtual DirectUI::IClassInfo * GetClassInfoW();
					virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
					virtual long Close();
					virtual long CreateInnerObject(IUnknown * *);
					virtual long LayoutInitialized();
					virtual long Notify(unsigned short const *);
					virtual long OnInnerElementDestroyed();
					virtual long OnNavigateAway();
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
					virtual void OnEvent(DirectUI::Event *);
					virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
					virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
					virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
					virtual void OnListenerAttach(DirectUI::Element *);
					virtual void OnListenerDetach(DirectUI::Element *);
				};

				class BannerData
				{
					bool IsLocationValid(unsigned short const *,unsigned short const *);
					long GetHBitmapFromFilePath(unsigned short const *,HBITMAP__ * *);
					long GetHBitmapFromTargetedContentValue(ContentManagement::TargetedContent::ITargetedContentValue *,HBITMAP__ * *);
					long GetScaledHBitmap(HBITMAP__ *,tagSIZE,HBITMAP__ * *);
					long SendNotificationTask(BANNER_NOTIFICATION_EVENT);
					long UpdateSettings(BANNER_NOTIFICATION_EVENT);
					unsigned __int64 UpdatePendingNotifications(bool,BANNER_NOTIFICATION_EVENT);
					void CleanupOnInactive();
				public:
					BannerData();
					bool Matches(ISyncRootManager *,unsigned short const *,unsigned short const *);
					long GetBackgroundBitmap(tagSIZE,HBITMAP__ * *);
					long GetLogoBitmap(tagSIZE,HBITMAP__ * *);
					long Initialize(unsigned short const *,unsigned short const *,unsigned short const *);
					long InitializeFromContentId(unsigned short const *,unsigned short const *);
					long NotifyEvent(BANNER_NOTIFICATION_EVENT,bool);
					void SetPendingDeletion();
					~BannerData();
				};

				class BannerDataModel
				{
					long EnsureReady(unsigned long);
					long Find(unsigned short const *,unsigned short const *,BannerData * * const);
					long Initialize();
					static BannerDataModel * s_instance;
					static BannerSettings s_bannerSettings;
					static wil::srwlock s_srwLockInstance;
					void RefreshWindows();
					void TriggerDataModelRefresh();
					~BannerDataModel();
				protected:
					virtual void LoadSchema();
				public:
					long GetBannerDataForFolder(IShellFolder *,BannerData * * const);
					static BannerDataModel * GetInstance();
				};

				class BannerSettings
				{
					BannerSettings::BannerMetaData * Find(ScenarioType);
					long Persist(BannerSettings::BannerMetaData *,bool);
					long ResetPreviousBannerUpTime(ScenarioType,unsigned short const *);
				public:
					BannerSettings();
					bool CanShowBanner(ScenarioType,unsigned short const *);
					long Initialize();
					long OnBannerHide(ScenarioType,unsigned short const *,bool);
					long OnBannerShow(ScenarioType,unsigned short const *);
					~BannerSettings();
				};

			};

		};

	};

};

struct NULLABLESTRING
{
	NULLABLESTRING();
};

class NamespaceRestrictionHelper
{
	long EnsureManager();
	long GetKnownFolderIdFromItem(IShellItem *,_GUID *);
	long GetKnownFolderIdNearestMatch(IShellItem *,_GUID *);
	long GetRestrictionAccessHKEYOrAllow(unsigned short const *,bool *,HKEY__ * *);
	long ShouldAllowAccessToFolder(IShellItem *,HKEY__ * *,bool *);
	long ShouldAllowAccessToFolder(IShellItem *,unsigned short const *,bool *);
	long ShouldAllowAccessToKnownFolder(_GUID const *,HKEY__ * *,bool *);
	long ShouldAllowAccessToStorageLocation(IShellItem *,HKEY__ * *,bool *);
public:
	long ShouldEnumerateFolder(IShellItem *,bool *);
	long ShouldNavigateToFolder(IShellItem *,bool *);
};

struct NineBltter
{
	void Draw();
};

struct OFFSET<CCacheAppInfo>
{
	OFFSET<CCacheAppInfo>();
};

struct OFFSET<CCacheDir>
{
	OFFSET<CCacheDir>();
};

struct OFFSET<CCacheRoot>
{
	OFFSET<CCacheRoot>();
};

struct OFFSET<CCacheShortcut>
{
	OFFSET<CCacheShortcut>();
};

struct OFFSET<OFFSET<CCacheDir> >
{
	static void * NewImpl(unsigned __int64,IMemoryMappedHeap *,OFFSET<OFFSET<CCacheDir> > *);
};

struct OFFSET<OFFSET<CCacheRoot> >
{
	static void * NewImpl(unsigned __int64,IMemoryMappedHeap *,OFFSET<OFFSET<CCacheRoot> > *);
};

struct OFFSET<OFFSET<CCacheShortcut> >
{
	static void * NewImpl(unsigned __int64,IMemoryMappedHeap *,OFFSET<OFFSET<CCacheShortcut> > *);
};

struct OITEMIDLIST_RELATIVE
{
	static long AllocIDList(IMemoryMappedHeap *,_ITEMIDLIST_RELATIVE const *,OITEMIDLIST_RELATIVE *);
};

class OWSTR
{
	static long _AllocStringWorker(IMemoryMappedHeap *,unsigned short const *,unsigned __int64,OWSTR *,unsigned short * *);
};

struct ObjectArrayAdapter<ITaskbarLayoutItem>
{
	class Iterator
	{
		void GetCurrentObject();
	public:
		Iterator(ObjectArrayAdapter<ITaskbarLayoutItem> * const,unsigned int);
	};

	ObjectArrayAdapter<ITaskbarLayoutItem>(IObjectArray *);
};

namespace OneCoreDataHelpers
{
	class TileDataLayerProvider
	{
		bool IsInvalidPointer(IUnknown *);
	public:
		TileDataLayerProvider();
		virtual long GetTileManager(ITileManager * *);
		virtual long GetVisualElementEnumerator(IVisualElementEnumerator * *);
		virtual long GetVisualElementEventDispatcher(IVisualElementEventDispatcher * *);
	};

	long CreateStreamOnString(unsigned short const *,IStream * *);
	long EnumerateAllAppsListTiles<<lambda_43d8a5184736e531e034356788a1b4ac> >(IVisualElementEnumerator *,<lambda_43d8a5184736e531e034356788a1b4ac> const &);
	long EnumerateAllAppsListTiles<<lambda_4d27fd0cf7bc3e905b28d77494f8cd8d> >(IVisualElementEnumerator *,<lambda_4d27fd0cf7bc3e905b28d77494f8cd8d> const &);
	long EnumerateAllAppsListTiles<<lambda_acb9531b0fbb463677cd534835bb866b> >(IVisualElementEnumerator *,<lambda_acb9531b0fbb463677cd534835bb866b> const &);
	long EnumerateAllAppsListTiles<<lambda_c21f5a8691e0a4d92569f6dfdfce1235> >(IVisualElementEnumerator *,<lambda_c21f5a8691e0a4d92569f6dfdfce1235> const &);
	long EnumerateAllAppsListTiles<<lambda_d2dfeeb61a514b4f22c863ab0471c2cc> >(IVisualElementEnumerator *,<lambda_d2dfeeb61a514b4f22c863ab0471c2cc> const &);
	long EnumerateAllStartTiles<<lambda_18f3cbaba170ecf64f5b280701cf0e56> >(IVisualElementEnumerator *,<lambda_18f3cbaba170ecf64f5b280701cf0e56> const &);
	long EnumerateAllStartTiles<<lambda_5efa1543a0eb6d23393579a0325dfffd> >(IVisualElementEnumerator *,<lambda_5efa1543a0eb6d23393579a0325dfffd> const &);
	long EnumerateAllTiles<<lambda_0d9761b849a8fdf5798f25a75a6bd593> >(ITileInfoEnumerator *,<lambda_0d9761b849a8fdf5798f25a75a6bd593> const &);
	long EnumerateAllTiles<<lambda_0d9761b849a8fdf5798f25a75a6bd593> >(ITileViewInformation *,<lambda_0d9761b849a8fdf5798f25a75a6bd593> const &);
	long EnumerateAllTiles<<lambda_1008d8a18dafd1f74e39e39d9b6d78e0> >(ITileInfoEnumerator *,<lambda_1008d8a18dafd1f74e39e39d9b6d78e0> const &);
	long EnumerateAllTiles<<lambda_1008d8a18dafd1f74e39e39d9b6d78e0> >(ITileViewInformation *,<lambda_1008d8a18dafd1f74e39e39d9b6d78e0> const &);
	long EnumerateAllTiles<<lambda_2451d40bfeeb294434726b98cbb7ed6c> >(ITileInfoEnumerator *,<lambda_2451d40bfeeb294434726b98cbb7ed6c> const &);
	long EnumerateAllTiles<<lambda_2451d40bfeeb294434726b98cbb7ed6c> >(ITileViewInformation *,<lambda_2451d40bfeeb294434726b98cbb7ed6c> const &);
	long EnumerateAllTiles<<lambda_2698cd8b5c0383125260eb3aaa5e002a> >(ITileInfoEnumerator *,<lambda_2698cd8b5c0383125260eb3aaa5e002a> const &);
	long EnumerateAllTiles<<lambda_2698cd8b5c0383125260eb3aaa5e002a> >(ITileViewInformation *,<lambda_2698cd8b5c0383125260eb3aaa5e002a> const &);
	long EnumerateAllTiles<<lambda_2b0d6328e873a8c9f3d3e7aa43481aad> >(ITileInfoEnumerator *,<lambda_2b0d6328e873a8c9f3d3e7aa43481aad> const &);
	long EnumerateAllTiles<<lambda_2b0d6328e873a8c9f3d3e7aa43481aad> >(ITileViewInformation *,<lambda_2b0d6328e873a8c9f3d3e7aa43481aad> const &);
	long EnumerateAllTiles<<lambda_384b5ccd1e4687403bbe9db0dc82f2a5> >(ITileInfoEnumerator *,<lambda_384b5ccd1e4687403bbe9db0dc82f2a5> const &);
	long EnumerateAllTiles<<lambda_384b5ccd1e4687403bbe9db0dc82f2a5> >(ITileViewInformation *,<lambda_384b5ccd1e4687403bbe9db0dc82f2a5> const &);
	long EnumerateAllTiles<<lambda_39e3514a857914381e27f552932a28cb> >(ITileInfoEnumerator *,<lambda_39e3514a857914381e27f552932a28cb> const &);
	long EnumerateAllTiles<<lambda_39e3514a857914381e27f552932a28cb> >(ITileViewInformation *,<lambda_39e3514a857914381e27f552932a28cb> const &);
	long EnumerateAllTiles<<lambda_3ac2178e67e55344b48353f933b7f099> >(ITileInfoEnumerator *,<lambda_3ac2178e67e55344b48353f933b7f099> const &);
	long EnumerateAllTiles<<lambda_3ac2178e67e55344b48353f933b7f099> >(ITileViewInformation *,<lambda_3ac2178e67e55344b48353f933b7f099> const &);
	long EnumerateAllTiles<<lambda_4b9cf818fdd72c1493278b791344dd85> >(ITileInfoEnumerator *,<lambda_4b9cf818fdd72c1493278b791344dd85> const &);
	long EnumerateAllTiles<<lambda_4b9cf818fdd72c1493278b791344dd85> >(ITileViewInformation *,<lambda_4b9cf818fdd72c1493278b791344dd85> const &);
	long EnumerateAllTiles<<lambda_54dbd2f2e102388395ff12d7683bb436> >(ITileInfoEnumerator *,<lambda_54dbd2f2e102388395ff12d7683bb436> const &);
	long EnumerateAllTiles<<lambda_54dbd2f2e102388395ff12d7683bb436> >(ITileViewInformation *,<lambda_54dbd2f2e102388395ff12d7683bb436> const &);
	long EnumerateAllTiles<<lambda_5c8388721aed64b677c2299714dd7dfd> >(ITileInfoEnumerator *,<lambda_5c8388721aed64b677c2299714dd7dfd> const &);
	long EnumerateAllTiles<<lambda_5c8388721aed64b677c2299714dd7dfd> >(ITileViewInformation *,<lambda_5c8388721aed64b677c2299714dd7dfd> const &);
	long EnumerateAllTiles<<lambda_6d67d6707ecd9f3af6546502f5ddd3d7> >(ITileInfoEnumerator *,<lambda_6d67d6707ecd9f3af6546502f5ddd3d7> const &);
	long EnumerateAllTiles<<lambda_6d67d6707ecd9f3af6546502f5ddd3d7> >(ITileViewInformation *,<lambda_6d67d6707ecd9f3af6546502f5ddd3d7> const &);
	long EnumerateAllTiles<<lambda_7e96ea2e8e2e4b1ed2d58cacf100b369> >(ITileInfoEnumerator *,<lambda_7e96ea2e8e2e4b1ed2d58cacf100b369> const &);
	long EnumerateAllTiles<<lambda_7e96ea2e8e2e4b1ed2d58cacf100b369> >(ITileViewInformation *,<lambda_7e96ea2e8e2e4b1ed2d58cacf100b369> const &);
	long EnumerateAllTiles<<lambda_8a0fe726af30213512ebdf415c41d88c> >(ITileViewInformation *,<lambda_8a0fe726af30213512ebdf415c41d88c> const &);
	long EnumerateAllTiles<<lambda_950a505dbd7cc80ab3b179ca94fadcee> >(ITileInfoEnumerator *,<lambda_950a505dbd7cc80ab3b179ca94fadcee> const &);
	long EnumerateAllTiles<<lambda_950a505dbd7cc80ab3b179ca94fadcee> >(ITileViewInformation *,<lambda_950a505dbd7cc80ab3b179ca94fadcee> const &);
	long EnumerateAllTiles<<lambda_abe07f53e2034580485a03e717915886> >(ITileInfoEnumerator *,<lambda_abe07f53e2034580485a03e717915886> const &);
	long EnumerateAllTiles<<lambda_abe07f53e2034580485a03e717915886> >(ITileViewInformation *,<lambda_abe07f53e2034580485a03e717915886> const &);
	long EnumerateAllTiles<<lambda_ef28b1c8ee8a49599dbd3233c057d0c7> >(ITileInfoEnumerator *,<lambda_ef28b1c8ee8a49599dbd3233c057d0c7> const &);
	long EnumerateAllTiles<<lambda_ef28b1c8ee8a49599dbd3233c057d0c7> >(ITileViewInformation *,<lambda_ef28b1c8ee8a49599dbd3233c057d0c7> const &);
	long EnumerateAllTiles<<lambda_f50acfdde70a17f6afdfff8e9159adb8> >(ITileInfoEnumerator *,<lambda_f50acfdde70a17f6afdfff8e9159adb8> const &);
	long EnumerateAllTiles<<lambda_f50acfdde70a17f6afdfff8e9159adb8> >(ITileViewInformation *,<lambda_f50acfdde70a17f6afdfff8e9159adb8> const &);
	long EnumerateAllTiles<<lambda_f655d007d19832e314a8cec5a15aaa50> >(ITileInfoEnumerator *,<lambda_f655d007d19832e314a8cec5a15aaa50> const &);
	long EnumerateAllTiles<<lambda_f655d007d19832e314a8cec5a15aaa50> >(ITileViewInformation *,<lambda_f655d007d19832e314a8cec5a15aaa50> const &);
	long EnumerateAllTilesRecursive<<lambda_384b5ccd1e4687403bbe9db0dc82f2a5> >(ITileViewInformation *,<lambda_384b5ccd1e4687403bbe9db0dc82f2a5> const &);
	long EnumerateViews<<lambda_166cacc6fdbe773f4cbed419a9dd7ce9> >(ITileViewInformation *,<lambda_166cacc6fdbe773f4cbed419a9dd7ce9> const &);
	long EnumerateViews<<lambda_3a0b967607cdea3625a40db59809f140> >(ITileViewInformation *,<lambda_3a0b967607cdea3625a40db59809f140> const &);
	long EnumerateViews<<lambda_43414a705f4a35d96fbd78b141adb2cf> >(ITileViewInformation *,<lambda_43414a705f4a35d96fbd78b141adb2cf> const &);
	long EnumerateViews<<lambda_64cc82cbb079defe4fe1267e58e1b325> >(ITileViewInformation *,<lambda_64cc82cbb079defe4fe1267e58e1b325> const &);
	long EnumerateViews<<lambda_6620510d92194a3e34d0043948f44aef> >(ITileViewInformation *,<lambda_6620510d92194a3e34d0043948f44aef> const &);
	long EnumerateViews<<lambda_6f4ac4f015ec2bcefa72f22c6ab87bca> >(ITileViewInformation *,<lambda_6f4ac4f015ec2bcefa72f22c6ab87bca> const &);
	long EnumerateViews<<lambda_74f2d4e35b26c05f5177305784c52a2b> >(ITileViewInformation *,<lambda_74f2d4e35b26c05f5177305784c52a2b> const &);
	long EnumerateViews<<lambda_7d71273d492e887996ddea77c6457e61> >(ITileViewInformation *,<lambda_7d71273d492e887996ddea77c6457e61> const &);
	long EnumerateViews<<lambda_7f957c3c998e5e2e63c0c40bd704a24d> >(ITileViewInformation *,<lambda_7f957c3c998e5e2e63c0c40bd704a24d> const &);
	long EnumerateViews<<lambda_b01ea6017a70f1d804e49ba8161b6795> >(ITileViewInformation *,<lambda_b01ea6017a70f1d804e49ba8161b6795> const &);
	long EnumerateViews<<lambda_e996864930395d2dec940f075c1d8938> >(ITileViewInformation *,<lambda_e996864930395d2dec940f075c1d8938> const &);
	long EnumerateViews<<lambda_f25b1afa3f7a5e44b2a8186ce3534f38> >(ITileViewInformation *,<lambda_f25b1afa3f7a5e44b2a8186ce3534f38> const &);
};

class OpenWithLogging
{
protected:
	static OpenWithLogging * Instance();
};

namespace OpenWithTelemetry
{
	class ClearUserAssociationsActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ClearUserAssociationsActivity();
	};

	class DefaultAssociationsOnCreate
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class DefaultAssociationsOnLoad
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class OOBEUpgradeAppUserAssoc
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void UpgradeProgId<unsigned short const * &,unsigned short const * &>(unsigned short const * &,unsigned short const * &);
	};

	class OpenWithMenuInitMenuPopup
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OpenWithMenuInitMenuPopup();
	};

	class OpenWithMenuInvokeCommand
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class OpenWithMenuQueryContextMenu
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ExeOrLnk();
		~OpenWithMenuQueryContextMenu();
	};

	class QueryCurrentDefaultActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,ASSOCIATIONTYPE,ASSOCIATIONLEVEL);
	};

	class SHOpenWithDialogActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned short const *,int);
	};

	class SHOpenWithDialogToSetDefaultActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned short const *,int);
	};

};

class OperationTileArea
{
	DirectUI::Element * _NavigateToTile(DirectUI::Element *,int,DirectUI::Element *);
	static DirectUI::IClassInfo * s_pClassInfo;
	void _OnPageUpDown(DirectUI::KeyboardEvent *);
public:
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
};

class OperationTileElement
{
	HWND__ * _GetProgressHWND();
	long _Initialize(CDUIResourceManager const &);
	long _SetTileAccName(unsigned short const *,unsigned short const *);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	long SetSummary(unsigned short const *);
	long UpdateHeader(OPERATION_TYPE,OPERATION_MODE,unsigned __int64,IShellItem *,IShellItem *,OperationTileUpdateHeaderFlags);
	static DirectUI::PropertyInfo const * ProgressPositionProp();
	static DirectUI::PropertyInfo const * SummaryProp();
	static UID SetDefaultFocus;
	static long Register();
	static long s_CreateInstance(CDUIResourceManager const &,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool EnsureVisible(int,int,int,int);
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	void SetMarqueeMode(bool);
};

class OperationTileHeader
{
	long _InitializeHeaderStructure(unsigned int);
	long _InitializeTextOrCountHeaderPart(unsigned short const *,unsigned __int64,int,bool *);
	long _ReInitializeHeaderStructureIfNeeded(unsigned __int64,OPERATION_TYPE,bool,bool,bool,bool *);
	long _UpdateHeaderElementValues(unsigned __int64,IShellItem *,IShellItem *,OperationTileHeaderPart const * const);
	static DirectUI::IClassInfo * s_pClassInfo;
	static unsigned short const * * c_rgszHeaderElementNames;
public:
	long Initialize(unsigned int,DirectUI::Element *,unsigned long *);
	long UpdateHeader(OPERATION_TYPE,OPERATION_MODE,unsigned __int64,IShellItem *,IShellItem *,OperationTileUpdateHeaderFlags,bool *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

struct OperationTileHeaderPart
{
	OperationTileHeaderPart();
	~OperationTileHeaderPart();
};

class OperationTileHost
{
	static DirectUI::IClassInfo * s_pClassInfo;
	void _BroadcastThemeChange();
public:
	static long Create(HWND__ *,bool,unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *);
};

namespace PCSetting
{
	namespace HostID
	{
		_GUID const ClassicCPL;
		_GUID const ClassicCPLName;
		_GUID const CortanaSettings;
		_GUID const PCSettings;
		_GUID const ProjectionUI;
	};

};

struct PINENTRY
{
	long UpdateShellLink();
	static int DestroyCallback(PINENTRY *,void *);
	void Destruct();
};

struct PROPLISTVIEWDATA
{
	static long Create(IPropertyStoreCapabilities *,IPropertyDescription *,IPropertyValue *,PROPLISTVIEWDATA * *);
	static void Destroy(PROPLISTVIEWDATA *);
};

class PauseButton
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	long SetState(PAUSE_BUTTON_STATE);
	static DirectUI::PropertyInfo const * StateProp();
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

struct PiiSafeKnownFolder
{
	PiiSafeKnownFolder();
};

struct PiiSafeKnownFolderList
{
	PiiSafeKnownFolder const * ReturnMatchingKnownFolder(unsigned short const * const);
	void Initialize();
};

class PiiSafeShellitemParsingName
{
	void EnsurePiiSafe();
public:
	PiiSafeShellitemParsingName(unsigned short const *);
	unsigned short const * Get();
};

struct PiiSafeShellitemParsingNameEvent
{
	PiiSafeShellitemParsingNameEvent(PiiSafeShellitemParsingName &);
	PiiSafeShellitemParsingNameEvent(PiiSafeShellitemParsingName &,PiiSafeShellitemParsingName &);
	unsigned short const * GetCorrelationId();
};

class PiiSafeShellitemParsingNameProperties
{
	static unsigned short const * LastInstanceOfChar(unsigned short const *,unsigned short);
	unsigned char CalculatePathDepth(unsigned short const *,bool);
	void PopulateBasicFields(IShellItem *);
public:
	PiiSafeShellitemParsingNameProperties(PiiSafeShellitemParsingName const &,IShellItem *);
	~PiiSafeShellitemParsingNameProperties();
};

namespace PostBootReminderTelemetry
{
	class TempProfileWarningActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool);
		~TempProfileWarningActivity();
	};

};

struct ProgramTrackingProviderWindowsPushNotificationManagerWrapper
{
	ProgramTrackingProviderWindowsPushNotificationManagerWrapper();
	virtual bool IsTrackingPrograms();
	virtual long UnregisterAppForNotifications(unsigned short const *);
};

struct PropertySheetHandler
{
	PropertySheetHandler();
	virtual long Launch(IDataObject *,unsigned short const *,unsigned long,_GUID const &);
};

class PropsToXmlEngine
{
protected:
	long _CollectExplicitlyMappedNamedProps(XMLPROP_ITEM const *,CDPA<unsigned short const ,CTContainer_PolicyUnOwned<unsigned short const > > &);
	long _CollectWrittenNamedProps(XMLPROP_ITEM const *,CDPA<unsigned short const ,CTContainer_PolicyUnOwned<unsigned short const > > &);
	long _GetElementNamespaceUriFromPS(CXPContext *,tagPROPVARIANT *);
	long _GetPropValue(XMLPROP_ITEM const *,unsigned short const *,tagPROPVARIANT *);
	long _WriteAttributes(XMLPROP_ITEM const *,unsigned short const *,tagPROPVARIANT const &);
	long _WriteItemStartElement(CXPContext *,unsigned short const *,unsigned short const *);
	long _WriteNode(XMLPROP_ITEM const *,unsigned short const *,unsigned int,CXmlElement *);
	long _WriteNode(XMLPROP_ITEM const *,unsigned short const *,unsigned int,CXmlElement *,int);
	long _WritePendingElement(CXPContext *);
	long _WritePropAttributeString(unsigned short const *,unsigned short const *,unsigned short const *);
	long _WritePropvarAttrib(unsigned short const *,tagPROPVARIANT *);
	long _WritePropvarText(tagPROPVARIANT *,int);
	long _WriteRemainingOpenProps(XMLPROP_ITEM const *);
	long _WriteSubNodes(XMLPROP_ITEM const *);
	static long _s_PropVarToStringPropVar(tagPROPVARIANT *);
public:
	long Process(IXmlWriter *,XMLPROP_ITEM const *,IUnknown *);
};

struct RECOVERY_ENTRY
{
	long CloneFrom(_HashTable * *,RECOVERY_ENTRY const *);
	long Save(IStream *);
	void Destruct(_HashTable * *);
};

struct RatingValue
{
	unsigned int GetStars();
};

class RecycleDataV2
{
	void _InitRestorePathLength();
public:
	long _Initialize(unsigned short const *);
	static long _Initialize(RecycleDataV1 const *,RecycleDataV2 *);
};

namespace RunDialogLoggingTelemetry
{
	class BrowseDialog
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivityWithCorrelationVector(char const *);
	};

	class Execute
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivityWithCorrelationVector(char const *,bool);
	};

	class RunDialog
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivityWithCorrelationVector(char const *);
	};

};

struct SHORTCUT_DATA
{
	SHORTCUT_DATA();
	~SHORTCUT_DATA();
};

struct SP<unsigned char,SP_HLOCAL<unsigned char> >
{
	static bool IsNull(unsigned char *);
	unsigned long * GetPtrAs<unsigned long>();
	void Attach(unsigned char *);
	void Reset();
};

namespace SQM
{
	unsigned int GetSQMIDForBrowserHost(IUnknown *);
	unsigned int GetSQMIDForFolderTypeContainer(IUnknown *);
	unsigned int GetSQMIDForFolderTypeKind(_GUID const &);
	unsigned int GetSQMIDForTopView(TOPVIEWKEY const &);
	unsigned int _FindSQMIDFromArray(unsigned short const *,int,unsigned int,SQM::SQMSTRIDPAIR const *);
	unsigned int _GetSQMIDForFolderTypeContainerFromItem(IShellItem *);
	unsigned short const * CensorAppID(unsigned short const *);
};

struct SearchKeyIterator
{
	bool IsEqual(SearchKeyIterator const &);
	void Next();
};

struct SelectorButton
{
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

namespace ServiceProviderImpl
{
	namespace Details
	{
		struct CServiceProviderImpl<<lambda_c7413b35e0013080200513360364bdcd> >
		{
			CServiceProviderImpl<<lambda_c7413b35e0013080200513360364bdcd> >(IUnknown *,<lambda_c7413b35e0013080200513360364bdcd> const &);
			virtual long QueryService(_GUID const &,_GUID const &,void * *);
		};

	};

	long Make<<lambda_c7413b35e0013080200513360364bdcd> >(IUnknown *,_GUID const &,void * *,<lambda_c7413b35e0013080200513360364bdcd> const &);
};

class ShStrA
{
	long _SetStr(unsigned short const *,unsigned long);
public:
	long SetSize(unsigned long);
	void Reset();
};

class ShStrW
{
	long _SetStr(char const *,unsigned long);
public:
	long Append(unsigned short const *,unsigned long);
	long Printf(unsigned short const *,...);
	long SetSize(unsigned long);
	long SetStr(unsigned short const *,unsigned long);
	void Reset();
	void Trim();
};

struct Shell32Instance
{
	HINSTANCE__ * get();
	~Shell32Instance();
};

class Shell32Logging
{
protected:
	static Shell32Logging * Instance();
};

class Shell32LoggingTelemetry
{
	class BurnDisc
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class FormatDialog
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class FormatDiscUdf
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class LowDisk
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int,int,unsigned long);
	};

	class ShellNotifyIcon
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long);
	};

	class WinOldLowStorageCleanup
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		void Stop(int,long);
		~WinOldLowStorageCleanup();
	};

protected:
	static Shell32LoggingTelemetry * Instance();
public:
	static void EmptyRecycleBin<long &>(long &);
	static void TryFileDataObject<long &>(long &);
	void GetClipboard_(long,unsigned long);
	void ShellExtensionList_(unsigned short const *,unsigned short const *,unsigned long,unsigned short const *,int);
};

struct ShellInfraCriticalFailureProvider
{
	static void OOBECriticalFailure();
};

class ShellItemLink
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	bool GetShellExec();
	long SetTarget(IShellItem *);
	static DirectUI::PropertyInfo const * ShellExecProp();
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
};

class ShellItemLinkFitter
{
	static DirectUI::IClassInfo * s_pClassInfo;
	tagSIZE _UpdateShellLinksDesiredSize(CCoSimpleArray<DirectUI::Element *,4294967294,CSimpleArrayStandardCompareHelper<DirectUI::Element *> > * const,long,DirectUI::Surface *);
public:
	static long Register();
	virtual DirectUI::Element * GetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual tagSIZE _SelfLayoutUpdateDesiredSize(int,int,DirectUI::Surface *);
	virtual void _SelfLayoutDoLayout(int,int);
};

namespace StartMenuColor
{
	unsigned long ApplyLuminanceCap(unsigned long);
};

class StartPinUnpinContextMenu
{
	long _GetDisplayStringForVerb(Microsoft::WRL::ComPtr<IViewPinUnpinVerb> &,unsigned short *,int);
	long _GetTileFromShellItem(Microsoft::WRL::ComPtr<IShellItem> const &,Microsoft::WRL::ComPtr<ITileInfo> &);
	long _GetVerbForItem(_GUID,Microsoft::WRL::ComPtr<IViewPinUnpinVerb> &);
	long _RetrieveShellItemForMenu(Microsoft::WRL::ComPtr<IShellItem> &);
public:
	StartPinUnpinContextMenu();
	long RuntimeClassInitialize();
	virtual long GetCommandString(unsigned __int64,unsigned int,unsigned int *,char *,unsigned int);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
	virtual long InvokeCommand(_CMINVOKECOMMANDINFO *);
	virtual long QueryContextMenu(HMENU__ *,unsigned int,unsigned int,unsigned int,unsigned int);
};

namespace StateRepoHelpers
{
	bool IsBannedFileExtension(unsigned short const *);
	bool QueryStateRepoForProgIdPresence(unsigned short const *);
	long AppendToProgIdArray(Windows::Foundation::Collections::IVectorView<HSTRING__ *> *,CProgidArray &);
	long CreateStateRepositoryQuerySource(unsigned short const *,unsigned short const *,IQuerySource * *);
	long EnumerateProgIdsForFileAssociations(unsigned short const *,CProgidArray &);
	long EnumerateProgIdsForUriAssociations(unsigned short const *,CProgidArray &);
	long FindExtensionInfoByProgId(unsigned short const *,unsigned short const *,Windows::System::Internal::Launch::IExtensionInfo * *);
	long GetQueryAssociationBrokerService(_GUID const &,void * *);
	unsigned short const * const * const s_rgwszSystemReservedFileExts;
	unsigned short const * const * const s_rgwszSystemReservedProtocols;
};

class SurfaceHubSettingsEnvironmentLogger
{
protected:
	static SurfaceHubSettingsEnvironmentLogger * Instance();
};

namespace SyncEngineError
{
	SyncEngineError::Error MapHresultToSyncEngineError(long);
	bool IsOfflineModeError(SyncEngineError::StateFlags,long);
};

namespace SystemSettings
{
	namespace Environment
	{
		class BluetoothRadioObserver
		{
			static void s_DevQueryCallback(HDEVQUERY__ *,void *,_DEV_QUERY_RESULT_ACTION_DATA const *);
		public:
			long Setup();
			static long GetDefaultIsBluetoothRadioPresent(bool *);
			~BluetoothRadioObserver();
		};

		struct DeviceEncryptionObserver
		{
			static long GetDefaultIsAnyVolumeManagedByDeviceEncryption(bool *);
			static long GetDefaultIsDeviceEncryptionSupported(bool *);
			~DeviceEncryptionObserver();
		};

		class DeviceEncryptionObserverImpl
		{
			long SubscribeForDeviceEncryptionEvents(_WNF_STATE_NAME,_WNF_USER_SUBSCRIPTION * *);
			static long FveWnfCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
			void UnsubscribeForDeviceEncryptionEvents(_WNF_USER_SUBSCRIPTION * *);
		};

		struct EnvironmentVariable
		{
			void Set(bool);
			void Update();
		};

		class MbnDeviceObserver
		{
			static void s_DevQueryCallback(HDEVQUERY__ *,void *,_DEV_QUERY_RESULT_ACTION_DATA const *);
		public:
			long Setup();
			static bool s_fIsMbnDevicePresent;
			static long IsMbnDevicePresent(bool *);
			~MbnDeviceObserver();
		};

		class NetworkAdapterObserver
		{
			static Microsoft::WRL::Wrappers::CriticalSection _csLock;
			static int s_EthernetAdapterCount;
			static int s_MBAdapterCount;
			static int s_WiFiAdapterCount;
		public:
			long Setup();
			static long IsEthernetPresent(bool *);
			static long IsMobileBroadbandPresent(bool *);
			static long IsWiFiPresent(bool *);
			void TearDown();
			void UpdateAdapterCounts(int);
			~NetworkAdapterObserver();
		};

		class NetworkUXManagerClient
		{
		protected:
			bool _CountAdapter(int *);
		public:
			NetworkUXManagerClient();
			long OnInterfaceArrival(_GUID const &);
			long OnInterfaceRemoval(_GUID const &);
			virtual long GetAdapterCounts(int *,int *,int *);
			virtual long Invoke(Windows::Networking::UX::ChangeEventType,_GUID);
			virtual long Start(NetworkAdapterObserver *);
			virtual void RecountAdapters(int *,int *,int *);
			virtual void Stop();
		};

		struct RadialControllerObserver
		{
			long Setup();
			static long GetDefaultIsRadialControllerPaired(bool *);
			virtual long OnPairedStateChanged(bool);
			void TearDown();
			~RadialControllerObserver();
		};

		class RegistryObserver
		{
			static void _s_RegistryChangeCallback(void *);
		public:
			long Setup();
			void TearDown();
			~RegistryObserver();
		};

		struct SettingsEnvironmentImpl
		{
			SettingsEnvironmentImpl();
			long Setup();
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long IsAccessible(unsigned short const *,bool *);
			virtual long IsApplicable(unsigned short const *,bool *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual long UseAlternateText(unsigned short const *,bool *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
			virtual void AddEnvironmentChangedHandler(IEnvironmentChangedEventHandler *);
			virtual void RemoveEnvironmentChangedHandler(IEnvironmentChangedEventHandler *);
			virtual ~SettingsEnvironmentImpl();
			void EnvironmentChanged(unsigned short const *);
		};

		class SlideshowSettingsObserver
		{
			static void _s_RegistryChangeCallback(void *);
		public:
			~SlideshowSettingsObserver();
		};

		class WindowMessageObserver
		{
			static __int64 s_ObserverWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
		public:
			static long GetDefaultIsTerminalService(bool *);
			static unsigned long s_WindowThread(void *);
			void TearDown();
			~WindowMessageObserver();
		};

		class WindowsGenuineObserver
		{
			static void s_GenuineEventCallback(void *,unsigned char);
		public:
			long Setup();
			static bool s_IsWindowsGenuine();
			static bool s_IsWindowsOffline();
			static long GetDefaultIsWindowsCoreClient(bool *);
			static long GetDefaultIsWindowsGenuine(bool *);
			static long GetDefaultIsWindowsOffline(bool *);
			~WindowsGenuineObserver();
		};

		Microsoft::WRL::WeakRef g_EnvironmentWR;
		Microsoft::WRL::Wrappers::CriticalSection g_csEnvironmentLock;
		bool CheckKeyboardCapability(bool,unsigned short const *);
		bool IsUfxPresent();
		bool IsUsbSettingPresent(unsigned short const *,unsigned short const *);
		bool g_fIsTouchpadParametersInitialized;
		long GetSettingsEnvironment(Environment::SettingsEnvironment * *);
		long Is4PointTouchDevicePresent(bool *);
		long IsAdmin(bool *);
		long IsAlwaysOnAlwaysConnected(bool *);
		long IsAmxCxhFeatureEnabled(bool *);
		long IsAnyTouchInputAvailable(bool *);
		long IsAppDefaultsFeatureEnabled(bool *);
		long IsArmDevice(bool *);
		long IsAutoBrightnessAvailable(bool *);
		long IsAutoRotationSupported(bool *);
		long IsBatteryCapable(bool *);
		long IsBluetoothPageEnabled(bool *);
		long IsBuiltInAdmin(bool *);
		long IsCameraCaptureRuntimeClassRegistered(bool *);
		long IsClientExperienceEnabled(bool *);
		long IsCloudDomainMember(bool *);
		long IsColorProfileQuickActionEnabledByOEM(bool *);
		long IsColorProfileSettingsFeatureEnabled(bool *);
		long IsConfigExperimentationChangeAllowed(bool *);
		long IsCortanaEnabled(bool *);
		long IsDataSenseEnabled(bool *);
		long IsDeviceControlUxEnabled(bool *);
		long IsDeviceEncryptionBlockRevertLicensePresent(bool *);
		long IsDeviceInterfaceAvailable(_GUID const *,bool *);
		long IsDirectAccessEnabled(bool *);
		long IsDisconnectedStandbyEnabled(bool *);
		long IsDomainAccount(bool *);
		long IsDomainController(bool *);
		long IsDomainMember(bool *);
		long IsDownlevelOS7(bool *);
		long IsDownlevelOS8(bool *);
		long IsDownlevelOS8_1(bool *);
		long IsDownlevelOSXPVistaOr10(bool *);
		long IsEnterpriseSKU(bool *);
		long IsExtensibilitySettingAvailable(bool *);
		long IsFingerprintReaderPresent(bool *);
		long IsGuest(bool *);
		long IsGuestAccount(bool *);
		long IsHighContrastOn(bool *);
		long IsHomeSKU(bool *);
		long IsKeyboardCasingAllowed(bool *);
		long IsLockScreenSlideshowEnabled(bool *);
		long IsLockScreenWelcomeScreenEnabled(bool *);
		long IsLockdownWmiLayerInstalled(bool *);
		long IsMediaResourcePackInstalled(bool *);
		long IsMotionSensorPresent(bool *);
		long IsNoClosePolicySet(bool *);
		long IsOEMSupportInfoPresent(bool *);
		long IsPTPFourContactsSupported(bool *);
		long IsPenPresent(bool *);
		long IsPenSettingsAppPresent(bool *);
		long IsPenWorkspaceEnabled(bool *);
		long IsPrecisionTouchPadPresent(bool *);
		long IsRadialControllerDebugMode(bool *);
		long IsRegionCurrentLocationAvailable(bool *);
		long IsRegionFormatsAvailable(bool *);
		long IsSafeMode(bool *);
		long IsSamplesPageAvailable(bool *);
		long IsSecureAssessmentAppRegistered(bool *);
		long IsServerSKU(bool *);
		long IsShareEnabled(bool *);
		long IsShellModeAvailable(bool *);
		long IsShiftLockAllowed(bool *);
		long IsShutdownPrivilegeAllowed(bool *);
		long IsSlateDevice(bool *);
		long IsSoftLandingAvailable(bool *);
		long IsSpellCheckingAvailable(bool *);
		long IsStandbySupported(bool *);
		long IsSurfaceHub(bool *);
		long IsSystemBatteryPresent(bool *);
		long IsSystemSettingsEnabled(bool *);
		long IsTabletModeAutoHideFeatureEnabled(bool *);
		long IsTaskbarBadgingFeatureEnabled(bool *);
		long IsTextPredictionAvailable(bool *);
		long IsTouchDevicePresent(bool *);
		long IsTouchPadDirectionControlPresent(bool *);
		long IsTouchPadEdgyControlPresent(bool *);
		long IsTouchPadEnableControlPresent(bool *);
		long IsTouchPadPresent(bool *);
		long IsUninstallActive(bool *);
		long IsUsbDataConnectionPromptSupported(bool *);
		long IsUsbDeviceErrorDetectionCapable(bool *);
		long IsUsbDualRoleCapabilityMessageRequired(bool *);
		long IsUsbSlowChargingDetectionCapable(bool *);
		long IsUserPresentPredictionCapable(bool *);
		long IsVideoDimPresent(bool *);
		long IsVirtualDesktopPTPFeatureEnabled(bool *);
		long IsWindowsHelloIrisEnabled(bool *);
		long IsWindowsLicenseContentDialogEnabled(bool *);
		long IsWuAccessAllowed(bool *);
		long ShouldDisplayFamily(bool *);
		long ShouldDisplayNetworkDevicesPage(bool *);
		long ShouldDisplayWlan(bool *);
		long ShouldShowBackupPage(bool *);
		long ShouldShowContinuumPage(bool *);
		long ShouldShowFlightSettings(bool *);
		long ShouldShowFlightSettingsV2Controls(bool *);
		long ShouldShowNewDevicesPage(bool *);
		long ShouldShowTaskbarPage(bool *);
		long ShouldShowWorkAccess(bool *);
		tagTOUCH_PAD_PARAMETERS_V0 g_TouchpadParameters;
	};

};

namespace TLV
{
	std::nothrow_t const nothrow;
	void Base64Encode<129>(unsigned char const *,unsigned __int64,char (&)[129]);
};

namespace TabletModeHelpers
{
	bool IsTabletMode();
};

namespace TaskbarFlexibleLayoutTelemetry
{
	class TaskbarLayoutInPlaceActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TaskbarLayoutInPlaceActivity();
	};

	class TaskbarLayoutReorderActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TaskbarLayoutReorderActivity();
	};

};

namespace TaskbarPinHelper
{
	namespace Impl
	{
		long GetAsShellItem(wil::PropVariant &,IShellItem * *);
	};

	long GetTaskbarPinnableItem(IShellItem *,IShellItem * *);
};

class TaskbarPinListManager
{
	bool FindDesktopTile(IApplicationResolver *,unsigned short const *);
public:
	virtual long Prune(ITileDataLayerFindTile *);
};

struct TelemetryCorrelationVector
{
	static wistd::unique_ptr<TraceLoggingCorrelationVector,wistd::default_delete<TraceLoggingCorrelationVector> > Make(char const *);
};

struct TelemetryCorrelationVectorServiceProvider
{
	static Microsoft::WRL::ComPtr<IUnknown> ChainSite(TelemetryCorrelationVectorServiceProvider *,IUnknown *);
	static Microsoft::WRL::ComPtr<IUnknown> InsertIntoSiteObject(TelemetryCorrelationVectorServiceProvider *,IUnknown *,IServiceProvider *);
	static Microsoft::WRL::ComPtr<TelemetryCorrelationVectorServiceProvider> Make(IUnknown *);
	static Microsoft::WRL::ComPtr<TelemetryCorrelationVectorServiceProvider> Make(IUnknown *,_GUID const &);
	static Microsoft::WRL::ComPtr<TelemetryCorrelationVectorServiceProvider> Make(TraceLoggingCorrelationVector *);
	static Microsoft::WRL::ComPtr<TelemetryCorrelationVectorServiceProvider> MakeSeed();
	virtual long Increment(char * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ToString(char * *);
};

class TileDataLayerAppResolverReconciler
{
	bool HasPlacesVersionUpdated(unsigned int *);
	bool IsTileEligibleForFrequentView(ITileInfo *);
	bool PreviousReconciliationFailed();
	bool WasShortcutMoved(ITileInfo *,IShortcutInfo *);
	long AddPlacesToView(TileDataLayerItemWrappers::TDLViewInfoHelper &,unsigned short const * const *,unsigned int,bool);
	long AddTileToDefaultViews(ITileInfo *,IShortcutInfo *);
	long AddToFrequentView(ITileInfo *);
	long AddToRecentView(ITileInfo *);
	long CanResurrectStartTile(ITileInfo *,int *);
	long CreateDesktopAppTile(IShortcutInfo *,_GUID,ITileInfo * *,IAppResolverDataLayerManager *);
	long CreateTilesForNewApps(IAppResolverDataLayer *,IAppResolverDataLayerManager *,CSimpleCaseInsensitiveOrdinalStringArray &);
	long DeleteTile(ITileInfo *);
	long EnsureSuiteViewLookupTableInitialized();
	long EnsureTileDataLayerObjectsInitialized();
	long EnsureViewExists(_GUID);
	long EnsureVisiblePlacesViewInitialized(unsigned int);
	long EnumerateTilesInView<<lambda_10c576fe4d4ce1c094108db42c1140c9> >(_GUID const &,<lambda_10c576fe4d4ce1c094108db42c1140c9>);
	long EnumerateTilesInView<<lambda_25c2f21808a4cb7cfbd2841988eb90ec> >(_GUID const &,<lambda_25c2f21808a4cb7cfbd2841988eb90ec>);
	long EnumerateTilesInView<<lambda_59104d3f2f44af6b2696e765af95c71d> >(_GUID const &,<lambda_59104d3f2f44af6b2696e765af95c71d>);
	long EnumerateTilesInView<<lambda_641009b5848465fbf3423b58de70dfe3> >(_GUID const &,<lambda_641009b5848465fbf3423b58de70dfe3>);
	long EnumerateTilesInView<<lambda_7490dc496a9e65d1009060f6f7690ceb> >(_GUID const &,<lambda_7490dc496a9e65d1009060f6f7690ceb>);
	long EnumerateTilesInView<<lambda_9cddf643a5913bb6302827dd1367c90b> >(_GUID const &,<lambda_9cddf643a5913bb6302827dd1367c90b>);
	long EnumerateTilesInView<<lambda_dc75148580b2fdbc5ab5800e697219b2> >(_GUID const &,<lambda_dc75148580b2fdbc5ab5800e697219b2>);
	long FindAndSetMostRecentTime();
	long GetDateInstalled(ITileInfo *,_FILETIME *);
	long GetMostUsedApp(unsigned short * *);
	long GetTilesNeedingLayoutRestore(IAppResolverDataLayer *,CSimpleCaseInsensitiveOrdinalStringArray &);
	long HackInMissingApps();
	long MoveTileToGraveyard(ITileInfo *);
	long PerformConsistencyCheck(ITileViewInformation *);
	long PinTileToStart(ITileInfo *);
	long PopulateTileFromShortcut(TileDataLayerItemWrappers::TDLTileInfoHelper &,IShortcutInfo *,IAppResolverDataLayerManager *);
	long PrepareTileForResurrection(ITileInfo *,IShortcutInfo *);
	long PublishAppResolverScannedEvent();
	long ReconcileAppResolver(IAppResolverDataLayer *,IAppResolverDataLayerManager *);
	long ReconcileOfflineModernTileChanges();
	long ReconcilePlaces(IAppResolverDataLayer *,IImmersivePlacesReader *);
	long ReconcileProgramTracking();
	long RemediateVersionChangeOrBadState(IAppResolverDataLayer *);
	long RemoveFromGraveyardView(ITileInfo *);
	long RemoveTileFromKnownViews(_GUID const &,unsigned short const *);
	long RemoveUninstalledTiles(IAppResolverDataLayer *);
	long RestoreLayoutIfRequired(IAppResolverDataLayer *,CSimpleCaseInsensitiveOrdinalStringArray &);
	long ResurrectTile(ITileInfo *,IShortcutInfo *);
	long SetRecentTimeIfMaterialChange(ITileInfo *,bool);
	long UpdateJumpList(unsigned short const *);
	long UpdateJumpList(unsigned short const *,ITileInfo *);
	long UpdateRelevanceForItem(unsigned short const *,ITileInfo *,UpdateRelevanceForItemFlags);
	void OnServiceFailureOccured();
public:
	TileDataLayerAppResolverReconciler();
	long RuntimeClassInitialize(ITileDataLayerProvider *,IImmersivePlacesReader *,IAppRankProvider *,ITileDataLayerListener *,ITaskbarPinListManager *,IAppsFolderManager *,IJumpListProvider *,IProgramTrackingProvider *,IViewPinUnpinController *);
	virtual long AllRanksHaveChanged();
	virtual long FindDesktopAppTile(unsigned short const *,ITileInfo * *);
	virtual long FindModernAppTile(unsigned short const *,ITileInfo * *);
	virtual long GetTileForAppId(unsigned short const *,ITileInfo * *);
	virtual long GetTileForShellItem(IShellItem *,ITileInfo * *);
	virtual long JumplistChangedForItem(unsigned short const *);
	virtual long OnAllAppsTileAdded(ITileInfo *);
	virtual long OnAllAppsTileRemoved(ITileInfo *);
	virtual long OnAppUpdated(unsigned short const *,IShortcutInfo *,bool);
	virtual long OnInstallFinished(ITileInfo *);
	virtual long OnUnknownUninstallFinished();
	virtual long PromoteAppsToTopOfFrequentList(unsigned short const * *,unsigned int);
	virtual long RankChangedForItem(unsigned short const *,bool);
	virtual long Reconcile(IAppResolverDataLayer *,IAppResolverDataLayerManager *,ReconciliationFlags);
	virtual long SetConcurrencyDisabled(bool);
	virtual long Shutdown();
	virtual ~TileDataLayerAppResolverReconciler();
};

namespace TileDataLayerItemWrappers
{
	class MRTCacheManagerInternal
	{
		static Microsoft::WRL::Wrappers::SRWLock s_MRTCacheLock;
		static unsigned __int64 volatile s_currentMRTStateHash;
	public:
		static long CommitTileSilentSynchronizedWithMRTCacheReset(ITileManager *,ITileInfo *,unsigned __int64);
	};

	class TDLTileInfoHelper
	{
		long ClearShellPropertyStream(unsigned short const *);
		long CommitInternal(ITileManager *,IVisualElementEnumerator *,bool);
		long GetSimpleDataMetaProperty<_FILETIME>(unsigned short const *,_FILETIME *);
		long GetSimpleDataMetaProperty<_GUID>(unsigned short const *,_GUID *);
		long GetSimpleDataMetaProperty<bool>(unsigned short const *,bool *);
		long GetSimpleDataMetaProperty<unsigned int>(unsigned short const *,unsigned int *);
		long MRTResolveText(unsigned short const *,VISUAL_ELEMENT_THEME,unsigned short * *);
		long SetAndRecordShellProperty(unsigned short const *,Microsoft::WRL::ComPtr<IStream> &);
		long SetCachePropertyWithRetry(ITileManager *,IVisualElementEnumerator *,unsigned int,unsigned short const *);
		long SetSimpleDataMetaProperty<_GUID>(unsigned short const *,_GUID);
		void ClearRetryPropertyTables();
	public:
		TDLTileInfoHelper(ITileInfo *);
		TDLTileInfoHelper(Microsoft::WRL::ComPtr<ITileInfo> &);
		long Commit(ITileManager *,IVisualElementEnumerator *,bool);
		long CommitSilent(ITileManager *,IVisualElementEnumerator *,bool);
		long GetAppUserModelId(unsigned short * *);
		long GetDisplayName(ITileManager *,IVisualElementEnumerator *,unsigned short * *);
		long GetRawDisplayName(unsigned short * *);
		long GetShellProperty(TileBoolProperty,bool *);
		long GetShellProperty(TileFileTimeProperty,_FILETIME *);
		long GetShellProperty(TileStringProperty,unsigned short * *);
		long GetVisualProperty(unsigned int,unsigned int *);
		long SetShellProperty(TileBoolProperty,bool);
		long SetShellProperty(TileFileTimeProperty,_FILETIME);
		long SetShellProperty(TileGuidProperty,_GUID);
		long SetShellProperty(TileStringProperty,unsigned short const *);
		long SetShellProperty(TileUintProperty,unsigned int);
		long SetVisualProperty(unsigned int,unsigned short const *);
		~TDLTileInfoHelper();
	};

	class TDLViewInfoHelper
	{
		long SetAndRecordProperty(unsigned short const *,Microsoft::WRL::ComPtr<IStream> &);
		long _ClearPropertyStream(unsigned short const *);
		long _GetSimpleProperty<_FILETIME>(unsigned short const *,_FILETIME *);
		long _GetSimpleProperty<bool>(unsigned short const *,bool *);
		long _GetSimpleProperty<unsigned int>(unsigned short const *,unsigned int *);
		void ClearRetryPropertyTables();
	public:
		TDLViewInfoHelper(ITileViewInformation *);
		TDLViewInfoHelper(Microsoft::WRL::ComPtr<ITileViewInformation> &);
		long AddChildView(_GUID const &);
		long AddTile(ITileInfo *);
		long ClearChildView(_GUID const &);
		long Commit(ITileManager *,IVisualElementEnumerator *,bool);
		long GetProperty(ViewBoolProperty,bool *);
		long GetProperty(ViewStringProperty,unsigned short * *);
		long GetProperty(ViewUintProperty,unsigned int *);
		long IsTileInView(_GUID const &,int *);
		long RemoveTile(_GUID const &);
		long SetParentView(_GUID const &);
		long SetProperty(ViewBoolProperty,bool);
		long SetProperty(ViewFileTimeProperty,_FILETIME);
		long SetProperty(ViewStringProperty,unsigned short const *);
		long SetProperty(ViewUintProperty,unsigned int);
		~TDLViewInfoHelper();
	};

	TileDataLayerItemWrappers::<unnamed-type-c_TileBoolPropertyIDMap> const * const c_TileBoolPropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_TileFileTimePropertyIDMap> const * const c_TileFileTimePropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_TileGuidPropertyIDMap> const * const c_TileGuidPropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_TileStringPropertyIDMap> const * const c_TileStringPropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_TileUintPropertyIDMap> const * const c_TileUintPropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_ViewBoolPropertyIDMap> const * const c_ViewBoolPropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_ViewFileTimePropertyIDMap> const * const c_ViewFileTimePropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_ViewStringPropertyIDMap> const * const c_ViewStringPropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_ViewTypedPropertyIDMap> const * const c_ViewTypedPropertyIDMap;
	TileDataLayerItemWrappers::<unnamed-type-c_ViewUintPropertyIDMap> const * const c_ViewUintPropertyIDMap;
};

class TileDataLayerItemWrappersLogging
{
protected:
	static TileDataLayerItemWrappersLogging * Instance();
};

namespace TileDataLayerItemWrappersTelemetry
{
	class TileRebuildChanges
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TileRebuildChanges();
	};

	class TileRetrieve
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TileRetrieve();
	};

	class ViewRebuildChanges
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ViewRebuildChanges();
	};

	class ViewRetrieve
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ViewRetrieve();
	};

};

class TileDataLayerListener
{
	long GetAppPackageFamilyName(IApplicationLifecycleEvent *,unsigned short * *);
	long GetTileFromLifecycleEvent(IApplicationLifecycleEvent *,ITileInfo * *);
	long HandleEventOnWorkerThread(_GUID const &,IUnknown *);
	long IsTileVisible(ITileInfo *,bool *);
	long OnLifecycleEvent(IApplicationLifecycleEvent *);
	long OnTileChangeEvent(ITileInViewChangeEvent *);
	void PublishAppLifecycleWnfStateIfNecessary(IApplicationLifecycleEvent *,_WNF_STATE_NAME const &);
public:
	TileDataLayerListener();
	virtual long HandleEvent(_GUID const &,IUnknown *);
	virtual long OnServiceFailureOccured();
	virtual long StartListeningAsync(ITileDataLayerListenerEventSink *);
	virtual long StopListening();
	virtual long TEST_HandleEventsOnDispatcherThread();
	virtual ~TileDataLayerListener();
};

class TileDataLayerLookup
{
	long EnsureProvider();
	long GetAppImpl(unsigned short const *,_GUID *,ITileInfo * *);
	long SetAppImpl(unsigned short const *,_GUID);
public:
	TileDataLayerLookup();
	virtual long ClearApp(unsigned short const *);
	virtual long EnsureInitialized();
	virtual long GetApp(unsigned short const *,ITileInfo * *);
	virtual long GetApp(unsigned short const *,_GUID *);
	virtual long IsEmpty(bool *);
	virtual long OnServiceFailureOccured();
	virtual long SetApp(unsigned short const *,ITileInfo *);
	virtual long SetApp(unsigned short const *,_GUID);
};

class TraceLoggingCorrelationVector
{
	bool ToStringImpl(unsigned __int64,char *);
	static TraceLoggingCorrelationVector::CvVersion ValidateImpl(char const *,bool);
	unsigned __int64 IncrementImpl();
	void CreateCvFromGuid<12>(_GUID);
public:
	TraceLoggingCorrelationVector();
	TraceLoggingCorrelationVector(TraceLoggingCorrelationVectorV1_t);
	TraceLoggingCorrelationVector(TraceLoggingCorrelationVectorV2_t);
	static TraceLoggingCorrelationVector * Extend(char const *,bool);
};

struct TranslateResetEvent
{
	TranslateResetEvent(TranslateResetEvent const &);
};

namespace TrayHelpers
{
	bool IsPrimaryTray(HWND__ *);
	void AttachWindowToPrimaryTray(HWND__ *,bool,unsigned long);
};

namespace UserAssistImpl
{
	IShellUserAssist * GetUserAssistWorker(_GUID const &);
	IShellUserAssist * g_cachedUserAssist;
	long GetCachedUserAssist(IShellUserAssist * *);
};

class UserPinnedTileManager
{
	long _CreatePinnedItemImpl(IShellItem *,IShellLinkW *);
public:
	UserPinnedTileManager();
	virtual long CreatePinnedItemFromShellItem(IShellItem *);
	virtual long CreatePinnedItemFromShellLink(IShellLinkW *);
	virtual long DeletePinnedItem(ITileInfo *);
	virtual long Initialize(IVisualElementEnumerator *,ITileManager *);
};

struct ValueRef
{
	~ValueRef();
};

class ViewControl
{
	long _ConnectToView(int);
	long _ShowViewSlider(DirectUI::Element *);
	long _UpdateIcon();
	long _ViewControlClick();
	void _DoAction(int);
public:
	ViewControl();
	static DirectUI::IClassInfo * Class;
	static long Create(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual bool OnPropertyChanging(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long DefaultAction();
	virtual long GetIDsOfNames(_GUID const &,unsigned short * *,unsigned int,unsigned long,long *);
	virtual long GetTypeInfo(unsigned int,unsigned long,ITypeInfo * *);
	virtual long GetTypeInfoCount(unsigned int *);
	virtual long Invoke(long,_GUID const &,unsigned long,unsigned short,tagDISPPARAMS *,tagVARIANT *,tagEXCEPINFO *,unsigned int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	void UnFreeze();
};

namespace Windows
{
	namespace FileHelpers
	{
		long ForEachStreamInfo<<lambda_c949c83dda6ea424c2d1e10398ba3ce1> >(void *,<lambda_c949c83dda6ea424c2d1e10398ba3ce1> const &);
		long GetStreamInfo(void *,_FILE_STREAM_INFO * *);
	};

	namespace Foundation
	{
		namespace Collections
		{
			namespace Detail
			{
				long _IteratorGetMany<IIterator_impl<HSTRING__ *,1>,HSTRING__ *>(IIterator_impl<HSTRING__ *,1> *,unsigned int,HSTRING__ * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::Storage::IItemCommand *,1>,Internal::Storage::IItemCommand *>(IIterator_impl<Internal::Storage::IItemCommand *,1> *,unsigned int,Internal::Storage::IItemCommand * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<HSTRING__ *,1>,HSTRING__ *>(IVectorView_impl<HSTRING__ *,1> *,unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::Storage::IItemCommand *,1>,Internal::Storage::IItemCommand *>(IVectorView_impl<Internal::Storage::IItemCommand *,1> *,unsigned int,unsigned int,Internal::Storage::IItemCommand * *,unsigned int *);
				long _VectorGetMany<IVector_impl<HSTRING__ *,1>,HSTRING__ *>(IVector_impl<HSTRING__ *,1> *,unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::Storage::IItemCommand *,1>,Internal::Storage::IItemCommand *>(IVector_impl<Internal::Storage::IItemCommand *,1> *,unsigned int,unsigned int,Internal::Storage::IItemCommand * *,unsigned int *);
				long _VectorReplaceAll<IVector_impl<HSTRING__ *,1>,HSTRING__ *>(IVector_impl<HSTRING__ *,1> *,unsigned int,HSTRING__ * *);
				long _VectorReplaceAll<IVector_impl<Internal::Storage::IItemCommand *,1>,Internal::Storage::IItemCommand *>(IVector_impl<Internal::Storage::IItemCommand *,1> *,unsigned int,Internal::Storage::IItemCommand * *);
				void _Cleanup<Internal::Storage::IItemCommand,unsigned int>(Internal::Storage::IItemCommand * * const,unsigned int);
				void _Cleanup<unsigned int>(HSTRING__ * *,unsigned int);
			};

			struct IIterator_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
			};

			struct IIterator_impl<Internal::Storage::IItemCommand *,1>
			{
				virtual long GetMany(unsigned int,Internal::Storage::IItemCommand * *,unsigned int *);
			};

			struct IVectorView_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::Storage::IItemCommand *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Storage::IItemCommand * *,unsigned int *);
			};

			struct IVector_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,HSTRING__ * *);
			};

			struct IVector_impl<Internal::Storage::IItemCommand *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Storage::IItemCommand * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::Storage::IItemCommand * *);
			};

			namespace Internal
			{
				struct SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(HSTRING__ * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Storage::IItemCommand *,Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >,DefaultLifetimeTraits<Storage::IItemCommand *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<Storage::IItemCommand *,Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >,DefaultLifetimeTraits<Storage::IItemCommand *>,XWinRT::IntVersionTag,0>(Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> > *,SimpleVectorIterator<Storage::IItemCommand *,Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >,DefaultLifetimeTraits<Storage::IItemCommand *>,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> > *,SimpleVectorIterator<Storage::IItemCommand *,Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >,DefaultLifetimeTraits<Storage::IItemCommand *>,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Storage::IItemCommand * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Storage::IItemCommand * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					long _DoWithInvalidationCheck<<lambda_8ea22a41d3522d87007a800aea750482>,<lambda_ae4ac99dcf3c0475e07ddd74b08cb8fc> >(<lambda_8ea22a41d3522d87007a800aea750482> const &,<lambda_ae4ac99dcf3c0475e07ddd74b08cb8fc> const &);
				public:
					SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class SimpleVectorView<Storage::IItemCommand *,Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >,DefaultLifetimeTraits<Storage::IItemCommand *>,XWinRT::IntVersionTag,0>
				{
					long _DoWithInvalidationCheck<<lambda_507bdd70ac4d81b2ec5d039bf5d171a1>,<lambda_8270acc08b83d3b5b9b24a9ade155333> >(<lambda_507bdd70ac4d81b2ec5d039bf5d171a1> const &,<lambda_8270acc08b83d3b5b9b24a9ade155333> const &);
				public:
					SimpleVectorView<Storage::IItemCommand *,Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >,DefaultLifetimeTraits<Storage::IItemCommand *>,XWinRT::IntVersionTag,0>(Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> > *,SimpleVectorView<Storage::IItemCommand *,Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >,DefaultLifetimeTraits<Storage::IItemCommand *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<Storage::IItemCommand *> * *);
					virtual long GetAt(unsigned int,Storage::IItemCommand * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::IItemCommand * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Storage::IItemCommand *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >
				{
					long IndexOfInternal(HSTRING__ * *,unsigned int,HSTRING__ *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,HSTRING__ *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(HSTRING__ * *,unsigned int);
					void _EraseAll(HSTRING__ * * *,unsigned int *);
				public:
					Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >(DefaultEqualityPredicate<HSTRING__ *> const &,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >::permission);
					virtual long Append(HSTRING__ *);
					virtual long Clear();
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<HSTRING__ *> * *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,HSTRING__ *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,HSTRING__ * *);
					virtual long SetAt(unsigned int,HSTRING__ *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >
				{
					long IndexOfInternal(Storage::IItemCommand * *,unsigned int,Storage::IItemCommand *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Storage::IItemCommand *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(Storage::IItemCommand * *,unsigned int);
					void _EraseAll(Storage::IItemCommand * * *,unsigned int *);
				public:
					Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >(DefaultEqualityPredicate<Storage::IItemCommand *> const &,Vector<Storage::IItemCommand *,DefaultEqualityPredicate<Storage::IItemCommand *>,DefaultLifetimeTraits<Storage::IItemCommand *>,DefaultVectorOptions<Storage::IItemCommand *> >::permission);
					virtual long Append(Storage::IItemCommand *);
					virtual long Clear();
					virtual long First(IIterator<Storage::IItemCommand *> * *);
					virtual long GetAt(unsigned int,Storage::IItemCommand * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::IItemCommand * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Storage::IItemCommand *> * *);
					virtual long IndexOf(Storage::IItemCommand *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Storage::IItemCommand *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Storage::IItemCommand * *);
					virtual long SetAt(unsigned int,Storage::IItemCommand *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct VectorOptions<HSTRING__ *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Storage::IItemCommand *,0,0,0>
				{
					static long RaiseEvent(...);
				};

			};

		};

		long ActivateInstance<Devices::Geolocation::IGeolocator>(HSTRING__ *,Devices::Geolocation::IGeolocator * *);
		long ActivateInstance<IExtensionCatalog>(HSTRING__ *,Foundation::IExtensionCatalog * *);
		long ActivateInstance<IInspectable>(HSTRING__ *,IInspectable * *);
		long ActivateInstance<Microsoft::WRL::ComPtr<Networking::UX::IUXManager> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Networking::UX::IUXManager> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<UI::Popups::IUICommand> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::Popups::IUICommand> >);
		long ActivateInstance<System::Internal::Launch::IObjectWithExtensionInfo>(HSTRING__ *,System::Internal::Launch::IObjectWithExtensionInfo * *);
		long ActivateInstance<UI::Popups::IUICommand>(HSTRING__ *,UI::Popups::IUICommand * *);
		long ActivateInstance<UI::Xaml::Media::Imaging::IBitmapImage>(HSTRING__ *,UI::Xaml::Media::Imaging::IBitmapImage * *);
		long GetActivationFactory<Microsoft::WRL::ComPtr<IPropertyValueStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::IPropertyValueStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationFactory> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationFactory> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationManagerStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationManagerStatics> >);
	};

	namespace Internal
	{
		class ComTaskPool
		{
			class CDelayedTask
			{
				bool _CancelTimer();
				static void s_TPWake(void *,unsigned char);
			public:
				long RuntimeClassInitialize(TaskApartment,TaskOptions,unsigned long,unsigned long,IComPoolTask *);
			};

			struct CRemoteReleaseStub
			{
				CRemoteReleaseStub(IComPoolTask *);
			};

			struct CRemoteTask
			{
				long RuntimeClassInitialize(IComPoolTask *);
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_091c209d8816eaf0003c18bb19c83586> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_094236ab9a0a649485eaf07605795019> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_0e9a4d9f7741092d9588b6c6c621e66e> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_10be4feeeff633dec7cce82e678a77d0> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_131afb9990e470411a2b1060bcf43705> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_1386917c2b0eefcf92d5aaca6b176d86> &>
			{
				CTaskWrapper<<lambda_1386917c2b0eefcf92d5aaca6b176d86> &><<lambda_1386917c2b0eefcf92d5aaca6b176d86> &>(<lambda_1386917c2b0eefcf92d5aaca6b176d86> &);
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_16648e02dc33f55ae915fb25852ec5bb> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_183c6780391331a899f97b441430d141> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_225b3f908421449566cd64e57784a50e> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_2ad3dabe7353a18c7aff7788f336ded4> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_2b0e8c652a4ef6a264afd78af9ef2cda> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_3de4f07030cca1b4333047b6ebe3019f> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_400062eb67af5389e1d660a9b41a1845> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_41dc05d0b29c8075fd87de33bfd78e93> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_43d501189a5ee336f4416eeede688869> &>
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_551e773753f49e767f2abdcd71212b5a> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_55bf6802bd4e9b1193c889a8f208b8c5> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_57acb4715b839da6339d2e39213ffd30> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_71be1caaf3e09f5e95095e4936d63f3e> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_726a8736f85bbeacf86600fa30a1e339> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_73d146a6ae7e5c0e996fddb438b1987e> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_7bf29596f9645d0911dd60e2d8c4e05c> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_813997a1f833ab2ef3cba2e52273c17c> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_87f216275485a33158d9771180cf869d> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_a1c42671c329139d4c753db45b76f447> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_acceda5bcaf4fb6e0acf8085fcd58448> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_aeb3e2238a3c1f841e501bf328c2ef8a> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_af126475e02bf06518c43e79955caffd> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_b311521e651b9c684697f1d21c48f00a> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_c4e5d7540a7938a820f41567a5361e96> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_c8d4362bec1eb1c88240d8b1e321cf76> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_cb5cef8bac1a5908cf4cb2615e39eb42> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_d152124dac106211dc9ff3d7543c117b> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_d19e9c6fbac2b30ad9a3bf543589c275> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_d4d6cdccd630cded72fa1a9a84df6e44> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_dcc052f9d7bd5a3d2e573e4a89fdc876> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_dff7b450e7eee25fd5a246545de8ddb9> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_e0d58b8f0c4a06bb5f616f152b037bf7> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_e27be34fd4d95a43152baacdc0652a1b> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_e2c848a36020b608b12010fb0d8d2c60> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_eb2a12295e864ed1145c800c2c4416cb> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_f532b821b2f5958de18c992cecb38fec> >
			{
				virtual void Run();
			};

			class CThread
			{
				long _CreateThreadRef(long *,IUnknown * *);
				long _WaitForThreadUpdate(unsigned long);
				static HINSTANCE__ * s_ExecuteThreadProc(void *);
				static unsigned long s_ThreadProc(void *);
				static void s_CheckForDeadlockTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
				static void s_ThreadPoolCallback(_TP_CALLBACK_INSTANCE *,void *);
				void _DispatchMessage(tagMSG *);
				void _ThreadProc();
			public:
				CThread(TaskApartment,TaskOptions);
				bool Eligible(TaskApartment,TaskOptions);
				long StartThread();
				long StartThreadWithFallback();
				long WaitForThreadStart();
				long _StartThreadCommon();
				void CheckForDeadlock();
			};

			struct TaskData
			{
				TaskData(TaskApartment,TaskOptions,unsigned long,IComPoolTask *);
			};

			struct TaskList
			{
				void Clear();
			};

			static ComTaskPool::CThread * s_pThreadList;
			static ComTaskPool::TaskList s_taskFloodingList;
			static _RTL_SRWLOCK s_rwLock;
			static bool s_RunNested(TaskApartment,TaskOptions);
			static bool s_TryRemoveThread(ComTaskPool::CThread *,bool);
			static bool volatile s_fCanReuseThreads;
			static bool volatile s_fWaitForMoreTasks;
			static long _MakeAndInitializeOnSTAThread<CLaunchActivatedEventArgs,ApplicationModel::Activation::IActivatedEventArgs,<lambda_3745dd06eae282890ba4e64038ebf520> >(TaskOptions,unsigned long,ApplicationModel::Activation::IActivatedEventArgs * *,<lambda_3745dd06eae282890ba4e64038ebf520> const &);
			static long s_AddThreadAffineWrapper(IComPoolTask *,IComPoolTask * *);
			static long s_GetTaskPoolTlsSlot(unsigned long *);
			static long s_QueueDelayedTask(TaskApartment,TaskOptions,unsigned long,unsigned long,IComPoolTask *,IUnknown * *);
			static long s_QueuePoolTask(TaskApartment,TaskOptions,unsigned long,IComPoolTask *);
			static long s_QueuePoolTaskUnderLock(void *,TaskApartment,TaskOptions,unsigned long,IComPoolTask *,ComTaskPool::TaskList *,ComTaskPool::CThread * *);
			static unsigned long volatile s_cThreadsStarting;
			static unsigned long volatile s_dwThreadIdReuse;
			static unsigned long volatile s_dwUniqueCallingContext;
			static void * s_hEventCache;
			static void s_AttachAndRecoverTask(ComTaskPool::TaskData *);
		public:
			static long QueueTask<<lambda_43d501189a5ee336f4416eeede688869> &>(TaskApartment,<lambda_43d501189a5ee336f4416eeede688869> &);
			static long RunTask(TaskApartment,TaskOptions,unsigned long,unsigned long,IComPoolTask *,IUnknown * *);
		};

		namespace DeviceCapabilitiesW
		{
			bool GetConditionOperationResult<double>(double,double,tagCONDITION_OPERATION);
			bool IsCapabilityPresent(DeviceCapabilitiesW::Capability);
			bool IsScreenPresentMatchingSizeCondition(float,tagCONDITION_OPERATION);
			bool IsScreenSizeRequirementMet(DeviceCapabilitiesW::Capability);
		};

		namespace FilePlaceholderHelper
		{
			PLACEHOLDER_STATES GetPlaceholderStatesFromFileAttributesAndReparsePointTag(unsigned long,unsigned long);
			long BindToFilePlaceholderHandler(IShellItem *,IBindCtx *,_GUID const &,void * *);
			long CopyExtrinsicPropertyStore(unsigned short const *,unsigned short const *);
			long CopyFilePlaceholderToNewFile(unsigned short const *,unsigned short const *,IFilePlaceholder *,IFilePlaceholderCallback *,unsigned long,FilePlaceholderHelper::FILL_PRIMARY_STREAM_CREATESTREAM_TYPE,FilePlaceholderHelper::SYNC_ROOT_OPERATION_FLAGS);
			long CreateAlternateStreamFileName(unsigned short const *,unsigned short const *,unsigned short * *);
			long CreateExtrinsicPropertyStore(_GUID const &,void * *);
			long CreateFileChunkMap(unsigned short const *,FILE_PLACEHOLDER_INFORMATION const &,PLACEHOLDER_STATES,_GUID const &,void * *);
			long CreateFilePlaceholderRemoteStream(IFilePlaceholderStreamResolver *,IFilePlaceholderCallback *,unsigned __int64,_GUID const &,void * *);
			long CreateFilePlaceholderStreamResolver(IPropertyStore *,unsigned short const *,IFilePlaceholderStreamResolver * *);
			long CreatePlaceholderFile(unsigned short const *,unsigned long,unsigned long,_SECURITY_ATTRIBUTES *,unsigned long,FilePlaceholderHelper::CREATE_PLACEHOLDER_FILE_OPEN_OPTION,unsigned long,void * *);
			long CreatePlaceholderFileHandleObject(unsigned short const *,unsigned long,unsigned long,unsigned long,MCFFLAGS,FilePlaceholderHelper::CREATE_PLACEHOLDER_FILE_OPEN_OPTION,unsigned long,IFileHandle * *);
			long CreatePlaceholderOnlyStream(unsigned short const *,unsigned long,IStream * *);
			long CreateRandomAccessStream_PlaceholderCapableWithFindData<<lambda_fd664934e6919271d95b378643a3bff6> >(unsigned short const *,_WIN32_FIND_DATAW const &,Storage::FileAccessMode,TransactionType,SAFE_SAVE_OPTIONS,_GUID const &,void * *,<lambda_fd664934e6919271d95b378643a3bff6> const &);
			long CreateStreamObject_PlaceholderCapableWithCurrentStates<unsigned long,<lambda_3bfc3b5ee15e58d12224efb2651682ad> >(unsigned short const *,IFilePlaceholder *,FILE_PLACEHOLDER_STREAM_HANDLER,PLACEHOLDER_STATES,unsigned long,TransactionType,unsigned long,SAFE_SAVE_OPTIONS,_GUID const &,void * *,<lambda_3bfc3b5ee15e58d12224efb2651682ad> const &);
			long CreateStreamObject_PlaceholderCapableWithFindData<unsigned long,<lambda_3bfc3b5ee15e58d12224efb2651682ad> >(unsigned short const *,FILE_PLACEHOLDER_STREAM_HANDLER,_WIN32_FIND_DATAW const &,unsigned long,TransactionType,unsigned long,SAFE_SAVE_OPTIONS,_GUID const &,void * *,<lambda_3bfc3b5ee15e58d12224efb2651682ad> const &);
			long CreateStreamObject_PlaceholderCapableWithFindData<unsigned long,<lambda_abd8877a83302ca6469a63a3b2a0efd4> >(unsigned short const *,FILE_PLACEHOLDER_STREAM_HANDLER,_WIN32_FIND_DATAW const &,unsigned long,TransactionType,unsigned long,SAFE_SAVE_OPTIONS,_GUID const &,void * *,<lambda_abd8877a83302ca6469a63a3b2a0efd4> const &);
			long FilePlaceholderSyncAction<<lambda_45139b4bf3b6a5576662502842247364> >(IFilePlaceholderCallback *,unsigned long,<lambda_45139b4bf3b6a5576662502842247364> const &);
			long FilePlaceholderSyncActionForObject<<lambda_f26b0417c056da45118334f612bd905b> >(IFilePlaceholderCallback *,unsigned long,_GUID const &,void * *,<lambda_f26b0417c056da45118334f612bd905b> const &);
			long FilePlaceholderSyncActionWithCallbackOutput<<lambda_45139b4bf3b6a5576662502842247364> >(IFilePlaceholderCallback *,unsigned long,IFilePlaceholderOperationOutput * *,<lambda_45139b4bf3b6a5576662502842247364> const &);
			long FilePlaceholderSyncActionWithCallbackOutput<<lambda_f26b0417c056da45118334f612bd905b> >(IFilePlaceholderCallback *,unsigned long,IFilePlaceholderOperationOutput * *,<lambda_f26b0417c056da45118334f612bd905b> const &);
			long FilePlaceholder_BindToPrimaryStream(IShellItem *,IBindCtx *,FILE_PLACEHOLDER_STREAM_HANDLER,FILE_PLACEHOLDER_OPEN_OPTION,IFilePlaceholderCallback *,_GUID const &,void * *);
			long FilePlaceholder_CreateInstance(_GUID const &,void * *);
			long FilePlaceholder_OpenPrimaryStreamSync(IFilePlaceholder *,FILE_PLACEHOLDER_STREAM_HANDLER,FILE_PLACEHOLDER_OPEN_OPTION,unsigned long,IFilePlaceholderCallback *,_GUID const &,void * *,IQosRecorder *);
			long GetFilePlaceholderInformationAndStates(void *,FILE_PLACEHOLDER_INFORMATION *,PLACEHOLDER_STATES *);
			long IFilePlaceholderCallback_ShouldContinue(IFilePlaceholderCallback *);
			long NamedPropertyStore_GetFilePlaceholderInformation(IUnknown *,FILE_PLACEHOLDER_INFORMATION *);
			long SetFilePlaceholderInformationAndStates(void *,FILE_PLACEHOLDER_INFORMATION const *,PLACEHOLDER_STATES const *,FilePlaceholderHelper::SetFilePlaceholderInformationAndStatesOption);
			long SetPlaceholderReparsePointAttribute(unsigned short const *,bool,unsigned long);
			long UpdateFilePlaceholderStates(IShellItem *,PLACEHOLDER_STATES const &,PLACEHOLDER_STATES const &);
			long VerifyFileVersionSyncWithWritableExtrinsicPropertyStore(IFilePlaceholderStreamResolver *,IPropertyStore *,unsigned short const *,IFilePlaceholderCallback *);
			long _CompleteCreatePlaceholderFile(void *,unsigned long,unsigned long);
			long _VerifyFilePlaceholderLocation(_GUID const &,unsigned short const *);
			void GetFilePlaceholderInformationAndStatesFromFindData(_WIN32_FIND_DATAW const &,FILE_PLACEHOLDER_INFORMATION *,PLACEHOLDER_STATES *);
		};

		struct MoveOnCopy<CCoSimpleArray<CPropVariant,4294967294,CSimpleArrayStandardCompareHelper<CPropVariant> > >
		{
			MoveOnCopy<CCoSimpleArray<CPropVariant,4294967294,CSimpleArrayStandardCompareHelper<CPropVariant> > >(MoveOnCopy<CCoSimpleArray<CPropVariant,4294967294,CSimpleArrayStandardCompareHelper<CPropVariant> > > const &);
		};

		struct MoveOnCopy<CCoSimpleArray<PlaceholderQosResult,4294967294,CSimpleArrayStandardCompareHelper<PlaceholderQosResult> > >
		{
			MoveOnCopy<CCoSimpleArray<PlaceholderQosResult,4294967294,CSimpleArrayStandardCompareHelper<PlaceholderQosResult> > >(MoveOnCopy<CCoSimpleArray<PlaceholderQosResult,4294967294,CSimpleArrayStandardCompareHelper<PlaceholderQosResult> > > const &);
		};

		struct MoveOnCopy<CCoSimpleArray<PlaceholderQosSizeDuration,4294967294,CSimpleArrayStandardCompareHelper<PlaceholderQosSizeDuration> > >
		{
			MoveOnCopy<CCoSimpleArray<PlaceholderQosSizeDuration,4294967294,CSimpleArrayStandardCompareHelper<PlaceholderQosSizeDuration> > >(MoveOnCopy<CCoSimpleArray<PlaceholderQosSizeDuration,4294967294,CSimpleArrayStandardCompareHelper<PlaceholderQosSizeDuration> > > const &);
		};

		class NativeString<CoTaskMemPolicy<unsigned short> >
		{
			long _Concat(unsigned short const *,unsigned __int64);
			long _EnsureCapacity(unsigned __int64);
			long _Initialize(unsigned short const *,unsigned __int64);
			long _InitializeHelper<<lambda_b31a7ee49596f02cdde0545643ebbb5a> >(unsigned short const *,char *,<lambda_b31a7ee49596f02cdde0545643ebbb5a> const &);
			long _InitializeHelper<<lambda_ba3db7aa6f4c4ff7c0aefa43081dccfe> >(unsigned short const *,char *,<lambda_ba3db7aa6f4c4ff7c0aefa43081dccfe> const &);
			void _EnsureCount();
			void _Free();
		public:
			NativeString<CoTaskMemPolicy<unsigned short> >();
			bool HasLength();
			bool TrimWhitespace();
			int CompareOrdinalIgnoreCase(NativeString<CoTaskMemPolicy<unsigned short> > const &);
			int CompareOrdinalIgnoreCase(unsigned short const *,unsigned __int64);
			long AppendFormat(unsigned short const *,...);
			long Concat(unsigned short const *);
			long ConcatFormat(unsigned short const *,...);
			long ConcatFormat(unsigned short const *,char *);
			long CopyTo(unsigned short * *);
			long CopyTo(unsigned short *,unsigned __int64);
			long DetachInitializeIfEmpty(unsigned short * *);
			long Initialize(HKEY__ *,unsigned short const *);
			long Initialize(HKEY__ *,unsigned short const *,unsigned short const *);
			long Initialize(NativeString<CoTaskMemPolicy<unsigned short> > const &);
			long InitializeFormat(unsigned short const *,...);
			long InitializeMessage(unsigned short const *,...);
			long InitializeResFormat(HINSTANCE__ *,int,...);
			long InitializeResMessage(HINSTANCE__ *,int,...);
			unsigned __int64 GetCount();
			unsigned short const * GetNonNull();
			void ReplaceChars(unsigned short,unsigned short);
			~NativeString<CoTaskMemPolicy<unsigned short> >();
		};

		class NativeString<LocalMemPolicy<unsigned short> >
		{
			long _EnsureCapacity(unsigned __int64);
			long _Initialize(unsigned short const *,unsigned __int64);
			long _InitializeHelper<<lambda_3e4472143ffabe02b6f29126f94a4c44> >(unsigned short const *,char *,<lambda_3e4472143ffabe02b6f29126f94a4c44> const &);
			long _InitializeHelper<<lambda_ad5658365b7ffb5cf2e9507293f328a3> >(unsigned short const *,char *,<lambda_ad5658365b7ffb5cf2e9507293f328a3> const &);
			void _EnsureCount();
			void _Free();
		public:
			long InitializeFormat(unsigned short const *,...);
			long InitializeResMessage(HINSTANCE__ *,int,...);
		};

		namespace OneDriveShellTelemetry
		{
			unsigned long _ConvertFiletimeToNumberOfMinutesAgo(_FILETIME const &,_FILETIME const &);
			void ReportFileUsageToOneDriveTelemetry(IShellItemArray *,OneDriveShellTelemetry::FileUsageType,OneDriveShellTelemetry::FileUsageFlags,unsigned short const *,unsigned short const *);
		};

		struct ResourceString
		{
			static bool FindAndSize(HINSTANCE__ *,unsigned int,unsigned short,unsigned short const * *,unsigned short *);
		};

		struct String
		{
			long GetLpcwstr(unsigned short const * *);
			long Initialize(HSTRING__ * const &);
			~String();
		};

		struct StringReference
		{
			StringReference<29>(unsigned short const (&)[29]);
			StringReference<33>(unsigned short const (&)[33]);
		};

		namespace SyncRootHelpers
		{
			long ConvertFullIdentifierToProviderIdentifier(unsigned short const *,unsigned short * *);
			long GetStorageProviderDisplayName(IShellItem *,unsigned short * *);
			long GetStorageProviderInfoFromItem(IShellItem *,IStorageProviderInfo * *,unsigned short * *,STORAGE_PROVIDER_PATH_COMPARE_FLAGS *);
			long GetSyncRootShellItem(IShellItem *,_GUID const &,void * *);
			long ResolveItemError(IShellItem *);
			long ToggleSyncEnginePauseState(IShellItemArray *,bool);
			long UpdateItemsAvailability(IShellItemArray *,bool);
		};

	};

	namespace Shell
	{
		namespace SyncStatus
		{
			class CCacheEntry
			{
				virtual ~CCacheEntry();
				void _QueueChange();
				void _TimeoutLastSyncedValue(_tagpropertykey const &,tagPROPVARIANT *,PSC_STATE *);
			public:
				CCacheEntry();
				long RuntimeClassInitialize(IShellItem *,IPropertyStore *);
				virtual _GUID GetProviderId();
				virtual _ITEMIDLIST_ABSOLUTE const * GetItem();
				virtual bool HasChanges();
				virtual bool HasExpired(unsigned __int64);
				virtual bool IsCoveredBy(_ITEMIDLIST_ABSOLUTE const *);
				virtual bool IsItem(_ITEMIDLIST_ABSOLUTE const *);
				virtual bool IsOlderThan(ISyncStatusCacheEntry *);
				virtual long Commit();
				virtual long GetAt(unsigned long,_tagpropertykey *);
				virtual long GetCount(unsigned long *);
				virtual long GetState(_tagpropertykey const &,PSC_STATE *);
				virtual long GetValue(_tagpropertykey const &,tagPROPVARIANT *);
				virtual long GetValueAndState(_tagpropertykey const &,tagPROPVARIANT *,PSC_STATE *);
				virtual long OnSyncStatusChange(_GUID const &,IPropertyStore *);
				virtual long ReloadSyncStatus();
				virtual long Reset();
				virtual long SetState(_tagpropertykey const &,PSC_STATE);
				virtual long SetValue(_tagpropertykey const &,tagPROPVARIANT const &);
				virtual long SetValueAndState(_tagpropertykey const &,tagPROPVARIANT const *,PSC_STATE);
				virtual unsigned __int64 GetLastAccessTime();
				virtual void NotifyChange();
			};

		};

	};

};

struct XMLPROP_ITEM
{
	~XMLPROP_ITEM();
};

namespace XWinRT
{
	struct AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> >
	{
		AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> ><HSTRING__ *>(HSTRING__ * const &,long *);
	};

	struct AutoValue<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *> >
	{
		AutoValue<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *> ><Windows::Internal::Storage::IItemCommand *>(Windows::Internal::Storage::IItemCommand * const &,long *);
	};

	struct ComLock
	{
		ComLock(bool);
		~ComLock();
	};

	struct InterfaceEquals
	{
		long operator()<Windows::Internal::Storage::IItemCommand>(Windows::Internal::Storage::IItemCommand *,Windows::Internal::Storage::IItemCommand *,bool *);
	};

	struct InterfaceLifetimeTraits
	{
		static long Construct<Windows::Internal::Storage::IItemCommand>(Windows::Internal::Storage::IItemCommand * *,Windows::Internal::Storage::IItemCommand *);
		static void Destroy<Windows::Internal::Storage::IItemCommand>(Windows::Internal::Storage::IItemCommand * *);
	};

	struct SerializingLockPolicy
	{
		static detail::LockHolder<ComLock,detail::AcquireRead> Read(ComLock &,long *);
		static detail::LockHolder<ComLock,detail::AcquireWrite> Write(ComLock &,long *);
	};

	struct StringLifetimeTraits
	{
		static void Destroy(HSTRING__ * *);
	};

	namespace detail
	{
		struct AtomicUpdater<0>
		{
			AtomicUpdater<0>();
		};

		struct AtomicUpdates
		{
			static long AtomicUpdate<<lambda_5b6f679a1f1a8bdca5f825d23365a375>,<lambda_2ce2af5873ad9200971915de596a39f6> >(unsigned int *,<lambda_5b6f679a1f1a8bdca5f825d23365a375> const &,<lambda_2ce2af5873ad9200971915de596a39f6> const &);
			static long AtomicUpdate<<lambda_d1d121dd63d9572468bcea17109a82be>,<lambda_9b9de0b91d69c796d27e696c2ae86be7> >(unsigned int *,<lambda_d1d121dd63d9572468bcea17109a82be> const &,<lambda_9b9de0b91d69c796d27e696c2ae86be7> const &);
			static long AtomicUpdate<<lambda_e544b0ac090eb73e4513ada159426efe>,<lambda_48c36da04337698b34d46dd682d3476c> >(unsigned int *,<lambda_e544b0ac090eb73e4513ada159426efe> const &,<lambda_48c36da04337698b34d46dd682d3476c> const &);
		};

		struct InvalidationChecker<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,IntVersionTag>
		{
			long Do<<lambda_2b88a47ae916c84aadd2c99c8e019cb5>,<lambda_5c8cc6928c0ee0437c70af0759116c7a> >(Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > *,<lambda_2b88a47ae916c84aadd2c99c8e019cb5> const &,<lambda_5c8cc6928c0ee0437c70af0759116c7a> const &);
			long Do<<lambda_568f91d3df28991b5736ce7524dffa01>,<lambda_0ae924523e15415009ead06ad02220da> >(Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > *,<lambda_568f91d3df28991b5736ce7524dffa01> const &,<lambda_0ae924523e15415009ead06ad02220da> const &);
			long Do<<lambda_8070c25d4014e63b0fa3ca05732208e8>,<lambda_ac8f8c07483261e6534e98a502ef3447> >(Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > *,<lambda_8070c25d4014e63b0fa3ca05732208e8> const &,<lambda_ac8f8c07483261e6534e98a502ef3447> const &);
			long Do<<lambda_8765b1d322d3661890b2afe016513be3>,<lambda_abed2dbe4048f669ec8c19f3108ebafb> >(Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > *,<lambda_8765b1d322d3661890b2afe016513be3> const &,<lambda_abed2dbe4048f669ec8c19f3108ebafb> const &);
			long Do<<lambda_d3bc9f2155bab7cc3d073508f7c7e10d>,<lambda_bd4a8fa5be6b7e34a1a8a779eddac9ed> >(Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > *,<lambda_d3bc9f2155bab7cc3d073508f7c7e10d> const &,<lambda_bd4a8fa5be6b7e34a1a8a779eddac9ed> const &);
		};

		struct InvalidationChecker<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> >,IntVersionTag>
		{
			long Do<<lambda_66c19f0f9fff1e81aa9abdf309e40192>,<lambda_0891624672a0223d144d86c85e49e47d> >(Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> > *,<lambda_66c19f0f9fff1e81aa9abdf309e40192> const &,<lambda_0891624672a0223d144d86c85e49e47d> const &);
			long Do<<lambda_716a387c41b3401321ec89c3914ea41c>,<lambda_f256e75b92698906b4361f95f04cc9e9> >(Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> > *,<lambda_716a387c41b3401321ec89c3914ea41c> const &,<lambda_f256e75b92698906b4361f95f04cc9e9> const &);
			long Do<<lambda_a0e77763cae1e460b7e0ec4e1d94d4f6>,<lambda_ea8d322dabdbcdc16d9e9230b01af4f4> >(Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> > *,<lambda_a0e77763cae1e460b7e0ec4e1d94d4f6> const &,<lambda_ea8d322dabdbcdc16d9e9230b01af4f4> const &);
			long Do<<lambda_e7eb56b9c38f557db3699afe495ea2de>,<lambda_076cd3423b56ae89a8d2daf40fac2fd0> >(Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> > *,<lambda_e7eb56b9c38f557db3699afe495ea2de> const &,<lambda_076cd3423b56ae89a8d2daf40fac2fd0> const &);
			long Do<<lambda_f010c01f2360cec2d1bb68e2e8067f85>,<lambda_3f68fa1f0f3e4d56f853e2eaa6791d99> >(Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::IItemCommand *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::IItemCommand *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::IItemCommand *> > *,<lambda_f010c01f2360cec2d1bb68e2e8067f85> const &,<lambda_3f68fa1f0f3e4d56f853e2eaa6791d99> const &);
		};

		struct LockHolder<ComLock,AcquireRead>
		{
			~LockHolder<ComLock,AcquireRead>();
		};

		struct LockHolder<ComLock,AcquireWrite>
		{
			~LockHolder<ComLock,AcquireWrite>();
		};

		struct ReentrancyGuard<0>
		{
			ReentrancyGuard<0>(...);
		};

	};

};

class XmlToPropsEngine
{
protected:
	XMLPROP_ITEM const * _FindMappedElementItem(unsigned short const *);
	long _ConvertStringValueToCanonicalType(_tagpropertykey const &,tagPROPVARIANT const &,tagPROPVARIANT *);
	long _ProcessAttributes(COpenMetadataProp *);
	long _ProcessElement(XMLPROP_ITEM const *,int);
	long _ProcessElementChildren(XMLPROP_ITEM const *,COpenMetadataProp *);
	long _SaveStringValueIntoPropStore(XMLPROP_ITEM const *);
	long _SaveValueIntoPropStore(XMLPROP_ITEM const *,unsigned short const *,unsigned short);
	long _StoreUnmappedEntity(XmlNodeType);
public:
	long Process(IXmlReader *,int,XMLPROP_ITEM const *,IUnknown *);
};

struct exception
{
	exception(char const * const &);
	exception(char const * const &,int);
	exception(exception const &);
	virtual char const * what();
	virtual ~exception();
};

namespace std
{
	struct _Error_objects<int>
	{
		static _Generic_error_category _Generic_object;
		static _Iostream_error_category _Iostream_object;
		static _System_error_category _System_object;
	};

	struct _Generic_error_category
	{
		virtual basic_string<char,char_traits<char>,allocator<char> > message(int);
		virtual char const * name();
	};

	struct _Iostream_error_category
	{
		virtual basic_string<char,char_traits<char>,allocator<char> > message(int);
		virtual char const * name();
	};

	struct _System_error_category
	{
		virtual basic_string<char,char_traits<char>,allocator<char> > message(int);
		virtual char const * name();
		virtual error_condition default_error_condition(int);
	};

	struct bad_alloc
	{
		bad_alloc();
		bad_alloc(bad_alloc const &);
		virtual ~bad_alloc();
	};

	struct basic_string<char,char_traits<char>,allocator<char> >
	{
		basic_string<char,char_traits<char>,allocator<char> > & assign(basic_string<char,char_traits<char>,allocator<char> > const &,unsigned __int64,unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> > & assign(char const *,unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> > & erase(unsigned __int64,unsigned __int64);
		void _Copy(unsigned __int64,unsigned __int64);
		void _Tidy(bool,unsigned __int64);
		void _Xlen();
		void _Xran();
	};

	struct error_category
	{
		virtual bool equivalent(error_code const &,int);
		virtual bool equivalent(int,error_condition const &);
		virtual error_condition default_error_condition(int);
	};

	struct length_error
	{
		length_error(char const *);
		length_error(length_error const &);
		virtual ~length_error();
	};

	struct logic_error
	{
		logic_error(logic_error const &);
	};

	struct num_put<char,back_insert_iterator<basic_string<char,char_traits<char>,allocator<char> > > >
	{
		static locale::id id;
	};

	struct num_put<wchar_t,back_insert_iterator<basic_string<wchar_t,char_traits<wchar_t>,allocator<wchar_t> > > >
	{
		static locale::id id;
	};

	struct numpunct<char>
	{
		static locale::id id;
	};

	struct numpunct<wchar_t>
	{
		static locale::id id;
	};

	struct out_of_range
	{
		out_of_range(char const *);
		out_of_range(out_of_range const &);
		virtual ~out_of_range();
	};

	struct unique_ptr<InputDialCommon::InputDialDeviceObserver,default_delete<InputDialCommon::InputDialDeviceObserver> >
	{
		void reset(InputDialCommon::InputDialDeviceObserver *);
		~unique_ptr<InputDialCommon::InputDialDeviceObserver,default_delete<InputDialCommon::InputDialDeviceObserver> >();
	};

	char const * _Syserror_map(int);
	char const * _Winerror_map(int);
	nothrow_t const std::nothrow;
	void _Xbad_alloc();
	void _Xlength_error(char const *);
	void _Xout_of_range(char const *);
};

namespace utl
{
	bool binary_search<unsigned short const * const *,unsigned short const *,StateRepoHelpers::StringCompare>(unsigned short const * const *,unsigned short const * const *,unsigned short const * const &,StateRepoHelpers::StringCompare);
};

namespace wil
{
	class ActivityBase<AppResolverLogging,0,0,4,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<AppResolverLogging,0,0,4,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<AppResolverLogging,0,0,4,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<AppResolverLogging,0,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<AppResolverLogging,0,0,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<AppResolverLogging,0,0,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<BannerLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<BannerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<BannerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<BannerLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<BannerLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<BannerLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<BannerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<BannerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<BannerLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<CommonStartTelemetryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CommonStartTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CommonStartTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<CommonStartTelemetryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<DefaultAssocLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<DefaultAssocLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<DefaultAssocLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<DefaultAssocLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<DefaultAssocLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<DesktopIconLayoutLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<DesktopIconLayoutLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<DesktopIconLayoutLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<DesktopIconLayoutLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<DesktopIconLayoutLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<FileExplorerLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<FileExplorerLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<FileExplorerLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<FileExplorerLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<FileExplorerLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<FileExplorerLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<FileExplorerLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<FileExplorerPerf,1,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<FileExplorerPerf,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<FileExplorerPerf,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<FileExplorerPerf,1,0,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<FileExplorerPerf,1,0,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<IconCacheLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<IconCacheLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<IconCacheLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	public:
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<IconCacheLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<IconCacheLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<IconCacheLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<IconCacheLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<IconCacheLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<LibraryLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<LibraryLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<OpenWithLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<OpenWithLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<OpenWithLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<OpenWithLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<OpenWithLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<OpenWithLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<OpenWithLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<OpenWithLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<PostBootReminderLogger,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<PostBootReminderLogger,_TlgReflectorTag_Param0IsProviderType>
		{
			~ActivityData<PostBootReminderLogger,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<PostBootReminderLogger,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<RunDialogLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<RunDialogLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<RunDialogLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<RunDialogLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<RunDialogLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<RunDialogLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<RunDialogLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<RunDialogLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<RunDialogLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<Shell32Logging,1,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	public:
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<Shell32Logging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<Shell32Logging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<Shell32Logging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TaskbarLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TaskbarLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TaskbarLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TaskbarLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TaskbarLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TileDataLayerItemWrappersLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TileDataLayerItemWrappersLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TileDataLayerItemWrappersLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<TileDataLayerItemWrappersLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TileDataLayerItemWrappersLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	struct ActivityThreadWatcher
	{
		ActivityThreadWatcher(details::IFailureCallback *,char const *);
		ActivityThreadWatcher(details::IFailureCallback *,details::StoredCallContextInfo const &);
		~ActivityThreadWatcher();
	};

	struct ErrorHandlingHelpers
	{
		static void FallbackTelemetryCallback(bool,FailureInfo const &);
	};

	class Feature<__WilFeatureTraits_Feature_CloudFileStateIcon>
	{
		static void ReportUsageToService(bool,ReportingKind,unsigned __int64);
	};

	class Feature<__WilFeatureTraits_Feature_MakePowershellTheDefaultConsole>
	{
		static void ReportUsageToService(bool,ReportingKind,unsigned __int64);
	};

	class Feature<__WilFeatureTraits_Feature_NamespaceEnumerationRestrictions>
	{
		static void ReportUsageToService(bool,ReportingKind,unsigned __int64);
	};

	class Feature<__WilFeatureTraits_Feature_NamespaceNavigationRestrictions>
	{
		static void ReportUsageToService(bool,ReportingKind,unsigned __int64);
	};

	class Feature<__WilFeatureTraits_Feature_StateRepoFileLookup>
	{
		static details::CachedFeatureEnabledState GetCachedFeatureEnabledState(bool);
		static void ReportUsageToService(bool,ReportingKind,unsigned __int64);
	public:
		static bool __private_IsEnabled();
	};

	class Feature<__WilFeatureTraits_Feature_WindowsLicenseAgreementContentDialog>
	{
		static void ReportUsageToService(bool,ReportingKind,unsigned __int64);
	public:
		static bool __private_IsEnabled();
	};

	struct FileSystemBindData
	{
		FileSystemBindData();
		virtual long GetFileID(_LARGE_INTEGER *);
		virtual long GetFindData(_WIN32_FIND_DATAW *);
		virtual long GetJunctionCLSID(_GUID *);
		virtual long SetFileID(_LARGE_INTEGER);
		virtual long SetFindData(_WIN32_FIND_DATAW const *);
		virtual long SetJunctionCLSID(_GUID const &);
	};

	struct PropVariant
	{
		bool TryDetachString(unsigned short * *);
		long ChangeType(unsigned short,tagPROPVARIANT const *);
		long GetAsBoolean(bool *);
		long GetObjectW(_GUID const &,void * *);
		unsigned short const * GetString();
	};

	struct PropertyStoreHelperBase<INamedPropertyStore>
	{
		long GetAsBoolWithDefault<unsigned short const *>(unsigned short const *,bool,bool *);
		long GetBoolean<unsigned short const *>(unsigned short const *,bool *);
		long GetFailIfEmpty<unsigned short const *>(unsigned short const *,tagPROPVARIANT *);
	};

	struct PropertyStoreHelperBase<IPropertyStore>
	{
		long GetAsBoolWithDefault<_tagpropertykey>(_tagpropertykey,bool,bool *);
		long GetAsUInt32<_tagpropertykey>(_tagpropertykey,unsigned long *);
		long GetAsUInt32WithDefault<_tagpropertykey>(_tagpropertykey,unsigned long,unsigned long *);
		long GetBoolean<_tagpropertykey>(_tagpropertykey,bool *);
		long GetBuffer<_tagpropertykey>(_tagpropertykey,void *,unsigned int);
		long GetFailIfEmpty<_tagpropertykey>(_tagpropertykey,tagPROPVARIANT *);
		long GetInt32<_tagpropertykey>(_tagpropertykey,long *);
		long GetString<_tagpropertykey>(_tagpropertykey,unsigned short * *);
		long GetUInt32<_tagpropertykey>(_tagpropertykey,unsigned long *);
		long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS);
		long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const *,unsigned int);
		long InitFromMemory();
	};

	struct ResultException
	{
		ResultException(ResultException const &);
		virtual char const * what();
		virtual ~ResultException();
	};

	struct ShellBindContextHelper
	{
		ShellBindContextHelper(IBindCtx *);
		long SetFileSystemBindData(IFileSystemBindData2 *);
		long SetFindData(_WIN32_FIND_DATAW const &);
		long SetNamedBoolean(unsigned short const *);
	};

	struct ShellItemPropertyStoreHelper
	{
		long GetAsIDList<_tagpropertykey>(_tagpropertykey,_ITEMIDLIST_ABSOLUTE * *);
		long GetAsShellItem<_tagpropertykey>(_tagpropertykey,_GUID const &,void * *);
		long SetIDList<_tagpropertykey>(_tagpropertykey,_ITEMIDLIST_ABSOLUTE const *);
		long SetShellItemAsIdList<_tagpropertykey>(_tagpropertykey,IShellItem *);
	};

	struct StoredFailureInfo
	{
		void SetFailureInfo(FailureInfo const &);
	};

	class TraceLoggingProvider
	{
		virtual bool NotifyFailure(FailureInfo const &);
	protected:
		bool IsEnabled_();
		virtual void Initialize();
		virtual void OnErrorReported(bool,FailureInfo const &);
		virtual ~TraceLoggingProvider();
		void Register(_TlgProvider_t const * const);
		void ReportTelemetryFailure(FailureInfo const &);
		void ReportTraceLoggingFailure(FailureInfo const &);
	};

	struct com_ptr_t<IEnumIDList,err_returncode_policy>
	{
		~com_ptr_t<IEnumIDList,err_returncode_policy>();
	};

	struct com_ptr_t<IFolderView,err_returncode_policy>
	{
		~com_ptr_t<IFolderView,err_returncode_policy>();
	};

	struct com_ptr_t<IFolderView2,err_returncode_policy>
	{
		~com_ptr_t<IFolderView2,err_returncode_policy>();
	};

	struct com_ptr_t<IShellView2,err_returncode_policy>
	{
		~com_ptr_t<IShellView2,err_returncode_policy>();
	};

	namespace details
	{
		struct DestroyThreadPoolTimer<0>
		{
			static void Destroy(_TP_TIMER *);
		};

		struct DestroyThreadPoolWait<0>
		{
			static void Destroy(_TP_WAIT *);
		};

		struct DummyUnknown
		{
			DummyUnknown();
			virtual long ContextSensitiveHelp(int);
			virtual long GetClassID(_GUID *);
			virtual long GetWindow(HWND__ * *);
		};

		class EnabledStateManager
		{
			void RecordCachedUsageUnderLock();
		public:
			void OnStateChange();
			void OnTimer();
			void QueueBackgroundUsageReporting(unsigned int,FeaturePropertyCache &);
		};

		class FeatureStateManager
		{
			bool EnsureStateData();
			void EnsureSubscribedToStateChangesUnderLock();
		public:
			void OnStateChange();
			void OnTimer();
			void SubscribeToEnabledStateChanges(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
		};

		struct ScopeExitFn<<lambda_53102d9e2c66e59f8c5e0536c1cdfb78> >
		{
			~ScopeExitFn<<lambda_53102d9e2c66e59f8c5e0536c1cdfb78> >();
		};

		class SerializedControlsStore
		{
			void ReadControls();
		public:
			bool FindApplicableControl(unsigned int,SerializedStagingControl *);
		};

		struct SerializedStagingControls
		{
			~SerializedStagingControls();
		};

		class StoredCallContextInfo
		{
			void AssignMessage(unsigned short const *);
		};

		class ThreadFailureCallbackHolder
		{
			static long volatile s_telemetryId;
		public:
			ThreadFailureCallbackHolder(IFailureCallback *,CallContextInfo *,bool);
			static bool GetThreadContext(FailureInfo *,ThreadFailureCallbackHolder *,char *,unsigned __int64);
			void StartWatching();
			void StopWatching();
		};

		namespace in1diag3
		{
			long Log_Hr(void *,unsigned int,char const *,long);
			long Log_HrMsg(void *,unsigned int,char const *,long,char const *,...);
			long Log_IfFailedMsg(void *,unsigned int,char const *,long,char const *,...);
			long Return_GetLastError(void *,unsigned int,char const *);
			long Return_NtStatus(void *,unsigned int,char const *,long);
			long Return_Win32(void *,unsigned int,char const *,unsigned long);
			void FailFast_Unexpected(void *,unsigned int,char const *);
			void Return_Hr(void *,unsigned int,char const *,long);
			void Return_HrMsg(void *,unsigned int,char const *,long,char const *,...);
			void _FailFastImmediate_Unexpected();
			void _FailFast_GetLastError(void *,unsigned int,char const *);
			void _FailFast_Hr(void *,unsigned int,char const *,long);
			void _FailFast_Unexpected(void *,unsigned int,char const *);
			void _Log_GetLastError(void *,unsigned int,char const *);
			void _Log_Hr(void *,unsigned int,char const *,long);
			void _Log_NtStatus(void *,unsigned int,char const *,long);
			void _Log_NullAlloc(void *,unsigned int,char const *);
			void _Log_Win32(void *,unsigned int,char const *,unsigned long);
			void _Throw_Hr(void *,unsigned int,char const *,long);
			void _Throw_Win32(void *,unsigned int,char const *,unsigned long);
		};

		struct out_param_t<wistd::unique_ptr<_ITEMIDLIST_ABSOLUTE,cotaskmem_deleter> >
		{
			~out_param_t<wistd::unique_ptr<_ITEMIDLIST_ABSOLUTE,cotaskmem_deleter> >();
		};

		struct registry_watcher_state
		{
			void ReleaseFromCallback(RegistryChangeKind);
		};

		class shared_buffer
		{
			void assign(long *,unsigned __int64);
		public:
			bool create(void const *,unsigned __int64);
			void reset();
		};

		struct shared_object<ActivityBase<AppResolverLogging,0,0,4,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<AppResolverLogging,0,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<AppResolverLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<AppResolverLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppResolverLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<BannerLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<BannerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<BannerLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<BannerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<CommonStartTelemetryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CommonStartTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<DefaultAssocLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DefaultAssocLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<DesktopIconLayoutLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DesktopIconLayoutLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<FileExplorerLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<FileExplorerLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<FileExplorerLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<FileExplorerPerf,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<FileExplorerPerf,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<IconCacheLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<IconCacheLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<IconCacheLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<IconCacheLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LibraryLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LibraryLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<LibraryLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LibraryLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<OpenWithLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<OpenWithLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<OpenWithLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<PostBootReminderLogger,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<PostBootReminderLogger,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<RunDialogLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<RunDialogLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<RunDialogLogging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<RunDialogLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<Shell32Logging,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<Shell32Logging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<Shell32Logging,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Shell32Logging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<TaskbarLogging,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TaskbarLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TileDataLayerItemWrappersLogging,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TileDataLayerItemWrappersLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct static_lazy<AppResolverLogging>
		{
			~static_lazy<AppResolverLogging>();
		};

		struct static_lazy<AppResolverTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			~static_lazy<AppResolverTelemetry>();
		};

		struct static_lazy<BannerLogging>
		{
			BannerLogging * get();
			~static_lazy<BannerLogging>();
		};

		struct static_lazy<CommonPeopleTelemetry>
		{
			~static_lazy<CommonPeopleTelemetry>();
		};

		struct static_lazy<CommonPeopleTelemetryLogging>
		{
			CommonPeopleTelemetryLogging * get();
			~static_lazy<CommonPeopleTelemetryLogging>();
		};

		struct static_lazy<CommonStartTelemetryLogging>
		{
			CommonStartTelemetryLogging * get();
			~static_lazy<CommonStartTelemetryLogging>();
		};

		struct static_lazy<DefaultAssocLogging>
		{
			DefaultAssocLogging * get();
			~static_lazy<DefaultAssocLogging>();
		};

		struct static_lazy<DesktopIconLayoutLogging>
		{
			~static_lazy<DesktopIconLayoutLogging>();
		};

		struct static_lazy<DesktopPersonalizationLogging>
		{
			DesktopPersonalizationLogging * get();
			~static_lazy<DesktopPersonalizationLogging>();
		};

		struct static_lazy<DesktopPersonalizationTelemetry>
		{
			~static_lazy<DesktopPersonalizationTelemetry>();
		};

		struct static_lazy<ErrorHandlingHelpers>
		{
			~static_lazy<ErrorHandlingHelpers>();
		};

		struct static_lazy<FavoritesTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			~static_lazy<FavoritesTelemetry>();
		};

		struct static_lazy<FileExplorerLogging>
		{
			~static_lazy<FileExplorerLogging>();
		};

		struct static_lazy<FileExplorerPerf>
		{
			FileExplorerPerf * get();
			~static_lazy<FileExplorerPerf>();
		};

		struct static_lazy<FileExplorerTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			~static_lazy<FileExplorerTelemetry>();
		};

		struct static_lazy<IconCacheLogging>
		{
			~static_lazy<IconCacheLogging>();
		};

		struct static_lazy<InputDial::InputDialTraceProvider>
		{
			~static_lazy<InputDial::InputDialTraceProvider>();
		};

		struct static_lazy<LibraryLogging>
		{
			LibraryLogging * get();
			~static_lazy<LibraryLogging>();
		};

		struct static_lazy<OpenWithLogging>
		{
			~static_lazy<OpenWithLogging>();
		};

		struct static_lazy<PiiSafeKnownFolderList>
		{
			PiiSafeKnownFolderList * get();
			~static_lazy<PiiSafeKnownFolderList>();
		};

		struct static_lazy<PostBootReminderLogger>
		{
			PostBootReminderLogger * get();
			~static_lazy<PostBootReminderLogger>();
		};

		struct static_lazy<RunDialogLogging>
		{
			RunDialogLogging * get();
			~static_lazy<RunDialogLogging>();
		};

		struct static_lazy<Shell32Logging>
		{
			~static_lazy<Shell32Logging>();
		};

		struct static_lazy<Shell32LoggingTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			~static_lazy<Shell32LoggingTelemetry>();
		};

		struct static_lazy<ShellInfraCriticalFailureProvider>
		{
			ShellInfraCriticalFailureProvider * get();
			~static_lazy<ShellInfraCriticalFailureProvider>();
		};

		struct static_lazy<SurfaceHubSettingsEnvironmentLogger>
		{
			~static_lazy<SurfaceHubSettingsEnvironmentLogger>();
		};

		struct static_lazy<TaskbarLogging>
		{
			TaskbarLogging * get();
			~static_lazy<TaskbarLogging>();
		};

		struct static_lazy<TileDataLayerItemWrappersLogging>
		{
			~static_lazy<TileDataLayerItemWrappersLogging>();
		};

		FEATURE_ENABLED_STATE WilApi_GetFeatureEnabledState(unsigned int,FEATURE_CHANGE_TIME);
		HINSTANCE__ * GetNTDLLModuleHandle();
		_RTL_SRWLOCK g_testLock;
		bool (* g_pfnGetModuleInformation)(void *,unsigned int *,char *,unsigned __int64);
		bool GetModuleInformation(void *,unsigned int *,char *,unsigned __int64);
		bool IsFeatureConfigured(unsigned int,details::SerializedStagingControl *);
		bool g_processShutdownInProgress;
		bool g_resultMessageCallbackSet;
		char const * (* g_pfnGetModuleName)();
		char const * GetCurrentModuleName();
		details::RecordUsageResult RecordUsageInPropertyCache(details::FeaturePropertyCache &,details::ServiceReportingKind,unsigned int);
		details::TestFeatureState * g_testStates;
		details_abi::ProcessLocalStorage<details_abi::ProcessLocalData> g_processLocalData;
		details_abi::ThreadLocalStorage<details::ThreadFailureCallbackHolder *> * g_pThreadFailureCallbacks;
		details_abi::ThreadLocalStorage<details::ThreadFailureCallbackHolder *> g_threadFailureCallbacks;
		int RecordException(long);
		int RecordFailFast(long);
		int RecordLog(long);
		int RecordReturn(long);
		long (* g_pfnRunFunctorWithExceptionFilter)(details::IFunctor &,details::IFunctorHost &,void *);
		long GetLastErrorFailHr();
		long NtStatusToHr(long);
		long RecognizeCaughtExceptionFromCallback(unsigned short *,unsigned __int64);
		long ReportFailure_GetLastErrorHr(void *,unsigned int,char const *,char const *,char const *,void *,FailureType);
		long ReportFailure_NtStatus(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long);
		long ReportFailure_Win32(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,unsigned long);
		long ResultFromCaughtExceptionInternal(unsigned short *,unsigned __int64,bool *);
		long RunFunctorWithExceptionFilter(details::IFunctor &,details::IFunctorHost &,void *);
		long StringCchPrintfA(char *,unsigned __int64,char const *,...);
		shutdown_aware_object<details::EnabledStateManager> g_enabledStateManager;
		shutdown_aware_object<details::FeatureStateManager> g_featureStateManager;
		unsigned __int64 ResultStringSize(char const *);
		unsigned char (* g_pfnRtlDllShutdownInProgress)();
		unsigned char * WriteResultString<char const *>(unsigned char *,unsigned char *,char const *,char const * *);
		unsigned char * WriteResultString<unsigned short const *>(unsigned char *,unsigned char *,unsigned short const *,unsigned short const * *);
		unsigned char RtlDllShutdownInProgress();
		unsigned long (* g_pfnRtlNtStatusToDosErrorNoTeb)(long);
		unsigned long GetLastErrorFail(void *,unsigned int,char const *,char const *,char const *,void *);
		unsigned long ReportFailure_GetLastError(void *,unsigned int,char const *,char const *,char const *,void *,FailureType);
		unsigned long RtlNtStatusToDosErrorNoTeb(long);
		unsigned short * LogStringPrintf(unsigned short *,unsigned short const *,unsigned short const *,...);
		void (* g_pfnGetContextAndNotifyFailure)(FailureInfo *,char *,unsigned __int64);
		void (* g_pfnLoggingCallback)(FailureInfo const &);
		void (* g_pfnRethrow)();
		void (* g_pfnTelemetryCallback)(bool,FailureInfo const &);
		void (* g_pfnThrowResultException)(FailureInfo const &);
		void CloseHandle(void *);
		void FreeProcessHeap(void *);
		void GetContextAndNotifyFailure(FailureInfo *,char *,unsigned __int64);
		void LogFailure(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,unsigned short const *,bool,unsigned short *,unsigned __int64,char *,unsigned __int64,FailureInfo *);
		void MaybeGetExceptionString(ResultException const &,unsigned short *,unsigned __int64);
		void MaybeGetExceptionString(exception const &,unsigned short *,unsigned __int64);
		void ReleaseMutex(void *);
		void ReportFailure(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,unsigned short const *,details::ReportFailureOptions);
		void ReportFailure_Hr(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long);
		void ReportFailure_HrMsg(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,char const *,char *);
		void ReportFailure_Msg(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,char const *,char *);
		void ReportUsageToService(unsigned int,details::FeaturePropertyCache &,bool,ReportingKind,unsigned __int64);
		void ReportUsageToService(unsigned int,details::FeaturePropertyCache &,details::ServiceReportingKind,unsigned __int64);
		void ResetEvent(void *);
		void Rethrow();
		void SetEnabledStateProperty(details::FeaturePropertyCache &,details::CachedFeatureEnabledState);
		void SetEvent(void *);
		void ThrowResultExceptionInternal(FailureInfo const &);
		void WilApiImpl_RecordFeatureUsage(unsigned int,unsigned int,unsigned int,char const *);
	};

	namespace details_abi
	{
		class FeatureStateData
		{
			void RetrieveUsageUnderLock(UsageIndexes &);
		public:
			bool RecordFeatureUsage(unsigned int,details::ServiceReportingKind,unsigned __int64);
			void ProcessShutdown();
			void RecordUsage();
		};

		struct ProcessLocalStorage<FeatureStateData>
		{
			FeatureStateData * GetShared();
			~ProcessLocalStorage<FeatureStateData>();
		};

		struct ProcessLocalStorage<ProcessLocalData>
		{
			~ProcessLocalStorage<ProcessLocalData>();
		};

		struct ProcessLocalStorageData<FeatureStateData>
		{
			static long Acquire(char const *,ProcessLocalStorageData<FeatureStateData> * *);
		};

		struct ProcessLocalStorageData<ProcessLocalData>
		{
			static long Acquire(char const *,ProcessLocalStorageData<ProcessLocalData> * *);
			void Release();
			~ProcessLocalStorageData<ProcessLocalData>();
		};

		class RawUsageIndex
		{
			bool RecordUsageInternal(void *,unsigned __int64,void *,unsigned __int64,unsigned int);
			unsigned char * FindInsertionPointOrIncrement(UsageIndexProperty &,unsigned char *,void *,unsigned __int64,unsigned int);
			unsigned char * LowerBound(unsigned char *,unsigned __int64,void *,unsigned __int64);
		public:
			RawUsageIndex(unsigned short,unsigned short,CountSize,unsigned short,CountSize);
			bool Iterate(wistd::function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>);
			bool RecordUsage(void *,unsigned __int64,void *,unsigned __int64,unsigned int);
			void SetBuffer(void *,unsigned __int64,unsigned __int64);
			void Swap(RawUsageIndex &);
		};

		class SemaphoreValue
		{
			long CreateFromValueInternal(unsigned short const *,bool,unsigned __int64);
			static long GetValueFromSemaphore(void *,long *);
			static long TryGetValueInternal(unsigned short const *,bool,unsigned __int64 *,bool *);
		public:
			static long TryGetPointer(unsigned short const *,void * *);
			void Destroy();
			~SemaphoreValue();
		};

		struct ThreadLocalData
		{
			void SetLastError(FailureInfo const &);
		};

		struct ThreadLocalFailureInfo
		{
			void Set(FailureInfo const &,unsigned int);
		};

		struct ThreadLocalStorage<details::ThreadFailureCallbackHolder *>
		{
			details::ThreadFailureCallbackHolder * * GetLocal(bool);
			~ThreadLocalStorage<details::ThreadFailureCallbackHolder *>();
		};

		struct UsageIndexProperty
		{
			bool Read(unsigned char * &,unsigned char *);
			bool Write(unsigned char * &,unsigned char *);
			int Compare(void *,unsigned __int64);
			unsigned __int64 GetSize();
			void UpdateCount(unsigned int);
		};

		struct UsageIndexes
		{
			UsageIndexes();
			void Record();
			~UsageIndexes();
		};

		struct heap_buffer
		{
			bool ensure(unsigned __int64);
			bool push_back(void const *,unsigned __int64);
			bool reserve(unsigned __int64);
		};

		details_abi::ProcessLocalStorage<details_abi::ProcessLocalData> * g_pProcessLocalData;
		details_abi::ThreadLocalData * GetThreadLocalDataCache(bool);
		void RecordWnfUsageIndex(__WIL__WNF_STATE_NAME const *,unsigned __int64,details_abi::RawUsageIndex const &);
	};

	struct shutdown_aware_object<details::EnabledStateManager>
	{
		shutdown_aware_object<details::EnabledStateManager>();
		~shutdown_aware_object<details::EnabledStateManager>();
	};

	struct shutdown_aware_object<details::FeatureStateManager>
	{
		shutdown_aware_object<details::FeatureStateManager>();
		~shutdown_aware_object<details::FeatureStateManager>();
	};

	struct unique_hglobal_locked
	{
		~unique_hglobal_locked();
	};

	bool (* g_pfnShouldOutputDebugString)();
	bool ProcessShutdownInProgress();
	bool g_fResultFailFastUnknownExceptions;
	bool g_fResultOutputDebugString;
	long (* g_pfnResultFromCaughtException)();
	long GetFailureLogString(unsigned short *,unsigned __int64,wil::FailureInfo const &);
	long GetTokenInformationNoThrow<_TOKEN_USER>(wistd::unique_ptr<_TOKEN_USER,wistd::default_delete<_TOKEN_USER> > &,void *);
	long ResultFromCaughtException();
	void RethrowCaughtException();
};

namespace wistd
{
	class _Func_class<bool,void *,unsigned __int64,void *,unsigned __int64,unsigned int,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	};

	class _Func_class<int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	};

	class _Func_class<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	public:
		long operator()();
	};

	class _Func_impl<_Callable_obj<<lambda_193f52e6a41be387c064e0caeb515c8e>,0>,details::function_allocator<_Func_class<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual long _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_2f784ef15c303f2c8d3bec493a729414>,0>,details::function_allocator<_Func_class<bool,void *,unsigned __int64,void *,unsigned __int64,unsigned int,_Nil,_Nil> >,bool,void *,unsigned __int64,void *,unsigned __int64,unsigned int,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<bool,void *,unsigned __int64,void *,unsigned __int64,unsigned int,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<bool,void *,unsigned __int64,void *,unsigned __int64,unsigned int,_Nil,_Nil> * _Move(void *);
	};

	class _Func_impl<_Callable_obj<<lambda_3cb62ef21b7cb42cb283c2442e3ae7ae>,0>,details::function_allocator<_Func_class<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual long _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_46eae10cec5caf9fff89422a8c94211b>,0>,details::function_allocator<_Func_class<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual long _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_51a7ee33907feea3c723f3d64a37bdfc>,0>,details::function_allocator<_Func_class<int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual int _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_65552b76c8310ac67d2850be74712ad4>,0>,details::function_allocator<_Func_class<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual long _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_92b3e7eb38698a9944000f808ceb9e6d>,0>,details::function_allocator<_Func_class<int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<int,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual int _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_c12682c30802f8fc5ae193caf74f6bf9>,0>,details::function_allocator<_Func_class<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual long _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_e1b339e4d47a023791f0fa855a6997d9>,0>,details::function_allocator<_Func_class<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<long,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual long _Do_call();
	};

	struct function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>
	{
		~function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>();
	};

	struct function<long ()>
	{
		~function<long ()>();
	};

	class unique_ptr<CApplyPropertiesUndo,default_delete<CApplyPropertiesUndo> >
	{
		void _Delete();
	};

	struct unique_ptr<Microsoft::Windows::FileExplorer::Banners::BannerData,default_delete<Microsoft::Windows::FileExplorer::Banners::BannerData> >
	{
		operator bool();
		~unique_ptr<Microsoft::Windows::FileExplorer::Banners::BannerData,default_delete<Microsoft::Windows::FileExplorer::Banners::BannerData> >();
	};

	struct unique_ptr<_ITEMID_CHILD,wil::cotaskmem_deleter>
	{
		void reset(_ITEMID_CHILD *);
	};

	struct unique_ptr<_TOKEN_USER,default_delete<_TOKEN_USER> >
	{
		void reset(_TOKEN_USER *);
	};

	struct unique_ptr<void,wil::process_heap_deleter>
	{
		void reset(void *);
	};

	void swap_wil<wil::details_abi::heap_buffer>(wil::details_abi::heap_buffer &,wil::details_abi::heap_buffer &);
};

ACTCTX_REQUESTED_RUN_LEVEL _GetRunLevelForCPL(unsigned short const *);
ATL::CComModule _Module;
Button3d * element_cast<Button3d>(DirectUI::Element *);
CACString * CreateACString(unsigned short const *,int,unsigned long);
CAppControlHost * element_cast<CAppControlHost>(DirectUI::Element *);
CAutoplayDeviceDataManager g_AutoplayDeviceDataManager;
CBrowserRegistryCache g_BrowserRegistryCache;
CCIDGroupControl * element_cast<CCIDGroupControl>(DirectUI::Element *);
CCLSIDInfoCache g_clsidInfoCache;
CChartView * element_cast<CChartView>(DirectUI::Element *);
CCritSecDelayInitBase g_csArePasteEffectsAvailable;
CCritSecDelayInitBase g_csAutoPlayForegroundControl;
CCritSecDelayInitBase g_csAutoplayDeviceDataManager;
CCritSecDelayInitBase g_csCPLLoadedLock;
CDPA<_tagDPAProfilePaths,CTContainer_PolicyUnOwned<_tagDPAProfilePaths> > * g_pdpaProfilePaths;
CDUIResourceManager g_resmgrDetailsContainerDUI;
CDUIResourceManager g_resmgrIndividualConflictsDialogDUI;
CDUIResourceManager g_resmgrOperationStatusMgrDUI;
CDUIResourceManager g_resmgrStatusBarDUI;
CDUISizerElement * element_cast<CDUISizerElement>(DirectUI::Element *);
CDragDropHelper * g_pdiDragImages;
CFDFolderNotifySource * g_pcnsFDNotifySource;
CGCTask * CGCTask_Create(CUADBLog *);
CHANGELOCK * _SHChangeNotification_Lock(void *,unsigned long);
CIconCache * g_pIconCache;
CItemHandlerCache * g_pItemHandlerCache;
CKoreanDecomposition g_koreanDecomposition;
CMBMsgFilter * GetMessageFilter();
CMBMsgFilter g_msgfilter;
CMenuAgent g_menuagent;
CMetadataElement * element_cast<CMetadataElement>(DirectUI::Element *);
CNetParsingCache * g_npc;
CPLMODULE * CPL_LoadCPLModule(unsigned short const *,int);
CPLMODULE * _FindOrAddCPLModuleInList(MINST const *,unsigned short const *,int,void *,void *,int *);
CPVIEW CPL_GetPreferredView();
CPreviewMetadata * element_cast<CPreviewMetadata>(DirectUI::Element *);
CPreviewThumbnail * element_cast<CPreviewThumbnail>(DirectUI::Element *);
CPropertyButton * element_cast<CPropertyButton>(DirectUI::Element *);
CRebuildSessionTask * CRebuildSessionTask_Create(CUADBLog *);
CSRWLock g_srwCachedShellState;
CSRWLock g_srwExtCache;
CSRWLock g_srwFDNotifySourceLock;
CSRWLock g_srwftdCache;
CScriptAutoDetection g_scriptAutoDetection;
CSnapRTask * CSnapRTask_Create(CUADBLog *);
CSplitButton * element_cast<CSplitButton>(DirectUI::Element *);
CStructHashTable<CACHEEXTKEY,ExtLoadPolicy> * g_pExtCache;
CStructHashTable<_GUID,IFolderTypeDescription *> * g_pftdCache;
CSyncRootManagerCache * g_pSyncRootManagerCache;
CTimeZoneInformationCache_InitOnDemand g_tziCache;
CUADBLog * * g_uempDbLog;
CUADBLog * * g_uempDbSvr;
CUADBLog * CUADBLog_Create();
CUrlCapabilityCache * g_pUrlCapabilityCache;
CUserAssist * g_uempUaSingleton;
CVolumeInfoCache g_volInfoCache;
CXmlPropMapCleaner g_xpmcCleaner;
CachedShellState * g_pcssCache;
CheckboxContentElement * element_cast<CheckboxContentElement>(DirectUI::Element *);
CheckboxElement * element_cast<CheckboxElement>(DirectUI::Element *);
ConflictItemElement * element_cast<ConflictItemElement>(DirectUI::Element *);
ConflictItemTile * element_cast<ConflictItemTile>(DirectUI::Element *);
DLGPROCDATA * g_dpData;
DirectUI::Element * GetVisibleDescendent(DirectUI::Element *,unsigned short);
DirectUI::Element * _FindAncestorElement(DirectUI::Element *,DirectUI::IClassInfo *);
DirectUI::Element * _FindDescendentElement(DirectUI::Element *,DirectUI::IClassInfo *);
DirectUI::Element * _WalkChildElements(DirectUI::Element *,DirectUI::IClassInfo *);
DirectUI::HWNDElement * element_cast<DirectUI::HWNDElement>(DirectUI::Element *);
DirectUI::ScrollViewer * element_cast<DirectUI::ScrollViewer>(DirectUI::Element *);
DirectUI::Value * DUI_ShellStyleSheet_GetSheetCB(unsigned short const *,void *);
EXPLORER_COMMAND_SQM_ID GetExtensionAndLookupExplorerCommandWithTable(IShellItem2 *);
EXPLORER_COMMAND_SQM_ID LookupExplorerCommandWithTable(ExplorerCommandNameIDPair const * const,int,unsigned short const * const,EXPLORER_COMMAND_SQM_ID);
EXPLORER_COMMAND_SQM_INVOCATION_LOCATION GetAndResetExplorerCommandInvocationLocation(IUnknown *);
EXTRACTHISTORY * g_rgeh;
ExtLoadPolicy _ShouldLoadShellExt(_GUID const &,unsigned short const *,_GUID const &,unsigned long,unsigned long,unsigned short const *);
FC_FLAGS GetFilterConditionTypeFlags(IFilterCondition *);
FILECLASSENTRY * _LookupForSet(unsigned short const *);
FILECLASSENTRY const * _LookupForGet(unsigned short const *);
FOLDERFLAGS IViewSettings_GetFolderFlags(IViewSettings *);
FOLDERLOGICALVIEWMODE IViewSettings_GetLogicalViewMode(IViewSettings *);
FOLDERLOGICALVIEWMODE LogicalViewModeFromViewMode(FOLDERVIEWMODE);
FOLDERVIEWMODE IViewSettings_GetViewMode(IViewSettings *);
FOLDERVIEWMODE ViewModeFromLogicalViewMode(FOLDERLOGICALVIEWMODE);
FOLDER_ENUM_MODE BindCtx_GetFolderEnumMode(IBindCtx *);
FORMATINFO * GetCurrentEntry(HWND__ *,CFormatEngine *);
GETPROPERTYSTOREFLAGS FlagsFromBindCtx(IBindCtx *,unsigned long);
HDDEDATA__ * DDECallback(unsigned int,unsigned int,HCONV__ *,HSZ__ *,HSZ__ *,HDDEDATA__ *,unsigned __int64,unsigned __int64);
HDDEDATA__ * DDE_HandleConnectConfirm(HCONV__ *);
HDDEDATA__ * DDE_HandleRequest(HSZ__ *,HCONV__ *);
HDDEDATA__ * DDE_HandleWildConnects();
HDDEDATA__ * EnumGroups(HSZ__ *);
HDDEDATA__ * EnumItemsInGroup(HSZ__ *,unsigned short const *);
HDDEDATA__ * HandleDDEExecute(HDDEDATA__ *,HCONV__ *);
HDDEDATA__ * _DdeCreateDataHandleFromUnicode(unsigned short const *,HSZ__ *);
HFONT__ * _GetSystemFont();
HICON__ * SimulateDocIcon(IImageList2 *,HICON__ *,int,int);
HICON__ * g_hCursorArrow;
HINSTANCE__ * GetShellStyleHInstance(unsigned short * *);
HINSTANCE__ * RealShellExecuteA(HWND__ *,char const *,char const *,char const *,char const *,char *,char const *,char *,unsigned short,void * *);
HINSTANCE__ * RealShellExecuteExA(HWND__ *,char const *,char const *,char const *,char const *,char *,char const *,char *,unsigned short,void * *,unsigned long);
HINSTANCE__ * RealShellExecuteExW(HWND__ *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short *,unsigned short const *,unsigned short *,unsigned short,void * *,unsigned long);
HINSTANCE__ * RealShellExecuteW(HWND__ *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short *,unsigned short const *,unsigned short *,unsigned short,void * *);
HMENU__ * SHLoadPopupMenu(HINSTANCE__ *,unsigned int);
HSZ__ * g_hszAppProps;
HSZ__ * g_hszFolders;
HSZ__ * g_hszService;
HSZ__ * g_hszShell;
HSZ__ * g_hszStar;
HSZ__ * g_hszTopic;
HWND__ * (* pHtmlHelpA)(HWND__ *,char const *,unsigned int,unsigned __int64);
HWND__ * (* pHtmlHelpW)(HWND__ *,unsigned short const *,unsigned int,unsigned __int64);
HWND__ * CreateDummyWindow();
HWND__ * CreateGlobalFolderOptionsStubWindow();
HWND__ * FindCPL(HWND__ *,CPLAPPLETID *);
HWND__ * GetShellWindowAndAllowSetForeground();
HWND__ * GetShutdownHookWindow();
HWND__ * Stub_CreateStubWindow(tagPOINT,HWND__ *);
HWND__ * _CreateWindowForContextMenu(IContextMenu *);
HWND__ * _FindStubForPidlClass(int,_ITEMIDLIST_ABSOLUTE const *);
HWND__ * _GetDesktop();
HWND__ * g_hwndClient;
HWND__ * g_hwndDDEML;
HWND__ * g_hwndDde;
HWND__ * g_hwndInstStubProgress;
HWND__ * g_hwndTaskMan;
IActiveDesktop * g_pActiveDesk;
IActiveDesktop * g_pActiveDeskAdv;
ICIVERBTOIDMAP const * _CmdIDToMap(unsigned __int64,int,ICIVERBTOIDMAP const *);
ICIVERBTOIDMAP const * const c_rgidmPropertiesBGArray;
ICONRESOURCE * ReadIconFromEXEFile(unsigned short const *,int);
ICONRESOURCE * ReadIconFromICOFile(unsigned short const *);
IHVS_FLAGS GetInheritFlags(IFolderView2 *);
INDIVIDUAL_CONFLICT_DIALOG_RESULT ShowIndividualConflictsDialog(HWND__ *,OPERATION_TYPE,IShellItem *,IShellItem *,IConflictInterrupt *,CollectedConflictTelemetry *,OPERATION_INTERRUPT_RESPONSE_AGGREGATED * *);
IProgressDialog * CProgressDialog_Create(unsigned int);
IStream * OpenPidlOrderStream(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,char const *,unsigned long);
ITEM_FLAGS FlagsFromItemKeyAndStore(IItemStore *,tagITEMKEY const *);
ITEM_FLAGS _FilterItem(IItemStore *,tagITEMKEY const *,IShellFolder2 *,IViewStateInfo *,IItemFilter *,IQueryContinue *,int,unsigned long);
ITrustedComponentForegroundControl * g_pAutoPlayForegroundControl;
IndividualConflictTileElement * element_cast<IndividualConflictTileElement>(DirectUI::Element *);
InterruptResponseButton3d * element_cast<InterruptResponseButton3d>(DirectUI::Element *);
KIND_FLAGS GetKindFlags(IShellItem2 *);
KIND_FLAGS ParseKindFlags(tagPROPVARIANT const &);
LC_ITEM_FLAGS IListControl_GetItemState(IListControl *,tagLCITEM const &);
LINKPROP_DATA * Create_LinkPropData();
LOCATION_TYPE GetLocationType(IShellItem *);
LibraryInitLock g_lockObject;
Microsoft::WRL::ComPtr<CRefCountedObject<CAutoHandle<void *> > > CreateRefCountedObj<CAutoHandle<void *> >();
Microsoft::WRL::ComPtr<CRefCountedObject<CCoTaskMemPtr<_ITEMIDLIST_ABSOLUTE> > > CreateRefCountedObj<CCoTaskMemPtr<_ITEMIDLIST_ABSOLUTE> >();
Microsoft::WRL::ComPtr<CRefCountedObject<CLocalSimpleArray<TranslateResetEvent,4294967294> > > CreateRefCountedObj<CLocalSimpleArray<TranslateResetEvent,4294967294> >();
Microsoft::WRL::ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IShellItem> > > CreateMarshaledInterface<IShellItem>(IShellItem *);
Microsoft::WRL::ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IUnknown> > > CreateMarshaledInterface<IUnknown>(IUnknown *);
Microsoft::WRL::ComPtr<CRefCountedObject<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > > CreateRefCountedObj<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >();
Microsoft::WRL::Details::CreatorMap const __object_CApplicationTileInformation_COM;
Microsoft::WRL::Details::CreatorMap const __object_CApplicationUsageProvider;
Microsoft::WRL::Details::CreatorMap const __object_CByValueConfirmationInterrupt_COM;
Microsoft::WRL::Details::CreatorMap const __object_CByValueSingleConflictInterrupt_COM;
Microsoft::WRL::Details::CreatorMap const __object_CCreateObjectTaskDelegate_COM;
Microsoft::WRL::Details::CreatorMap const __object_CCreateObjectTaskServer_COM;
Microsoft::WRL::Details::CreatorMap const __object_CDefaultAssociationsProfileHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition_COM;
Microsoft::WRL::Details::CreatorMap const __object_CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition_COM;
Microsoft::WRL::Details::CreatorMap const __object_CEnlightenmentPromptHelpers;
Microsoft::WRL::Details::CreatorMap const __object_CErrorOverlayHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_CErrorResolutionVerb_COM;
Microsoft::WRL::Details::CreatorMap const __object_CExecuteAppIDAndActivationContext_COM;
Microsoft::WRL::Details::CreatorMap const __object_CExecuteTypeDelegator_COM;
Microsoft::WRL::Details::CreatorMap const __object_CExecuteVerbOnProperty_COM;
Microsoft::WRL::Details::CreatorMap const __object_CExtrinsicPropertyStore_COM;
Microsoft::WRL::Details::CreatorMap const __object_CFileInUsePLMResolver_COM;
Microsoft::WRL::Details::CreatorMap const __object_CFilePlaceholderThumbnailHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_CFilePlaceholder_COM;
Microsoft::WRL::Details::CreatorMap const __object_CLinguisticAlternativeGenerator_COM;
Microsoft::WRL::Details::CreatorMap const __object_CMakeAvailableOfflineVerb_COM;
Microsoft::WRL::Details::CreatorMap const __object_CMakeAvailableOnlineVerb_COM;
Microsoft::WRL::Details::CreatorMap const __object_CObservableItem;
Microsoft::WRL::Details::CreatorMap const __object_CObservableItemCollection;
Microsoft::WRL::Details::CreatorMap const __object_CObservableObjectFactory;
Microsoft::WRL::Details::CreatorMap const __object_COpenDefaultLocationCommand_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPackageInformation_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPackageInstallStateStoreEnum_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPackageInstallStateStore_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPauseSyncVerb_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPinnedPeopleList_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPremiumBitLockerVisibilityCondition_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPropertyThumbnailHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_CQueryWithLinguisticAlternatives_COM;
Microsoft::WRL::Details::CreatorMap const __object_CRefreshSyncStateVerb_COM;
Microsoft::WRL::Details::CreatorMap const __object_CResetEASPolicyVisibilityCondition_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSkyDriveNetworkStatesSSO_COM;
Microsoft::WRL::Details::CreatorMap const __object_CStorageProviderInfo_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSyncRootManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSyncRootsProfileNotificationHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSyncingOverlayHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_CTypedDataThumbnailHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_CUnpauseSyncVerb_COM;
Microsoft::WRL::Details::CreatorMap const __object_CWebBrowserUtils_COM;
Microsoft::WRL::Details::CreatorMap const __object_LaunchSettingsPageHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_LowDiskNotificationActivationCallback_COM;
Microsoft::WRL::Details::CreatorMap const __object_PropertySheetHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_StartPinUnpinContextMenu_COM;
Microsoft::WRL::Details::CreatorMap const __object_UserPinnedTileManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CApplicationTileInformation_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CApplicationUsageProvider;
Microsoft::WRL::Details::FactoryCache __objectFactory__CByValueConfirmationInterrupt_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CByValueSingleConflictInterrupt_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CCreateObjectTaskDelegate_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CCreateObjectTaskServer_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CDefaultAssociationsProfileHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CDeviceEncryptionBackUpRecoveryKeyVisibilityCondition_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CDeviceEncryptionOnlyNoMoSetClassicCPLVisibilityCondition_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CEnlightenmentPromptHelpers;
Microsoft::WRL::Details::FactoryCache __objectFactory__CErrorOverlayHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CErrorResolutionVerb_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CExecuteAppIDAndActivationContext_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CExecuteTypeDelegator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CExecuteVerbOnProperty_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CExtrinsicPropertyStore_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CFileInUsePLMResolver_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CFilePlaceholderThumbnailHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CFilePlaceholder_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLinguisticAlternativeGenerator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CMakeAvailableOfflineVerb_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CMakeAvailableOnlineVerb_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CObservableItem;
Microsoft::WRL::Details::FactoryCache __objectFactory__CObservableItemCollection;
Microsoft::WRL::Details::FactoryCache __objectFactory__CObservableObjectFactory;
Microsoft::WRL::Details::FactoryCache __objectFactory__COpenDefaultLocationCommand_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPackageInformation_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPackageInstallStateStoreEnum_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPackageInstallStateStore_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPauseSyncVerb_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPinnedPeopleList_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPremiumBitLockerVisibilityCondition_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPropertyThumbnailHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CQueryWithLinguisticAlternatives_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CRefreshSyncStateVerb_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CResetEASPolicyVisibilityCondition_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSkyDriveNetworkStatesSSO_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CStorageProviderInfo_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSyncRootManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSyncRootsProfileNotificationHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSyncingOverlayHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CTypedDataThumbnailHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CUnpauseSyncVerb_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CWebBrowserUtils_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__LaunchSettingsPageHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__LowDiskNotificationActivationCallback_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PropertySheetHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__StartPinUnpinContextMenu_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__UserPinnedTileManager_COM;
Microsoft::Windows::FileExplorer::Banners::Banner * element_cast<Microsoft::Windows::FileExplorer::Banners::Banner>(DirectUI::Element *);
Microsoft::Windows::FileExplorer::Banners::BannerContainer * element_cast<Microsoft::Windows::FileExplorer::Banners::BannerContainer>(DirectUI::Element *);
NONINDEXEDPROP GetUnsupportedPropFromLibrary(ILibraryDescription *);
NavigationTarget GetFileExplorerDefaultNavigationTarget();
OPERATION_INTERRUPT_RESPONSE_SINGLE UpdateSingleConflictResponse(OPERATION_INTERRUPT_RESPONSE_SINGLE,CONFLICT_ITEM_DATA_FLAGS,CONFLICT_CHECKBOX_STATE,int);
ORDERITEM * OrderItem_Create(_ITEMID_CHILD *,int);
OperationTileElement * element_cast<OperationTileElement>(DirectUI::Element *);
OperationTileHeader * element_cast<OperationTileHeader>(DirectUI::Element *);
PROPDESC_TYPE_FLAGS GetPropertyTypeFlags(_tagpropertykey const &,PROPDESC_TYPE_FLAGS);
PauseButton * element_cast<PauseButton>(DirectUI::Element *);
PropertyNamespace GetPropertyNamespace(HSTRING__ *);
QUERYKEYVAL const * _FindKeyVal(ASSOCQUERY,QUERYKEYVAL const *,unsigned int);
RIBBON_VISIBILITY GetExplorerCommandSqmIsRibbonVisible(IUnknown *);
SEARCHKEY_FLAGS GetSearchKeyFlags(unsigned short const *);
SHSTOCKICONID _GetCDROMIconFromArray(unsigned long,CDROMICONS const *,unsigned long);
SharedModeType GetSharedModeType();
ShellItemLink * element_cast<ShellItemLink>(DirectUI::Element *);
TRIBIT g_tbIsGuimodeSetupRunning;
TRIBIT g_tbMoveSecurityAttributesEnabled;
TRIBIT g_tbNavPaneExpandToCurrentFolder;
TRIBIT g_tbNavPaneShowAllFolders;
TRIBIT g_tbNavPaneShowLibraries;
TRIBIT g_tbSearchComponent;
TRIBIT volatile g_tbIsBrokerProcess;
UALOG_INFO * _GetUALogInfo(_GUID const *);
UALOG_INFO * g_rgUALogInfo;
UICOMMAND_DEF const * _FindTask(_GUID const &);
UID AddElementsUID;
UID NotifyTileChangingFocusUID;
UID NotifyTileLostFocusUID;
UID NotifyTileReceivedFocusUID;
UIOBJECTMAP const * _GetUiObjectMap(_GUID const &);
VIEW_ARRANGEMENT_MODE _ArrangeModeToVAM(tagARRANGE_MODE);
VIRTUAL_NAMESPACE_ENTRY const * const c_rgVirtualNamespaces;
XMLPROP_ITEM * p_xpMap_PropertyDefaultValues;
XMLPROP_ITEM * p_xpMap_PropertyMapList;
XMLPROP_ITEM * p_xpMap_i;
XMLPROP_ITEM * p_xpMap_pi;
XMLPROP_ITEM * p_xpMap_u;
XMLPROP_ITEM * p_xpMap_usersFilesDescription;
XMLPROP_ITEM const * FindNamespaceUriItem(unsigned short const *,XMLPROP_ITEM const *);
_DDECONV * DDE_MapHConv(HCONV__ *);
_DDECONV * g_pddecHead;
_DPA * OrderList_Clone(_DPA *);
_DPA * g_dpaDontLoadCpl;
_DPA * g_hacplmLoaded;
_DPA * g_hdpaDarwinAds;
_DPA * g_hdpaFileCopyHooks;
_DPA * g_hdpaHooks;
_DSA * g_hdsaDefViewCopyHook;
_GUID GetBaseKnownFolderId(_GUID const &);
_GUID GetFolderTypeFromItems(IItemStore *,CDSA<tagITEMKEY> const *,IShellFolder *);
_GUID const g_SHSqmGlobalSession;
_GUID g_clsidTestSyncManager;
_HIDDENITEMID const * ILFindFirstHiddenID(_ITEMIDLIST_RELATIVE const *);
_HIDDENITEMID const * ILFindHiddenIDOn(_ITEMIDLIST_RELATIVE const *,IDLHID,int);
_HIDDENITEMID const * ILNextHidden(_HIDDENITEMID const *,_ITEMIDLIST_RELATIVE const *);
_IMAGELIST * ImageList_LoadMirroredImage(HINSTANCE__ *,unsigned short const *,int,int,unsigned long,unsigned int,unsigned int);
_ITEMIDLIST_ABSOLUTE * GetPIDLFromDDEArgs(unsigned short const *,unsigned int const *,_SHDDEERR *,_ITEMIDLIST_ABSOLUTE * *);
_ITEMIDLIST_ABSOLUTE * IDA_ILClone(_IDA const *,unsigned int);
_ITEMIDLIST_ABSOLUTE * SHBrowseForFolder2(BFSF *);
_ITEMIDLIST_ABSOLUTE * TranslateAliasWithEvent(long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
_ITEMIDLIST_ABSOLUTE * _BFSFGetIDListFromTreeItem(HWND__ *,_TREEITEM *);
_ITEMIDLIST_ABSOLUTE * _GetPIDLFromDDEArgs(unsigned int,unsigned short const *,unsigned int const *,_SHDDEERR *,_ITEMIDLIST_ABSOLUTE * *);
_ITEMIDLIST_ABSOLUTE * _ILCloneInterruptID(_ITEMIDLIST_ABSOLUTE const *,int *,IShellItem *);
_ITEMIDLIST_ABSOLUTE const * ILRootedFindIDList(_ITEMIDLIST_ABSOLUTE const *);
_ITEMIDLIST_RELATIVE * ILAppendHiddenID(_ITEMIDLIST_RELATIVE *,_HIDDENITEMID const *);
_ITEMIDLIST_RELATIVE * ILAppendHiddenStringW(_ITEMIDLIST_RELATIVE *,IDLHID,unsigned short const *);
_ITEMID_CHILD const * _BFSFUpdateISHCache(BFSF *,_TREEITEM *,_ITEMIDLIST_RELATIVE const *);
_PROVIDER_DATA gProvData;
_PSP * _CreatePropPageFromInfo(CDBURN_WIZPAGE const *,__int64);
_RTL_CRITICAL_SECTION g_csGlobalCachedObject;
_RTL_CRITICAL_SECTION g_csSnapCheckCache;
_RTL_CRITICAL_SECTION g_csStyle;
_RTL_RESOURCE g_EvalLock;
_RTL_RUN_ONCE g_initTestClsidOnce;
_RTL_RUN_ONCE s_InitOnce;
_RTL_SRWLOCK g_srwConversationLock;
_RTL_SRWLOCK g_srwDarwinAdsLock;
_RTL_SRWLOCK g_srwDefViewCopyHookLock;
_RTL_SRWLOCK g_srwDirectUILock;
_RTL_SRWLOCK g_srwDontLoadLock;
_RTL_SRWLOCK g_srwItemHandlerCacheLock;
_RTL_SRWLOCK g_srwJunctionNameLock;
_RTL_SRWLOCK g_srwLastGroup;
_RTL_SRWLOCK g_srwParsingCacheLock;
_RTL_SRWLOCK g_srwProfilePathsLock;
_RTL_SRWLOCK g_srwTLSChkDskThreadData;
_RTL_SRWLOCK s_srwElsServiceLock;
_SLIST_HEADER * __AtlThunkPool;
_TREEITEM * Tree_AddItem(_TREEITEM *,unsigned short const *,_TREEITEM *,int,HWND__ *,void *,int *);
_TREEITEM * _BFSFAddItemToTree(HWND__ *,_TREEITEM *,IShellItem *,_ITEMIDLIST_RELATIVE const *,int);
_UFH_STORE_DATA_STATE g_UFHState;
_USER_PICTURE_ELEMENT * NEXT_USER_PICTURE_ELEMENT(_USER_PICTURE_ELEMENT *);
_WaitForItem * g_pwfiHead;
__int64 AboutDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 AdvancedOptionsDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 CPL_CallEntry(CPLMODULE const *,HWND__ *,unsigned int,__int64,__int64);
__int64 DrawTransparentBackground(HWND__ *,HDC__ *);
__int64 DriveAttribsDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 EncryptionWarningDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 FailedApplyAttribDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 FolderOptionsDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 FormatDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 GlobalFolderOptionStubWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 HiddenWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 LicenseDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 MenuHookWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 ProgressDialogProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 RunDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 ScanDskW_DlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 SearchOptionsDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 StubWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 TB_GetButtonSizeWithoutThemeBorder(HWND__ *,void *);
__int64 ValidateCreateFileFromClip(HWND__ *,_FILEDESCRIPTORW const *,int,unsigned short const *,YNLIST *);
__int64 _BrowseDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _DiskToolsDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _DriveHWDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _DrvGeneralDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _ForwardDDEMsgs(HWND__ *,HWND__ *,unsigned int,unsigned __int64,__int64,int);
__int64 _HandleDDEExecute(HWND__ *,HWND__ *,unsigned int,unsigned __int64,__int64,int);
__int64 _HandleDDEInitiateAndAck(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _HandleDDETerminate(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _LinkAdvancedDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _LinkDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _QuickRemovalDlgProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _ShellFolderViewMessage(IShellFolderView *,unsigned int,__int64);
__int64 _TrackContextMenuWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
_tagpropertykey const & GetDefaultSaveLocationPropertyKey(DSLFLAGS,ILibraryDescription *);
_tagpropertykey const * const c_rgPCSettingsQueryRequiredProperties;
_tagpropertykey const * const g_rgSyncStatusPropKeys;
bool (* s_pfnIsChildWindowDpiMessageEnabled)(HWND__ *);
bool AdjustIconImagePointers(ICONIMAGE *);
bool AllowPreviewForItem(IShellItem *);
bool AreSystemTimesEqual(_SYSTEMTIME const &,_SYSTEMTIME const &);
bool CPL_DoesPolicyAllow(unsigned short const *,unsigned short const *,unsigned short const *);
bool CPL_IsLegacyCanonicalNameListedUnderKey(unsigned short const *,unsigned short const *);
bool CanEditPropertyStore(IShellItem *);
bool CanTheDriveBeCleanedUp(CDriveProps *);
bool CloseBannerForExplorerWindow(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,__int64);
bool CurrentUserIsConnectedAtLogon();
bool DeleteFileWithRetry(unsigned short const *);
bool DoesHomeGroupComputerSupportWake(unsigned short const *);
bool ElevationRequired();
bool ElevationRequiredForTypes(DISC_IMAGE_TYPE_FLAGS);
bool EnsureFileClassTables();
bool ForceHomeGroupAvailable();
bool GetFileAllStreamAllocationSize(unsigned short const *,unsigned long,_ULARGE_INTEGER *);
bool GetRegkey(unsigned short const *,HKEY__ * *,unsigned short const * *);
bool HGIsConnectedUser(unsigned short const *);
bool HasLauncherAlreadyInitialized();
bool IShellItem_IsApp(IShellItem *);
bool IShellItem_IsAvailableOnlineOnly(IShellItem *);
bool IShellItem_IsFilePlaceholder(IShellItem *);
bool IShellItem_IsOfflineFileSystem(IShellItem *);
bool IShellItem_IsPinnedToQuickAccess(IShellItem *);
bool IShellItem_ShouldForceDownload(IShellItem *);
bool ImageFilepathIsDefaultSystemImage(unsigned short const *);
bool IsAccountConnected(Microsoft::WRL::ComPtr<Windows::Security::Credentials::IWebAccount> const &);
bool IsAgile(IUnknown *);
bool IsAnimationElement(DirectUI::Element *);
bool IsAuditMode();
bool IsBlueFoldersEnabled();
bool IsBrowserExtension(unsigned short const *);
bool IsBuiltInStorageProvider(unsigned short const *);
bool IsClientExperienceEnabled();
bool IsConjunctiveWordPrefixCondition(ICondition *);
bool IsCurrentThreadRTL();
bool IsCurrentUserConnected();
bool IsDefViewPlaceholder(HMENU__ *,int);
bool IsDeviceConnected(_GUID const *);
bool IsDeviceInterfaceInstalled(_GUID const &);
bool IsDisjunctiveNormalFormWordPrefixCondition(ICondition *);
bool IsDomainMemberMode();
bool IsEditDistanceMatch(int,SearchKeyIterator,SearchKeyIterator,int *);
bool IsEncryptedFileOverlayEnabled();
bool IsEnlightenmenOverrideOn();
bool IsErrorTransientHResult(long);
bool IsExplorerSharedPCMode();
bool IsFileExplorerBannersEnabled();
bool IsFileSystemItem(IShellItem *);
bool IsFolderItemReadOnly(IShellItem *);
bool IsFolderNotStreamItem(IShellItem *);
bool IsFolderTargetKnownFolderAndReadOnly(IShellFolder *);
bool IsHighRelevanceOnlyQuery(ICondition *);
bool IsHomeGroupAvailable(HomegroupClient);
bool IsIDListFolderTargetReadOnly(_ITEMIDLIST_ABSOLUTE const *);
bool IsIDListUnderHomeGroup(_ITEMIDLIST_ABSOLUTE const *);
bool IsIconFile(unsigned short const *);
bool IsImmersiveContextMenuEnabled();
bool IsItemEqualbyVerbName(FOLDERMENUITEMDATA const &,unsigned short const *);
bool IsItemFolderShortcut(IShellItem *);
bool IsItemUnderStorageProvider(IShellItem *,unsigned short const *);
bool IsLangIdCJK(unsigned short);
bool IsLocaleCJK(unsigned long);
bool IsNonSpaceLanguageWithWordBreaker(unsigned long);
bool IsNotifiedItemValid(_ITEMIDLIST_ABSOLUTE const *);
bool IsOutOfProcPropSheetsEnabled();
bool IsPNGImage(unsigned char const *);
bool IsPPIEdition();
bool IsPerMonitorAwareFileExplorerEnabled();
bool IsPersonalizationFeatureAvailable();
bool IsProcessShutdownInProgress();
bool IsProgIdFeaturedApp(unsigned short const *);
bool IsProgIdFeaturedAppUpgrade(unsigned short const *,CCoSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > > &,unsigned short const *,unsigned short const *);
bool IsProgIdInList(unsigned short const *,unsigned short const *);
bool IsRegisteredCPLApplet(unsigned short const *,ControlData const *);
bool IsRuntimeBrokerProcess();
bool IsSelectModeEnabledForSite(IUnknown *);
bool IsSystemSettingsEnabled();
bool IsTokenPrivilegeAllowed(void *,unsigned short const *);
bool IsTouchSelectEnabled();
bool IsTouchableFileExplorerEnabled();
bool IsValidPNGImage(unsigned char const *);
bool IsVerbRegistered(IQueryAssociations *,unsigned short const *);
bool IsVerbRegistered(IShellItem *,unsigned short const *);
bool IsVerbRegistered(unsigned short const *,unsigned short const *);
bool IsWordPrefixLeafCondition(ICondition *);
bool LogonOptimizationPermitted(LogonOptimizationFlags,bool);
bool MergeProgIdArrays(CProgidArray const &,CProgidArray &);
bool ResetViewSettingsCallback(IUnknown *,__int64);
bool RunWindowCallback(IUnknown *,__int64);
bool SHIsAccountDomainUser(unsigned short const *);
bool SHIsCurrentAccountDomainUser();
bool SHIsFileExplorerInTabletMode();
bool ShouldApplyBlueFoldersToFolder(unsigned short const *);
bool ShouldDisableAppHostedViewSubCommand(unsigned short const *);
bool ShouldTranslateForNavigation(IShellItem *);
bool ShouldUseStorageProviderViews(unsigned short const *);
bool ShowDiagnosticsDlgForNetError(HWND__ *,unsigned long,unsigned short const *);
bool UseEduFriendlyStringForSharedPCMode();
bool VerifyFileClassTablesAreCurrent();
bool VerifyItemSyncStatusInformation(IShellItem *,ItemSyncStatus,unsigned short * *);
bool WICIsOrientationSupported(IWICBitmapDecoder *);
bool WriteICOHeader(void *,unsigned int);
bool WriteIconToICOFile(ICONRESOURCE *,unsigned short const *);
bool WriteIconToICOFile(unsigned short const *,int,unsigned short const *);
bool _AddUserLibrariesToObjectCollection(IObjectCollection *);
bool _AllowDropItem(IShellItem *);
bool _ContainsInvokeVerbs(unsigned short const *,int * const,unsigned short const * const * const,unsigned int);
bool _ContainsLastSyncedProp(IPropertyStore *);
bool _EnumProcCloseFolder(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,__int64);
bool _FCMEnabled();
bool _HasEditControl(IPropertyDescriptionPriv *,tagPROPDESC_CONTROL_TYPE);
bool _IsBrowserApp(HKEY__ *,unsigned short const *);
bool _IsClassInAllowList(unsigned short const *);
bool _IsClassWRPProtected(unsigned short const *);
bool _IsDualMode(CPropertyStoreHelper &);
bool _IsFilePlaceholder(IShellFolder *,_ITEMID_CHILD const *);
bool _IsFolderOptionsRestricted(IUnknown *);
bool _IsGeneratedProgId(unsigned short const *);
bool _IsKeyWRPProtected(HKEY__ *,unsigned short const *);
bool _IsLink(IShellItem *);
bool _IsLocalComputer(unsigned short const *);
bool _IsLocaleEqual(unsigned short const *,unsigned int,unsigned short const *);
bool _IsMenuHandlerOptIn(unsigned short const *);
bool _IsProgidRegistered(unsigned short const *,HKEY__ * *);
bool _IsRestart();
bool _IsTempItemLayout(IUnknown *);
bool _IsThereAnyLink(IShellItemArray *,ARRAY_LINK_RESOLUTION_BEHAVIOR);
bool _IsVolumeRootButNotSymLink(IShellItem2 *);
bool _IsZoneIdentifierResource(SHELL_ITEM_RESOURCE const *);
bool _MatchUserInPropertyStore(CPropertyStoreHelper &,unsigned short const *);
bool _NavigateBrowserLayoutCallback(IUnknown *,__int64);
bool _NeverHasHandler(_GUID const &);
bool _NeverProvided(_GUID const &);
bool _OpenFolderIfNotAlreadyOpenEnumProc(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,__int64);
bool _RefreshView(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,__int64);
bool _SelectionContainsItems(IShellItemArray *,unsigned long *);
bool _ShouldAddFilesystemPages(IDataObject *);
bool _ThunkClass(unsigned long);
bool _TlgGuidIsZero(_GUID const &);
bool const operator==(_FILETIME const &,_FILETIME const &);
bool g_fDUI_ShellStyleSheet_ProcessInitialized;
bool operator==(UID (*const &)(),UID const &);
bool operator==(UID const &,UID (*const &)());
char * MbsChrWorker(char const *,char);
char * ThunkStrToAnsi(unsigned short const *,char *,unsigned int);
double GetWideThumbnailAspectRatio();
double SHComputeSystemToMonitorDPIRatio(HWND__ *);
double _CalculateN(unsigned int,unsigned int,unsigned long,IUASession *);
int (* s_pfnGetMetricsForDPI)(int,int);
int (* s_pfnGetWindowDPI)(HWND__ *);
int * g_rgnSnapSizes;
int AbortStartup();
int AdapterInfoCompareLUID(_AdapterInfo const *,_AdapterInfo const *,__int64);
int AdapterInfoSort(_AdapterInfo const *,_AdapterInfo const *,__int64);
int AddComboStringAndData(HWND__ *,unsigned short const *,unsigned long);
int AdvancedDlgInit(HWND__ *,__int64);
int AllowFullLibraryExperience();
int AllowRecycleBinOnVolume(unsigned short const *);
int AllowedIconPath(unsigned short const *);
int AppendStatus(unsigned short *,unsigned int,int);
int AreAllMonitorsAtLeast(int);
int AreEditAndDisplaySchemesDifferent(IActiveDesktop *);
int AreItemsEqualByPath(IShellItem *,IShellItem *);
int BFSFCallback(BFSF *,unsigned int,__int64);
int BindCtx_ContainsObject(IBindCtx *,unsigned short const *);
int BrowseCallback(HWND__ *,unsigned int,__int64,__int64);
int BrowseSelectPidl(BFSF *,_ITEMIDLIST_ABSOLUTE const *);
int CDBurn_DriveSupportedForDataBurn(unsigned short const *);
int CDBurn_IsBlankDisc(unsigned short const *);
int CDBurn_ShouldBindToStagingFolder(int);
int CDrives_AddPage(_PROPSHEETPAGEW const *,int (*)(_PSP *,__int64),__int64);
int CDrives_EnablePropertiesTools(unsigned short const *,int);
int CPLD_AddControlToReg(ControlData *,MINST const *,unsigned short const *,int,CPLMODULE * *);
int CPLD_GetModules(ControlData *);
int CPL_CheckLegacyMappingInRegistry(unsigned short const *,unsigned short const *,unsigned short *,unsigned int,_MAPPEDCPLTYPE *);
int CPL_CheckLegacyMappings(CPLEXECINFO *,_MAPPEDCPLTYPE *);
int CPL_EvalCondition(ITaskCondition *,tagCACHEDTASKCONDITION *,int);
int CPL_GetLegacyMappingFromRegkey(unsigned short const *,unsigned short *,unsigned int,_MAPPEDCPLTYPE *);
int CPL_Identify(CPLAPPLETID *,CPLEXECINFO const *,HWND__ *);
int CPL_LegacyMappingsMatch(CPLEXECINFO *,int);
int CPL_RelaunchOppositeArchitecture(unsigned short const *,int,int);
int CPL_SetWindowProps(HWND__ *,CPLAPPLETID *);
int CPL_SwitchToOrLaunch(HWND__ *,HINSTANCE__ *,unsigned short const *,int,unsigned long);
int CSyncStatusHandler_InitTestIntegrationManager(_RTL_RUN_ONCE *,void *,void * *);
int CachedIsOfflineAvailable(IShellItem2 *,IPropertyBag *);
int CalcDropDownRect(tagRECT const *,DROPDOWNSIDE,DROPDOWNALIGN,unsigned long,tagRECT *);
int CalcSnapPos(int,int *);
int CalculateImageOverlaySideLength(int);
int CalculateImageOverlaySideLengthForDPI(int,int);
int CallBOOLWithTimeout(CCallBOOLWithTimeoutParams *);
int CallShutdownHook(int,__int64 *);
int CanDo(int);
int CanDoNewFolderInFolder(IShellItem *);
int CanDownloadItem(IShellItem *);
int CanFolderApplyItemFilter(IShellFolder *);
int CanIndexLocation(IShellItem *,AIETYPE *);
int CanIndexLocationCheckPolicy(IShellItem *,AIETYPE *);
int ChangesMatchPrimaryKey(IFolderView2 *,ITopViewDescription *);
int ClipName(HWND__ *,HFONT__ *,unsigned int,unsigned short *,unsigned int,unsigned short const *);
int CloseWindow_Callback(HWND__ *,__int64);
int CmpDate(_SYSTEMTIME const *,_SYSTEMTIME const *);
int CombineWithCurrentDirectory(unsigned short *,unsigned int);
int CompareDEADCOUNTS(DEADCOUNTS const *,DEADCOUNTS const *,__int64);
int CompareElements(DirectUI::Element *,DirectUI::Element *,__int64);
int CompareIAssocHandlerByUIName(IAssocHandler *,IAssocHandler *,__int64);
int CompareIDListCallback(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,__int64);
int CompareVariantsDirection(IShellFolder2 *,IItemStore *,IItemStore *,tagITEMKEY const *,tagITEMKEY const *,_ITEMID_CHILD const *,_ITEMID_CHILD const *,_tagpropertykey const &,int,IViewStateInfo *,int);
int ContainsAnyFolders(IDataObject *);
int ControlPanelEnum_ReleaseModuleReference(CPLMODULE *,void *);
int CopyOut(void *,void *,int,unsigned long);
int CreateFolderDesktopIni(unsigned short const *);
int CreateMoveCopyList(HDROP__ *,void *,_ITEMIDLIST_ABSOLUTE * * *);
int CreateProcessWithImpersonation(unsigned short const *,unsigned short *,_SECURITY_ATTRIBUTES *,_SECURITY_ATTRIBUTES *,int,unsigned long,void *,unsigned short const *,_STARTUPINFOW *,_PROCESS_INFORMATION *);
int CreateSearchKeyInternal<576>(SEARCHKEY_FLAGS,unsigned short const *,unsigned long,unsigned short const *,unsigned char *,unsigned long,unsigned long *);
int DCA_AppendClassSheetInfo(_DCA *,HKEY__ *,_PROPSHEETHEADERW_V2 *,IDataObject *);
int DCA_InsertItem(_DCA *,int,_GUID const &);
int DDE_AddItem(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_AddShellServices();
int DDE_ConfirmID(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_CreateGroup(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_DeleteGroup(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_DeleteItem(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_ExitProgman(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_ExploreFolder(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_FindFolder(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_OpenFindFile(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_Reload(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_ShellFile(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_ShowGroup(unsigned short const *,unsigned int const *,_DDECONV *);
int DDE_ViewFolder(unsigned short const *,unsigned int const *,_DDECONV *);
int DPAPidlCompare(void const *,void const *,__int64);
int DPA_CoTaskMemFreeCB<unsigned short>(unsigned short *,void *);
int DPA_DeleteCB<CAce>(CAce *,void *);
int DPA_DeleteCB<CCategoryEntry>(CCategoryEntry *,void *);
int DPA_DeleteCB<CEnumExtract>(CEnumExtract *,void *);
int DPA_DeleteCB<CLayoutFolderChild>(CLayoutFolderChild *,void *);
int DPA_DeleteCB<CModifiedState::MONITOR_ENTRY>(CModifiedState::MONITOR_ENTRY *,void *);
int DPA_DeleteCB<CModifiedState::WALLPAPER_ENTRY>(CModifiedState::WALLPAPER_ENTRY *,void *);
int DPA_DeleteCB<CMultimonWallpaperState::CMultimonWallpaperEntry>(CMultimonWallpaperState::CMultimonWallpaperEntry *,void *);
int DPA_DeleteCB<CRecycleBinData>(CRecycleBinData *,void *);
int DPA_DeleteCB<WALLPAPER_SLIDESHOW_IMAGE_ENTRY>(WALLPAPER_SLIDESHOW_IMAGE_ENTRY *,void *);
int DPA_DestroyURLSearchHooksCallback(void *,void *);
int DPA_FreeOrderItem(ORDERITEM *,void *);
int DPA_ILFreeCB<_ITEMIDLIST_ABSOLUTE>(_ITEMIDLIST_ABSOLUTE *,void *);
int DPA_ILFreeCB<_ITEMID_CHILD>(_ITEMID_CHILD *,void *);
int DPA_ILFreeCB<void>(void *,void *);
int DPA_LocalFreeCB<_SID>(_SID *,void *);
int DPA_LocalFreeCB<_tagDPAProfilePaths>(_tagDPAProfilePaths *,void *);
int DPA_LocalFreeCB<_tagpropertykey>(_tagpropertykey *,void *);
int DPA_LocalFreeCB<unsigned short>(unsigned short *,void *);
int DPA_OrderItemCompare(ORDERITEM *,ORDERITEM *,__int64);
int DPA_ReleaseCB<CAutoplayDeviceData>(CAutoplayDeviceData *,void *);
int DPA_ReleaseCB<CShare>(CShare *,void *);
int DPA_ReleaseCB<CVolume>(CVolume *,void *);
int DPA_ReleaseCB<IAssocHandler>(IAssocHandler *,void *);
int DPA_ReleaseCB<IAutoplayHandler>(IAutoplayHandler *,void *);
int DPA_ReleaseCB<ICategoryDescription>(ICategoryDescription *,void *);
int DPA_ReleaseCB<IChildId>(IChildId *,void *);
int DPA_ReleaseCB<ICondition>(ICondition *,void *);
int DPA_ReleaseCB<IExplorerBrowserEvents>(IExplorerBrowserEvents *,void *);
int DPA_ReleaseCB<IFilterCondition>(IFilterCondition *,void *);
int DPA_ReleaseCB<IFrameWorkItem>(IFrameWorkItem *,void *);
int DPA_ReleaseCB<IInfoBarMessage>(IInfoBarMessage *,void *);
int DPA_ReleaseCB<IOleUndoUnit>(IOleUndoUnit *,void *);
int DPA_ReleaseCB<IRecycleBin>(IRecycleBin *,void *);
int DPA_ReleaseCB<IShellFolder>(IShellFolder *,void *);
int DPA_ReleaseCB<IShellItem>(IShellItem *,void *);
int DPA_ReleaseCB<ITaskCondition>(ITaskCondition *,void *);
int DPA_ReleaseCB<IUICommand>(IUICommand *,void *);
int DPA_ReleaseCB<IUnknown>(IUnknown *,void *);
int DPA_StrCmpICB<unsigned short const >(unsigned short const *,unsigned short const *,__int64);
int DPA_StrCmpICB<unsigned short>(unsigned short *,unsigned short *,__int64);
int DSACompareBitsCache(tagCONDITIONBITSSETCACHE const *,tagCONDITIONBITSSETCACHE const *,__int64);
int DSA_CPTaskWOCmpICB(TASKWITHOVERRIDE const *,TASKWITHOVERRIDE const *,__int64);
int DSA_ClearENUMTYPE_MERGEITEM(tagENUMTYPE_MERGEITEM *,void *);
int DSA_ClearHandlerInfo(HANDLERINFO *,void *);
int DSA_ClearRegistrationInfo(REGISTRATIONINFO *,void *);
int DSA_ClearTopViewEntry(TOPVIEWENTRY *,void *);
int DSA_CompareHandlerInfo(HANDLERINFO const *,HANDLERINFO const *,__int64);
int DSA_DestroyGroupCallback(void *,void *);
int DSA_SortEnumTypeByName(tagENUMTYPE_MERGEITEM const *,tagENUMTYPE_MERGEITEM const *,__int64);
int DSA_SortEnumTypeByOrder(tagENUMTYPE_MERGEITEM const *,tagENUMTYPE_MERGEITEM const *,__int64);
int DUI_GetTextLineHeight(HDC__ *,DirectUI::Element *);
int DUI_TrackPopupMenu(HMENU__ *,unsigned int,int,int,int,HWND__ *,tagRECT const *,int);
int DUI_TransformContentAlign(DirectUI::Element *,DUI_COORDINATES_SYSTEM,int,DUI_COORDINATES_SYSTEM);
int DVCompareAllFields(tagITEMKEY const *,tagITEMKEY const *,__int64);
int DVCompareCanonical(tagITEMKEY const *,tagITEMKEY const *,__int64);
int DVCompareColumns(tagITEMKEY const *,tagITEMKEY const *,__int64);
int DVCompareFolderness(IShellFolder *,_ITEMID_CHILD const *,_ITEMID_CHILD const *);
int DVCustomOrderComparer(tagITEMKEY const *,tagITEMKEY const *,__int64);
int DataObj_ShouldCopyWithProgress(IDataObject *,IStream *,PROGRESSINFO const *);
int DataObject_RenameRequiresElevation(IDataObject *);
int DeleteCB(USEREVENTINFO *,void *);
int DestroyTLTItem(_tltnode *,void *);
int DoDDE_ViewFolder(HWND__ *,unsigned short const *,unsigned int const *,int,unsigned long,HMONITOR__ *);
int DoObjectsHaveSameCLSID(IUnknown *,IUnknown *);
int DoesCanonicalVerbExist(IContextMenu *,char const *);
int DoesCurrentUserOwnLibrary(ILibraryDescription *);
int DoesExtensionOptOutOfLowIL(_GUID const &);
int DoesItemMatchFilter(IItemStore *,tagITEMKEY const *,IFilterCondition *,IShellFolder2 *,IViewStateInfo *,IQueryContinue *);
int DoesPidlRoam(_ITEMIDLIST_ABSOLUTE const *);
int DoesPropertyMatchFilter(_tagpropertykey const &,tagPROPVARIANT const &,IFilterCondition *);
int DoesPropertyStoreMatchFilter(IPropertyStore *,IFilterCondition *,IShellItem *,IPropertyInfoProvider *,IQueryContinue *);
int DoesTopViewSupportNewFolders(IShellItem *);
int DpaPropKeyCompare(void const *,void const *,__int64);
int EnableDlgItem(HWND__ *,unsigned int,int);
int EnumUILanguagesProc_IsMuiEnabled(unsigned short *,__int64);
int EqualRects(tagRECT const *,tagRECT const *,int);
int EquivViewModes(unsigned int,unsigned int);
int ExtractIconsUsingResourceManager(unsigned short const *,int,int,unsigned int,unsigned int,HICON__ * *);
int FailForceReturn(long);
int FileIconIndexFromAttributes(unsigned short,bool);
int FileIconInitInternal(FILE_ICON_INIT_FLAGS);
int FileListToIDArray(unsigned short const *,void *,_ITEMIDLIST_ABSOLUTE * * *);
int FindAndSetForegroundWindow(unsigned int);
int FindBrowserWindow_Callback(HWND__ *,__int64);
int FindExistingDrv(unsigned short const *,unsigned short *,unsigned long);
int FindTheEditBox(HWND__ *,__int64);
int FmtSupportsMultiPage(IShellImageData *,_GUID *);
int ForwardEraseBackground(HWND__ *,HDC__ *);
int FreePidlCallBack(void *,void *);
int GenerateSortKeyForMatching(unsigned short const *,int,SORTKEY_MODIFIER,tagPROPVARIANT *);
int GetAppDropTarget(unsigned short const *,_GUID *);
int GetBestJustifyPosition(int,int,int,int,unsigned long,int);
int GetBestSidePosition(int,int,int,int,int,int);
int GetButtonCmd(HWND__ *,int);
int GetCorrespondingGenericKey(IPropertyDescription *,_tagpropertykey *);
int GetDPIAdjustedLogicalSize(HWND__ *,int,ALF_FLAGS);
int GetDarwinIndex(_ITEMIDLIST_ABSOLUTE const *,CDarwinAd * *);
int GetDefaultSortDirection(_tagpropertykey const &);
int GetFallbackIcon(PXICONPARAMS *,unsigned int,unsigned short const *);
int GetGraphicFileIndexAux(unsigned short const *,unsigned short const * const *,unsigned int);
int GetInfoTipEx(IShellFolder *,unsigned long,_ITEMID_CHILD const *,unsigned short *,int);
int GetInfoTipHelpEx(IShellFolder *,unsigned long,_ITEMID_CHILD const *,unsigned short *,int);
int GetIntFromReg(HKEY__ *,unsigned short const *,unsigned short const *,int);
int GetMenubandInfoTipEx(IShellFolder *,unsigned long,_ITEMID_CHILD const *,unsigned short *,int);
int GetMonitorRects(HMONITOR__ *,tagRECT *,int);
int GetNextSnapUpSize(int);
int GetOldWorkAreas(tagRECT *,unsigned long *);
int GetPosFlagsFromElement(DirectUI::Element *);
int GetQICacheEntry(unsigned short const *,unsigned short const *,QICACHEENTRY *);
int GetRegInt(HKEY__ *,unsigned short const *,int);
int GetSearchOptionValue(unsigned long);
int GetSpecialFolderID(unsigned short const *,int const *,unsigned int);
int GetStockApplicationIconWithStamp(unsigned int);
int GetSystemDiacriticSensitivity();
int GetTBImageListWidth(HWND__ *);
int GetWallpaperDirName(unsigned short *,int);
int GetWallpaperWithPath(unsigned short const *,unsigned short *,int);
int GetWininetError(unsigned long,int,unsigned short *,unsigned long);
int GroupItem_GetLinkInfo(unsigned short const *,GROUPITEM *,_ITEMID_CHILD const *,IShellFolder *,IShellLinkW *,IPersistFile *);
int HConv_PartnerIsLFNAware(HCONV__ *);
int HIDAToIDArray(IDataObject *,_ITEMIDLIST_ABSOLUTE * * *);
int HasClientItems(HMENU__ *);
int HasRepeatedFileExtensions(IShellItemArray *);
int HasWindowTopmostOwner(HWND__ *);
int HasWordWheel(IShellItem *);
int HashPathToGUID(unsigned short const *,_GUID *);
int HtmlUnescapeUTF8EntitiesInPlaceA(char *,int);
int IItemCollection_TriggerCountTask(IItemCollection *);
int IItemFilter_DoesItemMatchFilter(IItemFilter *,IItemStore *,tagITEMKEY const *,IShellFolder2 *,IViewStateInfo *,IQueryContinue *,int);
int ILBitsIsEqual(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
int ILCompareHidden(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IDLHID);
int ILCompareHiddenLibraryEnum(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IDLHID);
int ILCompareHiddenStackData(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IDLHID);
int ILCompareHiddenString(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IDLHID);
int ILGetHiddenStringAllocW(_ITEMIDLIST_RELATIVE const *,IDLHID,unsigned short * *);
int ILGetHiddenStringW(_ITEMIDLIST_RELATIVE const *,IDLHID,unsigned short *,unsigned long);
int ILIsChild(_ITEMIDLIST_RELATIVE const *);
int ILIsEqualIncludingHiddenEx(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,IIEIHE);
int ILIsHiddenEqual(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IIEIHE);
int ILIsParentIncludingHidden(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,int);
int ILIsRooted(_ITEMIDLIST_ABSOLUTE const *);
int IResultShape_IsGrouped(IResultShape *);
int IShellItem_IsContainerFile(IShellItem *);
int IShellItem_IsFolder(IShellItem *);
int IViewSettings_IsCustomOrder(IViewSettings *);
int IViewSettings_IsGroupAscending(IViewSettings *);
int IViewSettings_IsGrouped(IViewSettings *);
int IconCacheExclusivelyOwned();
int IconCacheReady();
int IconCache_GetOriginalIconInfo(HICON__ *,ORIGINALICONINFO *);
int IconSetRegValueString(_GUID const *,unsigned short const *,unsigned short const *,unsigned short const *);
int IconSizeFromSliderPos(int,int,int,int,int);
int ImageList_MirroredDraw(IImageList *,int,HDC__ *,int,int,unsigned int);
int InRunDllProcess();
int InitPropSheetExt(IShellPropSheetExt * *,unsigned short const *,EXTCOCREATEFLAGS,HKEY__ *,IDataObject *);
int InitializeUserAPIs(_RTL_RUN_ONCE *,void *,void * *);
int InlineIsEqualGUID(_GUID const &,_GUID const &);
int IsAccessibleLibraryLocation(ILocationDescription *);
int IsAndOrConditionSubset(ICondition *,ICondition *);
int IsAssocHandlerNumberMoreThan(unsigned int,IEnumAssocHandlers *);
int IsAutoplayDisabled();
int IsBasicLibrary(IShellItem *);
int IsBiDiLocale(unsigned long);
int IsBiDiLocalizedSystemEx(unsigned short *);
int IsBriefcaseOrChild(_ITEMIDLIST_ABSOLUTE const *);
int IsColorKey(tagRGBQUAD,unsigned long);
int IsCompatibleVarType(unsigned short,unsigned short);
int IsConditionSubset(ICondition *,ICondition *);
int IsCurrentTravelEntryAutoNavigated(IUnknown *,ITravelEntry * *);
int IsEnabledTopView(_GUID const &,int);
int IsEqualCondition(ICondition *,ICondition *,IPropertyKeyStore *);
int IsEqualLCITEM(tagLCITEM const &,tagLCITEM const &);
int IsErrorNotFoundHResult(long);
int IsExemptFromPurging(int);
int IsExpectedCLSID(_GUID const * const *,unsigned int,_GUID const &);
int IsExplorerDefaultSearchProvider();
int IsFastLocation(IShellItem *,INDEXER_CHECK_FLAGS,INDEXER_CACHE_STATE *);
int IsFileDialog(IUnknown *);
int IsFileFolder(IDFOLDER const *);
int IsFileJunctionOrFolderShortcutItem(IShellItem *);
int IsFilteredSet(IShellItem *);
int IsFirstTravelEntry(IUnknown *);
int IsFolderJunction(IShellItem2 *);
int IsFolderPicker(IUnknown *);
int IsGenericKey(_tagpropertykey const &,_tagpropertykey *);
int IsGuestAccountEnabled(unsigned long);
int IsHighContrast();
int IsHighContrastOn();
int IsHighDPI(HWND__ *);
int IsHttpUri(_ITEMIDLIST_ABSOLUTE const *);
int IsILShared(_ITEMIDLIST_ABSOLUTE const *,int);
int IsIconHeaderProperty(unsigned short const *);
int IsImmersivePicker(IUnknown *);
int IsInLibrary(IShellItem *);
int IsIndexerSupportedDriveType(unsigned short const *);
int IsItemAGroupOrRoot(IItem *,IItem *);
int IsItemCustomizable(IShellItem *);
int IsItemRealized(IItemRealizer *,IItemStore *,tagITEMKEY const *);
int IsItemTopViewAware(IShellItem *);
int IsItemUnderLibrary(IShellItem *);
int IsKnownFolderChild(_GUID const &,KNOWNFOLDER_DEFINITION const *);
int IsLaptop();
int IsLeafConditionSubset(ICondition *,ICondition *);
int IsLibrariesFolder(IShellItem *);
int IsLibrary(IShellItem *);
int IsLibraryLocationOwnedByAnotherMachine(ILocationDescription *);
int IsLinkSafe(HWND__ *,_ITEMIDLIST_ABSOLUTE const *);
int IsLocationBlockedByPolicy(unsigned short const *);
int IsLowMICProcess();
int IsMSHelpTopic(unsigned short const *);
int IsMonikerPrefix(IMoniker *,IMoniker *);
int IsMultiValueProperty(_tagpropertykey const &);
int IsNamespaceAttribute(unsigned short const *,unsigned short const *);
int IsNetworkItem(IShellItem *);
int IsNoOpenWith(unsigned short const *);
int IsNonCustomizableKnownFolder(unsigned short const *);
int IsNonEmptyLibrary(IShellItem *);
int IsNotConditionSubset(ICondition *,ICondition *);
int IsOS_OS_ANYSERVER();
int IsOS_OS_DOMAINMEMBER();
int IsOS_OS_PERSONAL();
int IsOS_OS_PROFESSIONAL();
int IsOS_OS_SERVERADMINUI();
int IsOS_OS_TABLETPC();
int IsOS_OS_TERMINALSERVER();
int IsOS_OS_WOW6432();
int IsPreviewPaneVisible(IUnknown *);
int IsPropVariantString(tagPROPVARIANT const &);
int IsPropertyIID(_GUID const &);
int IsProviderLocation(ILocationDescription *);
int IsReadingPaneEnabled();
int IsReadingPaneVisible(IUnknown *);
int IsRecycleBinKnownFolder(IKnownFolder *,unsigned short * *);
int IsRecycleBinSecure(unsigned short const *);
int IsRemoteLibrary(IShellItem *);
int IsRemovableDevicePath(unsigned short const *);
int IsRightSideCommand(_GUID const &);
int IsSavedSearchScope(_ITEMIDLIST_ABSOLUTE const *);
int IsSearchConnector(IShellItem *);
int IsSearchHome(IShellItem *);
int IsSearchOnlyLocation(ILocationDescription *);
int IsSelf(unsigned int,_ITEMID_CHILD const * const *);
int IsShellDefaultCommandExists(_GUID const *);
int IsShowDeskIconProperty(unsigned short const *);
int IsSortAscending(IResultShape *);
int IsStreamUTF8(IStream *);
int IsSubclassOf<CDUISizerElement>(DirectUI::Element *);
int IsSubclassOf<CMetadataElement>(DirectUI::Element *);
int IsSubclassOf<CPreviewThumbnail>(DirectUI::Element *);
int IsSubclassOf<DirectUI::Button>(DirectUI::Element *);
int IsSubclassOf<DirectUI::HWNDElement>(DirectUI::Element *);
int IsSubclassOf<Microsoft::Windows::FileExplorer::Banners::Banner>(DirectUI::Element *);
int IsSubclassOf<ShellItemLink>(DirectUI::Element *);
int IsSupportedImageFomatForExtractingIcons(unsigned short const *);
int IsSystemFolder(IDFOLDER const *);
int IsTSPerfFlagEnabled(tagEnumTSPerfFlag);
int IsTextUTF8(char const *,int);
int IsTextUTF8(unsigned short const *,unsigned long);
int IsUNCItem(IShellItem *);
int IsUnderKnownFolder(int,_GUID const &,IKnownFolder *);
int IsUnsupportedLocation(ILocationDescription *);
int IsUrlProtocol(unsigned short const *);
int IsVK_TABCycler(tagMSG *);
int IsValidBitmapWallpaperType(unsigned short const *);
int IsValidChar(unsigned short,unsigned short const *,unsigned short const *);
int IsValidLibraryLocation(IShellItem *);
int IsValidMediaPresent(HWND__ *,int,int,int);
int IsValidOpenSearchTemplate(unsigned short const *);
int IsValidWallpaperType(unsigned short const *);
int IsVarTypeInteger(unsigned short);
int IsVarTypeValid(unsigned short);
int IsWindowReady(HWND__ *);
int ItemIsUrl(IShellItem *);
int LUIDCompare(_LUID const &,_LUID const &);
int LV_FindWorkArea(tagRECT const * const,int,tagPOINT const *,int *);
int LoadAboutBitmaps(ABOUT_PARAMS *);
int LoadAndFindApplet(CPLMODULE * *,HICON__ * *,int *,CPLEXECINFO const *,int);
int LookForExtensions(unsigned short *,unsigned short const * *,int,unsigned int);
int MakeSafeFor(IUnknown *,_GUID const &,_GUID const &,unsigned long,unsigned long);
int MapImageSizeToSHIL(int);
int MeasureEditDistanceHelper(int,int,bool,SearchKeyIterator,SearchKeyIterator,EDITDISTANCEOPTIMIZE_FLAGS);
int MeasureMenuItemText(unsigned short const *,tagSIZE *);
int MultiMonEnumCallBack(HMONITOR__ *,HDC__ *,tagRECT *,__int64);
int NetPathExists(unsigned short const *,unsigned long *);
int Net_ConnectDrive(unsigned short const *,unsigned short *);
int Net_DisconnectDrive(unsigned short);
int OnExtList(unsigned short const *,unsigned short const *);
int OrderItem_Compare(void *,void *,__int64);
int OrderItem_CompareByPropList(ORDERITEM const &,ORDERITEM const &,ORDERINFO const &);
int OrderItem_FreeItem(void *,void *);
int OrderItem_GetSystemImageListIndex(ORDERITEM *,IShellFolder *,int);
int OrderItem_UpdatePos(void *,void *);
int OrderList_Append(_DPA *,_ITEMID_CHILD *,int);
int OutputTechPriority(DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY);
int PathCchIsRootA(char const *);
int PathContainsFiles(unsigned short const *);
int PathIsAbsolute(unsigned short const *);
int PathIsInsideTemporaryFolder(bool,unsigned short const *);
int PathIsNetworkOrRelativeOrSubstitutedPath(unsigned short const *);
int PathIsRemovable(unsigned short const *);
int PathIsUNCExA(char const *,char const * *);
int PathOnNovellServer(unsigned short const *);
int PathSectionIsInvalid(unsigned short const *);
int PrivatePathStripToRoot(unsigned short *);
int PromptForMedia(HWND__ *,unsigned short const *);
int PropagateCallback(HWND__ *,__int64);
int QueryNewMaxIcons();
int ReadPolicyForWPStyle(unsigned long *);
int ReadPolicyForWallpaper(unsigned short *,unsigned long);
int Reg_ShellOpenForExtension(unsigned short const *,unsigned short *,int,unsigned short *,int,unsigned short const *);
int ReleaseCallback(void *,void *);
int ReservedExtension(unsigned short const *);
int ResolveShortNameCollisions(unsigned short const *,unsigned short const *,_WIN32_FIND_DATAW const *);
int RunOneInstallStub(HKEY__ *,HKEY__ *,unsigned short const *,unsigned short const *,int,bool,bool);
int SHBoolSystemParametersInfoEx(unsigned int,unsigned int,unsigned long *);
int SHEnableMenuCheckMarkOrBmp(HMENU__ *,int);
int SHGetRunLevelFromActCtx(void *,ACTCTX_REQUESTED_RUN_LEVEL *);
int SHHasTimeoutElapsed(unsigned long,unsigned long);
int SHIsAccountGuest(unsigned short const *);
int SHIsCurrentAccountBuiltInAdmin();
int SHIsCurrentAccountGuest();
int SHIsSafeToDrop(IDataObject *,int,IUnknown *,unsigned short const *);
int SHIsThisComputerByNameOnly(unsigned short const *);
int SHIsVirtualDevice(void *);
int SHProcessMessagesUpdateTimeout(unsigned long,unsigned long,unsigned long *);
int SHRegValueExists(HKEY__ *,unsigned short const *,unsigned long *);
int SHSkipJunctionBinding(IBindCtx *,_GUID const *);
int SafeCloseHandle(void * *);
int SafeDestroyWindow(HWND__ * *);
int ScanDskW_OnInitDialog(HWND__ *);
int SemanticTypeIsNamedEntity(unsigned short const *);
int SendMessageWithoutHanging(HWND__ *,unsigned int,unsigned __int64,__int64,SMWOH,unsigned int);
int SetPidlToWindow(HWND__ *,unsigned int,_ITEMIDLIST_ABSOLUTE const *);
int SetSmallIcon(CFilePropSheetPage *,IAssocInfo *,int);
int SetStr(unsigned short * *,unsigned short const *);
int Shell_GetStockImageIndex(SHSTOCKICONID);
int ShouldAddLinkPage(_ITEMIDLIST_ABSOLUTE const *);
int ShouldProceedWithOperation(long);
int ShouldShowHomegroupUsersForStatus(HGUI_STATUS_FLAGS);
int ShouldSuppressGrouping(ITopViewDescription *,IShellItem *);
int ShouldUpdateEstimates(unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64);
int ShowFormatInitErrorDialog(int,long,HWND__ *,int,unsigned short const *);
int SliderPosFromIconSize(int,int,int,int,int);
int SliderPosFromViewMode(unsigned int,int);
int SourceInfoCompareID(_SourceInfo const *,_SourceInfo const *,__int64);
int Static_ExtractIcon(HKEY__ *);
int StrCmpLogicalRestricted(unsigned short const *,unsigned short const *);
int Stub_EnsureUniqueStubWithParent(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,int,tagPOINT,HWND__ * *);
int SuspendResumeDesktop(HWND__ *,unsigned long,_ITEMIDLIST_ABSOLUTE const *,SCNSUSPENDFLAGS);
int TBHasImage(HWND__ *,int);
int TargetInfoCompareID(_TargetInfo const *,_TargetInfo const *,__int64);
int TargetInfoSort(_TargetInfo const *,_TargetInfo const *,__int64);
int TransmitSuspendResume(HWND__ *,unsigned long,_ITEMIDLIST_ABSOLUTE const *,SCNSUSPENDFLAGS);
int UAIsTrackingEnabledInRegistry(unsigned short const *);
int UnregisterTypeLibrary(_GUID const *);
int UpdatePersonalizationWindowsProc(HWND__ *,__int64);
int ValidPathSegment(unsigned short const *);
int ViewEqualsViewSettings(IFolderView2 *,ITopViewDescription *);
int ViewEqualsViewSettings_FolderFlags(IFolderView2 *,ITopViewDescription *);
int ViewEqualsViewSettings_Grouping(IFolderView2 *,ITopViewDescription *);
int ViewEqualsViewSettings_SortColumns(IFolderView2 *,ITopViewDescription *);
int ViewEqualsViewSettings_Stacking(IFolderView2 *,ITopViewDescription *);
int ViewEqualsViewSettings_ViewModeAndIconSize(IFolderView2 *,ITopViewDescription *);
int ViewEqualsViewSettings_VisibleColumns(IFolderView2 *,ITopViewDescription *);
int ViewHasTransientGrouping(IFolderView2 *);
int ViewHasTransientSorting(IFolderView2 *);
int ViewModeFromSliderPos(int,FOLDERVIEWMODE *,int *,int);
int WarnUserAboutDecryptedParentFolder(unsigned short const *,HWND__ *);
int WillFit(PopupInfo *,int,int);
int Window_IsLFNAware(HWND__ *);
int _AddModule(CPLMODULE *);
int _AddPropSheetPage(_PSP *,__int64);
int _AreSelectedItemsEqual(tagSELECTED_ITEM_ENTRY const *,IItem *,int);
int _BFSFHandleItemExpanding(BFSF *,tagNMTREEVIEWW *);
int _BFSFSetSelectionA(BFSF *,int,__int64);
int _BFSFSetSelectionW(BFSF *,int,__int64);
int _BFSFTreeCompare(__int64,__int64,__int64);
int _BrowseForFolderOnBFSFInitDlg(HWND__ *,HWND__ *,__int64);
int _CacheTimeValid(_ULARGE_INTEGER);
int _CheckKeyForShellNew(unsigned short const *,unsigned short const *,HKEY__ * *,NEWOBJECTINFO *);
int _CleanupProcessAttachStuff();
int _ClearFileNotifyInformationCopy(void *,void *);
int _ClearNotificationCallbackInfo(NOTIFYCALLBACKINFO *,void *);
int _CompareStr(unsigned short const *,unsigned short const *,__int64);
int _CopyCommand(unsigned short const *,unsigned short const *,unsigned short *,unsigned long);
int _CreateHKCUApplicationKey(unsigned short const *,int);
int _DPAProfilePathsEnumCB(_tagDPAProfilePaths *,void *);
int _DXPDeviceHasDefaultHandler(_GUID const &);
int _DestroyParsers(ParserForResID *,void *);
int _DidDropOnRecycleBin(IDataObject *);
int _DiskToolsCommand(DRIVEPROPSHEETPAGE *,unsigned __int64,__int64);
int _DoHummingbirdHack(_ITEMIDLIST_ABSOLUTE const *);
int _DoPickIcon(LINKPROP_DATA *);
int _DoesConditionContainValue(ICondition *,tagPROPVARIANT const &);
int _DoesHandlerOverrideProperty(HANDLERFLAGS,_tagpropertykey const &);
int _DoesItemMatchIDListFilters(IItemFilter *,IItemStore *,tagITEMKEY const *,IShellFolder2 *,IViewStateInfo *,IQueryContinue *);
int _DoesPathMatchAnyConstituent(unsigned short const *,HANDLERINFO *);
int _DontLoadCPL(unsigned short const *);
int _DontUseDesktopChangeRouter();
int _DrvPrshtApply(DRIVEPROPSHEETPAGE *);
int _EnsureExtCache();
int _Enum_Find_ListView(HWND__ *,__int64);
int _ExtractIcons(unsigned short const *,int,int,int,HICON__ * *,unsigned int *,unsigned int,unsigned int,EXTRACTICONFLAGS,unsigned int);
int _ExtractIconsFromImage(bool,unsigned short const *,int,unsigned int,HICON__ * *);
int _FindCPLCallback(HWND__ *,__int64);
int _FindFolderTypeFromCanonicalNameCB(_GUID const *,IFolderTypeDescription * const *,void *);
int _FindPolicyEntry(unsigned short const *,unsigned short const *);
int _FixDriveDisplayName(unsigned short const *,unsigned short const *,_ITEMIDLIST_ABSOLUTE const *);
int _GetFolderCLSID(ICachedPrivateProfile *,_GUID *);
int _GetLogAndEncodedPath(_GUID const *,unsigned short const *,unsigned short *,unsigned long,CUADBLog * *);
int _GetMetricsRegInt(unsigned short const *,int);
int _GetNewLinkInfo(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short *,unsigned int,int *,unsigned int);
int _GetRatingBucketIndex(unsigned int);
int _GetTargetOfLink(LINKPROP_DATA *,unsigned short *,unsigned int);
int _HandleUnmarkedLegacyCPL(HWND__ *,CPLEXECINFO const *,unsigned short const *,int,int *);
int _HasItemInViewFromSite(IUnknown *,IShellItemArray *);
int _HasMenuId(HMENU__ *,unsigned int);
int _HasShellNew(unsigned short const *,HKEY__ * *,NEWOBJECTINFO *);
int _IconGetRegValueString(int,_GUID const *,unsigned short const *,unsigned short const *,unsigned short *,unsigned int);
int _IncludePropertyKey(_tagpropertykey const &);
int _InitDragHelper();
int _InitFolderTypeMapping(_RTL_RUN_ONCE *,void *,void * *);
int _InitializeCPLModule(CPLMODULE *);
int _InitializeControl(CPLMODULE const *,CPLITEM *);
int _IsBriefcaseTarget(IShellFolder *);
int _IsBurnAvailable(IUnknown *,IShellItemArray *);
int _IsDriveItem(IShellItem *);
int _IsEqualAndOrCondition(ICondition *,ICondition *,IPropertyKeyStore *);
int _IsEqualLeafCondition(ICondition *,ICondition *,IPropertyKeyStore *);
int _IsEqualNotCondition(ICondition *,ICondition *,IPropertyKeyStore *);
int _IsEventHandlerInList(unsigned short const *,CDPACoTaskMem<unsigned short> const &);
int _IsExtCacheValid();
int _IsHtmlEntityA(char const *,int);
int _IsIconViewMode(unsigned int);
int _IsImpersonating();
int _IsLink(unsigned short const *,unsigned long);
int _IsModuleInitialized(CPLMODULE const *);
int _IsParentOf(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
int _IsQuickRemovalPolicySet(int);
int _IsResource(unsigned short const *);
int _IsSHILInited();
int _IsScopeSearchHome(IScope *);
int _IsSetupRunningAndNotOOBE();
int _IsStarQuery(ICondition *);
int _IsSubStreamWarningRequired(unsigned short const *,unsigned short *,unsigned int);
int _IsValidKey(HKEY__ *,unsigned short const *,unsigned short const *);
int _IsValidSaveLocation(ILibraryDescription *,ILocationDescription *,DSLFLAGS);
int _IsWebfolders(IShellItem *);
int _IsWindowClass(HWND__ *,unsigned short const *);
int _IsWindowVisibleAndNonZeroSize(HWND__ *);
int _ItemWantsFindComputer(_ITEMIDLIST_ABSOLUTE const *);
int _LUAIsTokenAdmin(void *);
int _LikeOpCompareValuesWorker(tagPROPVARIANT const &,tagPROPVARIANT const &,tagCONDITION_OPERATION,unsigned long,unsigned long);
int _LoadErrMsg(HINSTANCE__ *,unsigned int,unsigned short *,unsigned __int64,unsigned long);
int _LockSizeMatchEvent(CHANGELOCK const *);
int _LookupFileClassInt(unsigned short const *,int);
int _MakeConnection(IDataObject *,int);
int _PathAppend(unsigned short const *,unsigned short const *,unsigned short *,unsigned __int64);
int _PathAppendNoStomp(unsigned short *,unsigned long,unsigned short const *);
int _PathIsExe(unsigned short const *);
int _PathMatchesProgramFiles(unsigned short const *);
int _ProcessAttach(HINSTANCE__ *);
int _ProcessTokenSplitWithAdmin(int *);
int _PropertyKeyStoreContainsCondition(ICondition *,IPropertyKeyStore *);
int _PropertyKeyStoreContainsConditionAndOrNot(ICondition *,IPropertyKeyStore *);
int _PropertyKeyStoreContainsConditionLeaf(ICondition *,IPropertyKeyStore *);
int _PsxaCallOwner(_PSP *,__int64);
int _QualifyWorkingDir(unsigned short const *,unsigned short const *,unsigned short const *,SHELL_EXEC_CMD_LINE_OPTIONS,unsigned short *,unsigned long);
int _QueryClassInterfaceAndOrLogData(unsigned short const *,unsigned short const *,unsigned long,unsigned short const *,QCI_BEHAVIOR);
int _SHChangeNotification_Unlock(CHANGELOCK *);
int _SHIsMenuSeparator2(HMENU__ *,int,int *);
int _SHMergePopupMenus(HMENU__ *,HMENU__ *,int,int);
int _SameLastGroup(unsigned short const *);
int _SetIconToCPLStubWindow(HWND__ *,CPLMODULE *,CPLITEM *,unsigned short const *);
int _SetPropertySheetIcon(IDataObject *,_ITEMIDLIST_ABSOLUTE *,_PROPSHEETHEADERW_V2 *);
int _ShellExecCplApplet(HWND__ *,unsigned short const *,unsigned short const *,int);
int _ShellImageListPreload();
int _ShouldExcludeFileFromHardLink(unsigned short const *);
int _SupportLFNGroups();
int _SwitchToControlPanelWindowAlreadyShowing(HWND__ *,CPLAPPLETID *);
int _TreatAsFolder(IShellItem *);
int _UseClassicViewState();
int _ValidateIconCacheHeader(IC_HEAD const *,unsigned int);
int _ValidateLink(LINKPROP_DATA *);
int _VarArgsFormatMessage(unsigned short *,unsigned int,unsigned long,...);
int _VerifyAndLaunchControlPanelAppletIfLegacy(HWND__ *,CPLEXECINFO *,int,int *);
int _VerifyUNC(unsigned short *,unsigned long);
int _ustrcmp(unsigned short const *,unsigned short const *,int);
int g_LFNGroups;
int g_bCheckRunInSep;
int g_bInitialized;
int g_cMCObjects;
int g_cMCSearchJob;
int g_fCacheIsComplete;
int g_fDirtyIcons;
int g_fLoadExternalOverlays;
int g_fMetricsCalculated;
int g_fNoUA;
int g_fOverlaysEnabled;
int g_fPausedExtracting;
int g_fTriedInstStubProgressDialog;
int g_lOverlayMgrPerProcessCount;
int g_lProcessExtCount;
int g_nButtonPadding;
int g_nSliderTop;
int g_nStartX;
int operator==(_tagpropertykey const &,_tagpropertykey const &);
int s_CandidateOrderedSortByValue(CMCCandidate const *,CMCCandidate const *,__int64);
int s_CandidateSortByValue(CMCCandidate const *,CMCCandidate const *,__int64);
int s_DSACandidateDestroyCB(CMCCandidate *,void *);
int s_DarwinAdsDestroyCallback(void *,void *);
int s_MatchSortByCandidate(CMCMatch const *,CMCMatch const *,__int64);
int s_fUndoSuspended;
long AcquireExistingAppResolverCache(CAppResolverCacheManager * *);
long ActivateApplicationForLaunchWithManager(IApplicationActivationManager *,unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,HMONITOR__ *,unsigned long *);
long ActiveDesktop_CopyState(IActiveDesktop *,IActiveDesktop *);
long ActivityTracker_CreateInstance(IAppRankProvider *,IActivityTracker * *);
long AddDefaultProperties(_tagpropertykey *,unsigned int,IPropertyStore *,IPropertyChangeArray *);
long AddFrameToWICBitmap(IWICImagingFactory *,IWICBitmapEncoder *,IWICBitmapSource *,_GUID,EncodingOptions);
long AddFrequentFolders(IObjectCollection *,MFU_FOLDER_ACTION);
long AddIconTask(IShellTaskScheduler *,IShellFolder *,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_RELATIVE const *,void (*)(void *,unsigned int,unsigned int),void *,unsigned int,int *);
long AddLtrEscapeCharacters(unsigned short const *,unsigned short *,unsigned int);
long AddMNEnumTask(IShellTaskScheduler *,CMNLock *,MNITEM *);
long AddShieldToMenuItem(HMENU__ *,unsigned int,HBITMAP__ * *);
long AddUserPictureElementSize(unsigned int,unsigned long *);
long AddZoneIdentifier(unsigned short const *,unsigned long,unsigned short const *);
long AdjustSquareThumbnail(IWICImagingFactory *,IWICBitmapSource *,unsigned int,unsigned int,unsigned int,_GUID const &,void * *);
long AdjustWideThumbnail(IWICImagingFactory *,IWICBitmapSource *,unsigned int,unsigned int,unsigned int,_GUID const &,void * *);
long AdjustWideThumbnail4x3(IWICImagingFactory *,IWICBitmapSource *,unsigned int,unsigned int,unsigned int,_GUID const &,void * *);
long AllocAndCopySid(void *,void * *);
long AppendReqToDavSendBuffer(_DAV_HTTP_SEND_BUFFER *,unsigned long *,unsigned long,char const *);
long AppendScreenResStringForDpi(unsigned short const *,unsigned long,int,unsigned short *,unsigned long);
long AppendSearchParsingNameEscaped(unsigned short const *,ShStrW *);
long AppendTextToPropertyVariantLocalized(int,int,tagPROPVARIANT const &,tagPROPVARIANT *);
long AppendTextToPropertyVariantLocalized(unsigned short const *,unsigned short const *,tagPROPVARIANT const &,tagPROPVARIANT *);
long AppendToDavSendBuffer(_DAV_HTTP_SEND_BUFFER *,unsigned long *,unsigned long,void const *,unsigned long);
long ApplyDefaultAssociationsXml(IStream *);
long ApplyDefaultsForExtension();
long ApplyExtraApplicationAssociationPrompts();
long ApplyExtraPrompts();
long ApplyFolderViewSettingsToView(ITopViewDescription *,IShellView *);
long ApplyIconStamp(HICON__ *,unsigned int,HICON__ * *);
long AreAllItemsAvailable(bool,HWND__ *,IShellItemArray *);
long AssocElemCreateForClass(_GUID const &,unsigned short const *,_GUID const &,void * *);
long AssocElemCreateForClass2(_GUID const &,unsigned short const *,unsigned long,_GUID const &,void * *);
long AssocElementCreateAndInitForOpenWith(_GUID const &,unsigned short const *,HKEY__ *,unsigned short const *,_GUID const &,void * *);
long AutoIndexLocation(IShellItem *);
long AutoIndexLocations(IShellItemArray *);
long Base32EncodeHandlerName(unsigned char const *,unsigned __int64,unsigned short * *,unsigned int *);
long BeginInvoke<<lambda_123c6e1712e64f6386bb9327112e5f60> >(INotificationDispatcher *,<lambda_123c6e1712e64f6386bb9327112e5f60> const &);
long BeginInvoke<<lambda_e06a986b332aaefa0e130a3c94120dd0> >(INotificationDispatcher *,<lambda_e06a986b332aaefa0e130a3c94120dd0> const &);
long BeginInvoke<<lambda_fbc298754eb7256a143bd2fe6002cc58> >(INotificationDispatcher *,<lambda_fbc298754eb7256a143bd2fe6002cc58> const &);
long BinaryToText(BINARY_TEXT_ENCODE_SCHEME,IStream *,unsigned long,unsigned short * *);
long BindCtx_AddSkipBindCtx(IBindCtx *,_GUID const &,IBindCtx * *);
long BindCtx_RegisterObjectParams(IBindCtx *,BINDCTX_PARAM const *,unsigned int,IBindCtx * *);
long BindToHandlerWithExtensionAndStream(unsigned short const *,IStream *,IBindCtx *,_GUID const &,_GUID const &,void * *);
long BindUpToInterface(IShellItem *,_ITEMIDLIST_RELATIVE * *,_GUID const &,void * *);
long BitwiseCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,BITSSET,int,int *);
long BlockOnCompletionAndGetResults<ContentManagement::TargetedContent::TargetedContentCollection *,ContentManagement::TargetedContent::ITargetedContentCollection>(Windows::Foundation::IAsyncOperation<ContentManagement::TargetedContent::TargetedContentCollection *> *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ContentManagement::TargetedContent::ITargetedContentCollection> >,tagCOWAIT_FLAGS,void *);
long BuildDavSendBuffer(_DAV_HTTP_SEND_BUFFER *,unsigned long,unsigned short const *,unsigned short const *,unsigned long *);
long BuildDavSendBufferAndPost(void *,unsigned short const *,unsigned short const *,unsigned char *,unsigned long);
long BuildDavVerifySendBuffer(_DAV_HTTP_SEND_BUFFER *,unsigned long,unsigned short const *,unsigned short const *,URL_COMPONENTSW,unsigned long *);
long BuildDavVerifySendBufferAndPost(void *,unsigned short const *,unsigned short const *,URL_COMPONENTSW);
long BuildDefaultName(unsigned short *,unsigned long,unsigned short const *);
long BuildName(unsigned short const *,unsigned short const *,unsigned short const *,int,int,unsigned short * *);
long BuildSharepointPathAndQuery(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short *,unsigned __int64);
long CACLMRU_CreateInstance(unsigned short const *,IUnknown *,_GUID const &,void * *);
long CACLMulti_Create(IEnumString * *,CACLMulti *);
long CAggregateMultipleValues_CreateInstance(_GUID const &,void * *);
long CApplyDateChange_CreateInstance(_tagpropertykey const &,_FILETIME,_GUID const &,void * *);
long CBriefcaseData_GetBriefObj(IDataObject *,tagSTGMEDIUM *);
long CCDBurnFolder_CreateSFVCB(CCDBurnFolder *,IShellFolderViewCB * *);
long CCancelWithEvent_CreateInstance(void *,_GUID const &,void * *);
long CChildId_CreateInstanceEx(_ITEMID_CHILD * *,int,IChildId * *);
long CCommonPlacesViewCB_Create(_ITEMIDLIST_ABSOLUTE const *,_GUID const &,void * *);
long CComposeCallback_CreateInstance(CTLTStore *,IAggregateImageList *,_GUID const &,void * *);
long CControlPanelEnum_CreateInstance(unsigned long,IRegItemCustomAttributes *,_GUID const &,void * *);
long CControlPanelFolder_CreateInstance(tagCPCAT,IUnknown *,_GUID const &,void * *);
long CCopyMoveToItem_CreateInstance(IShellItem *,bool,_GUID const &,void * *);
long CCv6s_HeapFree(void *,void *);
long CCv6s_HeapReallocArray<void *>(void *,unsigned long,void *,unsigned __int64,unsigned __int64,void * * *);
long CCv6s_HeapReallocArray<void>(void *,unsigned long,void *,unsigned __int64,unsigned __int64,void * *);
long CDBurn_EnsureUserIntentForDisc(HWND__ *,int,int);
long CDBurn_GetCDInfo(unsigned short const *,unsigned long *,unsigned long *);
long CDBurn_GetLiveFSDiscInfo(int,int *,int *);
long CDBurn_GetPlainCDIDList(int,_ITEMIDLIST_ABSOLUTE * *);
long CDBurn_GetTaskInfo(int,int *,int *,int *,int *);
long CDBurn_IsUdfAutoCloseEnabled(int *,int *);
long CDBurn_OnDeviceAdded(int);
long CDBurn_OnDeviceChange(int,unsigned short const *);
long CDBurn_OnMediaChange(int,unsigned short const *);
long CDebugOutput_CreateInstance(_GUID const &,void * *);
long CDrives_AddPagesForMountedVolume(IDataObject *,int (*)(_PSP *,__int64),__int64);
long CDrives_AddPagesHelper(DRIVEPROPSHEETPAGE *,int,int (*)(_PSP *,__int64),__int64);
long CEnumChildIDListOverItemCollection_CreateInstance(IObjectCollection *,_GUID const &,void * *);
long CEnumLock_CreateInstance(CEventResult * *,CEnumLock * *);
long CExplorerSubCommandOverIContextMenu_CreateInstance(IContextMenu3 *,unsigned int,unsigned short const *,_GUID const &,void * *);
long CExtractThumbnailTask_CreateInstance(_ITEMIDLIST_ABSOLUTE const *,tagSIZE,HWND__ *,unsigned int,unsigned __int64,IRunnableTask * *);
long CFSFolderPropertyStore_CreateInstance(IFreeThreadedItemContainer *,HANDLERFLAGS,GETPROPERTYSTOREFLAGS,_ITEMID_CHILD const *,_GUID const &,void * *);
long CFSItemResourcesAlternateData_CreateInstance(unsigned short const *,void *,IShellItem *,unsigned short const *,int,FSITEMRESOURCEFLAGS,_GUID const &,void * *);
long CFSItemResourcesData_CreateInstance(unsigned short const *,void *,IShellItem *,unsigned short const *,int,FSITEMRESOURCEFLAGS,_GUID const &,void * *);
long CFSItemResources_CreateInstance(unsigned short const *,void *,IShellItem *,unsigned long,unsigned long,FSITEMRESOURCEFLAGS,unsigned __int64,unsigned long,_GUID const &,void * *);
long CFSPropertyStoreFactory_CreateInstance(IFSFolderPriv *,_ITEMID_CHILD const *,_GUID const &,void * *);
long CFallbackPropStore_CreateInstance(IItemStore *,tagITEMKEY const *,IShellFolder2 *,IViewStateInfo *,_GUID const &,void * *);
long CFileFolderIconManager_Create(IShellFolder *,_ITEMID_CHILD const *,_GUID const &,void * *);
long CFileInUseRestartManager_Create(IShellItem *,IFileIsInUse * *);
long CFileInUseWrapper_Create(IUnknown *,IFileIsInUse * *);
long CFileSystemDriveProps_CreateInstance(CMountPoint *,unsigned short const *,CDriveProps * *);
long CFolderItemVerb_Create(CFolderItemVerbs *,unsigned int,FolderItemVerb * *);
long CFolderItemVerbs_Create(IContextMenu *,FolderItemVerbs * *);
long CFolderItem_Create(CFolder *,_ITEMID_CHILD const *,FolderItem * *);
long CFolderItem_CreateFromIDList(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,FolderItem * *);
long CFolderItems_Create(CFolder *,int,FolderItems * *);
long CFolder_Create(HWND__ *,_ITEMIDLIST_RELATIVE const *,IShellFolder *,_GUID const &,void * *);
long CFolder_Create2(HWND__ *,_ITEMIDLIST_RELATIVE const *,IShellFolder *,CFolder * *);
long CGetCommandStateTask_Create(IShellFolder *,_ITEMID_CHILD *,IExplorerCommand *,IShellItemArray *,IUnknown *,_GUID const &,HWND__ *,unsigned int,IFrameWorkItem * *);
long CGetIconTask_CreateInstance(IShellFolder *,_ITEMID_CHILD const *,bool,void (*)(void *,void *,int,int),void *,void *,unsigned int,IRunnableTask * *);
long CHomeGroupMachineImage_CreateInstance(unsigned short const *,_GUID const &,void * *);
long CHomeGroupUserImage_CreateInstance(unsigned short const *,unsigned short *,_GUID const &,void * *);
long CItemSidMapping_CreateInstance(IShellItem *,CItemSidMapping * *);
long CItemThumbnail_CreateInstance(int,int,int,int,int,_GUID const &,void * *);
long CItemThumbnail_CreateSingleImageInstance(int,int,int,int,_GUID const &,void * *);
long CLayerCallback_CreateInstance(CIconCache *,_GUID const &,void * *);
long CLayoutFolderCB_CreateInstance(CLayoutFolder *,_ITEMIDLIST_ABSOLUTE const *,_GUID const &,unsigned short const *,IShellFolderViewCB * *);
long CLocationFolderUI_CreateInstance(_ITEMIDLIST_ABSOLUTE const *,IShellItem *,_GUID const &,void * *);
long CMNEnumQueueItem_CreateInstance(MN_BKGDENUMDONEDATA *,CQueueItem * *);
long CMNLock_Create(CSFToolbar *,CMNLock * *);
long CMVPTokenData_CreateInstance(CDSA<MVPTOKENDATA> *,_GUID const &,void * *);
long CMVPToken_CreateInstance(HWND__ *,MVPTOKENDATA const *,_GUID const &,void * *);
long CMVQueryEnumFactory_Create(_tagpropertykey const &,_GUID const &,void * *);
long CMVQueryEnumString_Create(_tagpropertykey const &,_GUID const &,void * *);
long CMergedFldrContextMenu_CreateInstance(HWND__ *,IContextMenu *,IContextMenu *,_GUID const &,void * *);
long CMergedFldrDropTarget_CreateInstance(CMergedFolder *,HWND__ *,IDropTarget * *);
long CMergedFldrEnum_CreateInstance(CMergedFolder *,unsigned long,IEnumIDList * *);
long CMergedFolderViewCB_CreateInstance(CMergedFolder *,IShellFolderViewCB * *);
long CMockSuggestionsTask_CreateInstance(unsigned int,CCoSimpleArray<unsigned short *,4294967294,CSimpleArrayStandardCompareHelper<unsigned short *> > *,unsigned short const *,unsigned short const *,ITypeAheadProviderEventSink *,_GUID *,_GUID const &,void * *);
long CMountedDriveProps_CreateInstance(CMountPoint *,unsigned short const *,CDriveProps * *);
long CMultiComplete_Create(HWND__ *,IClassFactory *,IMultiCompleteCallback *,_GUID const &,void * *);
long CMultipleValues_CreateInstance(tagPROPVARIANT const *,_tagpropertykey const &,_GUID const &,void * *);
long CNotificationClientData_CreateInstance(unsigned long,IShellItem *,HWND__ *,unsigned long,NOTIFICATION_CLIENT_FLAGS,int,long,unsigned int,_GUID const &,void * *);
long CPLD_GetRegModules(bool,ControlData *);
long CPL_AdjustPidlForCategoryView(_ITEMIDLIST_ABSOLUTE const *,bool,tagCPCAT,_ITEMIDLIST_ABSOLUTE * *);
long CPL_BuildHssHelpURL(unsigned short *,unsigned int);
long CPL_CategoryIdArrayFromVariant(tagVARIANT const &,tagVARIANT *);
long CPL_EnumObjects(unsigned long,IShellFolder2 * *,IEnumIDList * *);
long CPL_FindCPLInfo(unsigned short const *,bool,HICON__ * *,int *);
long CPL_GetCategoryOfPage(_ITEMIDLIST_ABSOLUTE const *,tagCPCAT *);
long CPL_GetControlPanelPath(CPVIEW,unsigned short *,unsigned int);
long CPL_LoadCategoryDescriptionFromIndex(int,unsigned short *,unsigned int);
long CPL_LoadCategoryNameFromIndex(int,unsigned short *,unsigned int);
long CPL_LoadXMLFromResource(HINSTANCE__ *,unsigned int,IXmlReader * *);
long CPL_LoadXMLFromStream(IStream *,IXmlReader * *);
long CPL_MakeSearchTextTokens(unsigned short const *,CPL_MAKE_SEARCH_TOKEN_MODE,unsigned short * *);
long CPL_ModifyWowDisplayName(unsigned short *,unsigned int);
long CPL_MoveToNextElement(IXmlReader *,unsigned short const *);
long CPL_SetPreferredView(CPVIEW);
long CPL_TokenizeDisjunctiveNormalFormWordPrefixCondition(ICondition *,IConditionFactory2 *,ICondition * *);
long CPartialPropertyChangeOperation_CreateInstance(_tagpropertykey const &,IAggregateMultipleValues *,_GUID const &,void * *);
long CPrivateIconSparseCallback_CreateInstance(_GUID const &,void * *);
long CPropertyValue_CreateInstance(tagPROPVARIANT const &,_tagpropertykey const &,_GUID const &,void * *);
long CProviderDelay_CreateInstance(IUnknown *,_GUID const &,void * *);
long CRefCountedCriticalSection_CreateInstance(ICriticalSection * *);
long CRegistryChangeListener_CreateInstance(HKEY__ *,unsigned short const *,REGISTRY_LISTENER_FLAGS,void (*)(void *),void *,IRegistryChangeListener * *);
long CSecurityOwnerPropertyStore_CreateInstance(IFreeThreadedItemContainer *,HANDLERFLAGS,GETPROPERTYSTOREFLAGS,_ITEMID_CHILD const *,_GUID const &,void * *);
long CSelectionManager_CreateInstance(HWND__ *,CSelectionManager * *);
long CShellDriveProps_CreateInstance(IShellFolder2 *,_ITEMID_CHILD const *,CDriveProps * *);
long CShortcut_CreateIDispatch(HWND__ *,IShellFolder *,_ITEMID_CHILD const *,IDispatch * *);
long CSimpleEnumString_CreateInstance(int,CSimpleEnumString * *);
long CSimpleItemResources_CreateInstance(IShellItem *,IBindCtx *,IInternetSecurityManager *,_GUID const &,void * *);
long CStorageProviderInfo_CreateInstance(_GUID const &,void * *);
long CSyncRootManager_CreateInstance(_GUID const &,void * *);
long CSyncStatusProviderInfo_CreateInstance(_GUID const &,HKEY__ *,ISyncStatusProvider *,_GUID const &,void * *);
long CThumbnailLookupTable_CreateInstance(unsigned int,unsigned int,int,int,TLT_CONFIGFLAGS,_IMAGELIST * *,CThumbnailLookupTable * *);
long CTopViewCommandEnumerator_Create(TOPVIEWKEY const &,TVCMODE,int,_GUID const &,void * *);
long CTopViewCommand_Create(_GUID const &,void * *);
long CTopViewDescription_Create(_GUID const &,_GUID const &,_GUID const &,unsigned short const *,_GUID const &,void * *);
long CUserAssist_CI2(CUserAssist * *);
long CUserFilesDescriptionEnum_CreateInstance(_GUID const &,void * *);
long CUsersLibrariesDropTarget_CreateInstance(HWND__ *,_GUID const &,void * *);
long CViewGroup_CreateInstance(CListViewHost *,IItem *,IResultShape *,HWND__ *,CViewGroup * *);
long CacheItemOnShellItem(IUnknown *,IItem *);
long CachedSTAObject_QueryInterface(unsigned long,int *,_GUID const &,void * *);
long CachedSTAObject_SetObject(unsigned long,IUnknown *);
long CanDeletePath(unsigned short const *);
long CanShowPaneAux(unsigned short const *,_GUID const &,_GUID,_GUID const &,IUnknown *,int *);
long CcdQueryDisplayConfig(unsigned int,unsigned int *,DISPLAYCONFIG_PATH_INFO *,unsigned int *,DISPLAYCONFIG_MODE_INFO *,DISPLAYCONFIG_TOPOLOGY_ID *);
long CheckAccess(unsigned short const *,unsigned long,unsigned long *);
long CheckAccessToDrive(unsigned short const *);
long CheckAndReportError(long);
long CheckAndReportError<unsigned short const ,11>(long,unsigned short const (&)[11]);
long CheckAndReportError<unsigned short const ,5>(long,unsigned short const (&)[5]);
long CheckAndReportError<unsigned short const ,9>(long,unsigned short const (&)[9]);
long CheckCharsAndReplaceIfNecessary(IItemNameLimits *,unsigned short *);
long CheckSecurityZoneUrl(unsigned short const *,unsigned long,unsigned long,HWND__ *,IUnknown *,ISecurityZoneChecker * *);
long ClearDeviceStage(unsigned short const *);
long CloneChildFilters(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
long CloudExperienceHostCreateElevatedObject(_GUID const &,_GUID const &,void * *);
long CoCreateAndInitWithIDList(_GUID const &,IUnknown *,_ITEMIDLIST_ABSOLUTE const *,_GUID const &,void * *);
long CoCreateInstanceAndLoadFromFile(_GUID const &,unsigned short const *,_GUID const &,void * *);
long CoCreateInstanceAsAdmin(HWND__ *,_GUID const &,_GUID const &,void * *);
long CoReduceArraySizeEmptyOnZero<INDIVIDUAL_CONFLICT_MAPPING_DATA>(unsigned long,unsigned long,INDIVIDUAL_CONFLICT_MAPPING_DATA * *);
long ColorCorrectImageWithWIC(IWICImagingFactory *,IWICBitmapFrameDecode *,IWICBitmapSource *,IWICBitmapSource * *);
long CommitTDLItemWithRetry(wistd::function<long ()>,wistd::function<long ()>);
long CompareIDsFallback(IShellFolder *,__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,unsigned int);
long CompareIDsImpl(IShellFolder2 *,__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
long CompareIDsImpl2(long,IShellFolder2 *,__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
long CompareItems(IShellItem *,IShellItem *,COMPARE_ITEMS_RESULT *);
long ComputeEnlightenmentSampleGroupHash(bool,unsigned short * *);
long ComputeEnterpriseIdForSelection(Microsoft::WRL::AgileRef const &,void *,unsigned short * *);
long ComputeHashFromString(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,unsigned short * *);
long ComputeRecommendedHandler(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
long ComputeUserHash(unsigned short const *,unsigned short * *);
long ConcatenateFileTime(_SYSTEMTIME const &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
long ConflictDialogData_CreateInstanceOnNewSTAThread(IConflictDialogDataResponse * *);
long ContainerIDFromDeviceID(unsigned short const *,_GUID *);
long ContextMenu_GetCommandStringVerb(IContextMenu *,unsigned int,unsigned short *,int);
long Convert32bppIWICBitmapSourceToHBITMAP(IWICBitmapSource *,HBITMAP__ * *);
long Convert32bppWICBitmapSourceToHBITMAP(IWICBitmapSource *,HBITMAP__ * *);
long ConvertHBITMAPToWICBitmap(IWICImagingFactory *,HBITMAP__ *,WICBitmapAlphaChannelOption,IWICBitmapSource * *);
long ConvertIDListEnumMode(FOLDER_ENUM_MODE,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
long ConvertIWICBitmapSourcePixelFormat(IWICBitmapSource *,_GUID,IWICImagingFactory *,IWICBitmapSource * *);
long ConvertIWICBitmapSourceTo32bppHBITMAP(IWICBitmapSource *,IWICImagingFactory *,HBITMAP__ * *);
long ConvertItemEnumMode(FOLDER_ENUM_MODE,IShellItem *,int,IShellItem * *);
long ConvertItemToUNCPath(IShellItem *,unsigned short * *);
long ConvertMSUriToFileUri(IPropertyStore *,IUri *,unsigned short *,IUri * *);
long ConvertTopViewIDList(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
long ConvertUriToPath(IUri *,unsigned short * *);
long ConvertWICBitmapPixelFormat(IWICImagingFactory *,IWICBitmapSource *,_GUID,WICBitmapDitherType,IWICBitmapSource * *);
long ConvertWICBitmapToHBITMAP(IWICImagingFactory *,IWICBitmapSource *,HBITMAP__ * *);
long CopyNamedPropertyStore(INamedPropertyStore *,INamedPropertyStore *);
long CopyRemainderOfStreamToFile(IStream *,unsigned short const *,unsigned __int64);
long CopyRundllTarget(unsigned short const *,unsigned short *,unsigned __int64);
long Create32BitHBITMAP(HDC__ *,tagSIZE const *,void * *,HBITMAP__ * *);
long CreateAdvancedDlgEventListener(_GUID const &,void * *);
long CreateAndGiveWindowForeground(HWND__ * *);
long CreateAutolistShortcutsInLinksDir();
long CreateAutolistShortcutsInLinksDirAsync();
long CreateBBGlobalPage(IRecycleBinManager *,_PSP * *);
long CreateBitmapFromIconWithAlpha(HICON__ *,int,HBITMAP__ * *);
long CreateCategoryArray(int,CDPA<ICategoryDescription,CTContainer_PolicyUnOwned<ICategoryDescription> > *,ICategoryDescriptionArray * *);
long CreateCategoryDescriptionWithLayoutPattern(unsigned long,tagPROPVARIANT const &,_tagpropertykey const &,CATEGORYINFO_FLAGS,IFilterCondition *,unsigned short const *,unsigned short const *,ICategoryDescription * *);
long CreateCategoryDescriptionWithUIntSortOrder(unsigned long,unsigned __int64,_tagpropertykey const &,CATEGORYINFO_FLAGS,IFilterCondition *,unsigned short *,ICategoryDescription * *);
long CreateChangeRecordArray(IItemStore *,CDSA<tagITEM_CHANGE_RECORD> *,_GUID const &,void * *);
long CreateCollectionFromSingleObject(IUnknown *,_GUID const &,void * *);
long CreateCommonFrame(IShellFolder *,tagLAYOUTTYPE,_GUID const &,void * *);
long CreateConditionForPCSettingsQuery(unsigned short const *,unsigned short const *,ICondition * *);
long CreateConditionRange(_tagpropertykey const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,unsigned short const *,unsigned short const *,ICondition * *);
long CreateDefaultTaskScheduler(_GUID const &,void * *);
long CreateDrivePropsFromItemArray(IShellItemArray *,CDriveProps * *);
long CreateDrivePropsFromPidl(_ITEMIDLIST_ABSOLUTE const *,CDriveProps * *);
long CreateEnumExplorerCommandFromDefArray(IUnknown *,UICOMMAND_DEF const *,unsigned int,_GUID const &,void * *);
long CreateExplorerCommandFromDef(IUnknown *,UICOMMAND_DEF const *,_GUID const &,void * *);
long CreateExplorerCommandFromUICommand(IUICommand *,IExplorerCommand * *);
long CreateFileFolderContextMenu(IUnknown *,_ITEMIDLIST_ABSOLUTE const *,HWND__ *,_GUID const &,void * *);
long CreateFileSystemBindData(_GUID const &,void * *);
long CreateFileWithSize(unsigned short const *,unsigned long,unsigned long,_SECURITY_ATTRIBUTES *,unsigned long,unsigned long,unsigned __int64,unsigned short const *,void * *);
long CreateFileWithUsnSourceInfo(unsigned short const *,unsigned long,unsigned long,_SECURITY_ATTRIBUTES *,unsigned long,unsigned long,void *,unsigned long,unsigned long,void * *);
long CreateFilterConditionRange(unsigned short const *,unsigned short const *,_tagpropertykey const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,unsigned short const *,unsigned short const *,IFilterCondition * *);
long CreateFilterConditionValueEx(unsigned short const *,unsigned short const *,_tagpropertykey const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,unsigned short const *,IFilterCondition * *);
long CreateFullPidlForApplet(IShellFolder2 *,tagCPCAT,_ITEMID_CHILD const *,_ITEMIDLIST_ABSOLUTE * *);
long CreateGetPropertiesWorkItem(CStatusBarModuleInner *,IUnknown *,bool,IShellItemArray *,unsigned int,IShellItemArray *,unsigned int,_tagpropertykey const &,_GUID const &,void * *);
long CreateHBITMAPFromParsingNames(IPropertyStore *,IShellItem *,tagPROPVARIANT const &,tagSIZE const *,IMAGEPARSINGNAMEHANDLINGFLAGS,HBITMAP__ * *,WTS_ALPHATYPE *);
long CreateHandlerInstance(IUnknown *,HANDLERFLAGS,_GUID const &,EXTCOCREATEFLAGS,_GUID const &,void * *,int *);
long CreateHistoryKeyForExplorer(unsigned short const *,unsigned short const *,unsigned long,HKEY__ * *);
long CreateHistoryKeyForPackageIfEnabled(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,HKEY__ * *);
long CreateIDListArrayFromChildIdArray(CDPA<IChildId,CTContainer_PolicyUnOwned<IChildId> > const *,_ITEMID_CHILD const * * *,unsigned int *);
long CreateIShellBandProxyAndSetSite(IUnknown *,_GUID const &,IShellBandProxy * *,void * *);
long CreateIconFromBitmap(unsigned int,HBITMAP__ *,HICON__ * *);
long CreateIconFromStreamWithWIC(IWICImagingFactory *,IStream *,unsigned int,bool,HICON__ * *);
long CreateImageList(_GUID const &,int,int,bool,int,int,int,_GUID const &,void * *);
long CreateInstance_IEnumConnectionPoints(IEnumConnectionPoints * *,unsigned long,...);
long CreateItemFromPathFindData(unsigned short const *,IShellItem2 * *);
long CreateItemKeyArray(CDSA<tagITEMKEY> *,IKA_INIT_TYPES,IItemKeyArray * *);
long CreateItemKeyArrayFromKeys(unsigned int,tagITEMKEY const *,IItemKeyArray * *);
long CreateLimitedXmlReader(unsigned __int64,unsigned long,int,_GUID const &,void * *);
long CreateLinkAndOrderItem(IShellFolder *,unsigned short const *,unsigned short const *,_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,int);
long CreateMetaFileFromClipboardProperty(unsigned char *,unsigned int,tagSIZE,HBITMAP__ * *);
long CreateMruList(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,_GUID const &,void * *);
long CreateNtPathAndObjectAttributes(unsigned short const *,_UNICODE_STRING *,_RTL_RELATIVE_NAME_U *,_OBJECT_ATTRIBUTES *,void * *);
long CreateOpenWithStoreCommand(IUICommand * *);
long CreatePerfectIconList(int,int,int,int,_GUID const &,void * *);
long CreatePrinterItemFromName(unsigned short const *,_GUID const &,void * *);
long CreatePropertyValue(tagPROPVARIANT const &,_tagpropertykey const &,_GUID const &,void * *);
long CreateQosRecorder(IShellItem *,_ScenarioId,IQosRecorder * *);
long CreateQosRecorder(unsigned short const *,unsigned short const *,_ScenarioId,IQosRecorder * *);
long CreateScopeFromLibraryDescription(ILibraryDescription *,IShellItem *,IShellItem *,LIBRARY_SCOPE_FLAGS,SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,unsigned short const *,IScope * *);
long CreateScopeTreeRootFilter(unsigned long,SCOPE_DIALOG_OPTIONS,IShellItemFilter * *);
long CreateSearchKey(unsigned short const *,unsigned long,unsigned short const *,unsigned char *,unsigned long,unsigned long *);
long CreateShellInfraDialogOwnerWindow(HWND__ * *);
long CreateShellItemArrayFromAliasNamespaces(unsigned int,IShellFolder * *,IShellItemArray * *);
long CreateSimpleIDListWithSFGAOFlags(unsigned short const *,unsigned long,_ITEMIDLIST_ABSOLUTE * *);
long CreateSortColumnArrayFromListDesc(IListDescription *,ISortColumnArray * *);
long CreateStatusBarPropertyStore(IShellItem2 *,IShellItemArray *,unsigned int,IShellItemArray *,unsigned int,_tagpropertykey const &,_GUID const &,void * *);
long CreateStorageHandlerViaMoniker(IShellItem *,IBindCtx *,_GUID const &,_GUID const &,void * *);
long CreateStreamOrStorage(IStorage *,unsigned short const *,unsigned long,_GUID const &,void * *);
long CreateSubQueryRootFilter(unsigned long,IShellItem *,IShellItemFilter * *);
long CreateSyncTransferStatus(ISyncTransferStatus * *);
long CreateTempProfileWarningDialogOwnerWindow(HWND__ * *);
long CreateThumbnailFromClipboardProperty(tagPROPVARIANT const &,tagSIZE,HBITMAP__ * *);
long CreateUserNotificationFromPropertyBag(IPropertyBag *,IUserNotification * *);
long CreateUsersLibrariesCommandProvider(_GUID const &,void * *);
long CreateVerbStateTask(IUnknown *,IVerbStateTaskCallBack *,IShellItemArray *,HKEY__ *,unsigned short const *,unsigned int,_GUID const &,void * *);
long CreateViewFrame(IViewFrameHost *,tagRECT *,HWND__ * *,IViewFrame * *);
long CreateWrapperForElement(DirectUI::Element *,_GUID const &,void * *);
long Create_CBitBucketViewCB(CBitBucket *,IRecycleBinManager *,IShellFolderViewCB * *);
long Create_CDVBackgroundHMENU(HMENU__ *,HWND__ *,CDefView *,_GUID const &,void * *);
long Create_CFSFolderExtractIcon(unsigned short const *,unsigned int,unsigned short,_GUID const &,void * *);
long Create_IEnumUICommandWithArray(IUnknown *,tagWVTASKITEM const *,unsigned int,IUnknown * *,unsigned int,_GUID const &,void * *);
long Create_IUICommandEx(IUnknown *,tagWVTASKITEM const *,IEnumUICommand *,int,_GUID const &,void * *);
long Create_MultiItemsDefaultCommand(IUnknown *,IShellItemArray *,unsigned short const *,_GUID const &,void * *);
long Create_SearchStoreCommand(IUnknown *,CSimpleTaskItem *,int,_GUID const &,void * *);
long Create_SimpleTaskItem(unsigned short const *,unsigned short const *,unsigned short const *,CSimpleTaskItem * *);
long Create_SimpleUICommand(IUnknown *,CSimpleTaskItem *,int,IEnumUICommand *,_GUID const &,void * *);
long Create_SimpleUICommandWithBackgroundColor(IUnknown *,CSimpleTaskItem *,int,IEnumUICommand *,unsigned long,_GUID const &,void * *);
long Create_SingleItemSplitDefaultCommand(IUnknown *,CSimpleTaskItem *,IShellItem *,_GUID const &,void * *);
long Create_WrappedICategorizer(ICategorizer *,_GUID const &,_tagpropertykey const &,_GUID const &,void * *);
long CropToRect(IWICImagingFactory *,IWICBitmapSource *,WICRect *,_GUID const &,void * *);
long CscTransitionItemsOffline(HWND__ *,IShellItemArray *,int *);
long CscTransitionItemsOnline(HWND__ *,IShellItemArray *);
long DCMIDMtoDFM(unsigned int,unsigned int *);
long DDEConv_Release(_DDECONV *);
long DFMtoDCMIDM(unsigned int,unsigned int *);
long DUIFramework_DisplayHelpDialog(unsigned short const *,unsigned short const *);
long DUIFramework_SetFocusByFocusIndicator(DirectUI::Element *);
long DUI_CreateElementFromResource(HINSTANCE__ *,unsigned int,unsigned short const *,DirectUI::Element *,DirectUI::Element *,unsigned long *,DirectUI::Element * *,IUnknown *,DUI_PARSER_LOAD_FLAGS);
long DUI_CreateParserFromResource(HINSTANCE__ *,unsigned int,DUI_PARSER_LOAD_FLAGS,DEVICE_SCALE_FACTOR,DirectUI::DUIXmlParser * *);
long DUI_CreateParserFromString(unsigned short const *,DUI_PARSER_LOAD_FLAGS,void (*)(unsigned short const *,unsigned short const *,int,void *),DirectUI::DUIXmlParser * *);
long DUI_CreateParserWithCallbackFromResource(HINSTANCE__ *,unsigned int,DEVICE_SCALE_FACTOR,DirectUI::DUIXmlParser * *,DirectUI::Value * (*)(unsigned short const *,void *),void *);
long DUI_GetElementRootHWND(DirectUI::Element *,HWND__ * *);
long DUI_GetElementRootHWNDElement(DirectUI::Element *,DirectUI::HWNDElement * *);
long DUI_GetElementScreenBounds(DirectUI::Element *,tagRECT *);
long DUI_GetMouseEventAbsolutePos(DirectUI::Element *,tagPOINT const *,tagPOINT *);
long DUI_LoadUIFileFromResources(HINSTANCE__ *,unsigned int,unsigned short * *);
long DUI_ReloadTheme(DirectUI::Element *);
long DUI_SetContentAlign(DirectUI::Element *,DUI_COORDINATES_SYSTEM,int);
long DUI_SetDescendentElementIcon(DirectUI::Element *,unsigned short const *,HICON__ *,ImageRtlMode);
long DUI_SetDescendentElementText(DirectUI::Element *,unsigned short const *,unsigned short const *,HINSTANCE__ *);
long DUI_SetElementIcon(DirectUI::Element *,HICON__ *,ImageRtlMode);
long DUI_SetElementSharedIcon(DirectUI::Element *,HICON__ *);
long DUI_ShellStyleSheet_InitProcess();
long DUI_ShellStyleSheet_InitThread();
long DataObj_GetBlob(IDataObject *,unsigned int,void *,unsigned int);
long DataObj_GetEnterpriseId(IDataObject *,unsigned short * *);
long DataObj_GetIDList(IDataObject *,DATAOBJ_GET_ITEM_FLAGS,_ITEMIDLIST_ABSOLUTE * *);
long DataObj_GetPath(IDataObject *,unsigned short *,unsigned int);
long DataObj_GetString(IDataObject *,unsigned short,unsigned short * *);
long DataObj_SetBlob(IDataObject *,unsigned int,void const *,unsigned int);
long DataObj_SetDWORDOpt(IDataObject *,unsigned int,unsigned long);
long DataObj_SetGlobal(IDataObject *,unsigned int,void *);
long DecorateTypeValue(IPropertyStore *,tagPROPVARIANT const &,tagPROPVARIANT *);
long DefaultFindUniqueName(unsigned short const *,unsigned short const *,unsigned short const *,int,IShellItem *,unsigned short * *);
long DeleteFileByHandle(void *);
long DetailsOfFromDetailsEx(IShellFolder2 *,_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
long DetermineHostMode(IUnknown *,HWND__ *,EC_HOST_UI_MODE *);
long DisplayNameFromObjectWithOwner(IObjectWithOwner *,unsigned short * *);
long DisplayNameOfAsBSTR(IShellFolder *,_ITEMIDLIST_RELATIVE const *,unsigned long,unsigned short * *);
long DisplayNameOfAsString(IShellFolder *,_ITEMIDLIST_RELATIVE const *,unsigned long,unsigned short * *);
long DisplayNameOfFolder(IShellFolder *,unsigned long,unsigned short *,int);
long DoBulkRename(IShellItemArray *,IDataObject *,unsigned short const *);
long DoesItemMatchCondition_NoShell32(tagCONDITIONEVALINFO const *,int *,tagCONDITIONEVALPROPS *);
long ECFCreateInstance(IClassFactory *,IUnknown *,_GUID const &,void * *);
long ECFLockServer(IClassFactory *,int);
long ECFQueryInterface(IClassFactory *,_GUID const &,void * *);
long EasEngineIsMDMEnforced(int *);
long EjectDiscImage(unsigned short const *,DISC_IMAGE_TYPE_FLAGS);
long EjectDiscImageWithElevation(unsigned short const *,HWND__ *);
long EnsureKeyInStore(IPropertyKeyStore *,_tagpropertykey const &);
long EnsureRecycleBinLocation(unsigned short const *);
long EnsureTDLObjects(ITileManager *,IVisualElementEnumerator *,ITileManager * *,IVisualElementEnumerator * *);
long EnumCDBurnTasks(HWND__ *,IUnknown *,SFVM_WEBVIEW_TASKSECTION_DATA *);
long EnumOpenTasks(IUnknown *,IUICommand * *);
long EnumerateRegisteredProtocolProgIds(HKEY__ *,unsigned short const *,CSimpleCaseInsensitiveOrdinalStringArray &);
long ExecuteQuery(unsigned short const *,_GUID const &,void * *);
long ExecuteVerbOnPrinterPidl(HWND__ *,_ITEMIDLIST_ABSOLUTE *,unsigned short const *,unsigned short const *,int);
long ExitUserOOBE(UserOOBEExitReason);
long ExpandAndResolveCondition(ICondition *,IPropertyKeyStore *,int,int,int,unsigned short const *,_GUID const &,void * *);
long ExpandUserAppData(unsigned short *,int);
long ExpandWordWheelAndOrCondition(tagCONDITION_TYPE,_tagpropertykey *,int,ICondition *,IConditionFactory2 *,int,_GUID const &,void * *);
long ExpandWordWheelLeafCondition(_tagpropertykey *,int,ICondition *,IConditionFactory2 *,int,_GUID const &,void * *);
long ExpandWordWheelNotCondition(_tagpropertykey *,int,ICondition *,IConditionFactory2 *,int,_GUID const &,void * *);
long ExportDefaultAssociationsXml(unsigned short const *);
long ExtractAppletCategories(tagVARIANT const &,long *,unsigned int,unsigned int *);
long ExtractIconFromPidl(_ITEMIDLIST_ABSOLUTE const *,unsigned int,HICON__ * *,int,int);
long FillTextBuffer(tagTEXT_SOURCE *);
long FinalizeMap(XMLPROP_ITEM *,XMLPROP_ITEM * *);
long FindFilterIndex(IFilterCondition * *,unsigned int,_tagpropertykey const &,unsigned int *);
long FindFirstUsersFilesDescriptionForUser(unsigned short const *,unsigned short const *,_GUID const &,void * *);
long FindItemInView(IResultsFolderEx *,IFolderView2 *,CSaveLocationPropertyBag *,IShellItem *,IShellItem * *,int *,unsigned long *);
long FireNotificationFromChangeData(IShellFolder *,IPublicationServicesChangeData *);
long FireNotificationsForComputer(IShellFolder *,unsigned short const *,long,bool);
long FrameModule_CreateImpl<CAppControlsModule,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CCommandModule,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CCommandModuleInner,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CControlPanelCategoryModule,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CControlPanelCategoryModuleInner,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CControlPanelNavModule,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CControlPanelNavModuleInner,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CEmptyLibraryPage,0,0,0>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CInfoBarHostModule,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CInfoBarHostModuleInner,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CInfoPane,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CInfoPaneInner,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<COfflineMachinePage,0,0,0>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<COtherUsersBarrierPage,0,0,0>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CPreviewMetadata,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CPreviewMetadataInner,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CPreviewThumbnail,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CPreviewTitleArea,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CPreviewTitleAreaInner,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CProperTreeModule,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CProperTreeModuleInner,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CReadingPaneModule,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CReadingPaneModuleInner,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CSaveControlsModule,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CSaveDialogPreviewMetadata,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CSaveDialogPreviewMetadataInner,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CSearchOnlyLibraryPage,0,0,0>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CSearchPageText,0,3,0>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CStatusBarModule,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CStatusBarModuleInner,0,0,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CXElementModule,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<CXElementModuleInner,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<Microsoft::Windows::FileExplorer::Banners::Banner,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long FrameModule_CreateImpl<Microsoft::Windows::FileExplorer::Banners::BannerContainer,0,1,1>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
long GIT_CancelProgressUI(unsigned long);
long GIT_RegisterProgress(unsigned long,_GUID const &,unsigned long *,tagBPASCODE);
long GIT_UnregisterProgress(unsigned long,_GUID const &,unsigned long);
long GenerateAppID(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
long GenerateAppUserModelId(unsigned short const *,unsigned short const *,unsigned short * *);
long GenerateImage(IShellItem *,tagSIZE const *,ISharedBitmap * *);
long GetAccessibleLibraryLocationCount(ILibraryDescription *,unsigned long *);
long GetActiveDesktop(IActiveDesktop * *);
long GetAggregateChildImageList(IGangImageList *,unsigned int,unsigned int,_GUID const &,void * *);
long GetAggregatedImageTypes(IShellItemArray *,DISC_IMAGE_TYPE_FLAGS *,bool);
long GetAppItemForDefaultHandler(IShellItem *,_GUID const &,void * *);
long GetAppPathFromShortcut(IShellLinkW *,IShellItem *,unsigned long,unsigned short *,int);
long GetAppZoneIdentifier(unsigned short const *,unsigned long *);
long GetBackgroundColorForAppUserModelId(unsigned short const *,unsigned long *);
long GetBestAppIDForAppPath(IApplicationResolver *,unsigned short const *,unsigned short * *);
long GetBitmapForCachedStockIcon(SHSTOCKICONID,tagSIZE const &,HBITMAP__ * *);
long GetBitmapSize(HBITMAP__ *,tagSIZE *);
long GetBriefcaseRoot(_ITEMIDLIST_ABSOLUTE const *,unsigned short *,int);
long GetBrowserProgIdsFromRegistry(unsigned short const *,unsigned short (&)[2][39]);
long GetBrowserSettingsPropertyBag(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,unsigned long,_GUID const &,void * *);
long GetBusType(void *,_STORAGE_BUS_TYPE *);
long GetBytesProperty(IShellFolder2 *,_ITEMID_CHILD const *,_tagpropertykey const &,void *,unsigned int);
long GetCSIDLDisplayName(int,unsigned short *,unsigned int);
long GetCachedItemFromShellItem(IUnknown *,_GUID const &,void * *);
long GetCachedWordBreakerFromLCID(unsigned long,WORDBREAKERFLAGS,unsigned long,_GUID const &,void * *);
long GetCanonicalCommand(unsigned short const *,_GUID const &,void * *);
long GetCategorizerForPropertyKey(_tagpropertykey const &,int,IUnknown *,_GUID const &,void * *);
long GetCommandGlyph(unsigned short const *,unsigned short * *,unsigned int *);
long GetComputerNameForUNCPathEx(unsigned short const *,unsigned short *,unsigned int,unsigned short const * *);
long GetConnectedSearchPaneLauncherMode(IUnknown *,HWND__ *,HWND__ *,IUnknown * *);
long GetConnectedSearchResultsLauncherMode(IUnknown *,HWND__ *,IShellItem *,IUnknown * *);
long GetConnectedSid(unsigned short * *);
long GetConnectedSidFromSid(unsigned short const *,unsigned short * *);
long GetContactServiceDisplayNameForContractId(unsigned short const *,unsigned short * *);
long GetContactServiceDisplayNameOnSupportedAction(IPropertyStore *,unsigned short const *,unsigned short * *);
long GetContactsProviderAppDataLocalFileUri(unsigned short * *,HSTRING__ * *);
long GetContainedLocationsFromSite(IUnknown *,IShellItemArray * *);
long GetCurrentHomeGroupBarrierLayout(tagLAYOUTTYPE *);
long GetCurrentProcessName(unsigned short *,unsigned long);
long GetCurrentUserConnectedState(bool *);
long GetCurrentUserDisplayName(unsigned short * *);
long GetCurrentUserSid(void * *);
long GetCurrentUserSidString(unsigned short * *);
long GetCurrentWordWheelText(IUnknown *,unsigned short * *);
long GetDateModifiedFromPIDL(_ITEMIDLIST_RELATIVE const *,IDFOLDER const *,_FILETIME *);
long GetDefaultBrowserCommand(unsigned short * *);
long GetDefaultBrowserProgIdsAndAppId(unsigned short (&)[2][39],unsigned short * *);
long GetDefaultItemScopes(IScopeFactory *,SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IShellItem *,IScope *,int *);
long GetDefaultPropValue(_tagpropertykey const &,tagPROPVARIANT *);
long GetDefaultSaveLocation(DSLFLAGS,ILibraryDescription *,_GUID const &,void * *);
long GetDefaultSaveLocationFromItem(IShellItem *,_GUID const &,void * *);
long GetDetailsOfFromPropertyDescription(IPropertyDescription *,_SHELLDETAILS *);
long GetDetailsOfFromPropertyDescriptionList(IPropertyDescriptionList *,unsigned int,_SHELLDETAILS *);
long GetDetailsOfImpl(COLUMN_INFO const *,unsigned int,HINSTANCE__ *,IShellFolder2 *,_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
long GetDeviceNumberFromPath(unsigned short const *,unsigned long *);
long GetDeviceProperties(unsigned short const *,IHWDeviceCustomProperties * *);
long GetDiskInformation(void *,DISK_INFORMATION *);
long GetDriveLetterFromVirtualDiskImageFile(IShellItem *,unsigned short * *,bool *);
long GetDrivePathForDisplay(int,unsigned short *,unsigned int);
long GetDwmColorizationColor(unsigned long *,int *);
long GetExtractIconW(IShellFolder *,_ITEMID_CHILD const *,unsigned int,IExtractIconW * *);
long GetFastFileInformation(void *,_FILE_NETWORK_OPEN_INFORMATION *);
long GetFileInfoByHandle(unsigned short const *,_BY_HANDLE_FILE_INFORMATION *);
long GetFileSystemOrPlaceholderPath(IShellItem *,unsigned short * *);
long GetFileUriStringFromAppDataUri(unsigned short const *,IUri *,unsigned short * *);
long GetFilterProperty(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_tagpropertykey const &,IFilterCondition * *);
long GetFilteredShellItem(IShellItem *,IShellItem * *);
long GetFindDataForPathWithTimeout(unsigned short const *,int,unsigned long,tagWIN32_FIND_DATA_EX *);
long GetFindDataFromBindCtx(IBindCtx *,tagWIN32_FIND_DATA_EX * *);
long GetFlagsForClsid(_GUID const &,int,HANDLERFLAGS *);
long GetFolderWithSearchRootScopes(SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IFolderWithSearchRoot *,IScope *,int *);
long GetFontLineHeight(HWND__ *,HFONT__ *,HDC__ *);
long GetGlobalScheme(unsigned short *,unsigned long *,unsigned long);
long GetGroupPath(unsigned short const *,unsigned short *,unsigned long,int);
long GetHandlerFromCache(IShellItem *,int,IBindCtx *,_GUID const &,_GUID const &,_GUID const &,void * *);
long GetHomeGroupComputerStatusOnBgThread(unsigned short const *,HOMEGROUP_COMPUTER_STATE *);
long GetHomeGroupSID(_GUID const &,unsigned short * *);
long GetHomeGroupSID(_GUID const &,void * *);
long GetHomeGroupUserTileBitmap(unsigned short const *,tagSIZE,WTS_CONTEXTFLAGS,HBITMAP__ * *);
long GetHomeGroupUserTileCRC(unsigned short const *,unsigned short * *);
long GetHomeUsersSecurityGroupName(_GUID const &,unsigned short *,unsigned long);
long GetHomegroupUsersBarrierLayout(HGUI_STATUS_FLAGS,int,tagLAYOUTTYPE *);
long GetIDListAndUserFromPayload(IShellFolder *,unsigned short const *,unsigned short const *,unsigned short const *,TRIBIT,_ITEMIDLIST_ABSOLUTE * *,unsigned short * *);
long GetIconCachePath(unsigned short *,unsigned int);
long GetIdentityItemName(IShellItem *,_SIGDN,unsigned short * *);
long GetImageFileExtensionFilterCondition(ICondition * *);
long GetImageFileInfo(unsigned short const *,_BY_HANDLE_FILE_INFORMATION *);
long GetInfoFromMoniker(IRunningObjectTable *,IMoniker *,IFileIsInUse * *);
long GetInitializedDestinationList(DestListItemType,IAutomaticDestinationList * *,IStream *);
long GetInt32ArrayProperty(IShellFolder2 *,_ITEMID_CHILD const *,_tagpropertykey const &,long *,unsigned long,unsigned long *);
long GetInt32Property(IShellFolder2 *,_ITEMID_CHILD const *,_tagpropertykey const &,long *);
long GetIsExclusiveSelection(unsigned long,CMappingData const &,bool *);
long GetItemFolder(CFolder *,_ITEMIDLIST_RELATIVE const *,CFolder * *);
long GetItemHandlerCache(int,_GUID const &,void * *);
long GetItemImage(IShellItem *,HBITMAP__ * *);
long GetItemNamespaceCLSID(IShellItem *,_GUID *);
long GetItemNamespaceCLSIDFromFolder(IUnknown *,_GUID *);
long GetItemPath(_ITEMIDLIST_ABSOLUTE const *,unsigned short *,unsigned long);
long GetItemSyncStatusInformation(IShellItem *,ISyncTransferStatus *,ItemSyncStatus,ItemSyncStatus *,unsigned short * *);
long GetItemVolumeRoot(IShellItem *,_GUID const &,void * *);
long GetKeyArrayFromPropertyKeyStore(IPropertyKeyStore *,_tagpropertykey * *,unsigned int *);
long GetKeyArrayFromPropertyList(IPropertyDescriptionList *,_tagpropertykey * *,unsigned int *);
long GetKeysFromItemFilter(IItemFilter *,IPropertyKeyStore *);
long GetKeysInCondition(ICondition *,_GUID const &,void * *);
long GetKeysInFilterCondition(IFilterCondition *,IPropertyKeyStore *);
long GetKnownFolderId(IShellItem *,_GUID *);
long GetKnownFolderIdFromPath(unsigned short const *,_GUID *);
long GetLastWriterPackageFamilyName(unsigned short const *,unsigned short * *);
long GetLayoutDefinition(GETLAYOUTREASON,_ITEMIDLIST_ABSOLUTE const *,HWND__ *,IFrameLayoutDefinition * *);
long GetLayoutDefinitionAllowRedirect(GETLAYOUTREASON,_ITEMIDLIST_ABSOLUTE const *,HWND__ *,_GUID const &,IFrameLayoutDefinition * *);
long GetLayoutDefinitionFromItem(GETLAYOUTREASON,IShellItem *,HWND__ *,IFrameLayoutDefinition * *);
long GetLibraryAncestor(IShellItem *,int,IShellItem * *);
long GetLocalCopyDownloadFileOperations(HWND__ *,LCFLAGS,IFileOperation * *);
long GetLocalHandleNameForPath(unsigned short const *,unsigned short const *,unsigned short *,unsigned __int64);
long GetLocationDisplayName(IRecycleBin *,unsigned short *,unsigned int);
long GetMRUEntry(HKEY__ *,unsigned long,unsigned short *,unsigned long);
long GetMatchedFilterFromIDList(IShellFolder3 *,_ITEMID_CHILD const *,FC_FLAGS,IFilterCondition * *);
long GetMessagePayload(_GUID const &,IObjectCollection *,HG_PUBLISHINGSERVICE_TYPE,unsigned short * *);
long GetModernAppBackgroundColorFromHandler(IAssocHandler *,unsigned long *);
long GetNamedPropertyStoreForComputer(unsigned short const *,INamedPropertyStore * *);
long GetNamedPropertyStoreFromPropVariant(tagPROPVARIANT const &,_GUID const &,void * *);
long GetNonFilteredItem(IShellItem *,IShellItem * *);
long GetNonFilteredRoot(_ITEMIDLIST_ABSOLUTE const *,int,_ITEMIDLIST_ABSOLUTE * *);
long GetObjectCollectionFromMessagePayload(_GUID const &,unsigned short const *,unsigned short const *,IObjectCollection * *);
long GetObjectFromBindCtx(IBindCtx *,unsigned short const *,_GUID const &,void * *);
long GetObjectIID(IRunningObjectTable *,IMoniker *,_GUID const &,void * *);
long GetObjectSafely(IShellFolderView *,_ITEMID_CHILD * *,unsigned int);
long GetOfflineStatus(unsigned short const *,long *);
long GetOpenSearchUrl(IShellItemArray *,IUnknown *,unsigned short * *);
long GetOpenWithExtension(_openasinfo const *,unsigned short *,unsigned long);
long GetOriginURLFromExpandoProperties(IShellItem *,unsigned short * *);
long GetOtherUsersParsingName(unsigned short const *,unsigned short const *,unsigned short * *);
long GetPCSettingsCommandStringFromItem(PCSetting::PCSettingsValueType,IShellItem2 *,unsigned short * *);
long GetPCSettingsPathForCurrentUser(unsigned short *,unsigned int);
long GetPCSettingsPathForCurrentUserWithOptions(unsigned short *,unsigned int,PCSettingsPath);
long GetPCSettingsQueryFromPropertyBag(IPropertyBag *,unsigned short * *,unsigned short * *);
long GetPCSettingsResultsShape(IResultShape * *);
long GetPackageTilesFolder(unsigned short const *,ICachedFolderPath * *);
long GetParameter(unsigned short const *,RUNASNEWUSERPARAM *);
long GetParentNamespaceCLSID(_ITEMIDLIST_ABSOLUTE const *,_GUID *);
long GetParsingBindCtx(IShellFolder2 *,_ITEMID_CHILD const *,int,IBindCtx * *);
long GetPartitionSizeInBytes(int,unsigned __int64 *);
long GetPerceivedTypeFromIDList(_ITEMIDLIST_ABSOLUTE const *,tagPERCEIVED *);
long GetPerceivedTypeFromItem(IShellItem *,tagPERCEIVED *);
long GetPidlFromCanonicalName(unsigned short const *,_ITEMID_CHILD * *);
long GetPreferredHomeGroupId(_GUID *);
long GetPreferredHomeGroupPassword(IHomeGroupPassword * *);
long GetPreferredHomeGroupSID(void * *);
long GetPreferredHomegroupSharingPreferencesForUser(unsigned short const *,HOMEGROUP_SHARING_SETTINGS *);
long GetPreviewItemFromArray(IShellItemArray *,_GUID const &,void * *);
long GetPreviewerCLSID(IShellItem *,_GUID *);
long GetProjectionAvailability(PROJECTION_TOPOLOGY_FLAGS *,bool);
long GetPropStoreForConnectedUser(unsigned short const *,_GUID const &,void * *);
long GetPropertyDescriptionListFromSortColumns(SORTCOLUMN const *,unsigned int,IPropertyDescriptionList * *);
long GetPropertyKeyFromBindingPropertyName(unsigned short const *,_tagpropertykey *);
long GetPropertyKeysFromChangeArray(IPropertyChangeArray *,CCoSimpleArray<_tagpropertykey,4294967294,CSimpleArrayStandardCompareHelper<_tagpropertykey> > &);
long GetProviderCLSID(ILocationDescription *,_GUID *);
long GetPublicationIdentifier(_GUID const &,unsigned short const *,unsigned short *,unsigned __int64);
long GetRealIDL(IBindCtx *,IShellFolder *,_ITEMID_CHILD const *,_ITEMID_CHILD * *);
long GetRealItemFromResFolder(IResultsFolderEx *,CSaveLocationPropertyBag *,int,unsigned long *,_GUID const &,void * *);
long GetRealLocation(IShellItem *,IShellItem * *);
long GetReconcilerClsid(IShellItem * *,unsigned __int64,_GUID *);
long GetReconcilerName(_GUID const &,unsigned short *,unsigned long);
long GetRecreatableRecycleBinKF(unsigned short const *,int,_GUID *);
long GetRecreatableRecycleBinLocation(unsigned short const *,int,tagRECYCLEBIN_TYPE *,unsigned short * *);
long GetRecycleBinKey(tagRECYCLEBIN_TYPE,unsigned short const *,int,unsigned long,HKEY__ * *);
long GetRecycleBinLocation(tagRECYCLEBIN_TYPE,unsigned short const *,unsigned short * *);
long GetRecycleBinPath(unsigned short const *,unsigned short *,unsigned __int64);
long GetRegLocation(unsigned short *,unsigned long,unsigned short const *,unsigned short const *);
long GetRelatedItem<IDelegateItem>(IShellItem *,IBindCtx *,bool,_GUID const &,void * *);
long GetRelatedItem<IIdentityName>(IShellItem *,IBindCtx *,bool,_GUID const &,void * *);
long GetRelativeNameAndParseBindCtxFromFolder(IShellFolder *,_ITEMIDLIST_RELATIVE const *,unsigned short * *,IBindCtx * *);
long GetRemovableStateFromVolumePath(unsigned short const *,bool *);
long GetRowPropertyStoreFromRowsetLocate(IRowsetLocate *,__int64,bool *,IPropertyStore * *);
long GetScheduler(IUnknown *,IShellTaskScheduler * *);
long GetScopeForSearch(IShellItem *,SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,IScope * *);
long GetScopeFromSearch(IShellItem *,IShellItem * *);
long GetScopeFromUnknown(IUnknown *,_GUID const &,void * *);
long GetScopesFromSearch(IShellItem *,IShellItemArray * *);
long GetSearchFolderName(HINSTANCE__ *,unsigned int,IScope *,IShellItemArray *,unsigned short * *);
long GetSearchOptionInfo(unsigned long,SEARCHOPTIONINFO const * *);
long GetSharepointUserAgent(unsigned short *,unsigned __int64);
long GetSharingPreferences(_GUID const &,unsigned short const *,HOMEGROUP_SHARING_SETTINGS *,HOMEGROUP_USER_SHARING_STATES *);
long GetSharingPreferencesRegKey(_GUID const &,unsigned short const *,unsigned short *,unsigned long);
long GetShellFolder(unsigned short const *,IShellFolder * *);
long GetShellFolderType(_ITEMIDLIST_ABSOLUTE const *,_GUID *);
long GetShellFolderTypeFromItem(IShellItem *,_GUID *);
long GetShellFolderTypeFromRegistry(IShellFolder *,_GUID *);
long GetShellIconLocation(SHSTOCKICONID,_SHSTOCKICONINFO *);
long GetShellIconLocationCommaIndex(SHSTOCKICONID,unsigned short *,unsigned int);
long GetShellIconLocationParts(SHSTOCKICONID,unsigned short *,unsigned int,int *);
long GetShellItemArray(IFolderView *,IShellItemArray * *,unsigned long *,unsigned long *);
long GetShouldToastUserAboutAppReset(unsigned short const *,unsigned short const *,bool *);
long GetSidForUser(unsigned short const *,unsigned short * *);
long GetSkyDriveNetworkStates(SKYDRIVE_NETWORK_STATES *);
long GetSortAlias(_tagpropertykey const &,_tagpropertykey *);
long GetSortColumnsFromPropertyDescriptionList(IPropertyDescriptionList *,SORTCOLUMN *,unsigned int,unsigned int *);
long GetStackedKeyFromIDList(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_tagpropertykey *);
long GetStartIndexFromUniqueNameTemplate(unsigned short const *,int *);
long GetStateFromPropertyDescription(IPropertyDescription *,unsigned long *);
long GetStateFromPropertyDescriptionList(IPropertyDescriptionList *,unsigned int,unsigned long *);
long GetStockIcon(SHSTOCKICONID,unsigned int,HICON__ * *);
long GetStorageFromFragment(IUnknown *,bool,unsigned int,XP_STORAGE *);
long GetStreamFromParsingName(unsigned short const *,unsigned long,IStream * *);
long GetStreamOfWICBitmapSourceWithOptions(IWICImagingFactory *,IWICBitmapSource *,_GUID const &,_GUID,EncodingOptions,IStream * *);
long GetStringProperty(IShellFolder2 *,_ITEMID_CHILD const *,_tagpropertykey const &,unsigned short *,unsigned int);
long GetStringPropertyAlloc(IShellFolder2 *,_ITEMID_CHILD const *,_tagpropertykey const &,unsigned short * *);
long GetStringsFromFormat(unsigned short const *,unsigned short const * *,unsigned short const * *,unsigned short * *);
long GetSubKeyPropertyBag(HKEY__ *,unsigned long,unsigned long,IPropertyBag * *,unsigned short *,unsigned __int64);
long GetSubstitutedPath(unsigned short const *,unsigned short *,unsigned __int64);
long GetSyncRootManagerCache(CSyncRootManagerCache * *);
long GetSyncTransferStatusFromIndexer(unsigned short const *,ISyncTransferStatus *,SYNC_TRANSFER_STATUS *,long *);
long GetTargetFileSystemPath(IShellItem *,unsigned short * *);
long GetTargetImageList(int,unsigned int,IGangImageList *,bool,unsigned int *);
long GetTemporaryFolderForPackage(unsigned short const *,unsigned short * *);
long GetThumbnailAdornerFromFactory(IShellFolder *,_ITEMID_CHILD const *,bool,IImageListImageDecorator * *);
long GetThumbnailAdornerFromFactory(IShellItem2 *,bool,IImageListImageDecorator * *);
long GetTimeRemainingText(unsigned __int64,unsigned short *,unsigned int);
long GetTopViewAwareItemFromIDList(_ITEMIDLIST_ABSOLUTE const *,ITopViewAwareItem * *);
long GetTopViewAwareItemFromView(IFolderView *,ITopViewAwareItem * *);
long GetTopViewSubKey(_ITEMIDLIST_ABSOLUTE const *,unsigned short *,unsigned int,int *);
long GetTruncatedSystemTimeFromRegKey(HKEY__ *,unsigned short const *,_SYSTEMTIME *);
long GetTypeFromExtension(unsigned short const *,DISC_IMAGE_TYPE_FLAGS *);
long GetTypeFromItem(IShellItem *,DISC_IMAGE_TYPE_FLAGS *);
long GetTypeFromPath(unsigned short const *,DISC_IMAGE_TYPE_FLAGS *);
long GetUALogger(unsigned int,_GUID const *,CUADBLog * *);
long GetUIObjectFromVariant(tagVARIANT,HWND__ *,_GUID const &,void * *);
long GetUIStatusAndMemberCountFromRegCache(HGUI_STATUS_FLAGS *,unsigned short * *,unsigned short * *,int *);
long GetUIThreadThumbnailCache(_GUID const &,void * *);
long GetUInt32Property(IShellFolder2 *,_ITEMID_CHILD const *,_tagpropertykey const &,unsigned long *);
long GetUInt64Property(IShellFolder2 *,_ITEMID_CHILD const *,_tagpropertykey const &,unsigned __int64 *);
long GetUnaliasedIDList(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE * *);
long GetUnaliasedItem(IShellItem *,IBindCtx *,_GUID const &,void * *);
long GetUnavailableDueToNetworkConnectivityShellItems(IShellItemArray *,bool,ItemsOfflineAvailability *,IShellItemArray * *);
long GetUndoRedoText(unsigned short *,unsigned int,int,int);
long GetUnescapedUrlIfAppropriate(_ITEMIDLIST_ABSOLUTE const *,unsigned short *,unsigned long);
long GetUserAssociationChoice(UCTYPE,unsigned short const *,unsigned short * *);
long GetUserNameForHomeGroupAPIs(unsigned short *,unsigned long);
long GetUserNameFromOnlineProvider(unsigned short const *,unsigned short * *);
long GetUsersFilesDescription(unsigned short const *,unsigned short const *,IObjectCollection *,_GUID const &,void * *);
long GetUsersFilesDescriptionForMachineAndSid(unsigned short const *,unsigned short const *,_GUID const &,void * *);
long GetUsersFilesDescriptionFromPayload(unsigned short const *,unsigned short const *,unsigned short const *,_GUID const &,void * *);
long GetValidatedLocationItem(ILocationDescription *,_GUID const &,void * *);
long GetVerbFromInvokeCommandInfo(IContextMenu *,_CMINVOKECOMMANDINFO *,unsigned short *,unsigned long);
long GetVersionFromString(unsigned short const *,unsigned long *,unsigned long *);
long GetVhdFileName(_STORAGE_DEPENDENCY_INFO_TYPE_2 const *,unsigned short * *);
long GetViewAndTopViewKey(IUnknown *,IShellView * *,TOPVIEWKEY *);
long GetVolumeGUIDFromVolumeName(unsigned short *,unsigned __int64,unsigned short const *);
long GetVolumeMountPath(unsigned short const *,unsigned short *,unsigned __int64);
long GetWindowFromSite(IUnknown *,HWND__ * *);
long GetWindowsSearchCommandObj(_GUID const &,void * *);
long GetXP_Map_PropertyDefaultValues(XMLPROP_ITEM const * *);
long GetXP_Map_PropertyMapList(XMLPROP_ITEM const * *);
long GetXP_Map_i(XMLPROP_ITEM const * *);
long GetXP_Map_pi(XMLPROP_ITEM const * *);
long GetXP_Map_u(XMLPROP_ITEM const * *);
long GetXP_Map_usersFilesDescription(XMLPROP_ITEM const * *);
long GrepDoesItemMatchCondition(tagCONDITIONEVALINFO const *,int *,tagCONDITIONEVALPROPS *);
long HRESULTFromLastErrorError();
long HRLoadString(HINSTANCE__ *,unsigned int,unsigned short *,int);
long HRLoadString(HINSTANCE__ *,unsigned int,unsigned short *,int,int *);
long HandleStandardDFM(HINSTANCE__ *,unsigned int,unsigned __int64,__int64,ICIVERBTOIDMAP const *);
long HandleUnrecognizedFileSystem(HWND__ *,IUnknown *,char,CMountPoint *);
long HashAssociation(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const *,_SYSTEMTIME const &,bool,unsigned short * *);
long HashAssociationForVersion(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const *,_SYSTEMTIME const &,unsigned long,unsigned short * *);
long HashAssociationWin10(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
long HelpHyperlinkCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
long HiddenProperties_CreateIDListWithPropStore(IDLHID,_ITEMIDLIST_ABSOLUTE const *,IUnknown *,_ITEMIDLIST_ABSOLUTE * *);
long HideExtension(unsigned short *);
long HookMenuWindow(HWND__ *,IMenuBand *);
long HrLoadString(HINSTANCE__ *,unsigned int,unsigned short *,int);
long ICSparseCallback_CreateInstance(CIconCache *,IImageList2 *,unsigned int,_GUID const &,void * *);
long ICategoryDescription_SetFilterCondition(ICategoryDescription *,_tagpropertykey const &,IFilterCondition *,ICategoryDescription * *);
long IContextMenu_SetInvokeVerbs(IContextMenu *,unsigned short const * const * const,unsigned int);
long IDControlCreate(unsigned short const *,int,unsigned short const *,unsigned short const *,bool,_ITEMID_CHILD * *);
long IDebugOutput_WriteLine(IDebugOutput *,unsigned short const *,...);
long IExtractIcon_Extract(IExtractIconW *,unsigned short const *,unsigned int,HICON__ * *,HICON__ * *,unsigned int);
long IFilterCondition_SetCondition(IFilterCondition *,ICondition *,IFilterCondition * *);
long IItemCategorizer_SetCategories(IItemCategorizer *,IItemStore *,IItemKeyArray *,_tagpropertykey const &,SETCAT_FLAGS,IViewStateInfo *,IUnknown *,_tagpropertykey const &);
long IKA_CreateItemKeyDSA(IItemKeyArray *,CDSA<tagITEMKEY> *);
long ILCloneWithHiddenID(_ITEMIDLIST_RELATIVE const *,_HIDDENITEMID const *,_ITEMIDLIST_RELATIVE * *);
long IShellExtInit_Initialize(IUnknown *,_ITEMIDLIST_ABSOLUTE const *,IDataObject *,HKEY__ *);
long IShellItem2_GetInfoTip(IShellItem2 *,unsigned short *,unsigned long);
long IShellItemArray_GetEstimatedCount(IShellItemArray *,unsigned long *);
long IShellItemArray_GetItemAt(IShellItemArray *,unsigned long,_GUID const &,void * *);
long IShellItem_Execute(IShellItem *,unsigned short const *);
long IShellItem_GetEnterpriseId(IShellItem *,unsigned short * *);
long IShellItem_GetFileName(IShellItem *,unsigned short * *);
long IShellItem_GetFindData(IShellItem *,_WIN32_FIND_DATAW *);
long IShellItem_GetString(IShellItem *,_tagpropertykey const &,unsigned short * *);
long IShellItem_GetUInt64(IShellItem *,_tagpropertykey const &,unsigned __int64 *);
long IShellItem_GetZone(IShellItem *,IInternetSecurityManager *,unsigned long *);
long IShellItem_VerifyDownloadedItemType(IShellItem *,IBindCtx *,int *);
long IURLQualifyWithContext(unsigned short const *,unsigned long,unsigned long,unsigned short *,int *,int *,ISearchContext *);
long IUnknown_ActivateBrowserProgressSession(IUnknown *,unsigned long);
long IUnknown_BeginBrowserProgressSession(IUnknown *,unsigned long *);
long IUnknown_DumpContents(IUnknown *,int,IDebugOutput *,unsigned __int64 *);
long IUnknown_EndBrowserProgressSession(IUnknown *,unsigned long);
long IUnknown_GetCurrentBrowserProgressSession(IUnknown *,unsigned long *);
long IUnknown_GetExplorerPaneState(IUnknown *,_GUID,unsigned long *);
long IUnknown_GetFolderEnumMode(IUnknown *,FOLDER_ENUM_MODE *);
long IUnknown_GetIDListFromView(IUnknown *,_ITEMIDLIST_ABSOLUTE * *);
long IUnknown_GetOwnerDisplayName(IUnknown *,unsigned short * *);
long IUnknown_GetParentWindow(IUnknown *,HWND__ * *);
long IUnknown_GetPrivateBuffer(IUnknown *,unsigned int *,unsigned char const * const *);
long IUnknown_GetPropVariant(IUnknown *,tagPROPVARIANT *);
long IUnknown_GetPropertyKey(IUnknown *,_tagpropertykey *);
long IUnknown_GetSelection(IUnknown *,_GUID const &,void * *);
long IUnknown_LoadFromStream(IStream *,IUnknown *);
long IUnknown_LoadKnownImplFromStream(IStream *,_GUID const * const *,unsigned int,_GUID const &,void * *);
long IUnknown_OnSelect(IUnknown *,unsigned long,_GUID const &);
long IUnknown_QueryBand(IUnknown *,unsigned long,IDeskBand * *,unsigned long *,unsigned short *,int);
long IUnknown_QueryCurrentItem(IUnknown *,_GUID const &,void * *);
long IUnknown_QueryCurrentView(IUnknown *,_GUID const &,void * *);
long IUnknown_QueryObject(IUnknown *,_GUID const &,_GUID const &,void * *);
long IUnknown_QueryServiceObject(IUnknown *,_GUID const &,_GUID const &,_GUID const &,void * *);
long IUnknown_QueryShellBrowser(IUnknown *,_GUID const &,void * *);
long IUnknown_RefreshParent(IUnknown *,_ITEMIDLIST_ABSOLUTE const *,unsigned long);
long IUnknown_SaveKnownImplToStream(IStream *,_GUID const * const *,unsigned int,IUnknown *);
long IUnknown_SaveToStream(IStream *,int,IUnknown *);
long IUnknown_SeekToZero(IUnknown *);
long IUnknown_ServiceExists(IUnknown *,_GUID const &);
long IUnknown_SetCancelObject(IUnknown *,ICancelMethodCalls *);
long IUnknown_SetCookie(IUnknown *,unsigned long);
long IUnknown_SetCriticalSection(ICriticalSection *,IUnknown *);
long IUnknown_SetFileOperationContext(IUnknown *,IFileOperationContext *);
long IUnknown_SetFolderEnumMode(IUnknown *,FOLDER_ENUM_MODE);
long IUnknown_SetIDList(IUnknown *,_ITEMIDLIST_ABSOLUTE const *);
long IUnknown_SetKeepAlive(IUnknown *,int);
long IUnknown_SetNavPaneSelection(IUnknown *,IShellItem *);
long IUnknown_SetOptions(IUnknown *,unsigned long);
long IUnknown_SetPropertyKey(IUnknown *,_tagpropertykey const &);
long IUnknown_SetSelection(IUnknown *,IShellItemArray *);
long ImageList_GetMirrored(_IMAGELIST *,IImageList * *);
long InitDeletedItem(unsigned short const *,unsigned short const *,tagDELETEDITEM *);
long InitPropVariantFromCurrentUser(tagPROPVARIANT *);
long InitPropVariantFromPropVariantDSA(CDSA<tagPROPVARIANT> *,tagPROPVARIANT *);
long InitPropVariantFromString(unsigned short const *,tagPROPVARIANT *);
long InitVariantFromRegistry(HKEY__ *,unsigned short const *,tagVARIANT *);
long InitVariantFromString(unsigned short const *,tagVARIANT *);
long InitializeAppId(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *,unsigned short * *,unsigned short * *);
long InitializeDirectUI();
long InitializeFileHandlerWithFile(IUnknown *,unsigned short const *,unsigned long,INITFILEHANDLERFLAGS);
long InitializeFileHandlerWithStream(IUnknown *,IStream *,_GUID const *,unsigned short const *,unsigned long,INITFILEHANDLERFLAGS);
long InitializeFormatDlg(CFormatEngine *,int);
long InitializeNoAssocIconValue(DirectUI::Value * *);
long InsertBitmapIntoImageList(ISharedBitmap *,IImageListImageDecorator *,IImageList2 *,int,IBIIL_FLAGS);
long InternalGetContactsProvider(HSTRING__ * *,HSTRING__ * *,HSTRING__ * *);
long InvokeFromPropertyBag(IPropertyBag *);
long InvokeSearchStoreCommand(IUnknown *,IUnknown *,IShellItemArray *,IBindCtx *);
long InvokeShellExecuteHook(_GUID const &,EXTCOCREATEFLAGS,_SHELLEXECUTEINFOW *,long *);
long InvokeURLSearchHook(IURLSearchHook *,unsigned short const *,unsigned short *,unsigned int,ISearchContext *);
long InvokeVerbsFromWalkingItems(IUnknown *,HWND__ *,WALK_CB_FLAGS,char const *,unsigned long,IUnknown *,NAMESPACEWALKFLAG);
long InvokeVerbsOnItems(HWND__ *,char const *,_ITEMIDLIST_ABSOLUTE const * const *,unsigned int,IUnknown *);
long IsAutoList(IShellItem *,ICompositionProcessor *,int *);
long IsConditionBitwiseOperation(ICondition *,tagCONDITION_OPERATION,BITSSET *);
long IsEffectiveLowIL();
long IsIconResourcePath(unsigned short const *,bool *);
long IsImageSizeSufficientForRequestedSize(unsigned short const *,int);
long IsItemAGroup(IItem *);
long IsItemIndexed(IShellItem *,INDEXER_CHECK_FLAGS,int *,INDEXER_CACHE_STATE *);
long IsPIDLowIL(unsigned long);
long IsPathUnderRecycleBin(IRecycleBinManager *,unsigned short const *,int *);
long IsProcessLowIL(void *);
long IsPublishedAlready(IUsersFilesDescription *,PUBLISHEDITEMTYPE,IShellItem *,IPublishedItemDescription * *);
long IsRecycleBinIconEmpty();
long IsSearchHistoryEnabled();
long IsValidUserAndMachine(unsigned short const *,unsigned short const *);
long ItemStore_CachePropertyForItem(IItemStore *,tagITEMKEY const *,IShellFolder2 *,IViewStateInfo *,_tagpropertykey const &);
long ItemStore_ExtractProperty(_tagpropertykey const &,IItemStore *,tagITEMKEY const *,IPropertyStore *,IShellFolder2 *,_ITEMID_CHILD const *,tagPROPVARIANT *);
long ItemStore_GetCachedProperty(IPropertyStoreCache *,_tagpropertykey const &,GIPTYPE,IViewStateInfo *,IItemStore *,tagITEMKEY const *,IPropertyStore *,IShellFolder2 *,_ITEMID_CHILD const *,int *,tagPROPVARIANT *);
long ItemStore_GetCachedPropertyWithNoBatching(IPropertyStoreCache *,_tagpropertykey const &,GIPTYPE,IItemStore *,tagITEMKEY const *,IPropertyStore *,IShellFolder2 *,_ITEMID_CHILD const *,int *,tagPROPVARIANT *);
long ItemStore_GetPropValueForItem(IItemStore *,tagITEMKEY const *,IShellFolder2 *,IViewStateInfo *,_tagpropertykey const &,tagPROPVARIANT *);
long ItemStore_GetProperty(IItemStore *,tagITEMKEY const *,_tagpropertykey const &,GIPTYPE,IViewStateInfo *,IPropertyStore *,IShellFolder2 *,_ITEMID_CHILD const *,int *,tagPROPVARIANT *);
long ItemStore_StealToInsertItem(IItemStore *,_ITEMID_CHILD * *,ITEM_FLAGS,IPropertyStore *,tagITEMKEY *);
long ItemStore_TransferInsertItem(IItemStore *,tagITEMKEY const *,IItemStore *,tagITEMKEY *);
long ItemStore_TransferUpdateItem(IItemStore *,tagITEMKEY const *,IItemStoreOwner *,tagITEMKEY const *);
long LTRPathFromPathLocalAlloc(unsigned short const *,unsigned short * *);
long LaunchMSHelpTopic(unsigned short const *);
long LaunchPropSheetOnSTAThread(IDataObject *,unsigned short const *,_GUID const &,Windows::Internal::TaskOptions);
long LinkGetIDList(IShellLinkW *,_ITEMIDLIST_ABSOLUTE * *);
long LoadConditionFromStream(IStream *,_GUID const &,void * *);
long LoadCustomMessageForItem(HINSTANCE__ *,IShellItem *,_SIGDN,unsigned int,unsigned int,unsigned short *);
long LoadDISKCOPY(DISKCOPY *);
long LoadFMIFS(FMIFS *);
long LoadImageWithWIC(IWICImagingFactory *,IStream *,LOAD_IMAGE_WITH_WIC_OPTION,IWICBitmapSource * *,IWICBitmapFrameDecode * *,_GUID *);
long LoadPidlAsLink(IUnknown *,IStream *,_ITEMIDLIST_ABSOLUTE * *);
long LoadShield(HBITMAP__ * *);
long LoadTopView(ITopViewAwareItem *,unsigned short const *,TOPVIEWKEY *);
long LsaOpenLocalSystemPolicy(unsigned long,_SECURITY_QUALITY_OF_SERVICE *,void * *);
long MakeSafeForScripting(IUnknown * *);
long MakeSearchTokenString(unsigned long,unsigned short const *,MAKE_SEARCH_TOKEN_STRING_MODE,unsigned short * *);
long MapColumnToSCIDFromPropertyDescriptionList(IPropertyDescriptionList *,unsigned int,_tagpropertykey *);
long MapColumnToSCIDImpl(COLUMN_INFO const *,unsigned int,unsigned int,_tagpropertykey *);
long MapGroupName(unsigned short const *,unsigned short *,unsigned long);
long MapLocalToNetworkItem(IShellItem *,MAPLNITEM,IShellItem * *);
long MarkAsLocalLocationIfNecessary(ILocationDescription *);
long MarkItemAsSimple(IShellItem *);
long MarshalToGIT(IUnknown *,_GUID const &,unsigned long *);
long MaybeShowActivationErrorPopupIfCritical(long,PackageOrigin,unsigned short const *,ACTIVATIONERROR_DISMISS_METHOD *);
long ModifyOrRemoveFilterHelper(_ITEMIDLIST_ABSOLUTE *,IFilterCondition *,CDPA<_ITEMID_CHILD,CTContainer_PolicyUnOwned<_ITEMID_CHILD> > *,_ITEMIDLIST_ABSOLUTE * *);
long MountDiscImage(IShellItem *,int,unsigned long *);
long MountDiscImages(IShellItemArray *,int,unsigned long *,HWND__ *);
long MountPointProperties(IDataObject *);
long MoveFileWithUsnSourceInfo(unsigned short const *,unsigned short const *,unsigned long,unsigned long);
long NOEFromSHCNE(__int64);
long NavigateAndSelectItem(IUnknown *,IShellItem *);
long NetGetUserPicture(unsigned short const *,unsigned short const *,unsigned short *,unsigned long,unsigned short *,unsigned long);
long NetSetUserPicture(unsigned short const *,unsigned short const *,unsigned short const *);
long NextObject<ICondition>(IEnumUnknown *,ICondition * *);
long NextObject<IPropertyStore>(IEnumUnknown *,IPropertyStore * *);
long NextObject<IUsersFilesDescription>(IEnumUnknown *,IUsersFilesDescription * *);
long NextSegment(unsigned short const * *,unsigned short *,unsigned __int64,int);
long NormalizeRating(unsigned int,tagPROPVARIANT *);
long OpenExpandedState(unsigned long,IStream * *);
long OpenFolder(_ITEMIDLIST_ABSOLUTE const *);
long OpenHKCRApplicationKey(unsigned short const *,OPEN_APP_KEY_FLAGS,HKEY__ * *);
long OpenWithListOpen(unsigned short const *,void * *);
long OpenWithListRegister(unsigned long,unsigned short const *,unsigned short const *,IAssociationElement *);
long OrchestrateIsAuditBootEx2(HKEY__ *,int,int *);
long OrderItem_GetProperty(ORDERINFO const &,ORDERITEM const &,_tagpropertykey const &,tagPROPVARIANT *);
long OrderItem_GetSystemImageListIndexFromCache(ORDERITEM *,IShellFolder *,int *);
long OrderItem_LoadFromStream(_DPASTREAMINFO *,IStream *,void *);
long OrderItem_SaveToStream(_DPASTREAMINFO *,IStream *,void *);
long OrderItem_SaveToStreamWorker(ORDERITEM2 const *,tagOISTREAMITEM const *,IStream *,IShellFolder2 const *);
long OrderList_LoadFromStream(IStream *,_DPA * *,IShellFolder *);
long OrderList_SaveToStream(IStream *,_DPA *,IShellFolder *);
long PUIGetDisplayName(_tagpropertykey const &,unsigned short *,unsigned long);
long ParseAppUserModelId(unsigned short const *,unsigned short * *,unsigned short * *);
long ParseAppUserModelId(unsigned short const *,unsigned short *,unsigned __int64,unsigned short *,unsigned __int64);
long ParseAppletCategoryString(unsigned short const *,long *,unsigned int,unsigned int *);
long ParseDisplayNameChild(IShellFolder *,HWND__ *,IBindCtx *,unsigned short const *,unsigned long *,_ITEMID_CHILD * *,unsigned long *);
long ParseRelativeNameFromParentIDList(_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,IBindCtx *,_ITEMIDLIST_ABSOLUTE * *);
long PathCchAddBackslashExA(char *,unsigned __int64,char * *,unsigned __int64 *);
long PathCchCanonicalizeA(char *,unsigned __int64,char const *);
long PathCchCombineA(char *,unsigned __int64,char const *,char const *);
long PathCchSkipRootA(char const *,char const * *);
long PathCchStripToRootA(char *,unsigned __int64);
long PathConvertToCSC(unsigned short const *,unsigned short * *);
long PathConvertToUNC(unsigned short const *,unsigned short * *);
long PathExpandEnvStringsWrap(unsigned short *,unsigned long);
long PathFromLongPath(unsigned short *,unsigned int,unsigned short *);
long PathGetComputerName(unsigned short const *,unsigned short const *,unsigned short *,unsigned int);
long PathGetVolumeRoot(unsigned short const *,unsigned short *,unsigned __int64);
long PathMapLocalToUNC(unsigned short const *,unsigned short * *);
long PathMapUNCToLocal(unsigned short const *,unsigned short * *);
long PathResolveReparsePoints(unsigned short const *,unsigned short *,unsigned __int64);
long Path_ChangeUNCToDrive(unsigned short *,unsigned long,unsigned short);
long PopulateSortedListFromIEnumAssocHandlers(IEnumAssocHandlers *,CDPA<IAssocHandler,CTContainer_PolicyUnOwned<IAssocHandler> > &);
long PostAppResetToast(unsigned short const *,unsigned short const *,unsigned short const *);
long PostProcessImageWithWIC(IWICImagingFactory *,IWICBitmapSource *,WICPOSTPROCESS_FLAGS,unsigned int,IWICBitmapSource * *);
long PostSlideshowMessage(unsigned int,unsigned __int64,__int64);
long PreferSortByColumnIdImpl(_tagpropertykey const &,COLUMN_INFO const *,unsigned int,unsigned int *);
long PrepareStringForDisplayUTF8W(unsigned short const *,unsigned short *,unsigned long *,int,unsigned int);
long PrepareURLForDisplayUTF8W(unsigned short const *,unsigned short *,unsigned long *,int);
long ProcessPropsToXml(IXmlWriter *,XMLPROP_ITEM const *,IUnknown *);
long ProcessXmlToProps(IXmlReader *,bool,XMLPROP_ITEM const *,IUnknown *);
long PropVariantArrayFromDataObject(IDataObject *,_tagpropertykey const &,tagVARIANT * *,unsigned int *);
long PropVariantGetStringElemCast(tagPROPVARIANT const &,unsigned long,unsigned short const * *);
long PropVariantToPropVariantDSA(tagPROPVARIANT const &,CDSA<tagPROPVARIANT> *);
long PublishToAllPublishers(IPublicationServicesPublisher *,_GUID const &,IObjectCollection *,unsigned short const *);
long QSOpen2(IQuerySource *,unsigned short const *,unsigned short const *,IQuerySource * *);
long QueryContinueOnSite(IUnknown *);
long QueryInterfacePropVariant(tagPROPVARIANT const &,_GUID const &,void * *);
long QueryShouldContinue(IQueryContinue *);
long QueryValueMuiString(IQuerySource *,ASSOCQUERY,unsigned short const *,unsigned short const *,unsigned short * *);
long RankProvider_CreateInstance(IAppRankProvider * *);
long ReadDefaultImmersiveBrowserVisualElementsManifest(unsigned short const *,IPropertyStore *);
long ReadDesktopTileVisualElementsManifest(unsigned short const *,IPropertyStore *);
long ReadIniPropSettingsFromReg(HKEY__ *,unsigned short const *,INIPROPSETTINGS *);
long ReadSingleUnreadMailCount(HKEY__ *,unsigned long *,_FILETIME *,unsigned short *,int);
long ReadTileDataFromPropertyStore(IPropertyStore *,bool,TILE_DATA *,unsigned short * *);
long RebuildMatchedFilterIDList(_ITEMIDLIST_ABSOLUTE const *,CDPA<_ITEMID_CHILD,CTContainer_PolicyUnOwned<_ITEMID_CHILD> > *,IFilterCondition *,_ITEMIDLIST_ABSOLUTE * *);
long RegChkVersion(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long);
long ReleaseActiveDesktop(IActiveDesktop * *);
long Release_LinkPropData(LINKPROP_DATA *);
long RelocateFolder(IUnknown *,IShellItem *,IBindCtx *);
long RemapDestNamesA(unsigned short const *,char const *,unsigned short * *);
long RemapDestNamesW(unsigned short const *,unsigned short const *,unsigned short * *);
long RemoveHomeGroupComputer(unsigned short const *);
long RenameItemHelper(HWND__ *,IUnknown *,IShellItem *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,FOLDER_ENUM_MODE,_ITEMID_CHILD * *);
long RenderIcon(SHSTOCKICONID,unsigned short const *,HDC__ *,tagSIZE);
long RenderLayer(MATRIXDATA *,HBITMAP__ *,Gdiplus::Graphics *,Gdiplus::Pen *,Gdiplus::Pen *,HDC__ *,HBITMAP__ *);
long ReparseItemArrayFromFolder(IShellFolder *,_ITEMID_CHILD const * const *,unsigned int,IShellFolder *,int,_ITEMID_CHILD * * *);
long ReparseItemFromFolderItem(IShellItem *,IShellItem *,int,_GUID const &,void * *);
long ReparseRelativeIDListAndCreateItem(IShellFolder *,_ITEMIDLIST_RELATIVE const *,IShellFolder *,ReparseRelativeIdListFlags,_GUID const &,void * *);
long ReparseRelativeIDListFromFolder(IShellFolder *,_ITEMIDLIST_RELATIVE const *,IShellItem *,ReparseRelativeIdListFlags,_GUID const &,void * *);
long ReparseRelativeIDListInternal(IShellFolder *,_ITEMIDLIST_RELATIVE const *,_GUID const &,IShellFolder *,ReparseRelativeIdListFlags,IBindCtx *,_ITEMIDLIST_RELATIVE * *);
long ReplaceAggregatedAndResizeIfRequired(IAggregateImageList *,bool,int,unsigned int,int);
long ReplaceParameters(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int,unsigned long *,int,IShellItem *,unsigned long,void * *,unsigned short * *);
long ReplaceSearchTerms(unsigned short const *,unsigned short const *,unsigned short * *);
long ResetLibraryLocationTarget(RLLTFLAGS,ILibraryDescription *);
long ResultFromKnownError(unsigned long);
long ResultFromKnownLastError();
long ResultFromWin32Handle(void *,void * *);
long ResultsWrapIContextMenus(IDataObject *,IContextMenu *,IContextMenu *,_GUID const &,void * *);
long RtlStringCchCatNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long RtlStringCchCatW(unsigned short *,unsigned __int64,unsigned short const *);
long RtlStringCchCopyW(unsigned short *,unsigned __int64,unsigned short const *);
long RtlStringCchLengthW(unsigned short const *,unsigned __int64,unsigned __int64 *);
long SHAcctAccountName2DataFileName(unsigned short const *,unsigned short *,unsigned long);
long SHAcctGetProgramDataDirectory(unsigned short *,unsigned long);
long SHAcctGetUserPicturePath(unsigned short *,unsigned long);
long SHAddSkipBindCtx(IBindCtx *,IUnknown *);
long SHAnimateWindowSize(HWND__ *,tagSIZE,tagSIZE,unsigned long,AWSTYPE,unsigned int);
long SHAppendFiltersToIDList(_ITEMID_CHILD const *,IFilterCondition * *,unsigned int,_ITEMID_CHILD * *);
long SHBreakText(unsigned long,tagTEXT_SOURCE *,IWordSink *);
long SHCheckPathPermissions(unsigned short const *,int,unsigned long,unsigned long *);
long SHCoCreateInstanceAndLoadFromFile(_GUID const &,unsigned short const *,unsigned long,_GUID const &,void * *);
long SHCoDupArray<SORTCOLUMN>(SORTCOLUMN const *,unsigned __int64,SORTCOLUMN * *);
long SHCoDupArray<_tagpropertykey>(_tagpropertykey const *,unsigned __int64,_tagpropertykey * *);
long SHCoInitialize();
long SHCombineMultipleConditions(tagCONDITION_TYPE,ICondition * *,unsigned int,_GUID const &,void * *);
long SHCombineMultipleConditionsEx(tagCONDITION_TYPE,ICondition * *,unsigned int,IConditionFactory2 *,_GUID const &,void * *);
long SHCombineMultipleFilterConditions(unsigned short const *,_tagpropertykey const &,tagCONDITION_TYPE,unsigned int,IFilterCondition * *,_GUID const &,void * *);
long SHCompareIDs(IShellFolder *,__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,int *);
long SHCopyItemArrayConvertLinksToTargets(IShellItemArray *,IUnknown *,bool,ARRAY_LINK_RESOLUTION_BEHAVIOR,IShellItemArray * *);
long SHCopyPropertyStore(IPropertyStore *,IPropertyStore *);
long SHCopyStreamWithProgress2(IStream *,IStream *,IUnknown *,_ULARGE_INTEGER,_ULARGE_INTEGER,FILE_ERROR_CAUSE_ITEM *);
long SHCreateAndOrCondition(tagCONDITION_TYPE,IObjectArray *,_GUID const &,void * *);
long SHCreateAndOrConditionEx(tagCONDITION_TYPE,IObjectArray *,IConditionFactory2 *,_GUID const &,void * *);
long SHCreateCAssocHandler(AHTYPE,unsigned short const *,unsigned short const *,CAssocHandler * *);
long SHCreateConditionFactory(_GUID const &,void * *);
long SHCreateEnumPropStg(_GUID const &,_tagpropertykey const * const * const,unsigned int,IEnumSTATPROPSTG * *);
long SHCreateFileOperation(HWND__ *,unsigned long,_GUID const &,void * *);
long SHCreateFilter(unsigned short const *,unsigned short const *,_tagpropertykey const &,FC_FLAGS,ICondition *,_GUID const &,void * *);
long SHCreateGangedSysImageList(_GUID const &,void * *);
long SHCreateIDListWithFilters(_ITEMID_CHILD const *,IFilterCondition * *,int,_ITEMID_CHILD * *);
long SHCreateInfotipControl(HWND__ *,HWND__ * *);
long SHCreateLeafCondition(_tagpropertykey const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,unsigned short const *,_GUID const &,void * *);
long SHCreateLeafConditionEx(_tagpropertykey const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,unsigned short const *,unsigned short const *,IRichChunk *,IRichChunk *,IRichChunk *,IConditionFactory2 *,_GUID const &,void * *);
long SHCreateOriginalItemBindCtx(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_ITEMID_CHILD const *,unsigned long,REPARSE_PARTIAL_IDLIST_MODE,IBindCtx * *);
long SHCreatePostEnumOpBindCtx(IBindCtx *,tagENUMHINTINFO const *,IBindCtx * *);
long SHCreateSetStgEnum(_tagpropertykey const * const * const,unsigned int,IEnumSTATPROPSETSTG * *);
long SHCreateSingleKindList(unsigned short const *,_GUID const &,void * *);
long SHCreateSkipBindCtx(IUnknown *,IBindCtx * *);
long SHDisplayNameFromScopeAndSubQueries(IScope *,IShellItemArray *,unsigned long,unsigned long,_SIGDN,unsigned short * *);
long SHDuplicateHandle(void *,void * *);
long SHExePathFromPid(unsigned long,unsigned short *,unsigned int);
long SHExtCoCreateFromRegKey(unsigned short const *,unsigned short const *,_GUID const &,void * *);
long SHExtCoCreateLocalServerFromRegKey(unsigned short const *,unsigned short const *,_GUID const &,void * *);
long SHFindConnectedUserBySid(unsigned short const *,_GUID const &,void * *);
long SHFindLinkTarget(HWND__ *,IShellLinkW *,unsigned long);
long SHGetAttributesRequiringElevationFromDataObject(IUnknown *,int,IDataObject *,unsigned long,unsigned long *,unsigned int *);
long SHGetCachedPrivateProfile(unsigned short const *,CACHEDPRIVATEPROFILEFLAGS,ICachedPrivateProfile * *);
long SHGetCategorizer(IShellFolder *,_tagpropertykey const &,int,int,IUnknown *,_GUID const &,void * *);
long SHGetComparisonInfo(ICondition *,_tagpropertykey *,tagCONDITION_OPERATION *,tagPROPVARIANT *);
long SHGetContextMenuOfSelection(IUnknown *,IShellItemArray *,SHICOIA_FLAGS,IContextMenu * *);
long SHGetCurrentDirectory(unsigned short *,unsigned long);
long SHGetDetailsOfInfo(HINSTANCE__ *,COLUMN_INFO const *,unsigned int,unsigned int,_SHELLDETAILS *);
long SHGetFilterFromIDList(_ITEMID_CHILD const *,_tagpropertykey const &,IFilterCondition * *);
long SHGetFiltersFromIDList(_ITEMID_CHILD const *,IFilterCondition * * *,unsigned int *);
long SHGetIDListChildFromBindCtx(IBindCtx *,unsigned short const *,_ITEMID_CHILD * *);
long SHGetItemArrayFromDataObj(IDataObject *,tagSTGMEDIUM *,_IDA * *);
long SHGetItemArrayFromDataObjEx(IDataObject *,unsigned short,tagSTGMEDIUM *,_IDA * *);
long SHGetItemArrayOfSelection(IUnknown *,IShellItemArray *,SHICOIA_FLAGS,IShellItemArray * *);
long SHGetLogonID(unsigned short * *);
long SHGetMachineGUID(_GUID *,unsigned short *,unsigned int);
long SHGetNameAndFlagsW(_ITEMIDLIST_ABSOLUTE const *,unsigned long,unsigned short *,unsigned int,unsigned long *);
long SHGetOriginalItemFromBindCtx(IBindCtx *,_ITEMIDLIST_ABSOLUTE * *,IShellFolder * *,_ITEMID_CHILD * *);
long SHGetParsingNameFromPropertyStore(unsigned short const *,INamedPropertyStore *,unsigned short * *);
long SHGetPerScreenResNameForDpi(unsigned short *,unsigned long,unsigned long,int);
long SHGetPostEnumOpFromBindCtx(IBindCtx *,tagENUMHINTINFO *);
long SHGetPrivateProfileString(unsigned short const *,unsigned short const *,unsigned short const *,CACHEDPRIVATEPROFILEFLAGS,unsigned short *,unsigned int,unsigned short const *);
long SHGetPrivateProfileStringEx(unsigned short const *,unsigned short const *,unsigned short const *,CACHEDPRIVATEPROFILEFLAGS,unsigned short *,unsigned int,ICachedPrivateProfile *);
long SHGetPropertyStoreFromPropertyParsingName(unsigned short const *,_GUID const &,void * *);
long SHGetTargetItem(IShellItem *,_GUID const &,void * *);
long SHILClone(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE * *);
long SHILCloneFirst(_ITEMIDLIST_RELATIVE const *,_ITEMID_CHILD * *);
long SHILCloneParent(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE * *);
long SHILCombine(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_ABSOLUTE * *);
long SHInvokeCommandOnContextMenu2(HWND__ *,IUnknown *,IContextMenu *,unsigned long,unsigned int,char const *,unsigned short const *,tagPOINT const *);
long SHInvokeCommandOnItem(HWND__ *,IUnknown *,IShellItem *,unsigned int,char const *);
long SHInvokeCommandOnPidl(HWND__ *,IUnknown *,_ITEMIDLIST_ABSOLUTE const *,unsigned int,char const *);
long SHInvokeCommandOnSelection(IUnknown *,IShellItemArray *,SHICOIA_FLAGS,char const *);
long SHIsVerbAvailableOnSelection(IUnknown *,IShellItemArray *,SHICOIA_FLAGS,DEFAULT_FOLDER_MENU_RESTRICTIONS,int,char const *,int *);
long SHKeepDUIInitializedForThread(unsigned int);
long SHLoadFilterFromStream(IStream *,_GUID const &,void * *);
long SHLoadLegacyRegUIStringW(HKEY__ *,unsigned short const *,unsigned short *,unsigned int);
long SHMapCmdIDToHelpText(unsigned __int64,unsigned int,HINSTANCE__ *,ICIVERBTOIDMAP const *,char *,unsigned int);
long SHMapCmdIDToVerb(unsigned __int64,unsigned int,ICIVERBTOIDMAP const *,char *,unsigned int);
long SHMapICIVerbToCmdID(_CMINVOKECOMMANDINFO *,ICIVERBTOIDMAP const *,unsigned int *);
long SHMapUrlToZone(unsigned short const *,IUnknown *,unsigned long,unsigned long *);
long SHNextObjectFromEnumUnknown(IEnumUnknown *,_GUID const &,void * *);
long SHOLEMerge(_GUID const &,IReconcileInitiator *,IShellItem * *,unsigned __int64,unsigned long,HWND__ *,HWND__ *,long *);
long SHOpenControlPanel(unsigned short const *,unsigned short const *,IUnknown *);
long SHOpenEffectiveToken(unsigned long,int,void * *);
long SHOpenOrGetFolderView(int,_ITEMIDLIST_ABSOLUTE const *,_GUID const &,void * *);
long SHPropertiesForUnk(HWND__ *,IUnknown *,unsigned short const *,tagPOINT);
long SHPropertyBag_ReadIcon(IPropertyBag *,int,unsigned int,unsigned short *,unsigned int,int *);
long SHPropertyBag_ReadStreamScreenResWithVersionForDpi(IPropertyBag *,unsigned short const *,unsigned long,int,IStream * *);
long SHQueryToken<_TOKEN_GROUPS>(void *,_TOKEN_INFORMATION_CLASS,int,_TOKEN_GROUPS * *);
long SHQueryToken<_TOKEN_MANDATORY_LABEL>(void *,_TOKEN_INFORMATION_CLASS,int,_TOKEN_MANDATORY_LABEL * *);
long SHQueryToken<_TOKEN_PRIVILEGES>(void *,_TOKEN_INFORMATION_CLASS,int,_TOKEN_PRIVILEGES * *);
long SHQueryToken<_TOKEN_USER>(void *,_TOKEN_INFORMATION_CLASS,int,_TOKEN_USER * *);
long SHRegAllocData(HKEY__ *,unsigned short const *,unsigned short const *,int,void * *,unsigned long *);
long SHRegGetBOOLWithREGSAM(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,int *);
long SHRegGetDWORD(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long *);
long SHRegGetFILETIME(HKEY__ *,unsigned short const *,unsigned short const *,_FILETIME *);
long SHRegGetGUID(HKEY__ *,unsigned short const *,unsigned short const *,_GUID *);
long SHRegGetStringEx(HKEY__ *,unsigned short const *,unsigned short const *,int,unsigned short *,unsigned long);
long SHRegSetBOOL(HKEY__ *,unsigned short const *,unsigned short const *,int);
long SHRegSetDWORD(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long);
long SHRegSetFILETIME(HKEY__ *,unsigned short const *,unsigned short const *,_FILETIME const *);
long SHRegSetString(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const *);
long SHResToStrRet(HINSTANCE__ *,unsigned int,_STRRET *);
long SHResolveCondition(ICondition *,_GUID const &,void * *);
long SHResolveConditionEx(ICondition *,STRUCTURED_QUERY_RESOLVE_OPTION,_SYSTEMTIME const *,_GUID const &,void * *);
long SHResolveFilterCondition(IFilterCondition *,IFilterCondition * *);
long SHResolveFilterConditionEx(IFilterCondition *,STRUCTURED_QUERY_RESOLVE_OPTION,_SYSTEMTIME const *,IFilterCondition * *);
long SHSetFilterToIDList(_ITEMID_CHILD const *,_tagpropertykey const &,IFilterCondition *,_ITEMID_CHILD * *);
long SHSetLocalizedNameOnItem(IShellItem *,unsigned short const *,int);
long SHShouldCreateExtension(_GUID const &,EXTCOCREATEFLAGS,unsigned long,_GUID const &);
long SHSimpleIDListFromFindDataAndFlags(unsigned short const *,_WIN32_FIND_DATAW const *,SIMPLE_IDLIST_FLAGS,_ITEMIDLIST_ABSOLUTE * *);
long SHSimpleItemFromAttributes(unsigned short const *,unsigned long,_GUID const &,void * *);
long SHSimulateDropWithSite(IDropTarget *,IDataObject *,unsigned long,_POINTL const *,unsigned long *,IUnknown *);
long SHSysAllocString(unsigned short const *,unsigned short * *);
long SHTrackContextMenu(IContextMenu *,HWND__ *,unsigned int,int,int,tagTPMPARAMS *,unsigned int);
long SHWritePrivateProfileString(unsigned short const *,unsigned short const *,CACHEDPRIVATEPROFILEFLAGS,unsigned short const *,unsigned short const *);
long SampleEnlightenmentUser();
long SaveImageWithWIC(IWICImagingFactory *,HBITMAP__ *,_GUID const &,IStream *);
long SaveIsfToStream(IShellFolder *,IStream *);
long SavePidlAsLink(IUnknown *,IStream *,_ITEMIDLIST_ABSOLUTE const *);
long SaveTopView(IUnknown *,IShellItem *,unsigned short const *);
long ScaleImageWithWIC(IWICImagingFactory *,HBITMAP__ *,tagSIZE,bool,HBITMAP__ * *);
long ScaleImageWithWIC(IWICImagingFactory *,IWICBitmapSource *,tagSIZE,bool,IWICBitmapSource * *);
long ScaleToSize(IWICImagingFactory *,IWICBitmapSource *,unsigned int,unsigned int,_GUID const &,void * *);
long ScaleWICBitmapSource(IWICImagingFactory *,IWICBitmapSource *,WICBitmapInterpolationMode,tagSIZE,bool,IWICBitmapSource * *);
long ScanFoldersAndCreateNewCache(CAppResolverCacheManager *,unsigned int,ROOTSCANINFO const *,START_MENU_REFRESH_CACHE_FLAGS);
long SendPerfSQMNavPaneAction(DirectUI::Element *,unsigned long);
long SendSlideshowMessage(unsigned int,unsigned __int64,__int64,__int64 *);
long SetBalloonIconFromPropertyBag(IPropertyBag *,IUserNotification *);
long SetBalloonInfoFromPropertyBag(IPropertyBag *,IUserNotification *);
long SetBalloonRetryFromPropertyBag(IPropertyBag *,IUserNotification *);
long SetClipboardText(HWND__ *,void *);
long SetDwmColorizationColor(unsigned long,DWMPGLASSATTRIBUTE);
long SetElementPropertyPath(DirectUI::Element *,DirectUI::PropertyInfo const *,unsigned short const *);
long SetElementPropertyPathFromItem(DirectUI::Element *,DirectUI::PropertyInfo const *,IShellItem *,_SIGDN);
long SetFileAttributesWithUsnSourceInfo(unsigned short const *,unsigned long,unsigned long,unsigned long);
long SetFileAttributesWithUsnSourceInfoByHandle(void *,unsigned long,unsigned long,unsigned long);
long SetFullExePath(HWND__ *,unsigned short *,unsigned __int64);
long SetHighRelevanceOnlyQuery(ICondition *);
long SetIncludeNonFileSystemLocationsInLibrary(IUnknown *,int);
long SetInterface<IDataObject>(IDataObject * *,IUnknown *);
long SetLocationSupported(ILocationDescription *,int);
long SetPlaceholderReparsePointAndAttributes(unsigned short const *,bool,unsigned long);
long SetPlaceholderReparsePointByHandle(void *,bool,unsigned long);
long SetProgIdAndHash(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,bool);
long SetShouldToastUserAboutAppReset(unsigned short const *,unsigned short const *);
long SetStreamEmulationMode(IUnknown *,StreamEmulationMode);
long SetUsnSourceInfo(void *,unsigned long);
long SharedMemAllocArray<OFFSET<CCacheDir> >(IMemoryMappedHeap *,unsigned long,OFFSET_ARRAY<OFFSET<CCacheDir> > *,OFFSET<CCacheDir> * *);
long SharedMemAllocArray<OFFSET<CCacheShortcut> >(IMemoryMappedHeap *,unsigned long,OFFSET_ARRAY<OFFSET<CCacheShortcut> > *,OFFSET<CCacheShortcut> * *);
long SharedMemAllocObject<AR_CACHE_HEADER>(IMemoryMappedHeap *,OFFSET<AR_CACHE_HEADER> *,AR_CACHE_HEADER * *);
long SharedMemAllocObject<CCacheDir>(IMemoryMappedHeap *,OFFSET<CCacheDir> *,CCacheDir * *);
long SharedMemAllocObject<CCacheRoot>(IMemoryMappedHeap *,OFFSET<CCacheRoot> *,CCacheRoot * *);
long SharedMemAllocObject<CCacheShortcut>(IMemoryMappedHeap *,OFFSET<CCacheShortcut> *,CCacheShortcut * *);
long SharedMemAllocObject<CCacheTile>(IMemoryMappedHeap *,OFFSET<CCacheTile> *,CCacheTile * *);
long Shell32RegTypeLib();
long ShouldShowBasedOnCapabilities(ICapabilities *,IPublishedItemDescription *);
long ShouldShowItemBasedOnCapabilities(ICapabilities *,IShellItem *);
long ShowAdminInfoTaskDialog(HWND__ *,unsigned short const *,unsigned short const *);
long ShowFolderMenu(IShellFolder *,IUnknown *,tagRECT const *,unsigned int,int);
long ShowSecurityZoneDialog(unsigned long,unsigned long,unsigned short const *,HWND__ *,IUnknown *,ISecurityZoneChecker * *,int *);
long ShowSetDefaultMessage(HWND__ *);
long ShowShellInfraCriticalFailureDialogAndWait(unsigned int,HWND__ *);
long ShowShellInfrastuctureCriticalFailureDialogWorker(unsigned int);
long ShowTempProfileWarningDialogAndWait(HWND__ *);
long SimpleRatingToFilterCondition(unsigned int,PROPDESC_FORMAT_FLAGS,IFilterCondition * *);
long SkuEquals(unsigned short const *,int *);
long SortKeyCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,tagCONDITION_OPERATION,int,int *);
long SplitActionAndServiceId(HSTRING__ *,HSTRING__ * *,HSTRING__ * *);
long SplitAtMatchedFilter(IShellItem *,_ITEMIDLIST_ABSOLUTE const *,unsigned int,CDPA<_ITEMID_CHILD,CTContainer_PolicyUnOwned<_ITEMID_CHILD> > *,_ITEMIDLIST_ABSOLUTE * *);
long SplitFileNameAndExtension(unsigned short const *,unsigned long,unsigned short *,unsigned int,unsigned short const * *);
long StealVariantFromPropVariant(tagPROPVARIANT *,tagVARIANT *);
long StgMoveElementTo(IShellFolder *,IStorage *,unsigned short const *,IStorage *,unsigned short const *,unsigned long);
long StrCmpIWithRoot(unsigned short const *,int,unsigned short * *);
long StretchFromImageListToImageList(IImageList *,int,int,int,IImageList2 *,int,IImageListImageDecorator *);
long StringCbCatNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long StringCbCatW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCbCopyNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long StringCbCopyW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCbLengthA(char const *,unsigned __int64,unsigned __int64 *);
long StringCbLengthW(unsigned short const *,unsigned __int64,unsigned __int64 *);
long StringCchCatExW(unsigned short *,unsigned __int64,unsigned short const *,unsigned short * *,unsigned __int64 *,unsigned long);
long StringCchCatNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long StringCchCatW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCchCopyA(char *,unsigned __int64,char const *);
long StringCchCopyExA(char *,unsigned __int64,char const *,char * *,unsigned __int64 *,unsigned long);
long StringCchCopyExW(unsigned short *,unsigned __int64,unsigned short const *,unsigned short * *,unsigned __int64 *,unsigned long);
long StringCchCopyNExA(char *,unsigned __int64,char const *,unsigned __int64,char * *,unsigned __int64 *,unsigned long);
long StringCchCopyNExW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64,unsigned short * *,unsigned __int64 *,unsigned long);
long StringCchCopyNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long StringCchCopyW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCchLengthA(char const *,unsigned __int64,unsigned __int64 *);
long StringCchLengthW(unsigned short const *,unsigned __int64,unsigned __int64 *);
long StringCchPrintfA(char *,unsigned __int64,char const *,...);
long StringCchPrintfExW(unsigned short *,unsigned __int64,unsigned short * *,unsigned __int64 *,unsigned long,unsigned short const *,...);
long StringCchPrintfW(unsigned short *,unsigned __int64,unsigned short const *,...);
long StringCchVPrintfW(unsigned short *,unsigned __int64,unsigned short const *,char *);
long StringFromHgidWithoutBraces(_GUID const &,unsigned short * *);
long StringReadFromStream(IStream *,char *,unsigned int);
long StuffFormatInfoPtr(void *);
long SuccessResultFromWin32Handle(void *,void * *);
long SyncMgr_UnpackProgressBarVariant(tagPROPVARIANT *,unsigned int *,unsigned int *,unsigned long *);
long TResourceStringAllocCopyEx<unsigned short *>(HINSTANCE__ *,unsigned int,unsigned short,long (*)(void *,unsigned __int64,unsigned short * *),void *,unsigned short * *);
long TagLibraryWithUserSID(ILibraryDescription *,TLWUSFLAGS);
long TagLocationWithMachineGUID(TLWMGFLAGS,ILocationDescription *);
long TaskCondEval_COMCondition(INamedPropertyStore *,int *);
long TaskCondEval_ControlPanelExists(INamedPropertyStore *,int *);
long TaskCondEval_IsAuxDisplayConnected(INamedPropertyStore *,int *);
long TaskCondEval_IsAuxDisplayConnectedAndAutoWakeEnabled(INamedPropertyStore *,int *);
long TaskCondEval_IsBrightnessAvailable(INamedPropertyStore *,int *);
long TaskCondEval_IsConnectedToInternet(INamedPropertyStore *,int *);
long TaskCondEval_IsGlassOn(INamedPropertyStore *,int *);
long TaskCondEval_IsIrDASupported(INamedPropertyStore *,int *);
long TaskCondEval_IsMachineNotOnDomainAndDomainIsAvail(INamedPropertyStore *,int *);
long TaskCondEval_IsMachineOnDomain(INamedPropertyStore *,int *);
long TaskCondEval_IsMobilePC(INamedPropertyStore *,int *);
long TaskCondEval_IsMobilityCenterEnabled(INamedPropertyStore *,int *);
long TaskCondEval_IsMuiEnabled(INamedPropertyStore *,int *);
long TaskCondEval_IsOfflineFilesEnabled(INamedPropertyStore *,int *);
long TaskCondEval_IsParentalControlsAvailable(INamedPropertyStore *,int *);
long TaskCondEval_IsPenAvailable(INamedPropertyStore *,int *);
long TaskCondEval_IsPresentationSettingsEnabled(INamedPropertyStore *,int *);
long TaskCondEval_IsProjectionAvailable(INamedPropertyStore *,int *);
long TaskCondEval_IsProximityProviderAvailable(INamedPropertyStore *,int *);
long TaskCondEval_IsRemoteDesktop(INamedPropertyStore *,int *);
long TaskCondEval_IsServer(INamedPropertyStore *,int *);
long TaskCondEval_IsTabletPC(INamedPropertyStore *,int *);
long TaskCondEval_IsTouchAvailable(INamedPropertyStore *,int *);
long TaskCondEval_IsUserAdmin(INamedPropertyStore *,int *);
long TaskCondEval_RegkeyExists(INamedPropertyStore *,int *);
long TaskCondEval_RegvalEquals(INamedPropertyStore *,int *);
long TaskCondEval_RegvalExists(INamedPropertyStore *,int *);
long TaskCondEval_SkuEquals(INamedPropertyStore *,int *);
long TaskDialog_Logoff(HWND__ *,HINSTANCE__ *,int *,int *);
long TaskDialog_Restart(HWND__ *,HINSTANCE__ *,int *,int *);
long TaskDialog_Shutdown(HWND__ *,HINSTANCE__ *,int *,int *);
long TextToBinary(BINARY_TEXT_ENCODE_SCHEME,unsigned short const *,IStream *);
long TextToBlob2(unsigned short const *,unsigned int,tagBLOB *);
long TextToCondition(unsigned short const *,ICondition * *);
long TextWithLocaleToCondition(unsigned short const *,unsigned long,ICondition * *);
long TileDataLayerListener_CreateInstance(ITileDataLayerProvider *,ITileDataLayerListener * *);
long TileDataLayerLookup_CreateInstance(ITileDataLayerProvider *,_GUID,ITileDataLayerLookup * *);
long TopViewDescription_GetGroupByProperty(ITopViewDescription *,IShellItem *,_tagpropertykey *,int *);
long TranscodeImage(IShellItem *,bool,IStream *,unsigned int *,unsigned int *);
long TranslateCloneOrDefault(_ITEMIDLIST_ABSOLUTE const *,_GUID const &,_ITEMIDLIST_ABSOLUTE * *);
long TranslateCplCanonicalName(unsigned short const *,unsigned short *,unsigned int);
long TrimPrecedingWhiteSpaceAndNormalizeWhiteSpace(unsigned short const *,unsigned short * *);
long TryFileDataObject(_ITEMIDLIST_ABSOLUTE const *,unsigned int,_ITEMIDLIST_RELATIVE const * const *,IDataObject *,_GUID const &,void * *);
long TryShellExecuteHooks(_SHELLEXECUTEINFOW *);
long TryURLSearchHooks(unsigned short const *,unsigned short *,unsigned int,ISearchContext *);
long TryVirtualDiscImageDriveEject(void *,HWND__ *,bool *);
long UAQueryEntry(_GUID const *,unsigned short const *,tagUEMINFO *);
long UARegisterNotify(int (*)(void *,_GUID const *,unsigned short const *,tagUAEVENT),void *,int);
long UASetEntry(_GUID const *,unsigned short const *,tagUEMINFO *);
long UI1VectorToVariant(tagPROPVARIANT const *,tagVARIANT *);
long UShortAdd(unsigned short,unsigned short,unsigned short *);
long UnMarshalFromGIT(unsigned long,_GUID const &,void * *);
long UnalignedStringCbLengthW(unsigned short const *,unsigned __int64,unsigned __int64 *);
long UnalignedStringCchLengthW(unsigned short const *,unsigned __int64,unsigned __int64 *);
long UnpublishFromPublicationServices(_GUID const &,unsigned short const *);
long UnregisterAppForPushNotifications(unsigned short const *);
long UpdateAutoListInitFromTopViewDesc(ITopViewDescription *,IShellItem *,AUTOLISTINIT *);
long UpdateDestinationList(DestListItemType,CopyEngineAction,IObjectCollection *,IObjectCollection *,bool *);
long UpdateNamespaceUriItem(XMLPROP_ITEM *);
long UpdateStyle(HINSTANCE__ * *);
long UpdateWallpaperTransition(WALLPAPER_TRANSITION_TYPE,__int64);
long ValidateBitmapProportions(IWICBitmapSource *);
long ValidateItem(DestListItemType,HWND__ *,IShellItem *,IShellItem * *);
long ValidateThumbnailUrl(IPropertyStore *,unsigned short const *,unsigned short * *);
long VarTypeFromStringCch(unsigned short const *,int,unsigned short *);
long WICCreateCachedOrientedBitmapSource(IWICImagingFactory *,IWICBitmapSource *,IWICMetadataQueryReader *,IWICBitmapSource * *);
long WICCreateOrientedBitmapSource(IWICImagingFactory *,IWICBitmapSource *,IWICMetadataQueryReader *,IWICBitmapSource * *);
long WICGetTransformOptionFromMetadata(IWICMetadataQueryReader *,WICBitmapTransformOptions *);
long WICOrientateFrame(IWICImagingFactory *,IWICBitmapDecoder *,IWICBitmapFrameDecode *,bool,IWICBitmapSource * *);
long WWMenuCommand(unsigned short const *,unsigned long,HWND__ *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<ContentManagement::TargetedContent::TargetedContentCollection *>,Windows::Foundation::IAsyncOperation<ContentManagement::TargetedContent::TargetedContentCollection *> >(Windows::Foundation::IAsyncOperation<ContentManagement::TargetedContent::TargetedContentCollection *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Devices::Geolocation::Geoposition *>,Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition *> >(Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount *> *>,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount *> *> >(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount *> *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStreamWithContentType *>,Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType *> >(Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::UI::Popups::IUICommand *>,Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand *> >(Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand *> *,tagCOWAIT_FLAGS,void *);
long WaitForHomeGroupMachineToWake(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,unsigned short const *);
long WakeHomeGroupComputer(unsigned short const *);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IAsyncResetTaskCallback> > >(Microsoft::WRL::WeakRef,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IAsyncResetTaskCallback> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IObjectWithItem> > >(Microsoft::WRL::WeakRef,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IObjectWithItem> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IUnknown> > >(Microsoft::WRL::WeakRef,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IUnknown> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::UI::Xaml::Data::ICustomProperty> > >(Microsoft::WRL::WeakRef,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::UI::Xaml::Data::ICustomProperty> >);
long Wil_NtQueryWnfStateData(__WIL__WNF_STATE_NAME const *,__WIL__WNF_TYPE_ID const *,void const *,unsigned long *,void *,unsigned long *);
long Wil_RtlPublishWnfStateData(__WIL__WNF_STATE_NAME,__WIL__WNF_TYPE_ID *,void const *,unsigned long,void * const);
long Wil_RtlSubscribeWnfStateChangeNotification(__WIL__WNF_USER_SUBSCRIPTION * *,__WIL__WNF_STATE_NAME,unsigned long,long (*)(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long),void *,__WIL__WNF_TYPE_ID *,unsigned long,unsigned long);
long Wil_RtlUnsubscribeWnfNotificationWaitForCompletion(__WIL__WNF_USER_SUBSCRIPTION *);
long WriteOrderStreamToRegistry(IStream *,unsigned short const *);
long WritePropVariantForNamedEntity(tagPROPVARIANT const &,unsigned short const *,unsigned short const *,unsigned short *,unsigned __int64,unsigned short * *,unsigned __int64 *);
long WriteSizerValuesToStream(IStream *,int *,int *,int *,int *);
long WriteWallpaperStyleToReg(unsigned long);
long ZOrderManager_Create(IZOrderManager * *);
long ZOrderManager_GetForwardedMessage(unsigned int *);
long _AccountName2PictureName(unsigned short const *,unsigned short *,unsigned long);
long _ActivateApplicationForLaunchHelper(IApplicationActivationManagerPriv *,unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,ISplashScreen *,HMONITOR__ *,unsigned long *);
long _ActivateApplicationForLaunchHelperWithWindowFactory(IApplicationActivationManagerPriv *,unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,HMONITOR__ *,Windows::UI::Core::ICoreWindowFactory *,unsigned long *);
long _AddConditionAttribute(ICondition *,unsigned short const *);
long _AddEventHandlerToList(CAutoplayHandlerList *,unsigned short const *,unsigned short const *,unsigned long,int,_FILETIME const *);
long _AddEventHandlerToListEx(HKEY__ *,CAutoplayHandlerList *,unsigned short const *,unsigned short const *,unsigned long,int,_FILETIME const *,unsigned short const *);
long _AddHandlerToList(CAutoplayHandlerList *,unsigned short const *,unsigned short const *,unsigned long,int,_FILETIME const *,unsigned short const *);
long _AddItem(void *,unsigned short const *);
long _AddScopeForItem(IShellItem *,IScope *,unsigned short const *,SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,unsigned short const *);
long _AddScopeForLocation(ILocationDescription2 *,IScope *,IShellItem *,SCOPE_ITEM_DEPTH,SCOPE_ITEM_FLAGS,unsigned short const *);
long _AllocArray<unsigned short,CTCoAllocPolicy>(void *,unsigned long,unsigned __int64,unsigned short * *);
long _AllocArray<unsigned short,CTGlobalAllocPolicy>(void *,unsigned long,unsigned __int64,unsigned short * *);
long _AllocArray<unsigned short,CTLocalAllocPolicy>(void *,unsigned long,unsigned __int64,unsigned short * *);
long _AllocStringWithREGSAM(HKEY__ *,unsigned short const *,unsigned long,unsigned short * *);
long _AllocStringWorker<CTCoAllocPolicy>(void *,unsigned long,unsigned short const *,unsigned __int64,unsigned __int64,unsigned short * *);
long _AllocStringWorker<CTLocalAllocPolicy>(void *,unsigned long,unsigned short const *,unsigned __int64,unsigned __int64,unsigned short * *);
long _AndLoadFromFile(IUnknown *,unsigned short const *,unsigned long,_GUID const &,void * *);
long _AppendNext(unsigned short const *,unsigned short const *,unsigned short *,unsigned __int64,int,unsigned long,unsigned short * *,unsigned __int64 *);
long _ApplyPropertyChangesToItem(IShellItem *,IPropertyChangeArray *,ITransferAdviseSink *,IPropertyChangeArray * *);
long _ArePasteEffectsAvailable(IUnknown *,int,unsigned long,int *);
long _AssociationTypeToRegistrationCategoryNameNoAlloc(ASSOCIATIONTYPE,unsigned short const * *);
long _BindCtx_SetValue<_GUID>(IBindCtx *,unsigned short const *,_GUID);
long _BindCtx_SetValue<int>(IBindCtx *,unsigned short const *,int);
long _BindCtx_SetValue<unsigned short const *>(IBindCtx *,unsigned short const *,unsigned short const *);
long _BindUntilInterfaceAndConvNeeded(_ITEMIDLIST_ABSOLUTE const *,FOLDER_ENUM_MODE,_ITEMIDLIST_RELATIVE * *,_GUID const &,void * *);
long _BuildCacheIfNecessary(_GUID const &,int);
long _BuildDisplayIndex(DISPLAYCONFIG_PATH_INFO *,DISPLAYCONFIG_PATH_INFO *,unsigned int,CDSA<_AdapterInfo> *,int,unsigned int,bool,int *,int *);
long _CFPBindCtx(IUnknown *,ILCREATE_FLAGS,IBindCtx * *);
long _CanChangeSelection(IUnknown *,IShellItemArray *,int,int *);
long _CanCloseUDFSession(IUnknown *,IShellItemArray *,int,int *);
long _CanCloseWindow(IUnknown *,IShellItemArray *,int,int *);
long _CanDelete(IUnknown *,IShellItemArray *,int,int *);
long _CanEject(IUnknown *,IShellItemArray *,int,int *);
long _CanEmail(IUnknown *,IShellItemArray *,int,int *);
long _CanIncludeInLibrary(IUnknown *,IShellItemArray *,int,int *);
long _CanNewFolder(IUnknown *,IShellItemArray *,int,int *);
long _CanPaste(IUnknown *,IShellItemArray *,int,int *);
long _CanPasteLink(IUnknown *,IShellItemArray *,int,int *);
long _CanPlay(IUnknown *,IShellItemArray *,int,int *,WALK_CB_FLAGS);
long _CanPrint(IUnknown *,IShellItemArray *,int,int *);
long _CanRestoreWithHistoryVault(IUnknown *,IShellItemArray *,int,int *);
long _CanSendToCD(IUnknown *,IShellItemArray *,int,int *);
long _CanSetSelectMode(IUnknown *,IShellItemArray *,int,int *);
long _CanShowCompatibilityFiles(IUnknown *,IShellItemArray *,int,int *);
long _CanShowView(IUnknown *,IShellItemArray *,int,int *);
long _CanSlideShow(IUnknown *,IShellItemArray *,int,int *);
long _CanToggleClassicMenus(IUnknown *,IShellItemArray *,int,int *);
long _CheckAttribs(IUnknown *,IShellItemArray *,SHICOIA_FLAGS,unsigned long,unsigned long,int *);
long _CheckExistingNet(unsigned short const *,unsigned short const *,int);
long _CheckForControlledUsers(void *,int *);
long _CheckForMDMEnforcement(void *,int *);
long _CheckFormatAccessToDrive(int);
long _CheckNetUse(HWND__ *,unsigned short const *,unsigned int,unsigned short *,unsigned long);
long _CheckPortName(unsigned short const *);
long _CleanupName(unsigned short const *,unsigned short * *,unsigned short * *);
long _ComCatCacheFromDSA(_DSA *,unsigned char * *,unsigned long *);
long _ComputeThumbailIDFromRecoveryEntry(RECOVERY_ENTRY const *,WTS_THUMBNAILID *);
long _ControlHostHasFocus(CAppControlHost *);
long _ConvertFromSystemTime(_SYSTEMTIME const *,void *,SHTIME_FLAGS);
long _ConvertMultiToNavigationItem(IShellItem *,int,_GUID const &,void * *);
long _ConvertResolvedListToResolvedNames(_RESOLVED_USERNAME_LIST *,unsigned short *,unsigned long);
long _ConvertSidStringToPsidDpa(unsigned short *,unsigned short * *,CDPA<_SID,CTContainer_PolicyUnOwned<_SID> > *);
long _ConvertStringToColorProperty(_tagpropertykey const &,IPropertyStore *);
long _ConvertTimeZone(_SYSTEMTIME *,SHTIME_FLAGS,SHTIME_FLAGS);
long _ConvertToNavigationItem(IShellItem *,int,_GUID const &,void * *);
long _ConvertToSystemTime(void const *,SHTIME_FLAGS,_SYSTEMTIME *);
long _ConvertToViewResultItem(IShellItem *,int,_GUID const &,void * *);
long _CopyExe(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long _CopyOut(int,unsigned short const *,unsigned short *,unsigned long *);
long _CopyPropertyIfPresent(_tagpropertykey const &,unsigned short,IPropertyStore *,IPropertyStore *,bool);
long _CopyResource(unsigned short *,unsigned short *,unsigned int);
long _CopySimpleArray<CCoSimpleArray<ATL::CComPtr<IOperationStatusTilePriv>,4294967294,CSimpleArrayStandardCompareHelper<ATL::CComPtr<IOperationStatusTilePriv> > > >(CCoSimpleArray<ATL::CComPtr<IOperationStatusTilePriv>,4294967294,CSimpleArrayStandardCompareHelper<ATL::CComPtr<IOperationStatusTilePriv> > > const &,CCoSimpleArray<ATL::CComPtr<IOperationStatusTilePriv>,4294967294,CSimpleArrayStandardCompareHelper<ATL::CComPtr<IOperationStatusTilePriv> > > *);
long _CopyStreamUpdateProgress(IProgressDialog *,ITransferAdviseSink *,IFileOperationProgressSink *,unsigned __int64,unsigned __int64,unsigned __int64);
long _CreateAssocHandler(AHTYPE,unsigned short const *,unsigned short const *,CAssocHandler * *);
long _CreateCommandFromContextMenuItem(bool,HMENU__ *,IShellItem *,IContextMenu *,unsigned int,Windows::Internal::Storage::IItemCommand * *);
long _CreateCommandObject(_GUID const &,_GUID const &,void * *);
long _CreateDataObject(IDataObject * *);
long _CreateDateTimeConditionRange(_tagpropertykey const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,int,ICondition * *);
long _CreateDefaultAssociationObject(IShellFolder *,_ITEMID_CHILD const *,_GUID const &,void * *);
long _CreateFileSysBindCtx(IBindCtx *,_WIN32_FIND_DATAW const *,IBindCtx * *);
long _CreateFileSystemBindCtxFromOpenHandle(void *,unsigned short const *,IBindCtx * *);
long _CreateFromDll(unsigned short const *,_GUID const &,IUnknown *,_GUID const &,void * *);
long _CreateFromDllGetClassObject(long (*)(_GUID const &,_GUID const &,void * *),_GUID const &,IUnknown *,_GUID const &,void * *);
long _CreateFromModule(HINSTANCE__ *,_GUID const &,IUnknown *,_GUID const &,void * *);
long _CreateHistoryKeyForPackage(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,HKEY__ * *);
long _CreateIEnumIDListOnIDLists(_ITEMID_CHILD const * const *,unsigned int,unsigned int,IEnumIDList * *);
long _CreateLinkRetryDesktop(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,unsigned short *,unsigned long,unsigned int,_ITEMIDLIST_ABSOLUTE * *);
long _CreateMonikers(IShellItem * *,unsigned __int64,IMoniker * * *);
long _CreateOpenWithSimpleTaskItem(IUnknown *,IShellItemArray *,IContextMenu *,unsigned short const *,CSimpleTaskItem * *,unsigned int *);
long _CreateOpenWithUICommand(IAssocHandler *,IUICommand * *);
long _CreatePropertyBagBindCtx<_GUID>(IBindCtx *,unsigned short const *,_GUID,IBindCtx * *);
long _CreatePropertyBagBindCtx<unsigned long>(IBindCtx *,unsigned short const *,unsigned long,IBindCtx * *);
long _CreatePropertyValueFromImageStream(IStream *,bool,IInspectable * *);
long _CreateRecycleBinDirectory(unsigned short const *,int);
long _CreateScopeItemForLocation(IShellItem *,ILocationDescription *,IShellItem * *);
long _CreateSharedHandleACL(int,unsigned long,void * *);
long _CreateSharedHandleACLWorker(unsigned short const *,unsigned long,void * *);
long _CreateTypeAheadResultFromRowValues(ATL::CComVariant *,_GUID const &,void * *);
long _CreateUnresolvedConditionRange(_tagpropertykey const &,tagCONDITION_OPERATION,unsigned short const *,tagCONDITION_OPERATION,unsigned short const *,unsigned short const *,ICondition * *);
long _CreateUrlmonBindCtx(IBindCtx *,int,IBindCtx * *,IBindStatusCallback * *);
long _CreateUserFoldersObjectCollection(_GUID const &,void * *);
long _CreateUsersLibraryFolderSet(IUpdatableItemSetCallback *,IUpdatableItemSet * *);
long _DDE_EvaluateCommandLine(_DDECONV *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
long _DDE_RemapShare(_DDECONV *,unsigned short *,unsigned long);
long _DDE_SaveLink(_DDECONV *,unsigned short const *);
long _DSAFromComCatCache(unsigned char const *,unsigned long,_DSA * *);
long _DUI_CreateParserFromResourceNoCallback(HINSTANCE__ *,unsigned int,DEVICE_SCALE_FACTOR,DirectUI::DUIXmlParser * *);
long _DeletePerUserSMCDefaults();
long _DeleteRecycleBinDirectory(unsigned short const *,unsigned short const *);
long _DoDropOnClsid(_GUID const &,EXTCOCREATEFLAGS,IUnknown *,IShellItemArray *);
long _DoesBitmapHaveAlpha(HBITMAP__ *,bool *);
long _DoesVolumeMatchImage(unsigned short const *,_BY_HANDLE_FILE_INFORMATION,bool *,bool *);
long _DupWideToAnsi(unsigned short const *,char * *);
long _ElevationDialogCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
long _EnforceDefaultHandlerCannotAlsoBeNew(unsigned short const *,IAutoplayHandlerList *);
long _EnsureFolderTypeCache();
long _EnsureIntValueInStream(IStream *,int);
long _EnsureRecycleBinDesktopIni(unsigned short const *);
long _EnumerateBrowserApps(CSimpleCaseInsensitiveOrdinalStringArray &);
long _EnumerateBrowserProgIdsFromAppRegPath(HKEY__ *,unsigned short const *,unsigned short (&)[2][39]);
long _EnumerateGuids(IEnumGUID *,_DSA * *);
long _EscapeField(unsigned short const *,unsigned short * *);
long _EvaluateRelative(unsigned short const *,unsigned short *,unsigned long);
long _EvaluateUnquotedSpaces(unsigned short const *,int,long,unsigned short *,unsigned long,unsigned short const * *);
long _EvaluateUserCommandLine(unsigned short const *,unsigned short const *,unsigned short * *,unsigned short * *);
long _ExeFromCmd(unsigned short const *,EvaluateSystemCommandTemplateOptions,unsigned short * *);
long _ExecuteModernErrorDialog(HWND__ *,long,unsigned int,unsigned int);
long _ExportDefaultAssociations(CSimplePointerArrayCoTaskMem<AssociationElement,CSimpleArrayStandardCompareHelper<AssociationElement *> > &);
long _ExtactIconFromImage(bool,unsigned short const *,int,HICON__ * *);
long _FileDescToWin32FileData(_FILEDESCRIPTORW const *,_WIN32_FIND_DATAW *);
long _FileExists(unsigned short const *,unsigned long *);
long _FolderViewFromBrowserWindow(HWND__ *,_GUID const &,void * *);
long _FormatMessageFromId(int,unsigned short *,unsigned long,...);
long _GenerateUDFDesc(FORMATINFO *);
long _GetAccountProps(unsigned short const *,IPropertyStore * *);
long _GetAggregateFilterName(unsigned short * *,unsigned int,unsigned short * *);
long _GetAppIdFromProgId(unsigned short const *,unsigned short * *);
long _GetAppPathKey(unsigned short const *,ASSOCIATIONLEVEL,HKEY__ * *);
long _GetAppPathKeyHelper(HKEY__ *,unsigned short const *,HKEY__ * *);
long _GetAssocAt(IQueryAssociations *,unsigned long,unsigned short * *);
long _GetAssociationPath(unsigned short const *,bool,bool,unsigned short *,unsigned int);
long _GetAttributesFromFolderAndIDList(IShellFolder *,_ITEMIDLIST_RELATIVE const *,IBindCtx *,unsigned long,unsigned long *);
long _GetCCHMaxFromPath(unsigned short const *,int,int,int *);
long _GetCDVolumeNameStringFromIDList(_ITEMIDLIST_ABSOLUTE const *,unsigned short *,unsigned int);
long _GetCachedComputerDescription(unsigned short const *,unsigned short *,int);
long _GetCachedProperty(IPropertyStoreCache *,_tagpropertykey const &,GIPTYPE,int *,tagPROPVARIANT *);
long _GetCachedSTAObject(unsigned long,int *,CCachedSTAObject * *);
long _GetCaption(IDataObject *,unsigned short *,unsigned int);
long _GetClassicMenusState(IUnknown *,int *);
long _GetClipboard(IDataObject * *);
long _GetColumnAccessor(IRowset *,IAccessor *,unsigned int,unsigned short const * const *,unsigned __int64 *);
long _GetCommandFolder(IShellFolder * *);
long _GetComputerDescription(unsigned short const *,unsigned short *,unsigned long);
long _GetConnectedSidFromPropertyStore(IPropertyStore *,IIdentityStore *,unsigned short * *);
long _GetConnectedSids(_IdentityType,unsigned short * * *,unsigned long *);
long _GetContextMenuFromView(IUnknown *,SHICOIA_FLAGS,IContextMenu * *);
long _GetContextMenuOfFirstItem(IShellItemArray *,HWND__ *,IBindCtx *,IContextMenu * *);
long _GetCurrentOrLegacyCollection(IPublicationServicesListener *,_GUID const &,unsigned short const *,unsigned short const *,bool,unsigned short * *,IObjectArray * *);
long _GetCurrentViewPath(IUnknown *,unsigned short *,unsigned int);
long _GetDXPLaunchInfo(_GUID const &,unsigned short * *,int *);
long _GetDefaultGuestPictureBytes(void * *,unsigned long *,unsigned short *,unsigned long);
long _GetDefaultHandler(AUTOPLAY_DEFAULT_TYPE,unsigned short const *,unsigned short const *,unsigned short * *);
long _GetDefaultHandlerLastWriteTime(AUTOPLAY_DEFAULT_TYPE,unsigned short const *,unsigned short const *,_FILETIME *,unsigned short * *);
long _GetDefaultUserPictureBytes(void * *,unsigned long *,unsigned short *,unsigned long);
long _GetDelegateItem(IItem *,IShellItem * *);
long _GetDropTargetFromUnknown(IUnknown *,IDropTarget * *);
long _GetEnumBindCtx(IViewStateInfo *,IItemFilter *,unsigned int,IBindCtx * *);
long _GetEnumProperties(IViewStateInfo *,IItemFilter *,IPropertyKeyStore * *);
long _GetEnumerator(_ITEMIDLIST_ABSOLUTE const *,HWND__ *,unsigned long,IBindCtx *,IUnknown *,IViewStateInfo *,IItemFilter *,unsigned int,IEnumIDList * *,_GUID *);
long _GetExeFromQuerySource(IQuerySource *,unsigned short * *);
long _GetFastValueForItem(IShellItem *,_tagpropertykey const &,tagPROPVARIANT *);
long _GetFileNameFromBrowsePszOnly(HWND__ *,unsigned short *,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int);
long _GetFileTypeName(unsigned short *,unsigned short * *);
long _GetFolderTypeDescription(_GUID,IFolderTypeDescription * *);
long _GetFoldersForKey(unsigned short const *,unsigned short const *,unsigned short * * *,unsigned long *);
long _GetHDROPFromData(tagSTGMEDIUM *,unsigned short *,unsigned int);
long _GetHostUrl(unsigned short const *,unsigned short *,unsigned long);
long _GetIDListFromObject(IUnknown *,_ITEMIDLIST_ABSOLUTE * *);
long _GetIDListFromObjectWorker(IUnknown *,_ITEMIDLIST_ABSOLUTE * *);
long _GetILIndexFromItem(IShellFolder *,_ITEMID_CHILD const *,unsigned int,int *);
long _GetILIndexGivenPXIcon(PXICONPARAMS *,int *);
long _GetIconPath(IShellItem *,unsigned short * *);
long _GetImageBytes(unsigned short const *,void * *,unsigned long *);
long _GetIsLocalUnsupportedFileSystem(CMountPoint *,int *,unsigned short *,unsigned long);
long _GetItemCountWithOption(IShellItemArray *,ARRAY_LINK_RESOLUTION_BEHAVIOR,unsigned long *);
long _GetItemFromObjectWorker(IUnknown *,_GUID const &,void * *);
long _GetKeysInConditionWorker(ICondition *,IPropertyKeyStore *);
long _GetLanguageResourcePool(_GUID const &,void * *);
long _GetLinkTargetFromLink(IShellItem *,IBindCtx *,_ITEMIDLIST_ABSOLUTE * *);
long _GetLocalizableItemFromPath(unsigned short const *,_GUID const &,void * *);
long _GetMachineDefault(HKEY__ *,UCTYPE,unsigned short const *,unsigned short * *);
long _GetManifestedAppAssociation(unsigned short const *,ASSOCIATIONTYPE,ASSOCIATIONLEVEL,unsigned short const *,unsigned short * *);
long _GetMediaTypeFlags(IPropertyBag *,WALK_CB_FLAGS *);
long _GetMenuItemString(HMENU__ *,unsigned int,unsigned short * *);
long _GetMuiStringFromApplicationsRegistration(unsigned short const *,unsigned short const *,unsigned short * *);
long _GetNextToken(unsigned short const *,int,PARSE_TOKEN_TYPE *,unsigned short * *,unsigned short const * *);
long _GetNonEmptyPropertyDescriptionList(IShellItemArray *,_tagpropertykey const &,IPropertyDescriptionList * *);
long _GetOneRecycleItem(IRecycle *,IShellItem * *);
long _GetOrCreateFolderTypeDescription(_GUID,_GUID const &,void * *);
long _GetPathAndArgs(LINKPROP_DATA *,unsigned short *,unsigned int,unsigned short *,unsigned int);
long _GetPathOfFolder(IUnknown *,unsigned short * *);
long _GetPersistedFrame(IStream *,_PersistedFrame *,_ITEMIDLIST_ABSOLUTE * *);
long _GetPicture(int,unsigned short const *,_USER_PICTURE_ELEMENTS const *,unsigned long,unsigned char const * *,unsigned long *,unsigned short const * *);
long _GetPidlIcon(_ITEMIDLIST_ABSOLUTE const *,int *,int *);
long _GetPreviewerName(_GUID const &,unsigned short *,unsigned int);
long _GetPrintPropertyBag(FINDPRINTERINFO const *,IPropertyBag * *);
long _GetPropStoreForKeys(IShellItem2 *,IPropertyKeyStore *,IPropertyStore * *);
long _GetPropertyFilterFromIDList(_ITEMIDLIST_ABSOLUTE const *,_tagpropertykey const &,unsigned int *,IFilterCondition * *);
long _GetPropertyStore(IShellItem *,IPropertyChangeArray *,ITransferAdviseSink *,IPropertyStore * *);
long _GetRecommededAndRegisteredApps(unsigned short const *,unsigned short * *,int *);
long _GetRecommendedApp(unsigned short const *,unsigned short * *);
long _GetReconcilerCLSIDForItem(IShellItem *,_GUID *);
long _GetRecycleBinSecurityDescriptor(void * *);
long _GetRegKeyLastWriteTime(IQuerySource *,unsigned short const *,_FILETIME *);
long _GetSaveDialogThumbnailTarget(IUnknown *,_ITEMIDLIST_ABSOLUTE * *);
long _GetScopeItemName(IScopeItem *,_SIGDN,_tagpropertykey,unsigned short * *);
long _GetSecurityZoneChecker(ISecurityZoneChecker * *,ISecurityZoneChecker * *);
long _GetServerInfo(unsigned short const *,_GUID const &,unsigned short *,unsigned int,int *);
long _GetSharingPreferencesForKey(unsigned short const *,bool,HOMEGROUP_SHARING_SETTINGS *,HOMEGROUP_USER_SHARING_STATES *);
long _GetShortcutPath(IPropertyStore *,unsigned short const *,ICachedFolderPath * *,GET_SHORTCUT_PATH_FLAGS,unsigned short * *);
long _GetSortStatusAndFirstSortColumnFromSite(IUnknown *,int *,SORTCOLUMN *);
long _GetStaticKey(STATICKEY_ const *,unsigned short const *,STATICKEY_ const * *);
long _GetStorageInterfaceFromUnknown(IUnknown *,_storageinterface *);
long _GetStorageTypeForOpenVirtualDisk(DISC_IMAGE_TYPE_FLAGS,_VIRTUAL_STORAGE_TYPE *);
long _GetText(tagSTGMEDIUM *,unsigned short *,unsigned int);
long _GetThumbnailHandlerAndStreamFromUrl(IShellItem *,unsigned short const *,IStream * *,_GUID const &,void * *);
long _GetUnicodeText(tagSTGMEDIUM *,unsigned short *,unsigned int);
long _GetUnwrappedItem(IShellFolder *,_ITEMID_CHILD const *,_ITEMIDLIST_ABSOLUTE * *,IShellFolder * *,_ITEMID_CHILD * *);
long _GetValueFromPersistentAppInfoCache(unsigned short const *,unsigned short const *,unsigned short * *);
long _GetViewModeAndIconSizeFromSite(IUnknown *,FOLDERVIEWMODE *,int *);
long _GetViewSettingsFromSite(IUnknown *,_GUID const &,void * *);
long _GetVirtualDriveHandleAndLockedState(unsigned short const *,void * *,bool *);
long _GetVolumeNameForDriveIndex(int,unsigned short *,unsigned int);
long _GetVolumeNameForVolumeMountPoint(unsigned short const *,unsigned short *,unsigned long);
long _GetVolumeNameFromMountPoint(CMountPoint *,unsigned short *,unsigned int);
long _GetWholePropertyCondition(ICondition *,IConditionFactory2 *,_GUID const &,void * *);
long _GetWpnPlatform(IWpnPlatform * *);
long _GetsRGBTransformer(IWICBitmapFrameDecode *,IWICBitmapSource *,IWICImagingFactory *,IWICColorTransform * *);
long _IDControlCreateA(char const *,int,char const *,char const *,_ITEMID_CHILD * *);
long _IDControlCreateW(unsigned short const *,int,unsigned short const *,unsigned short const *,bool,_ITEMID_CHILD * *);
long _ILCombineAndFree(_ITEMIDLIST_RELATIVE *,_ITEMIDLIST_RELATIVE *,_ITEMIDLIST_RELATIVE * *);
long _IShellItem_ExecuteAsync(IShellItem *,unsigned short const *);
long _IncrementGlobalAssocChangedCounter(HKEY__ *);
long _InitPropVariantFromParsedString(unsigned short const *,tagPROPVARIANT *);
long _InitPropVariantFromParsedUI1String(unsigned short const *,tagPROPVARIANT *);
long _InitSysImageLists(tagSIZE const * const,unsigned int);
long _InitializeDUIFrameClasses();
long _InitializeTrustedInstallerSid();
long _InvokeCommandOnChildIDs(HWND__ *,IUnknown *,IShellFolder *,_ITEMID_CHILD const * const *,unsigned int,unsigned int,unsigned int,char const *,unsigned short const *);
long _InvokeDefaultBrowserSearch(unsigned short const *);
long _InvokeInternetSearchExtension(unsigned short const *,HWND__ *);
long _InvokeSpecificContextMenuVerb(_GUID const &,char const *,IShellItemArray *,IUnknown *);
long _IsAutoPlayType(unsigned short const *,unsigned short const *,int *);
long _IsCDInLiveFileSystemMode(IUnknown *,int *);
long _IsCopyMoveToAllowed(IShellItemArray *,int,bool,unsigned long *);
long _IsFileSystemDestination(IShellItem *,bool *);
long _IsItemJunction(IDataObject *,_GUID const &,int);
long _LUAIsElevatedToken(void *,bool *,bool *);
long _LaunchSearch(HWND__ *,IUnknown *,_ITEMIDLIST_ABSOLUTE const *);
long _LoadDefaultAssociationsXml(IStream *,CSimplePointerArrayCoTaskMem<AssociationElement,CSimpleArrayStandardCompareHelper<AssociationElement *> > &);
long _LoadRegIndirectString(HKEY__ *,unsigned short const *,unsigned short *,unsigned int);
long _LoadShellDefaultVerbCommand(unsigned short const *,unsigned short * *);
long _LoadStorage(_storageinterface *,IShellItem *);
long _LoadUSRegUIString(void *,unsigned short const *,unsigned short *,unsigned int);
long _LoadVersionInfo(unsigned short const *,unsigned long,void * *);
long _LockStore(int,void * *);
long _LookupFileClassString(unsigned short const *,int,unsigned short *,unsigned long);
long _MakeBurnerDrivesCbxItem(CBXITEM *,_ITEMIDLIST_ABSOLUTE const *);
long _MakeComCatCacheKey(_GUID const &,unsigned short *,unsigned long);
long _MakeLocalDrivesCbxItem(CBXITEM *,_ITEMIDLIST_ABSOLUTE const *);
long _MakeUniqueNameFormat(unsigned short const *,unsigned short *,int);
long _MimeTypeSet(unsigned short const *,unsigned short const *);
long _MouseWheel(IUnknown *,int);
long _OnAddRemovePrograms(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnChooseProgram(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnCloseUDFSession(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnCloseWindow(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnCompatibilityFiles(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnDefaultVerb(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnDelete(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnEject(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnEmail(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnIncludeInLibrary(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnInvertSelection(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnNewFolder(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnOpenSearchViewSite(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnOpenWith(IUnknown *,IUnknown *,IShellItemArray *,IBindCtx *);
long _OnPlay(IUnknown *,IShellItemArray *,IBindCtx *,WALK_CB_FLAGS,char const *,unsigned long,EXPLORER_COMMAND_SQM_ID,NAMESPACEWALKFLAG);
long _OnPlayMusic(IUnknown *,IShellItemArray *,IBindCtx *,EXPLORER_COMMAND_SQM_ID,NAMESPACEWALKFLAG);
long _OnPrint(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnRename(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnRestoreDefault(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnSaveSearch(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnSearchFiles(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnSelectAll(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnSelectMode(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnSelectNone(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnSendToCD(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnSlideShow(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnStartNewSearch(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnToggleClassicMenus(IUnknown *,IShellItemArray *,IBindCtx *);
long _OnToggleView(IUnknown *,IShellItemArray *,IBindCtx *);
long _OpenStaticSource(STATICKEY_ const *,unsigned short const *,IQuerySource * *);
long _OpenWithDialogImmersive(HWND__ *,_openasinfo const *);
long _ParsePolicies(unsigned long,_tagEASPolicy *,_tagPasswordPolicies *,unsigned long *,unsigned long *,int *);
long _PathAppend(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,unsigned short const *);
long _PathExeExists(unsigned short *);
long _PathFindInFolder(_GUID const &,unsigned short const *,unsigned short *,unsigned __int64);
long _PathFindInSystem(unsigned short const *,unsigned short *,unsigned __int64);
long _PerformCopyMove(_ITEMIDLIST_ABSOLUTE const *,HWND__ *,bool,IDataObject *,IUnknown *);
long _PerformRename(HWND__ *,IUnknown *,IShellItem *,unsigned short const *,unsigned long,FOLDER_ENUM_MODE,_ITEMID_CHILD * *);
long _PidlAndNameFromUnk(IUnknown *,_ITEMIDLIST_ABSOLUTE * *,tagPROPVARIANT *);
long _PopulateBurnerDrivesCB(_ITEMIDLIST_ABSOLUTE const *,void *);
long _PopulateConstituentItems(IShellItem *,HANDLERINFO *);
long _PopulateDrivesCombo(long (*)(_ITEMIDLIST_ABSOLUTE const *,void *),HWND__ *,long (*)(unsigned long,CBXITEM *,__int64),__int64);
long _PopulateLocalDrivesCB(_ITEMIDLIST_ABSOLUTE const *,void *);
long _PrepareNameForRename(HWND__ *,unsigned short *);
long _PropVariantFromFilterCondition(IFilterCondition *,tagPROPVARIANT *);
long _PropertiesForPidl(HWND__ *,_ITEMIDLIST_ABSOLUTE const *,unsigned short const *,tagPOINT);
long _QueryAppIsHidden(HKEY__ *,unsigned short const *,int *);
long _QueryConnectionAndDisplayState(IUnknown *,IShellItemArray *,tagOFFLINEFILES_CONNECT_STATE *,tagOFFLINEFILES_OFFLINE_REASON *,int *);
long _QueryConnectionAndDisplayStateFromItem(IShellItem *,tagOFFLINEFILES_CONNECT_STATE *,tagOFFLINEFILES_OFFLINE_REASON *,int *);
long _QueryConnectionStateFromItem(IShellItem *,tagOFFLINEFILES_CONNECT_STATE *,tagOFFLINEFILES_OFFLINE_REASON *);
long _QueryCurrentHKCUMachineDefault(unsigned short const *,ASSOCIATIONTYPE,unsigned short * *);
long _QueryCurrentHKLMMachineDefault(unsigned short const *,ASSOCIATIONTYPE,unsigned short * *);
long _QueryCurrentUserDefault(unsigned short const *,ASSOCIATIONTYPE,unsigned short * *);
long _QuerySourceCreateFromKey(HKEY__ *,unsigned short const *,int,IQuerySource * *);
long _QuerySourceCreateFromKey2(HKEY__ *,unsigned short const *,unsigned short const *,IQuerySource * *);
long _QueryStartMenuClient(HKEY__ *,unsigned short const *,unsigned short * *);
long _QuerySyncStateFromSite(IUnknown *,unsigned long *);
long _ReadAssociationElement(IXmlReader *,AssociationElement *);
long _ReadClassesOfCategory(_GUID const &,_DSA * *,unsigned short const *);
long _ReadDefaultAssociationsElement(IXmlReader *,CSimplePointerArrayCoTaskMem<AssociationElement,CSimpleArrayStandardCompareHelper<AssociationElement *> > &);
long _ReadFailOnWrongSize(IStream *,void *,unsigned long);
long _ReadPolicies(void *,unsigned long *,_tagEASPolicy * *);
long _ReadSizerValuesFromStream(IStream *,int *,int *,int *,int *,int);
long _ReapplyUserAssociationsXml(IStream *,bool);
long _RegForEachValue(_GUID const &,HKEY__ *,unsigned short const *,void (*)(_GUID const &,HKEY__ *,unsigned short const *,void *),void *);
long _RegSetVolatileString(HKEY__ *,unsigned short const *,unsigned short const *);
long _RegValueToVariant(unsigned long,unsigned long,unsigned char const *,tagPROPVARIANT *);
long _ReplaceDesktopShellItem(IShellItem *,IShellItem * *);
long _ResolveIDListFilters(IItemFilter *,IObjectCollection * *);
long _ResolveItemArray(IShellItemArray *,IUnknown *,ARRAY_LINK_RESOLUTION_BEHAVIOR,IShellItemArray * *);
long _RetrieveStreamNames(void *,unsigned char * *,unsigned long *);
long _SHCoCreateInstance(_GUID const &,IUnknown *,unsigned long,int,EXTCOCREATEFLAGS,_GUID const &,void * *);
long _SHMapIDListToSystemImageListIndex(IShellFolder *,_ITEMID_CHILD const *,unsigned int,int *,int *);
long _SaveDefaultAssociations(unsigned short const *,CSimplePointerArrayCoTaskMem<AssociationElement,CSimpleArrayStandardCompareHelper<AssociationElement *> > &);
long _SaveImageWithWIC(IWICImagingFactory *,IWICBitmapSource *,_GUID const &,unsigned short const *,IStream *);
long _SaveStorage(_storageinterface *);
long _ScaleBitmap(HBITMAP__ *,unsigned int,HBITMAP__ * *);
long _ScaleUserTile(IWICImagingFactory *,HBITMAP__ *,tagSIZE,WTS_CONTEXTFLAGS,HBITMAP__ * *);
long _SetAppAsDefaultForGivenCategoryByType(unsigned short const *,HKEY__ *,ASSOCIATIONTYPE);
long _SetAssociation(unsigned short const *,unsigned short const *,ASSOCIATIONTYPE,unsigned short const *);
long _SetDefaultHandler(AUTOPLAY_DEFAULT_TYPE,unsigned short const *,unsigned short const *,unsigned short const *);
long _SetDeletePrivilegeOnFile(unsigned short const *,void *);
long _SetDialogElement(DirectUI::Element *,unsigned short const *,unsigned short const *);
long _SetElement(DirectUI::Element *,unsigned short const *,unsigned int);
long _SetElement(DirectUI::Element *,unsigned short const *,unsigned short const *);
long _SetLowRightsSACL(HKEY__ *);
long _SetPreferredDropEffect(IDataObject *,unsigned long);
long _SetQueryText(IUnknown *,ISearchProtocolUrl *);
long _SetSearchInfoFromSavedSearch(_ITEMIDLIST_ABSOLUTE const *,ISearchProtocolUrl *);
long _SetString(ICachedPrivateProfile *,unsigned short const *,unsigned short const *,unsigned short const *,int);
long _SetTakeOwnershipPrivilege(void *);
long _SetUserChoiceAndHash(unsigned short const *,unsigned short const *,bool);
long _SetViewModeAndIconSizeForSite(IUnknown *,FOLDERVIEWMODE,int);
long _SetWindowCaption(HWND__ *,unsigned int);
long _SetWindowCaptionWithProgress(HWND__ *,unsigned int,unsigned int,unsigned int);
long _ShellExecuteRegAppWithJobObject(unsigned short const *,RRA_FLAGS,IUnknown *);
long _ShellExecuteRegAppWorker(unsigned short const *,RRA_FLAGS,IUnknown *);
long _ShowElevationDialog(HWND__ *);
long _ShowUnindexableHelpCallback(HWND__ *,unsigned int,unsigned __int64,__int64,__int64);
long _SimpleOpCompareResult(int,tagCONDITION_OPERATION,int,int *);
long _SimpleOpCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,tagCONDITION_OPERATION,int,int *);
long _StartDirectAutoPlay(unsigned short const *);
long _StartMenuClientSet(unsigned short const *,unsigned short const *);
long _StgMakeUniqueNameWithCount(IStorage *,unsigned short const *,int,unsigned long,_GUID const &,void * *);
long _TakeDeletePrivilegeOnFile(unsigned short const *);
long _ThunkICIX(_CMINVOKECOMMANDINFOEX *,void * *);
long _TransformVolumeRootAndTargetForOperation(IShellItem *,IShellItem *,IUnknown * *,IShellItem * *);
long _TranslateMRTStringToAbsoluteFilePath(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
long _TrayLoadInProc(_GUID const &,LIPF_FLAGS);
long _UnpublishInternal(IPublicationServicesPublisher *,_GUID const &,unsigned short const *);
long _ValidateHandlerRegistration(_GUID const &);
long _ValidateRecycleBinDirAces(_ACL *);
long _ValidateRecycleBinDirSecurity(unsigned short const *);
long _ValidateRecycleBinDirectory(unsigned short const *,unsigned short const *,int);
long _VerifyIID(_GUID const &);
long _WriteClassesOfCategories(unsigned long,_GUID const *,unsigned long,_GUID const *,int);
long _WriteClassesOfCategory(_GUID const &,int);
long _WriteFailOnWrongSize(IStream *,void const *,unsigned long);
long _WriteUnresolvedDateTime(tagPROPVARIANT const &,int,unsigned short *,unsigned long);
long _myVariantClear(tagPROPVARIANT *);
long g_bPurging;
long g_cTLSChkDskThreadData;
long g_lMenuPopupTimeout;
long g_lRestrictionsVersionNumber;
long s_AddRow(DirectUI::Element *,_tagpropertykey const &,tagPROPVARIANT const &,bool,DirectUI::DUIXmlParser *,bool);
long s_AuthorizeShortcutInAppResolver(unsigned short const *,unsigned short const *);
long s_CreateAndPinItemImpl(CMarshaledInterface &,CMarshaledInterface &,bool);
long s_FillPreviewPaneCount(DirectUI::Element *,unsigned long,unsigned long,DirectUI::DUIXmlParser *);
long s_GetNonFileSystemTargetPathFromLink(IShellLinkW *,unsigned short * *);
long s_GetProfile(bool,ICachedPrivateProfile * *);
long s_GetProfilePath(unsigned short *);
long s_GetShellLinkAndRelativeNameFromItem(CMarshaledInterface &,IShellLinkW * *,unsigned short * *,unsigned short * *,unsigned short * *);
long s_GetShellLinkAndRelativeNameFromLink(CMarshaledInterface &,IShellLinkW * *,unsigned short * *,unsigned short * *,unsigned short * *);
tagPERCEIVED GetPerceivedType(IShellFolder *,_ITEMID_CHILD const *);
tagPOINT DUI_GetLocation(DirectUI::Element *,DUI_COORDINATES_SYSTEM);
tagSIZE DUI_GetContentStringSize(HDC__ *,DirectUI::Element *);
tagSIZE DUI_GetElementExtent(DirectUI::Element *);
tagSIZE DUI_GetNonClippedContentStringSize(HDC__ *,DirectUI::Element *,int,int);
tagSIZE g_sButton;
tagSIZE g_sDefaultDropDown;
tagSIZE g_sSlider;
unsigned __int64 CalculateHashKey(unsigned __int64,unsigned char const *,unsigned int);
unsigned __int64 GetDefaultMaxCapacity(unsigned __int64);
unsigned __int64 GetFileSizeOnDisk(_WIN32_FIND_DATAW const *,unsigned short const *);
unsigned __int64 GetGranularityForEstimate(unsigned __int64);
unsigned __int64 GetMaxVolumeLabelLength(unsigned short const *);
unsigned __int64 SHGetSize(void *);
unsigned __int64 _GetFileInfoSections(_ITEMIDLIST_ABSOLUTE const *,_SHFILEINFOW *,unsigned int);
unsigned __int64 _GetVolumeLimit(unsigned short const *);
unsigned __int64 g_nTimer;
unsigned char FormatCallback(_FMIFS_PACKET_TYPE,unsigned long,void *);
unsigned int * GetDDECommands(unsigned short *,_DDECOMMANDINFO const *,int);
unsigned int * g_rguSnapSpots;
unsigned int CalculateZobelHash(void const *,unsigned __int64);
unsigned int ColumnCharacterWidth(IFolderView2 *);
unsigned int ConfirmUninstall(unsigned short const *);
unsigned int DUI_GetChildElementCount(DirectUI::Element *);
unsigned int DUI_GetDTFormatFlags(DirectUI::Element *,CONTENTALIGNTODTOPTIONS,DUI_COORDINATES_SYSTEM);
unsigned int DataObj_GetHIDACount(IDataObject *);
unsigned int FileClassCalculateHashKeyCallback(unsigned char const *,unsigned int,unsigned int);
unsigned int FilePrshtCallback(HWND__ *,unsigned int,_PROPSHEETPAGEW *);
unsigned int FindInDecoderList(Gdiplus::ImageCodecInfo *,unsigned int,unsigned short const *);
unsigned int GetMenuIndexForCanonicalVerb(HMENU__ *,IContextMenu *,unsigned int,unsigned short const *);
unsigned int GetNLSGrouping();
unsigned int GetSQMIDForPKEY(_tagpropertykey const &);
unsigned int GetSQMIDForTopViewFromSite(IUnknown *);
unsigned int GetThumbnailCutoffFromType(unsigned short const *);
unsigned int GetWideThumbnailHeightFromWidth(unsigned int);
unsigned int GetWideThumbnailWidthFromHeight(unsigned int);
unsigned int HDXA_QueryContextMenu(_DSA *,IDataObject *,unsigned int,HKEY__ * * const,ATL::CComPtr<IAssociationElement> * const,_ITEMIDLIST_ABSOLUTE const *,_QCMINFO *,unsigned int,_DCA *,unsigned int * const,IUnknown *);
unsigned int IItemCollection_GetItemCountCached(IItemCollection *);
unsigned int ILGetSizeAndDepth(_ITEMIDLIST_RELATIVE const *,unsigned long *);
unsigned int IListControl_GetItemCount(IListControl *,tagLC_ITEM_SET_TYPE);
unsigned int IViewSettings_GetLogicalImageSize(IViewSettings *);
unsigned int PropCtrlToDrawTextFlags(int,HDC__ *);
unsigned int ReadICOHeader(void *);
unsigned int SetupAndRunPropertySheet(unsigned int);
unsigned int ShowAdminInfoUrlIfConfigured(HWND__ *,unsigned short const *);
unsigned int ToolBar_GetVisibleCount(HWND__ *);
unsigned int _FillEnumForProtocolByAppAssocReg(ASSOC_FILTER,unsigned short const *,CProgidArray const &,CEnumProtocolHandlers *);
unsigned int _GetFileFolderMatchForSQM(IShellItem *);
unsigned int _GetKnownFolderMatchForSQMFromItem(IShellItem *);
unsigned int _GetSQMMatchFromScopeItem(IShellItem *);
unsigned int _LinkPrshtCallback(HWND__ *,unsigned int,_PROPSHEETPAGEW *);
unsigned int _StartMenuOrSearchConnectorSQMMatchFromItem(IShellItem *,IUnknown *);
unsigned int g_cDirectUIDeferred;
unsigned int g_cDirectUIInitialized;
unsigned int g_cTicksExtCount;
unsigned int g_ieh;
unsigned int g_msgActivateDesktop;
unsigned int g_nMBActivate;
unsigned int g_nMBAutomation;
unsigned int g_nMBDragCancel;
unsigned int g_nMBExecute;
unsigned int g_nMBFullCancel;
unsigned int g_nMBOpenChevronMenu;
unsigned int g_nMBPopupOpen;
unsigned long * g_rgRestrictionItemValues;
unsigned long AddDeviceInterface(void *,_GUID const *);
unsigned long BuildAccountSidFromRid(unsigned long,void * *);
unsigned long CalcBitmapSize(tagBITMAPINFO const *);
unsigned long CheckDiskSpaceThreadProc(void *);
unsigned long CheckRunInSeparateThreadProc(void *);
unsigned long CloseWindowsDialog(HWND__ *,int,unsigned long);
unsigned long CreateItemHandlerCacheThreadProc(void *);
unsigned long DUI_GetForegroundColor(DirectUI::Element *);
unsigned long DataObj_GetDWORD(IDataObject *,unsigned int,unsigned long);
unsigned long DeleteItemsThreadProc(void *);
unsigned long DrvSizeThreadProc(void *);
unsigned long DrvSizeThread_AddRefCallBack(void *);
unsigned long DummyThreadProc(void *);
unsigned long ECFAddRef(IClassFactory *);
unsigned long ECFRelease(IClassFactory *);
unsigned long EffectFromFileType(IDataObject *);
unsigned long FindMatchingDeviceInfoData(void *,unsigned long,_DO_DEVINFO_DATA *);
unsigned long FirstHardwareEnumThreadProc(void *);
unsigned long FormatThreadProc(void *);
unsigned long GetAttributesFromItem(IShellItem *,unsigned long);
unsigned long GetColorFromValue(DirectUI::Element *,DirectUI::PropertyInfo const *,int);
unsigned long GetColorFromValue(DirectUI::Value *);
unsigned long GetCurrentSessionId();
unsigned long GetDDEAppFlagsFromWindow(HWND__ *);
unsigned long GetDeviceProperty(void *,_DO_DEVINFO_DATA *,_DEVPROPKEY const &,unsigned long *,unsigned long *,unsigned char * *);
unsigned long GetFileAttributesFromSFGAOFlags(unsigned long);
unsigned long GetHomeGroupWakeTimeout();
unsigned long GetKeyStateFlagsFromKeyState();
unsigned long GetLastErrorError();
unsigned long GetLumColor(int,int);
unsigned long GetModuleTargetArchitecture(unsigned short const *);
unsigned long GetParentDevice(void *,_DO_DEVINFO_DATA *,_DO_DEVINFO_DATA *);
unsigned long GetParentHubPortNumber(void *,_DO_DEVINFO_DATA *,unsigned short *);
unsigned long GetQueryId(unsigned short const *);
unsigned long GetRandomInt(unsigned long);
unsigned long GetRegColor(unsigned long,unsigned short const *,unsigned long *);
unsigned long GetSymbolicLinkDevice(void *,_GUID const *,_DO_DEVINFO_DATA *,unsigned short * *);
unsigned long GetSystemNormalization();
unsigned long GetSystemPreferredLocale();
unsigned long GetTileBackgroundColorForItem(IShellItem *);
unsigned long GetUNCPathSpeed(unsigned short const *);
unsigned long GetViewOptionsForDispatch();
unsigned long GetVolumeFlagsFromHandle(void *);
unsigned long IShellItem_GetItemOfflineStatus(IShellItem *);
unsigned long IndexForSize(unsigned long,int);
unsigned long IsDeviceAHub(void *,_DO_DEVINFO_DATA *,unsigned char *);
unsigned long IsDeviceExternal(void *,_DO_DEVINFO_DATA *,unsigned char *);
unsigned long IsVolumeOnUSBDisk(unsigned short,unsigned char *);
unsigned long LocaleNameToLCIDWithFallback(unsigned short const *,unsigned long);
unsigned long MakeConnectionThreadProc(void *);
unsigned long MapImapiDriveProfilesToHWDDC(_IMAPI_PROFILE_TYPE *,unsigned long);
unsigned long MapImapiMediaTypeToHWDMC(_IMAPI_MEDIA_PHYSICAL_TYPE);
unsigned long MessagePumpThreadProc(void *);
unsigned long MountThreadProc(void *);
unsigned long MySHRegEnumHKCUHKLMKey(HKEY__ *,HKEY__ *,unsigned long,unsigned short *,unsigned long *);
unsigned long ReadStartPageSetting(unsigned short const *,unsigned long);
unsigned long ReadTransitionAnimationDuration();
unsigned long RegGetSoftLandingDWORDWithDefault(unsigned short const *,unsigned long);
unsigned long RegGetStringAndRealloc(HKEY__ *,unsigned short const *,unsigned short * *,unsigned long *);
unsigned long RegTreeType(unsigned short const *);
unsigned long SHDeleteProtectedValue(HKEY__ *,unsigned short const *,unsigned short const *,int);
unsigned long SHGetAttributesWithBindCtx(IShellFolder *,_ITEMIDLIST_RELATIVE const *,IBindCtx *,unsigned long);
unsigned long SHIsExplorerIniChange(unsigned __int64,__int64);
unsigned long SHProcessMessagesUntilEvent(HWND__ *,void *,unsigned long);
unsigned long SHProcessMessagesUntilEventsEx(HWND__ *,void * *,unsigned long,unsigned long,unsigned long,unsigned long);
unsigned long SHSetProtectedValue(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,void const *,unsigned long);
unsigned long SHWNetGetConnection(unsigned short const *,unsigned short *,unsigned long *);
unsigned long STGMFromGetPropertyStoreFlags(GETPROPERTYSTOREFLAGS);
unsigned long SetPrivilegeAttribute(unsigned short const *,unsigned long,unsigned long *);
unsigned long ShellExecuteNormal(_SHELLEXECUTEINFOW *);
unsigned long ShutdownThreadProc(void *);
unsigned long SizeThread_AddRefCallBack(void *);
unsigned long SnapIconSize(unsigned long);
unsigned long SnapIconSize96(unsigned long);
unsigned long StringToOS(unsigned short const *);
unsigned long SyncGetItemHandlerThreadProc(void *);
unsigned long TranslateDriveLetterToDiskNumber(unsigned short,unsigned long *);
unsigned long UfhpGetTopValue(unsigned long *,HKEY__ *,_UFH_DATA_TYPE);
unsigned long UfhpShortcutListenerRaiseEvent();
unsigned long UfhpUtilityGetAllocMultiSz(unsigned short * *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *);
unsigned long UfhpUtilityStoreData(_UFH_DATA_TYPE,unsigned short const *,unsigned short const *,unsigned short const *);
unsigned long UfhpUtilityStoreDeleteAboveQuota(HKEY__ *,_UFH_DATA_TYPE);
unsigned long UsbHelper_GetDeviceSpeed(unsigned short *,unsigned short,_USB_DEVICE_SPEED *);
unsigned long UsbHelper_GetDeviceSpeedInformation(unsigned short *,unsigned short,_USB_NODE_CONNECTION_INFORMATION_EX_V2_FLAGS *);
unsigned long ValidateAndCalculateSearchKeyLength(SEARCHKEY_FLAGS,unsigned char *,unsigned long,unsigned long *,unsigned long *);
unsigned long _AutorunPromptThreadProc(void *);
unsigned long _BBPurgeAllThread(void *);
unsigned long _CheckEffect(IDropTarget *,IDataObject *,unsigned long);
unsigned long _CreateShellExtensionsWithAppContainerAce();
unsigned long _DoDWORDMapping(unsigned long,TWODWORDS const *,unsigned long,int);
unsigned long _ExecModernErrorDialogThreadProc(void *);
unsigned long _ExecSimpleDialogThreadProc(void *);
unsigned long _FindPrinterThreadProc(void *);
unsigned long _GetFileOpFromSTGOP(STGOP);
unsigned long _GetTileBackgroundColorForAppItem(IShellItem *,unsigned long *);
unsigned long _GetUnderlineStyles();
unsigned long _JobObjectWaitingThreadProc(void *);
unsigned long _LinkAddRefSyncCallBack(void *);
unsigned long _LocalServerThread(void *);
unsigned long _NetConnectDisconnectThreadProc(void *);
unsigned long _NextID();
unsigned long _QueryRunningObjectThreadProc(void *);
unsigned long _QueryRunningObjectThreadProcEx(HKEY__ *,QUERRYRUNNINGOBJECTSTRUCT *,IRunningObjectTable *);
unsigned long _RegSetKeyValue(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,void const *,unsigned long);
unsigned long _SetThreadID(void *);
unsigned long _UndoThread(void *);
unsigned long _UpdateGFAAndGVIInfoCB(void *);
unsigned long _UpdateRecycleBinIconThread(void *);
unsigned long g_crAltColor;
unsigned long g_crAltEncryptedColor;
unsigned long g_dCleanSess;
unsigned long g_dwAppFlags;
unsigned long g_dwApplyFlags;
unsigned long g_dwDDEInst;
unsigned long g_dwNormalization;
unsigned long g_dwRefCount;
unsigned long g_dwSessTime;
unsigned long g_dwSlotShellStyleSheet;
unsigned long g_dwSlotThreadInitCount;
unsigned long g_dwThreadExtracting;
unsigned long g_dwTicksNormalization;
unsigned long g_iTLSChkDskThreadData;
unsigned long g_tlsWBCache;
unsigned long s_DoInvokeVerb(void *);
unsigned long s_DoInvokeVerbSync(void *);
unsigned long s_DummyWakeFlyoutThreadProc(void *);
unsigned long s_SyncShowWakeFlyout(void *);
unsigned short * AddCommas64(__int64,unsigned short *,unsigned int);
unsigned short * GetOneParameter(unsigned short const *,unsigned short *,unsigned int *,int);
unsigned short * SHFixAmpersands(unsigned short const *);
unsigned short * ThunkStrToWide(char const *,unsigned short *,unsigned long);
unsigned short * _GetNextParam(unsigned short const *,unsigned short * *);
unsigned short * _PathGuessNextBestArgs(unsigned short const *);
unsigned short * _RestoreTruncatedCplString(HINSTANCE__ *,int,unsigned short *,unsigned short *,int);
unsigned short * g_pszCurrentThemePath;
unsigned short * g_pszLastGroupName;
unsigned short * g_pszStyles;
unsigned short * g_szLastAttemptedJunctionName;
unsigned short * g_szLastResolvedJunctionName;
unsigned short GetUntrustedDragDropClipboardFormat();
unsigned short GetValidSubstitute(unsigned short const *,unsigned short const *);
unsigned short _GetComputedDragImageCF();
unsigned short _GetDragContentsCF();
unsigned short _GetDragImageBitsCF();
unsigned short _GetDragIsShowingLayeredCF();
unsigned short _GetDragIsShowingTextCF();
unsigned short _GetDragSourceHelperFlagsCF();
unsigned short _GetDragWindowCF();
unsigned short _GetIsComputingImageCF();
unsigned short _GetUsingDefaultDragImageCF();
unsigned short const * * AcAceEntries;
unsigned short const * * c_rgszBrowserExts;
unsigned short const * CPL_ParseToSeparator(unsigned short *,unsigned short const *,unsigned __int64,int);
unsigned short const * CPL_StrStrI(unsigned short const *,unsigned short const *);
unsigned short const * EncodeStringHelper(unsigned short const *,unsigned short *,unsigned int);
unsigned short const * GetAnsiOrUnicodeParam(int,unsigned short const *,char const *,unsigned short *,unsigned int);
unsigned short const * GetCommandName(unsigned short const *,_DDECOMMANDINFO const *,unsigned int *);
unsigned short const * GetFallbackSaveLocationPropertyName(DSLFLAGS,ILibraryDescription *);
unsigned short const * GetPCSettingsFormatString(PCSetting::PCSettingsValueType,PCSetting::PCSettingsFormatType);
unsigned short const * LowercaseHashItem(unsigned short const * (*)(_HashTable * *,unsigned short const *),_HashTable * *,unsigned short const *);
unsigned short const * MakeClassAndHandlerKey(unsigned short const *,KNOWNHANDLERTYPE,unsigned short *,unsigned __int64);
unsigned short const * RemovePathFromCommand(unsigned short const *);
unsigned short const * SkipServerSlashes(unsigned short const *);
unsigned short const * SkipWhite(unsigned short const *);
unsigned short const * _RootSpecialCasePath(unsigned short const *,unsigned short *,unsigned int,unsigned short *,unsigned int);
unsigned short const * _TerminateCurrentAndGetNextToken(unsigned short const *);
unsigned short const * const c_szActionServiceDelimiter;
unsigned short const * const c_szAutoFilePostfix;
unsigned short const * const c_szPCSettingsAppID;
unsigned short const * const g_szAppControlsModuleInner;
unsigned short const * const g_szBanner;
unsigned short const * const g_szControlPanelCategoryModuleInner;
unsigned short const * const g_szControlPanelNavModuleInner;
unsigned short const * const g_szFolderBandModuleInner;
unsigned short const * const g_szInfoBarHostModuleInner;
unsigned short const * const g_szInfoPaneInner;
unsigned short const * const g_szPreviewMetadataInner;
unsigned short const * const g_szPreviewThumbnailInner;
unsigned short const * const g_szPreviewTitleAreaInner;
unsigned short const * const g_szProperTreeModuleInner;
unsigned short const * const g_szReadingPaneModuleInner;
unsigned short const * const g_szSaveControlsModuleInner;
unsigned short const * const g_szSaveDialogMetadataInner;
unsigned short const * const g_szStatusBarModuleInner;
unsigned short const * const g_szXElementModuleInner;
unsigned short g_aProgman;
unsigned short g_atomCabinetClass;
unsigned short g_cfAsyncFlag_Storage;
unsigned short g_cfEnterpriseId_Storage;
unsigned short g_cfHIDA_Storage;
unsigned short g_cfOFFSETS_Storage;
unsigned short g_cfURL_Storage;
void (* g_Uninitialize)();
void (* g_pFnLog)(unsigned long,unsigned short *);
void * * IID_PPV_ARGS_Helper<Microsoft::WRL::ComPtr<IBannerNotificationHandler> >(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IBannerNotificationHandler> >);
void * CloneHGlobal(void *);
void * CopyIn(void *,int,unsigned long);
void * DataObj_GetDataOfType(IDataObject *,unsigned int,tagSTGMEDIUM *);
void * HIDA_Create(_ITEMIDLIST_ABSOLUTE const *,unsigned int,_ITEMIDLIST_RELATIVE const * const *);
void * MemoryAlloc(unsigned __int64);
void * OpenRunDlgMRU();
void * OrderItem_Merge(unsigned int,void *,void *,__int64);
void * SHChangeNotification_Create(unsigned long,long,unsigned int,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *,unsigned long,unsigned long);
void * SHWaitOp_Create(unsigned long,_ITEMIDLIST_ABSOLUTE const *,unsigned long);
void * SHWaitOp_OperateInternal(unsigned long,_ITEMIDLIST_ABSOLUTE const *);
void * _GetCplInitEvent();
void * _GetLinkExtraData(IShellLinkW *,unsigned long);
void * _InitActCtxForCplModule(unsigned short const *);
void * _SetJobCompletionPort(void *);
void * _SetStubWindowInformation(HWND__ *,int,_ITEMIDLIST_ABSOLUTE const *);
void * __AllocStdCallThunk_cmn();
void * g_hCheckNow;
void * g_hEventInitCplModule;
void * g_hSkyDriveNetworkStatesCacheRead;
void * g_pBufferNetworkStatesCache;
void * g_pTrustedInstallerSid;
void * operator new(unsigned __int64);
void * operator new(unsigned __int64,IMemoryMappedHeap *,OFFSET<CCacheTile> *);
void * operator new(unsigned __int64,std::nothrow_t const &);
void * operator new<CCacheTile>(unsigned __int64,IMemoryMappedHeap *,OFFSET<CCacheTile> *);
void * operator new[](unsigned __int64,std::nothrow_t const &);
void AddAutoNavigatedTravelEntry(IUnknown *);
void AddPropSheetCLSID(_GUID const &,_PROPSHEETHEADERW_V2 *);
void AdjustDlgCaptionForFlags(HWND__ *,unsigned int);
void AdjustFolderType(_GUID const &,unsigned short const *,int,_GUID *);
void AdjustRectForPropCtrlFlags(int,int,int,tagRECT *);
void AdjustRectToFit(tagRECT *,tagRECT const *);
void AdvancedDlgOnNotify(ADVANCEDPAGE *,tagNMHDR *);
void AnimateSetMenuPos(HWND__ *,tagRECT *,unsigned int,unsigned int,int);
void AppResolverTraceInfo(unsigned short const *,...);
void ApphelpHookCOM(_GUID const &,_GUID const &,void * *);
void AutoPtrRtlHeapDeallocate<_WIN32_FIND_DATAW>(_WIN32_FIND_DATAW *);
void AutoPtrRtlHeapDeallocate<unsigned short>(unsigned short *);
void AvoidCurrentDirectory(unsigned short const *);
void CDBurn_GetPropertyApplyErrorTitle(int,unsigned short *,unsigned int);
void CDBurn_IsLiveFS(int,int *);
void CDBurn_IsLiveFS(unsigned short const *,int *);
void CDBurn_MediaSupportedForBurn(int,int *,int *);
void CDBurn_SetHardwareCompatibilityWithUDF(int,int);
void CDBurn_SetMasteredBurn(int,unsigned short const *);
void CDBurn_SetUserSelectedBurnMode(int);
void CFSFolder_AdjustStateForColumn(IPropertyDescriptionList *,unsigned int,unsigned long *);
void CFSFolder_AdjustStateForProperty(_tagpropertykey const &,unsigned long *);
void CPLD_Destroy(ControlData *);
void CPLD_FlushRegModules(ControlData *);
void CPLD_GetRegModulesWorker(bool,ControlData *);
void CPL_AddModuleReference(CPLMODULE *);
void CPL_AddTaskToRecentDocs(_ITEMID_CHILD const *);
void CPL_AddToRecentDocsByPath(unsigned short const *);
void CPL_AddToRecentDocsByPidl(_ITEMIDLIST_ABSOLUTE const *);
void CPL_GetHashedAppletId(_ITEMIDLIST_ABSOLUTE const *,unsigned long *);
void CPL_ReleaseModuleReference(CPLMODULE *);
void CPL_UnIdentify(CPLAPPLETID *);
void CalcMetaFileSize(HDC__ *,PACKEDMETA const *,tagSIZE const *,tagRECT *);
void ChangeAlpha(tagRGBQUAD *,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int);
void CheckRBtnAndSetIcon(HWND__ *,int,int,int,FOLDEROPTDATA *,int);
void CheckShortcutRename(unsigned short const *,unsigned short const *);
void ClearAdapterInfo(CDSA<_AdapterInfo> *,bool);
void ClearUserChoice(HKEY__ *,unsigned short const *,bool);
void ClearViewSettingsForTopView(ITopViewAwareItem *,unsigned short const *,TOPVIEWKEY const &);
void ComputeSystemDPI(int *,int *);
void ConstructIconPath(unsigned short *,unsigned short const *,unsigned short const *);
void ContextMenuInfo_SetSite(ContextMenuInfo const *,IUnknown *);
void ControlPanelLinkClickedSQM(unsigned long,unsigned long,unsigned long);
void ConvertColorizationParametersToARGB(_DWM_COLORIZATION_PARAMETERS *,unsigned long *);
void CopyAndAddRefObject(void *,void const *,unsigned long);
void CopyInvokeInfo(_CMINVOKECOMMANDINFOEX *,_CMINVOKECOMMANDINFO const *);
void CopyOverlayTable(IImageList *,IImageList *);
void CreateProgressStatusStr(unsigned short const *,unsigned short *,unsigned long);
void DADHelper_DragEnter(HWND__ *,_POINTL,IDataObject *);
void DADHelper_DragMove(HWND__ *,_POINTL);
void DDEML_Broadcast(unsigned int,unsigned __int64,__int64);
void DDETimer(HWND__ *,int);
void DDE_HandleDisconnect(HCONV__ *);
void DDE_RemoveShellServices();
void DUIParserError(unsigned short const *,unsigned short const *,int,void *);
void DUI_ApplyLayoutStateToView(IFolderView2 *,DirectUI::Element *);
void DUI_GetBorderThickness(DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagRECT *);
void DUI_GetContentRect(DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagRECT *);
void DUI_GetElementRelativeRect(DirectUI::Element *,DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagRECT *);
void DUI_GetExtentToContentMargins(DirectUI::Element *,tagRECT *,int);
void DUI_GetPadding(DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagRECT *);
void DUI_MapElementPoint(DirectUI::Element *,DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagPOINT const *,tagPOINT *);
void DUI_ParserErrorCallback(unsigned short const *,unsigned short const *,int,void *);
void DUI_ReduceBounds(tagRECT *,tagRECT const *);
void DUI_ReduceElementBounds(DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagRECT *);
void DUI_SendCloseBannerToUnknown(IUnknown *,__int64);
void DUI_SendContentsChangedToUnknown(IUnknown *,__int64);
void DUI_SendFolderChangedToUnknown(IUnknown *,__int64);
void DUI_SendInitializationToUnknown(IUnknown *,__int64);
void DUI_SendNavigateAwayToUnknown(IUnknown *,__int64);
void DUI_SendNotificationToUnknown(IUnknown *,__int64);
void DUI_SendSelectedItemChangedToUnknown(IUnknown *,__int64);
void DUI_SendSelectionChangedToUnknown(IUnknown *,__int64);
void DUI_SetAndScalePhysicalInt(DirectUI::Element *,DirectUI::PropertyInfo const *,int);
void DUI_SetSiteOnUnknown(IUnknown *,__int64);
void DUI_Shell32_EndDeferUninitialization();
void DUI_Shell32_StartDeferUninitialization();
void DUI_ShellStyleSheet_UninitProcess();
void DUI_ShellStyleSheet_UninitThread();
void DUI_TranslateAcceleratorIO(IUnknown *,__int64);
void DUI_WalkIUnknownElements(DirectUI::Element *,void (*)(IUnknown *,__int64),__int64);
void DbgPrintfW(unsigned long,unsigned short const *,...);
void DeleteAndCloseFileByHandle(void * *);
void DeleteFileOrFolderAndCloseHandle(void * *,unsigned short const *,unsigned long);
void DisableControls(CFormatEngine *);
void DlgEnableOk(HWND__ *,__int64);
void DoFusion();
void DrawColorRect(HDC__ *,unsigned long,tagRECT const *);
void ElementWalkChildren<<lambda_31eaae7ede599d1780eee3cf9d208017> >(DirectUI::Element *,<lambda_31eaae7ede599d1780eee3cf9d208017> const &);
void ElementWalkChildren<<lambda_a58e935761604b6ca3cb3098a7cc8f00> >(DirectUI::Element *,<lambda_a58e935761604b6ca3cb3098a7cc8f00> const &);
void ElementWalkChildren<<lambda_e0ce071490c5d75de91800f192b6dab6> >(DirectUI::Element *,<lambda_e0ce071490c5d75de91800f192b6dab6> const &);
void EnableControls(CFormatEngine *,int);
void EnableExternalOverlayIdentifiers();
void EnumerateAllFolderTypes<<lambda_3f04317e549d137f34c89a7d6243ee83> >(<lambda_3f04317e549d137f34c89a7d6243ee83> const &);
void EscapeAcceleratorsInName(unsigned short *,unsigned __int64,unsigned short const *);
void ExchangeWindowPos(HWND__ *,HWND__ *);
void ExecutePropSheet(IDataObject *,unsigned short const *,_GUID const &);
void ExpandLibraryInNavigationPane(IUnknown *,IShellItem *);
void FOUndo_FileReallyDeleted(_ITEMIDLIST_ABSOLUTE const *);
void FileName_MakeLegal(unsigned short *);
void FileSysChange(HWND__ *,CFormatEngine *);
void FillSearchKeyBuffer(SEARCHKEY_FLAGS,unsigned char *,unsigned long,unsigned long,unsigned long,unsigned char *,unsigned long);
void FireHelpEntryDataPoint(unsigned short const *);
void FireSQMTopViewChanged(TOPVIEWKEY const &,TOPVIEWKEY const &,IUnknown *);
void FireSQMTopViewSettingsSaved(ITopViewDescription *,IUnknown *,TOPVIEWKEY const &);
void Fire_ExplorerTelemetryFromSiteWithDataObject(IUnknown *,EXPLORER_COMMAND_SQM_ID,EXPLORER_COMMAND_SQM_SELECTED_STATE,IDataObject *);
void Fire_ExplorerTelemetryFromSiteWithShellItemArray(IUnknown *,EXPLORER_COMMAND_SQM_ID,EXPLORER_COMMAND_SQM_SELECTED_STATE,IShellItemArray *);
void FitContentIntoBounds(tagRECT const *,tagRECT *);
void FlushFileClassExclusive(bool);
void ForceBrowserLayout(ILibraryDescription *,IShellItem *);
void FreeFilterArray(IFilterCondition * *,unsigned int);
void FreeIconResource(ICONRESOURCE * *);
void FreeSharingSettingsMembers(HOMEGROUP_SHARING_SETTINGS *);
void FreeSpacePidlToPath(_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
void FreeVariantArray(tagVARIANT * *,unsigned int);
void FriendlySetForegroundWindow(HWND__ *);
void GatherFeaturedAppUpgradeProgIds(CCoSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > > &);
void GetDlgItemPath(HWND__ *,int,unsigned short *);
void GetEditFont(HWND__ *,HFONT__ *,HFONT__ * *,HFONT__ * *);
void GetExeString(unsigned short const *,unsigned short const *,HKEY__ *,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
void GetGILFromFileAttributes(unsigned long,bool,unsigned int *);
void GetIconSize(ICONSIZE,tagSIZE *);
void GetListViewFlagsFromPropertyDescription(IPropertyDescription *,int,int *);
void GetUASettings();
void HashTable_DeleteCB<AssocCapabilityEntry>(AssocCapabilityEntry *);
void HashTable_ReleaseCB<ICategoryDescription>(ICategoryDescription *);
void IResultShape_GetGroupBy(IResultShape *,_tagpropertykey *,int *);
void IUnknown_SetViewSQMInfo(IUnknown *,unsigned long);
void IViewSettings_ToggleFolderFlags(IViewSettings *,FOLDERFLAGS);
void IndicateProgress(unsigned short const *,int);
void InitURLSearchHooks();
void InitialiseDDE();
void InitializeAutoPlayForegroundControl();
void ItemStore_MarkPropertyCacheDirty(IItemStore *,tagITEMKEY const *);
void LoadNameTemplate(TEMPLATE_TYPE,unsigned short *,unsigned long);
void LoadUseLinkPrefixCount();
void LogAppxContactServiceQuerySQMData(unsigned short const *,bool);
void MRUSelChange(HWND__ *);
void MakeApplicationsKeyString(unsigned short const *,unsigned short *,unsigned long);
void MakeCbxItemKnownImage(CBXITEM *,unsigned short const *,void const *,int,int,__int64,int);
void MarkCurrentTravelEntryAutoNavigated(IUnknown *);
void MemoryFree(void *);
void MessageBoxIfNecessary(long,unsigned long,HWND__ *,unsigned short const *);
void MigrateFavoriteLinks();
void MoveAndPositionItems(IFolderView2 *,IShellFolder *,_ITEMID_CHILD const * const *,unsigned int,IDataObject *,tagPOINT const *,int);
void MsgEvent_NotifyDeliveryAndFree(_MSGEVENT *);
void NotifyTileReceivingFocus(DirectUI::Element *);
void OpenAs_RunDLL(HWND__ *,HINSTANCE__ *,char const *,int);
void OpenAs_RunDLLW(HWND__ *,HINSTANCE__ *,unsigned short const *,int);
void OrderItem_Free(ORDERITEM *,int);
void OrderItem_FreeIconInfo(ORDERITEM *);
void OrderItem_SaveSubitemToStream(IStream *,void const *,unsigned long,long *);
void OrderList_Destroy(_DPA * *,int);
void OrderList_Merge(_DPA *,_DPA *,int,__int64,void (*)(void *,_ITEMID_CHILD const *),void *);
void OrderList_Reorder(_DPA *);
void PaintAboutDlg(HWND__ *,ABOUT_PARAMS *);
void PathStripTrailingDots(unsigned short *);
void PositionItemFromName(IFolderView2 *,unsigned short const *,IDataObject *,tagPOINT const *);
void PositionItemsFull(IFolderView2 *,_ITEMIDLIST_ABSOLUTE const * *,unsigned int,IDataObject *,tagPOINT const *);
void PrepareDiscForBurnRunDllW(HWND__ *,HINSTANCE__ *,unsigned short *,int);
void PrintersGetCommand_RunDLL(HWND__ *,HINSTANCE__ *,char const *,int);
void PrintersGetCommand_RunDLLW(HWND__ *,HINSTANCE__ *,unsigned short *,int);
void PrintersGetCommand_RunDLL_Common(HWND__ *,HINSTANCE__ *,unsigned short *,int);
void ProcessResetEvent(unsigned int,unsigned int,INotificationDispatcher *,IItemCollection *,CObservableItemCollectionSink *,IObjectCollection *,Microsoft::WRL::WeakRef);
void PublishUsersFoldersToSelf(bool);
void RBTreeSetCallback(unsigned short *,unsigned long,_PROGRESS_INVOKE_SETTING *,void *,int);
void ReadStateAndSettings(HWND__ *);
void ReadWallpaperStyleFromReg(unsigned long *);
void RecordApiQosResult(IQosRecorder *,_ApiId,long,_FILETIME const * const,unsigned __int64);
void RefreshUrlCapabilityCache(unsigned short const *);
void Reg_GetVals(HKEY__ *,unsigned short const *,unsigned short const * const * const,unsigned long * *,int);
void RegisterDesktopClass();
void RegisterSlowContextMenuEntry(_GUID const &,unsigned __int64);
void ReleaseStgMediumHGLOBAL(void const *,tagSTGMEDIUM *);
void RemoveDescriptionFromDataObject(IDataObject *,unsigned int);
void RemoveVolumeNameBackslash(unsigned short *);
void ReplaceDlgIcon(HWND__ *,unsigned int,HICON__ *);
void RevokeFromGIT(unsigned long);
void RtlGetVersionResource(void *,unsigned __int64,unsigned long,_RTL_VERSION_RESOURCE *);
void RunInstallUninstallStubsWorker(unsigned short const *,unsigned short const *,bool,bool);
void RunPendingGPOs();
void SCNInitialize(HWND__ * *);
void SFC_TrayCommand(unsigned short const *);
void SHCleanupSeparators(HMENU__ *,unsigned int);
void SHClearEnumHintInfo(tagENUMHINTINFO *);
void SHComputeDPI(HWND__ *,int *,int *);
void SHFireHelpEntryDataPoint(unsigned short const *);
void SHHelpShortcuts_RunDLL(HWND__ *,HINSTANCE__ *,char const *,int);
void SHHelpShortcuts_RunDLLW(HWND__ *,HINSTANCE__ *,unsigned short const *,int);
void SHInitializeInfotipControl(HWND__ *);
void SHLogicalToPhysicalDPI(HWND__ *,int *,int *);
void SHLogicalToPhysicalDPI(HWND__ *,tagSIZE *);
void SHLogicalToPhysicalDPIForImages(HWND__ *,int *);
void SHLogicalToPhysicalDPIMetric(HWND__ *,int,int *);
void SHOutlineRect(HDC__ *,tagRECT const *,unsigned long);
void SHPhysicalToLogicalDPI(HWND__ *,int *,int *);
void SHRegCloseKeys(HKEY__ * * const,unsigned int);
void SHRegGetDWORDWithDefault(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long *);
void SHRemoveSkipBindCtx(IBindCtx *,IUnknown *);
void SHTraceSQMCount(_EVENT_DESCRIPTOR const *,unsigned long);
void SHTraceSQMCreateStringStreamEntry(_SHSQM_STREAM_ENTRY *,unsigned short const *);
void SHTraceSQMSetValue(_EVENT_DESCRIPTOR const *,unsigned long,unsigned long);
void SHTraceSQMStream(_EVENT_DESCRIPTOR const *,unsigned long,_SHSQM_STREAM_ENTRY *,unsigned long);
void SHTraceSQMStreamFour(_EVENT_DESCRIPTOR const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long);
void SQMAutoPlayAction(AUTOPLAY_ACTION);
void SQMMountIfEnabled(long,IShellItemArray *,DISC_IMAGE_TYPE_FLAGS);
void SafeCloseFileHandle(void * *);
void SafeRelease<CACJobManager>(CACJobManager * *);
void SafeRelease<CAnimationCallback>(CAnimationCallback * *);
void SafeRelease<CAppResolverCacheManager>(CAppResolverCacheManager * *);
void SafeRelease<CAutoColorImageData>(CAutoColorImageData * *);
void SafeRelease<CBriefcase>(CBriefcase * *);
void SafeRelease<CCDBurnFolder>(CCDBurnFolder * *);
void SafeRelease<CControlPanelAppletList>(CControlPanelAppletList * *);
void SafeRelease<CControlPanelTasks>(CControlPanelTasks * *);
void SafeRelease<CDefView>(CDefView * *);
void SafeRelease<CDriveProps>(CDriveProps * *);
void SafeRelease<CDummyUnknown>(CDummyUnknown * *);
void SafeRelease<CFileChunkMapView>(CFileChunkMapView * *);
void SafeRelease<CFileSource>(CFileSource * *);
void SafeRelease<CFormatEngine>(CFormatEngine * *);
void SafeRelease<CImageQueueItem>(CImageQueueItem * *);
void SafeRelease<CMenuBandMetrics>(CMenuBandMetrics * *);
void SafeRelease<CMenuToolbarBase>(CMenuToolbarBase * *);
void SafeRelease<CMergedFolder>(CMergedFolder * *);
void SafeRelease<CMetadataExtractorWorkItem>(CMetadataExtractorWorkItem * *);
void SafeRelease<CMountPoint>(CMountPoint * *);
void SafeRelease<CMtPtLocal>(CMtPtLocal * *);
void SafeRelease<CMtPtRemote>(CMtPtRemote * *);
void SafeRelease<CRefCountedDPA<CDPAItemIdList<_ITEMIDLIST_ABSOLUTE> > >(CRefCountedDPA<CDPAItemIdList<_ITEMIDLIST_ABSOLUTE> > * *);
void SafeRelease<CRichPreviewThreadData>(CRichPreviewThreadData * *);
void SafeRelease<CSimpleEnumString>(CSimpleEnumString * *);
void SafeRelease<CSuppressAutoplay>(CSuppressAutoplay * *);
void SafeRelease<CTLTStore>(CTLTStore * *);
void SafeRelease<CThumbnailQueueItem>(CThumbnailQueueItem * *);
void SafeRelease<CTrackPopupBar>(CTrackPopupBar * *);
void SafeRelease<CViewSlider>(CViewSlider * *);
void SafeRelease<CWallpaperCollection>(CWallpaperCollection * *);
void SafeRelease<DirectUI::Element>(DirectUI::Element * *);
void SafeRelease<DirectUI::Value>(DirectUI::Value * *);
void SafeRelease<IACList>(IACList * *);
void SafeRelease<IAccPropServices>(IAccPropServices * *);
void SafeRelease<IAccessible>(IAccessible * *);
void SafeRelease<IAdviseSink>(IAdviseSink * *);
void SafeRelease<IAppControl>(IAppControl * *);
void SafeRelease<IAssociationElement>(IAssociationElement * *);
void SafeRelease<IAugmentedShellFolder>(IAugmentedShellFolder * *);
void SafeRelease<IAutoPlayUI>(IAutoPlayUI * *);
void SafeRelease<IBindCtx>(IBindCtx * *);
void SafeRelease<IBindScopeDialog>(IBindScopeDialog * *);
void SafeRelease<IBinding>(IBinding * *);
void SafeRelease<IBrowserProgressSessionProvider>(IBrowserProgressSessionProvider * *);
void SafeRelease<IBrowserTrackEventsCallback>(IBrowserTrackEventsCallback * *);
void SafeRelease<ICachedPrivateProfile>(ICachedPrivateProfile * *);
void SafeRelease<ICancelMethodCalls>(ICancelMethodCalls * *);
void SafeRelease<ICapabilities>(ICapabilities * *);
void SafeRelease<ICategoryDescription>(ICategoryDescription * *);
void SafeRelease<ICategoryDescriptionArray>(ICategoryDescriptionArray * *);
void SafeRelease<IChildId>(IChildId * *);
void SafeRelease<ICommDlgBrowser2>(ICommDlgBrowser2 * *);
void SafeRelease<ICondition>(ICondition * *);
void SafeRelease<IConnectionPointContainer>(IConnectionPointContainer * *);
void SafeRelease<IContextMenu>(IContextMenu * *);
void SafeRelease<ICriticalSection>(ICriticalSection * *);
void SafeRelease<IDataObject>(IDataObject * *);
void SafeRelease<IDefaultExtractIconInit>(IDefaultExtractIconInit * *);
void SafeRelease<IDispatch>(IDispatch * *);
void SafeRelease<IDrawPropertyControl>(IDrawPropertyControl * *);
void SafeRelease<IDropTarget>(IDropTarget * *);
void SafeRelease<IEnumExplorerCommand>(IEnumExplorerCommand * *);
void SafeRelease<IEnumFindDataEx>(IEnumFindDataEx * *);
void SafeRelease<IEnumIDList>(IEnumIDList * *);
void SafeRelease<IEnumRecycleItems>(IEnumRecycleItems * *);
void SafeRelease<IEnumString>(IEnumString * *);
void SafeRelease<IEnumUICommand>(IEnumUICommand * *);
void SafeRelease<IEnumUnknown>(IEnumUnknown * *);
void SafeRelease<IExplorerBrowser>(IExplorerBrowser * *);
void SafeRelease<IExplorerCommand>(IExplorerCommand * *);
void SafeRelease<IExtractIconA>(IExtractIconA * *);
void SafeRelease<IExtractIconW>(IExtractIconW * *);
void SafeRelease<IFileIsInUse>(IFileIsInUse * *);
void SafeRelease<IFilePropSheetPageHelper>(IFilePropSheetPageHelper * *);
void SafeRelease<IFilterCondition>(IFilterCondition * *);
void SafeRelease<IFilterControl>(IFilterControl * *);
void SafeRelease<IFilterControlCallback>(IFilterControlCallback * *);
void SafeRelease<IFolderFilter>(IFolderFilter * *);
void SafeRelease<IFolderTypeDescription>(IFolderTypeDescription * *);
void SafeRelease<IFolderView2>(IFolderView2 * *);
void SafeRelease<IFreeThreadedItemContainer>(IFreeThreadedItemContainer * *);
void SafeRelease<IHlink>(IHlink * *);
void SafeRelease<IHlinkBrowseContext>(IHlinkBrowseContext * *);
void SafeRelease<IImageList2>(IImageList2 * *);
void SafeRelease<IImageList>(IImageList * *);
void SafeRelease<IImageListImageDecorator>(IImageListImageDecorator * *);
void SafeRelease<IItem>(IItem * *);
void SafeRelease<IItemCollection>(IItemCollection * *);
void SafeRelease<IItemFilter>(IItemFilter * *);
void SafeRelease<IItemKeyArray>(IItemKeyArray * *);
void SafeRelease<IItemSetOperationCallback>(IItemSetOperationCallback * *);
void SafeRelease<IItemStore>(IItemStore * *);
void SafeRelease<IItemStoreOwner>(IItemStoreOwner * *);
void SafeRelease<IKnownFolderManager>(IKnownFolderManager * *);
void SafeRelease<IListViewPopup>(IListViewPopup * *);
void SafeRelease<IMalloc>(IMalloc * *);
void SafeRelease<IMemoryMappedCache>(IMemoryMappedCache * *);
void SafeRelease<IMenuPopup>(IMenuPopup * *);
void SafeRelease<IMruDataList>(IMruDataList * *);
void SafeRelease<IMultiValueCollection>(IMultiValueCollection * *);
void SafeRelease<IMultipleValues>(IMultipleValues * *);
void SafeRelease<INameSpaceTreeControl>(INameSpaceTreeControl * *);
void SafeRelease<INamedPropertyStore>(INamedPropertyStore * *);
void SafeRelease<IObjectCollection>(IObjectCollection * *);
void SafeRelease<IOleClientSite>(IOleClientSite * *);
void SafeRelease<IOleCommandTarget>(IOleCommandTarget * *);
void SafeRelease<IOleObject>(IOleObject * *);
void SafeRelease<IOleParentUndoUnit>(IOleParentUndoUnit * *);
void SafeRelease<IOleUndoManager>(IOleUndoManager * *);
void SafeRelease<IOleWindow>(IOleWindow * *);
void SafeRelease<IOplockProvider>(IOplockProvider * *);
void SafeRelease<IPreviewHandlerFrame>(IPreviewHandlerFrame * *);
void SafeRelease<IPreviewHostCallback>(IPreviewHostCallback * *);
void SafeRelease<IProgressTimer>(IProgressTimer * *);
void SafeRelease<IPropertyBag>(IPropertyBag * *);
void SafeRelease<IPropertyChangeArray>(IPropertyChangeArray * *);
void SafeRelease<IPropertyControl>(IPropertyControl * *);
void SafeRelease<IPropertyControlSite>(IPropertyControlSite * *);
void SafeRelease<IPropertyDescription>(IPropertyDescription * *);
void SafeRelease<IPropertyDescriptionList>(IPropertyDescriptionList * *);
void SafeRelease<IPropertyDescriptionPriv>(IPropertyDescriptionPriv * *);
void SafeRelease<IPropertyInfoProvider>(IPropertyInfoProvider * *);
void SafeRelease<IPropertyKeyStore>(IPropertyKeyStore * *);
void SafeRelease<IPropertyStore>(IPropertyStore * *);
void SafeRelease<IPropertyStoreCache>(IPropertyStoreCache * *);
void SafeRelease<IPropertyStoreFactory>(IPropertyStoreFactory * *);
void SafeRelease<IQueryAssociations>(IQueryAssociations * *);
void SafeRelease<IQueryContinue>(IQueryContinue * *);
void SafeRelease<IQuerySource>(IQuerySource * *);
void SafeRelease<IRecycleBin>(IRecycleBin * *);
void SafeRelease<IRecycleBinManager>(IRecycleBinManager * *);
void SafeRelease<IResultsFolderEx>(IResultsFolderEx * *);
void SafeRelease<IRichChunk>(IRichChunk * *);
void SafeRelease<IScope>(IScope * *);
void SafeRelease<IScrollingWindow>(IScrollingWindow * *);
void SafeRelease<IServiceProvider>(IServiceProvider * *);
void SafeRelease<ISharedBitmap>(ISharedBitmap * *);
void SafeRelease<IShellBandProxy>(IShellBandProxy * *);
void SafeRelease<IShellBrowser>(IShellBrowser * *);
void SafeRelease<IShellBrowserService>(IShellBrowserService * *);
void SafeRelease<IShellDetails>(IShellDetails * *);
void SafeRelease<IShellFolder2>(IShellFolder2 * *);
void SafeRelease<IShellFolder3>(IShellFolder3 * *);
void SafeRelease<IShellFolder>(IShellFolder * *);
void SafeRelease<IShellFolderViewCB>(IShellFolderViewCB * *);
void SafeRelease<IShellIconOverlay>(IShellIconOverlay * *);
void SafeRelease<IShellItem2>(IShellItem2 * *);
void SafeRelease<IShellItem>(IShellItem * *);
void SafeRelease<IShellItemArray>(IShellItemArray * *);
void SafeRelease<IShellItemFilter>(IShellItemFilter * *);
void SafeRelease<IShellLinkW>(IShellLinkW * *);
void SafeRelease<IShellMenu>(IShellMenu * *);
void SafeRelease<IShellMenuCallback>(IShellMenuCallback * *);
void SafeRelease<IShellTaskScheduler2>(IShellTaskScheduler2 * *);
void SafeRelease<IShellTaskScheduler>(IShellTaskScheduler * *);
void SafeRelease<IShellView>(IShellView * *);
void SafeRelease<ISortColumnArray>(ISortColumnArray * *);
void SafeRelease<IStorage>(IStorage * *);
void SafeRelease<IStream>(IStream * *);
void SafeRelease<ITaskCondition>(ITaskCondition * *);
void SafeRelease<ITopViewDescription>(ITopViewDescription * *);
void SafeRelease<ITrackEvents>(ITrackEvents * *);
void SafeRelease<ITransferAdviseSink>(ITransferAdviseSink * *);
void SafeRelease<ITryHarderItem>(ITryHarderItem * *);
void SafeRelease<ITypeInfo>(ITypeInfo * *);
void SafeRelease<IUnknown>(IUnknown * *);
void SafeRelease<IUpdatableItemSet>(IUpdatableItemSet * *);
void SafeRelease<IUsersFilesDescription>(IUsersFilesDescription * *);
void SafeRelease<IViewFilters>(IViewFilters * *);
void SafeRelease<IViewSettings>(IViewSettings * *);
void SafeRelease<IViewStateInfo>(IViewStateInfo * *);
void SafeRelease<IWaitCursorManager>(IWaitCursorManager * *);
void SafeRelease<IWebBrowser2>(IWebBrowser2 * *);
void SafeRelease<IWinEventHandler>(IWinEventHandler * *);
void SafeRelease<IXMLDOMElement>(IXMLDOMElement * *);
void SafeReleaseMarshalInterface(IStream * *);
void SaveChanges_FolderFlags(IFolderView2 *,ITopViewDescription *);
void SaveChanges_Grouping(IFolderView2 *,ITopViewDescription *);
void SaveChanges_SortColumns(IFolderView2 *,ITopViewDescription *);
void SaveChanges_Stacking(IFolderView2 *,ITopViewDescription *);
void SaveChanges_ViewModeAndIconSize(IFolderView2 *,ITopViewDescription *);
void SaveChanges_VisibleColumns(IFolderView2 *,ITopViewDescription *);
void SaveOldWorkAreas(tagRECT const *,unsigned long);
void SaveUseLinkPrefixCount();
void ScanDskW_OnOk(HWND__ *);
void SetCheckboxes(HWND__ *,int,unsigned long,unsigned long);
void SetDescriptionAndOpensWithBtn(CFilePropSheetPage *,int);
void SetDriveWindowTitle(HWND__ *,unsigned short const *,unsigned int);
void SetEditFocus(HWND__ *);
void SetExpandedBorder(HWND__ *,int);
void SetExplorerCommandInvocationLocation(IUnknown *,EXPLORER_COMMAND_SQM_INVOCATION_LOCATION);
void SetFriendlyNameText(unsigned short const *,CFilePropSheetPage *,IAssocInfo *,int);
void SetHeaderFlags(HWND__ *,unsigned int,unsigned int,unsigned int);
void SetICIKeyModifiers(unsigned long *);
void SetLCITEM(IItem *,int,tagLCITEM *);
void SetProgressInfo(unsigned short const *,int);
void SetScenarioQosResult(IQosRecorder *,long,_FILETIME const * const);
void SetWrapper(IShellFolder *,IShellFolder2 *);
void SetupTreeControlVisuals(HWND__ *);
void ShellComponentSetup(unsigned short const *,unsigned short const *);
void ShowHelp(IUnknown *);
void ShowMountErrorDialog(long,IShellItemArray *,HWND__ *);
void ShowShellInfrastuctureCriticalFailureDialog(unsigned __int64);
void SizeOpensWithTextBox(CFilePropSheetPage *,int,int);
void Stub_GetPosition(IDataObject *,HWND__ *,tagPOINT *);
void TimerProc_RepeatAcks(HWND__ *,unsigned int,unsigned __int64,unsigned long);
void TraceIDList(unsigned short const *,_ITEMIDLIST_ABSOLUTE *,unsigned short *);
void TraceShellItem(unsigned short const *,IShellItem *,unsigned short *);
void TrackOperation(IUnknown *,unsigned short const *,TRACKOPERATIONTYPE,TRACKOPERATIONEVENT);
void Tree_OnNotify(ADVANCEDPAGE *);
void UnHookMenuWindow(HWND__ *);
void UnInitDeletedItem(tagDELETEDITEM *);
void UnInitialiseDDE();
void UnInitializeDirectUI();
void UnstuffFormatInfoPtr();
void UpdatePropertyFontFlagsFromElement(IPropertyControlBase *,DirectUI::Element *);
void UpdatePropertyPosFlagsFromElement(IPropertyControlBase *,DirectUI::Element *);
void ValidateName(CFormatEngine *,HWND__ *);
void ViewControlClick(IFolderView2 *);
void WakeUpComputerUsingMAC(unsigned short const *);
void WakeUpUsingMacAddresses(unsigned short const *);
void WinSqmCreateStringStreamEntry(_SQM_STREAM_ENTRY *,unsigned short const *);
void _AddItemsFromKey(ControlData *,HKEY__ *);
void _AddItemsFromKey(_DCA *,HKEY__ *,unsigned short const *,unsigned short const *,DCAADDFLAGS,int * const,unsigned short const * const * const,unsigned int);
void _AddProgidForExt(unsigned short const *);
void _AdvanceAssociatedLogSession(int);
void _AppendTipText(unsigned short *,int,unsigned short const *,bool);
void _ApplyDefaultVisualEffect(HKEY__ *,HKEY__ *);
void _ApplyPassiveFTP();
void _BFFSwitchToMyDocsIfPidlNotExist(_ITEMIDLIST_ABSOLUTE * *);
void _BFSFGetDisplayInfo(BFSF *,tagTVDISPINFOW *);
void _BFSFHandleSelChanged(BFSF *,tagNMTREEVIEWW *);
void _BFSFSetOkText(BFSF *,unsigned short const *);
void _BFSFSetStatusTextA(BFSF *,char const *);
void _BFSFSetStatusTextW(BFSF *,unsigned short const *);
void _BFSFSort(BFSF *,_TREEITEM *,IShellFolder *);
void _BlindPurgeSystemIcon(int);
void _BrowseOnCommand(BFSF *,int,HWND__ *,unsigned int);
void _BuildLinkName(unsigned short *,unsigned int,unsigned short const *,unsigned short const *,int);
void _CacheEntry(unsigned short const *,int);
void _CallSetFirstSuggestionsBatch(ISearchTypeAheadEventsSink *,IObjectCollection *);
void _CallSetSecondSuggestionsBatch(ISearchTypeAheadEventsSink *,IObjectCollection *);
void _CheckForCurrentGroup(_DDECONV *);
void _ClearCachedItemsOnShellItems(IUnknown *);
void _ClearTime(void *,SHTIME_FLAGS);
void _CloseAutoplayPrompt(unsigned short const *);
void _ComputeDuration(_FILETIME const * const,unsigned int *);
void _ConvertCplInfo(void *);
void _CreateDesktopLocalServer(_GUID const &,int);
void _DUI_ShellStyleSheet_UninitProcessIfPossible();
void _DUI_ShellStyleSheet_UninitThreadIfPossible();
void _DefaultVisualEffects();
void _DeleteOldRemovableLinks();
void _DeleteProtectedFileAssocChoices();
void _DeleteUserChoice(HKEY__ *,unsigned short const *,bool,bool);
void _DestroyIcons(HICON__ * *,int);
void _DisableAllChildren(HWND__ *);
void _DisableQuickRemovalPolicy(int);
void _DisableRemoveMenuItem(HMENU__ *,unsigned int,int,int,HBITMAP__ * *);
void _DiskToolsPrshtInit(DRIVEPROPSHEETPAGE *);
void _DismountFileSystem(int);
void _DoMyDocsPerUserInit();
void _DrawPie(Gdiplus::Graphics *,tagRECT const *,unsigned int,unsigned int,float,unsigned long const *);
void _DrvPrshtCreateSizeThread(DRIVEPROPSHEETPAGE *);
void _DrvPrshtDrawItem(DRIVEPROPSHEETPAGE const *,tagDRAWITEMSTRUCT const *);
void _DrvPrshtInit(DRIVEPROPSHEETPAGE *);
void _DrvPrshtSetDriveAttributes(DRIVEPROPSHEETPAGE *);
void _DrvPrshtSetDriveText(HWND__ *,CDriveProps *);
void _DrvPrshtSetDriveType(HWND__ *,CDriveProps *);
void _DrvPrshtSetFileSystem(HWND__ *,CDriveProps *);
void _DrvPrshtSetSpaceValues(DRIVEPROPSHEETPAGE *);
void _DrvPrshtSetVolumeLabel(HWND__ *,CDriveProps *);
void _DrvPrshtUpdateInfo(DRIVEPROPSHEETPAGE *);
void _EnableRemotePrefetch(void *);
void _ExecErrorMsgBox(HWND__ *,unsigned short const *,unsigned short const *,unsigned long);
void _ExecuteItemCommand(IUnknown *,IShellItem *,HWND__ *,unsigned short const *,unsigned short const *,unsigned long,ExecuteItemCommandLaunchProperties const &);
void _FindNextIndex(int,IMultipleValues *,IMultipleValues *,int *);
void _Fire_CommandHandlerInvokeTelemetry(EXPLORER_COMMAND_SQM_ID,EXPLORER_COMMAND_SQM_INVOCATION_LOCATION,RIBBON_VISIBILITY,EXPLORER_COMMAND_SQM_SELECTED_STATE,IShellItem *,IUnknown *,unsigned long);
void _FlushExtCacheExclusive(int);
void _ForceReloadSession(_GUID const *);
void _FreeFindPrinterInfo(FINDPRINTERINFO *);
void _FreeIncludeInLibraryItem(INCLUDEINLIBRARYITEM *);
void _FreeMonikers(IMoniker * *,unsigned __int64);
void _FreePolicies(unsigned long,_tagEASPolicy *);
void _FreeStorageInterface(_storageinterface *);
void _GetAppViewData(IUnknown *,APPLICATION_VIEW_DATA *);
void _GetConfigFlags(HKEY__ *,unsigned long *);
void _GetHWNDForSearchView(IUnknown *,SearchView,HWND__ * *);
void _GetHexEscape(unsigned short const *,unsigned short const * *,int *);
void _GetJumboIconSizeCB(tagSIZE *);
void _GetLargeIconSizeCB(tagSIZE *);
void _GetMTime(IStream *,_FILETIME *);
void _GetNewFileInfoForNewObjectInfo(NEWOBJECTINFO const *,NEWFILEINFO *);
void _GetNewObjectInfoForKey(HKEY__ *,NEWOBJECTINFO *);
void _GetSmallIconSizeCB(tagSIZE *);
void _GetStartTime(_FILETIME *);
void _GetSysSmallIconSizeCB(tagSIZE *);
void _GetXLIconSizeCB(tagSIZE *);
void _IndentRect(_MARGINS const *,tagRECT *);
void _InitAboutDlg(HWND__ *,ABOUT_PARAMS *);
void _InitClipboardFormats();
void _InitEditUndoRedo(HMENU__ *,unsigned int,unsigned int,int);
void _InsertModuleName(ControlData *,unsigned short const *,MODULECPLINFO *);
void _KeepLastGroup(unsigned short const *);
void _MapName(void *,unsigned short *,int);
void _MoveChildren(HWND__ *,int,int);
void _NoDriveAutorunTweak();
void _NotifyUserPictureChange(unsigned short const *);
void _OnUserProfileReset();
void _ProcessDetach(int);
void _PumpForCache(unsigned short const *);
void _RegPublishValue(_GUID const &,HKEY__ *,unsigned short const *,void *);
void _RegUnpublishValue(_GUID const &,HKEY__ *,unsigned short const *,void *);
void _ReleaseDescriptionCB(IFolderTypeDescription * *);
void _RemoveContextMenuItems(HMENU__ *);
void _RemoveLastSyncedPropFromList(IPropertyDescriptionList *);
void _ReportCopyError(HWND__ *,unsigned short const *,long);
void _ResetButtonPressedState(DirectUI::Element *);
void _ResetWindowsVersionOnProcessBlock(CPLMODULE *);
void _SHPrettyMenu(HMENU__ *);
void _SetExtApproved(_GUID const &,_GUID const &,ExtLoadPolicy);
void _SetFileClassInt(unsigned short const *,int,int);
void _SetFileClassString(unsigned short const *,int,unsigned short const *);
void _SetModeless(int,HWND__ *,unsigned long,IUnknown *);
void _SetPropertyItemValue(Gdiplus::PropertyItem *,unsigned int);
void _ShellImageListTerm(bool);
void _StampIcons(unsigned int,HICON__ * *);
void _StopThread(LINKPROP_DATA *);
void _StripNumber(unsigned short *);
void _TerminateCPLModule(CPLMODULE *);
void _TerminateControl(CPLMODULE const *,CPLITEM *);
void _TlgWriteActivityAutoStop<0,4>(_TlgProvider_t const *,_GUID const *);
void _TlgWriteActivityAutoStop<0,5>(_TlgProvider_t const *,_GUID const *);
void _TlgWriteActivityAutoStop<35184372088832,5>(_TlgProvider_t const *,_GUID const *);
void _TlgWriteActivityAutoStop<70368744177664,5>(_TlgProvider_t const *,_GUID const *);
void _UpdateLinkDlg(LINKPROP_DATA *);
void _UpdateLinkIcon(LINKPROP_DATA *,HICON__ *);
void _UpdateRecycleBinIcon();
void _UpdateSIDsOnLibraries();
void _UpdateValueInPersistentAppInfoCache(unsigned short const *,unsigned short const *,unsigned short const *);
void _ValidateNavPaneSettings();
void const * DpaPropKeyMerge(unsigned int,void const *,void const *,__int64);
void operator delete(void *);
void operator delete(void *,void *);
